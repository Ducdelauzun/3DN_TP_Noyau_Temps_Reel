
3DN_TP_Noyau_Temps_Reel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000612c  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000138  080062fc  080062fc  000072fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006434  08006434  00008070  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006434  08006434  00007434  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800643c  0800643c  00008070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800643c  0800643c  0000743c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006440  08006440  00007440  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  08006444  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000041a0  20000070  080064b4  00008070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004210  080064b4  00008210  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001143c  00000000  00000000  000080a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f72  00000000  00000000  000194dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e98  00000000  00000000  0001c450  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b0e  00000000  00000000  0001d2e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028860  00000000  00000000  0001ddf6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012848  00000000  00000000  00046656  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f2a43  00000000  00000000  00058e9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014b8e1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003fc0  00000000  00000000  0014b924  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007e  00000000  00000000  0014f8e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080062e4 	.word	0x080062e4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	080062e4 	.word	0x080062e4

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b988 	b.w	8000538 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	468e      	mov	lr, r1
 8000248:	4604      	mov	r4, r0
 800024a:	4688      	mov	r8, r1
 800024c:	2b00      	cmp	r3, #0
 800024e:	d14a      	bne.n	80002e6 <__udivmoddi4+0xa6>
 8000250:	428a      	cmp	r2, r1
 8000252:	4617      	mov	r7, r2
 8000254:	d962      	bls.n	800031c <__udivmoddi4+0xdc>
 8000256:	fab2 f682 	clz	r6, r2
 800025a:	b14e      	cbz	r6, 8000270 <__udivmoddi4+0x30>
 800025c:	f1c6 0320 	rsb	r3, r6, #32
 8000260:	fa01 f806 	lsl.w	r8, r1, r6
 8000264:	fa20 f303 	lsr.w	r3, r0, r3
 8000268:	40b7      	lsls	r7, r6
 800026a:	ea43 0808 	orr.w	r8, r3, r8
 800026e:	40b4      	lsls	r4, r6
 8000270:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000274:	fa1f fc87 	uxth.w	ip, r7
 8000278:	fbb8 f1fe 	udiv	r1, r8, lr
 800027c:	0c23      	lsrs	r3, r4, #16
 800027e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000282:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000286:	fb01 f20c 	mul.w	r2, r1, ip
 800028a:	429a      	cmp	r2, r3
 800028c:	d909      	bls.n	80002a2 <__udivmoddi4+0x62>
 800028e:	18fb      	adds	r3, r7, r3
 8000290:	f101 30ff 	add.w	r0, r1, #4294967295
 8000294:	f080 80ea 	bcs.w	800046c <__udivmoddi4+0x22c>
 8000298:	429a      	cmp	r2, r3
 800029a:	f240 80e7 	bls.w	800046c <__udivmoddi4+0x22c>
 800029e:	3902      	subs	r1, #2
 80002a0:	443b      	add	r3, r7
 80002a2:	1a9a      	subs	r2, r3, r2
 80002a4:	b2a3      	uxth	r3, r4
 80002a6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002aa:	fb0e 2210 	mls	r2, lr, r0, r2
 80002ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002b2:	fb00 fc0c 	mul.w	ip, r0, ip
 80002b6:	459c      	cmp	ip, r3
 80002b8:	d909      	bls.n	80002ce <__udivmoddi4+0x8e>
 80002ba:	18fb      	adds	r3, r7, r3
 80002bc:	f100 32ff 	add.w	r2, r0, #4294967295
 80002c0:	f080 80d6 	bcs.w	8000470 <__udivmoddi4+0x230>
 80002c4:	459c      	cmp	ip, r3
 80002c6:	f240 80d3 	bls.w	8000470 <__udivmoddi4+0x230>
 80002ca:	443b      	add	r3, r7
 80002cc:	3802      	subs	r0, #2
 80002ce:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002d2:	eba3 030c 	sub.w	r3, r3, ip
 80002d6:	2100      	movs	r1, #0
 80002d8:	b11d      	cbz	r5, 80002e2 <__udivmoddi4+0xa2>
 80002da:	40f3      	lsrs	r3, r6
 80002dc:	2200      	movs	r2, #0
 80002de:	e9c5 3200 	strd	r3, r2, [r5]
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d905      	bls.n	80002f6 <__udivmoddi4+0xb6>
 80002ea:	b10d      	cbz	r5, 80002f0 <__udivmoddi4+0xb0>
 80002ec:	e9c5 0100 	strd	r0, r1, [r5]
 80002f0:	2100      	movs	r1, #0
 80002f2:	4608      	mov	r0, r1
 80002f4:	e7f5      	b.n	80002e2 <__udivmoddi4+0xa2>
 80002f6:	fab3 f183 	clz	r1, r3
 80002fa:	2900      	cmp	r1, #0
 80002fc:	d146      	bne.n	800038c <__udivmoddi4+0x14c>
 80002fe:	4573      	cmp	r3, lr
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xc8>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 8105 	bhi.w	8000512 <__udivmoddi4+0x2d2>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb6e 0203 	sbc.w	r2, lr, r3
 800030e:	2001      	movs	r0, #1
 8000310:	4690      	mov	r8, r2
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e5      	beq.n	80002e2 <__udivmoddi4+0xa2>
 8000316:	e9c5 4800 	strd	r4, r8, [r5]
 800031a:	e7e2      	b.n	80002e2 <__udivmoddi4+0xa2>
 800031c:	2a00      	cmp	r2, #0
 800031e:	f000 8090 	beq.w	8000442 <__udivmoddi4+0x202>
 8000322:	fab2 f682 	clz	r6, r2
 8000326:	2e00      	cmp	r6, #0
 8000328:	f040 80a4 	bne.w	8000474 <__udivmoddi4+0x234>
 800032c:	1a8a      	subs	r2, r1, r2
 800032e:	0c03      	lsrs	r3, r0, #16
 8000330:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000334:	b280      	uxth	r0, r0
 8000336:	b2bc      	uxth	r4, r7
 8000338:	2101      	movs	r1, #1
 800033a:	fbb2 fcfe 	udiv	ip, r2, lr
 800033e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000342:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000346:	fb04 f20c 	mul.w	r2, r4, ip
 800034a:	429a      	cmp	r2, r3
 800034c:	d907      	bls.n	800035e <__udivmoddi4+0x11e>
 800034e:	18fb      	adds	r3, r7, r3
 8000350:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x11c>
 8000356:	429a      	cmp	r2, r3
 8000358:	f200 80e0 	bhi.w	800051c <__udivmoddi4+0x2dc>
 800035c:	46c4      	mov	ip, r8
 800035e:	1a9b      	subs	r3, r3, r2
 8000360:	fbb3 f2fe 	udiv	r2, r3, lr
 8000364:	fb0e 3312 	mls	r3, lr, r2, r3
 8000368:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800036c:	fb02 f404 	mul.w	r4, r2, r4
 8000370:	429c      	cmp	r4, r3
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0x144>
 8000374:	18fb      	adds	r3, r7, r3
 8000376:	f102 30ff 	add.w	r0, r2, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x142>
 800037c:	429c      	cmp	r4, r3
 800037e:	f200 80ca 	bhi.w	8000516 <__udivmoddi4+0x2d6>
 8000382:	4602      	mov	r2, r0
 8000384:	1b1b      	subs	r3, r3, r4
 8000386:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800038a:	e7a5      	b.n	80002d8 <__udivmoddi4+0x98>
 800038c:	f1c1 0620 	rsb	r6, r1, #32
 8000390:	408b      	lsls	r3, r1
 8000392:	fa22 f706 	lsr.w	r7, r2, r6
 8000396:	431f      	orrs	r7, r3
 8000398:	fa0e f401 	lsl.w	r4, lr, r1
 800039c:	fa20 f306 	lsr.w	r3, r0, r6
 80003a0:	fa2e fe06 	lsr.w	lr, lr, r6
 80003a4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003a8:	4323      	orrs	r3, r4
 80003aa:	fa00 f801 	lsl.w	r8, r0, r1
 80003ae:	fa1f fc87 	uxth.w	ip, r7
 80003b2:	fbbe f0f9 	udiv	r0, lr, r9
 80003b6:	0c1c      	lsrs	r4, r3, #16
 80003b8:	fb09 ee10 	mls	lr, r9, r0, lr
 80003bc:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003c0:	fb00 fe0c 	mul.w	lr, r0, ip
 80003c4:	45a6      	cmp	lr, r4
 80003c6:	fa02 f201 	lsl.w	r2, r2, r1
 80003ca:	d909      	bls.n	80003e0 <__udivmoddi4+0x1a0>
 80003cc:	193c      	adds	r4, r7, r4
 80003ce:	f100 3aff 	add.w	sl, r0, #4294967295
 80003d2:	f080 809c 	bcs.w	800050e <__udivmoddi4+0x2ce>
 80003d6:	45a6      	cmp	lr, r4
 80003d8:	f240 8099 	bls.w	800050e <__udivmoddi4+0x2ce>
 80003dc:	3802      	subs	r0, #2
 80003de:	443c      	add	r4, r7
 80003e0:	eba4 040e 	sub.w	r4, r4, lr
 80003e4:	fa1f fe83 	uxth.w	lr, r3
 80003e8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003ec:	fb09 4413 	mls	r4, r9, r3, r4
 80003f0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003f4:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f8:	45a4      	cmp	ip, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1ce>
 80003fc:	193c      	adds	r4, r7, r4
 80003fe:	f103 3eff 	add.w	lr, r3, #4294967295
 8000402:	f080 8082 	bcs.w	800050a <__udivmoddi4+0x2ca>
 8000406:	45a4      	cmp	ip, r4
 8000408:	d97f      	bls.n	800050a <__udivmoddi4+0x2ca>
 800040a:	3b02      	subs	r3, #2
 800040c:	443c      	add	r4, r7
 800040e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000412:	eba4 040c 	sub.w	r4, r4, ip
 8000416:	fba0 ec02 	umull	lr, ip, r0, r2
 800041a:	4564      	cmp	r4, ip
 800041c:	4673      	mov	r3, lr
 800041e:	46e1      	mov	r9, ip
 8000420:	d362      	bcc.n	80004e8 <__udivmoddi4+0x2a8>
 8000422:	d05f      	beq.n	80004e4 <__udivmoddi4+0x2a4>
 8000424:	b15d      	cbz	r5, 800043e <__udivmoddi4+0x1fe>
 8000426:	ebb8 0203 	subs.w	r2, r8, r3
 800042a:	eb64 0409 	sbc.w	r4, r4, r9
 800042e:	fa04 f606 	lsl.w	r6, r4, r6
 8000432:	fa22 f301 	lsr.w	r3, r2, r1
 8000436:	431e      	orrs	r6, r3
 8000438:	40cc      	lsrs	r4, r1
 800043a:	e9c5 6400 	strd	r6, r4, [r5]
 800043e:	2100      	movs	r1, #0
 8000440:	e74f      	b.n	80002e2 <__udivmoddi4+0xa2>
 8000442:	fbb1 fcf2 	udiv	ip, r1, r2
 8000446:	0c01      	lsrs	r1, r0, #16
 8000448:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800044c:	b280      	uxth	r0, r0
 800044e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000452:	463b      	mov	r3, r7
 8000454:	4638      	mov	r0, r7
 8000456:	463c      	mov	r4, r7
 8000458:	46b8      	mov	r8, r7
 800045a:	46be      	mov	lr, r7
 800045c:	2620      	movs	r6, #32
 800045e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000462:	eba2 0208 	sub.w	r2, r2, r8
 8000466:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800046a:	e766      	b.n	800033a <__udivmoddi4+0xfa>
 800046c:	4601      	mov	r1, r0
 800046e:	e718      	b.n	80002a2 <__udivmoddi4+0x62>
 8000470:	4610      	mov	r0, r2
 8000472:	e72c      	b.n	80002ce <__udivmoddi4+0x8e>
 8000474:	f1c6 0220 	rsb	r2, r6, #32
 8000478:	fa2e f302 	lsr.w	r3, lr, r2
 800047c:	40b7      	lsls	r7, r6
 800047e:	40b1      	lsls	r1, r6
 8000480:	fa20 f202 	lsr.w	r2, r0, r2
 8000484:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000488:	430a      	orrs	r2, r1
 800048a:	fbb3 f8fe 	udiv	r8, r3, lr
 800048e:	b2bc      	uxth	r4, r7
 8000490:	fb0e 3318 	mls	r3, lr, r8, r3
 8000494:	0c11      	lsrs	r1, r2, #16
 8000496:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049a:	fb08 f904 	mul.w	r9, r8, r4
 800049e:	40b0      	lsls	r0, r6
 80004a0:	4589      	cmp	r9, r1
 80004a2:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004a6:	b280      	uxth	r0, r0
 80004a8:	d93e      	bls.n	8000528 <__udivmoddi4+0x2e8>
 80004aa:	1879      	adds	r1, r7, r1
 80004ac:	f108 3cff 	add.w	ip, r8, #4294967295
 80004b0:	d201      	bcs.n	80004b6 <__udivmoddi4+0x276>
 80004b2:	4589      	cmp	r9, r1
 80004b4:	d81f      	bhi.n	80004f6 <__udivmoddi4+0x2b6>
 80004b6:	eba1 0109 	sub.w	r1, r1, r9
 80004ba:	fbb1 f9fe 	udiv	r9, r1, lr
 80004be:	fb09 f804 	mul.w	r8, r9, r4
 80004c2:	fb0e 1119 	mls	r1, lr, r9, r1
 80004c6:	b292      	uxth	r2, r2
 80004c8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004cc:	4542      	cmp	r2, r8
 80004ce:	d229      	bcs.n	8000524 <__udivmoddi4+0x2e4>
 80004d0:	18ba      	adds	r2, r7, r2
 80004d2:	f109 31ff 	add.w	r1, r9, #4294967295
 80004d6:	d2c4      	bcs.n	8000462 <__udivmoddi4+0x222>
 80004d8:	4542      	cmp	r2, r8
 80004da:	d2c2      	bcs.n	8000462 <__udivmoddi4+0x222>
 80004dc:	f1a9 0102 	sub.w	r1, r9, #2
 80004e0:	443a      	add	r2, r7
 80004e2:	e7be      	b.n	8000462 <__udivmoddi4+0x222>
 80004e4:	45f0      	cmp	r8, lr
 80004e6:	d29d      	bcs.n	8000424 <__udivmoddi4+0x1e4>
 80004e8:	ebbe 0302 	subs.w	r3, lr, r2
 80004ec:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004f0:	3801      	subs	r0, #1
 80004f2:	46e1      	mov	r9, ip
 80004f4:	e796      	b.n	8000424 <__udivmoddi4+0x1e4>
 80004f6:	eba7 0909 	sub.w	r9, r7, r9
 80004fa:	4449      	add	r1, r9
 80004fc:	f1a8 0c02 	sub.w	ip, r8, #2
 8000500:	fbb1 f9fe 	udiv	r9, r1, lr
 8000504:	fb09 f804 	mul.w	r8, r9, r4
 8000508:	e7db      	b.n	80004c2 <__udivmoddi4+0x282>
 800050a:	4673      	mov	r3, lr
 800050c:	e77f      	b.n	800040e <__udivmoddi4+0x1ce>
 800050e:	4650      	mov	r0, sl
 8000510:	e766      	b.n	80003e0 <__udivmoddi4+0x1a0>
 8000512:	4608      	mov	r0, r1
 8000514:	e6fd      	b.n	8000312 <__udivmoddi4+0xd2>
 8000516:	443b      	add	r3, r7
 8000518:	3a02      	subs	r2, #2
 800051a:	e733      	b.n	8000384 <__udivmoddi4+0x144>
 800051c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000520:	443b      	add	r3, r7
 8000522:	e71c      	b.n	800035e <__udivmoddi4+0x11e>
 8000524:	4649      	mov	r1, r9
 8000526:	e79c      	b.n	8000462 <__udivmoddi4+0x222>
 8000528:	eba1 0109 	sub.w	r1, r1, r9
 800052c:	46c4      	mov	ip, r8
 800052e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000532:	fb09 f804 	mul.w	r8, r9, r4
 8000536:	e7c4      	b.n	80004c2 <__udivmoddi4+0x282>

08000538 <__aeabi_idiv0>:
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop

0800053c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800053c:	b480      	push	{r7}
 800053e:	b085      	sub	sp, #20
 8000540:	af00      	add	r7, sp, #0
 8000542:	60f8      	str	r0, [r7, #12]
 8000544:	60b9      	str	r1, [r7, #8]
 8000546:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000548:	68fb      	ldr	r3, [r7, #12]
 800054a:	4a07      	ldr	r2, [pc, #28]	@ (8000568 <vApplicationGetIdleTaskMemory+0x2c>)
 800054c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800054e:	68bb      	ldr	r3, [r7, #8]
 8000550:	4a06      	ldr	r2, [pc, #24]	@ (800056c <vApplicationGetIdleTaskMemory+0x30>)
 8000552:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	2280      	movs	r2, #128	@ 0x80
 8000558:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800055a:	bf00      	nop
 800055c:	3714      	adds	r7, #20
 800055e:	46bd      	mov	sp, r7
 8000560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop
 8000568:	20000090 	.word	0x20000090
 800056c:	200000e4 	.word	0x200000e4

08000570 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000570:	b5b0      	push	{r4, r5, r7, lr}
 8000572:	b088      	sub	sp, #32
 8000574:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000576:	4b0a      	ldr	r3, [pc, #40]	@ (80005a0 <MX_FREERTOS_Init+0x30>)
 8000578:	1d3c      	adds	r4, r7, #4
 800057a:	461d      	mov	r5, r3
 800057c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800057e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000580:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000584:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000588:	1d3b      	adds	r3, r7, #4
 800058a:	2100      	movs	r1, #0
 800058c:	4618      	mov	r0, r3
 800058e:	f003 f8ce 	bl	800372e <osThreadCreate>
 8000592:	4603      	mov	r3, r0
 8000594:	4a03      	ldr	r2, [pc, #12]	@ (80005a4 <MX_FREERTOS_Init+0x34>)
 8000596:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000598:	bf00      	nop
 800059a:	3720      	adds	r7, #32
 800059c:	46bd      	mov	sp, r7
 800059e:	bdb0      	pop	{r4, r5, r7, pc}
 80005a0:	08006308 	.word	0x08006308
 80005a4:	2000008c 	.word	0x2000008c

080005a8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b082      	sub	sp, #8
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80005b0:	2001      	movs	r0, #1
 80005b2:	f003 f908 	bl	80037c6 <osDelay>
 80005b6:	e7fb      	b.n	80005b0 <StartDefaultTask+0x8>

080005b8 <MX_GPIO_Init>:
     PB11   ------> USB_OTG_HS_ULPI_D4
     PB14   ------> SPI2_MISO
     PB15   ------> SPI2_MOSI
*/
void MX_GPIO_Init(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b090      	sub	sp, #64	@ 0x40
 80005bc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005be:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80005c2:	2200      	movs	r2, #0
 80005c4:	601a      	str	r2, [r3, #0]
 80005c6:	605a      	str	r2, [r3, #4]
 80005c8:	609a      	str	r2, [r3, #8]
 80005ca:	60da      	str	r2, [r3, #12]
 80005cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80005ce:	4bad      	ldr	r3, [pc, #692]	@ (8000884 <MX_GPIO_Init+0x2cc>)
 80005d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005d2:	4aac      	ldr	r2, [pc, #688]	@ (8000884 <MX_GPIO_Init+0x2cc>)
 80005d4:	f043 0310 	orr.w	r3, r3, #16
 80005d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80005da:	4baa      	ldr	r3, [pc, #680]	@ (8000884 <MX_GPIO_Init+0x2cc>)
 80005dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005de:	f003 0310 	and.w	r3, r3, #16
 80005e2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80005e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80005e6:	4ba7      	ldr	r3, [pc, #668]	@ (8000884 <MX_GPIO_Init+0x2cc>)
 80005e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ea:	4aa6      	ldr	r2, [pc, #664]	@ (8000884 <MX_GPIO_Init+0x2cc>)
 80005ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80005f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80005f2:	4ba4      	ldr	r3, [pc, #656]	@ (8000884 <MX_GPIO_Init+0x2cc>)
 80005f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80005fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80005fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005fe:	4ba1      	ldr	r3, [pc, #644]	@ (8000884 <MX_GPIO_Init+0x2cc>)
 8000600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000602:	4aa0      	ldr	r2, [pc, #640]	@ (8000884 <MX_GPIO_Init+0x2cc>)
 8000604:	f043 0302 	orr.w	r3, r3, #2
 8000608:	6313      	str	r3, [r2, #48]	@ 0x30
 800060a:	4b9e      	ldr	r3, [pc, #632]	@ (8000884 <MX_GPIO_Init+0x2cc>)
 800060c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800060e:	f003 0302 	and.w	r3, r3, #2
 8000612:	623b      	str	r3, [r7, #32]
 8000614:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000616:	4b9b      	ldr	r3, [pc, #620]	@ (8000884 <MX_GPIO_Init+0x2cc>)
 8000618:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800061a:	4a9a      	ldr	r2, [pc, #616]	@ (8000884 <MX_GPIO_Init+0x2cc>)
 800061c:	f043 0308 	orr.w	r3, r3, #8
 8000620:	6313      	str	r3, [r2, #48]	@ 0x30
 8000622:	4b98      	ldr	r3, [pc, #608]	@ (8000884 <MX_GPIO_Init+0x2cc>)
 8000624:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000626:	f003 0308 	and.w	r3, r3, #8
 800062a:	61fb      	str	r3, [r7, #28]
 800062c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800062e:	4b95      	ldr	r3, [pc, #596]	@ (8000884 <MX_GPIO_Init+0x2cc>)
 8000630:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000632:	4a94      	ldr	r2, [pc, #592]	@ (8000884 <MX_GPIO_Init+0x2cc>)
 8000634:	f043 0304 	orr.w	r3, r3, #4
 8000638:	6313      	str	r3, [r2, #48]	@ 0x30
 800063a:	4b92      	ldr	r3, [pc, #584]	@ (8000884 <MX_GPIO_Init+0x2cc>)
 800063c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800063e:	f003 0304 	and.w	r3, r3, #4
 8000642:	61bb      	str	r3, [r7, #24]
 8000644:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000646:	4b8f      	ldr	r3, [pc, #572]	@ (8000884 <MX_GPIO_Init+0x2cc>)
 8000648:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800064a:	4a8e      	ldr	r2, [pc, #568]	@ (8000884 <MX_GPIO_Init+0x2cc>)
 800064c:	f043 0301 	orr.w	r3, r3, #1
 8000650:	6313      	str	r3, [r2, #48]	@ 0x30
 8000652:	4b8c      	ldr	r3, [pc, #560]	@ (8000884 <MX_GPIO_Init+0x2cc>)
 8000654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000656:	f003 0301 	and.w	r3, r3, #1
 800065a:	617b      	str	r3, [r7, #20]
 800065c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800065e:	4b89      	ldr	r3, [pc, #548]	@ (8000884 <MX_GPIO_Init+0x2cc>)
 8000660:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000662:	4a88      	ldr	r2, [pc, #544]	@ (8000884 <MX_GPIO_Init+0x2cc>)
 8000664:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000668:	6313      	str	r3, [r2, #48]	@ 0x30
 800066a:	4b86      	ldr	r3, [pc, #536]	@ (8000884 <MX_GPIO_Init+0x2cc>)
 800066c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800066e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000672:	613b      	str	r3, [r7, #16]
 8000674:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000676:	4b83      	ldr	r3, [pc, #524]	@ (8000884 <MX_GPIO_Init+0x2cc>)
 8000678:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800067a:	4a82      	ldr	r2, [pc, #520]	@ (8000884 <MX_GPIO_Init+0x2cc>)
 800067c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000680:	6313      	str	r3, [r2, #48]	@ 0x30
 8000682:	4b80      	ldr	r3, [pc, #512]	@ (8000884 <MX_GPIO_Init+0x2cc>)
 8000684:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000686:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800068a:	60fb      	str	r3, [r7, #12]
 800068c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800068e:	4b7d      	ldr	r3, [pc, #500]	@ (8000884 <MX_GPIO_Init+0x2cc>)
 8000690:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000692:	4a7c      	ldr	r2, [pc, #496]	@ (8000884 <MX_GPIO_Init+0x2cc>)
 8000694:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000698:	6313      	str	r3, [r2, #48]	@ 0x30
 800069a:	4b7a      	ldr	r3, [pc, #488]	@ (8000884 <MX_GPIO_Init+0x2cc>)
 800069c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800069e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80006a2:	60bb      	str	r3, [r7, #8]
 80006a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80006a6:	4b77      	ldr	r3, [pc, #476]	@ (8000884 <MX_GPIO_Init+0x2cc>)
 80006a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006aa:	4a76      	ldr	r2, [pc, #472]	@ (8000884 <MX_GPIO_Init+0x2cc>)
 80006ac:	f043 0320 	orr.w	r3, r3, #32
 80006b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80006b2:	4b74      	ldr	r3, [pc, #464]	@ (8000884 <MX_GPIO_Init+0x2cc>)
 80006b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006b6:	f003 0320 	and.w	r3, r3, #32
 80006ba:	607b      	str	r3, [r7, #4]
 80006bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006be:	4b71      	ldr	r3, [pc, #452]	@ (8000884 <MX_GPIO_Init+0x2cc>)
 80006c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006c2:	4a70      	ldr	r2, [pc, #448]	@ (8000884 <MX_GPIO_Init+0x2cc>)
 80006c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80006c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80006ca:	4b6e      	ldr	r3, [pc, #440]	@ (8000884 <MX_GPIO_Init+0x2cc>)
 80006cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80006d2:	603b      	str	r3, [r7, #0]
 80006d4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80006d6:	2201      	movs	r2, #1
 80006d8:	2120      	movs	r1, #32
 80006da:	486b      	ldr	r0, [pc, #428]	@ (8000888 <MX_GPIO_Init+0x2d0>)
 80006dc:	f001 fa0e 	bl	8001afc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin|LED_Pin|LCD_DISP_Pin, GPIO_PIN_RESET);
 80006e0:	2200      	movs	r2, #0
 80006e2:	f241 010e 	movw	r1, #4110	@ 0x100e
 80006e6:	4869      	ldr	r0, [pc, #420]	@ (800088c <MX_GPIO_Init+0x2d4>)
 80006e8:	f001 fa08 	bl	8001afc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 80006ec:	2200      	movs	r2, #0
 80006ee:	2108      	movs	r1, #8
 80006f0:	4867      	ldr	r0, [pc, #412]	@ (8000890 <MX_GPIO_Init+0x2d8>)
 80006f2:	f001 fa03 	bl	8001afc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 80006f6:	2200      	movs	r2, #0
 80006f8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80006fc:	4865      	ldr	r0, [pc, #404]	@ (8000894 <MX_GPIO_Init+0x2dc>)
 80006fe:	f001 f9fd 	bl	8001afc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8000702:	2200      	movs	r2, #0
 8000704:	21c8      	movs	r1, #200	@ 0xc8
 8000706:	4864      	ldr	r0, [pc, #400]	@ (8000898 <MX_GPIO_Init+0x2e0>)
 8000708:	f001 f9f8 	bl	8001afc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LCD_B0_Pin */
  GPIO_InitStruct.Pin = LCD_B0_Pin;
 800070c:	2310      	movs	r3, #16
 800070e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000710:	2302      	movs	r3, #2
 8000712:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000714:	2300      	movs	r3, #0
 8000716:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000718:	2300      	movs	r3, #0
 800071a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800071c:	230e      	movs	r3, #14
 800071e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8000720:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000724:	4619      	mov	r1, r3
 8000726:	485d      	ldr	r0, [pc, #372]	@ (800089c <MX_GPIO_Init+0x2e4>)
 8000728:	f001 f824 	bl	8001774 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 800072c:	2308      	movs	r3, #8
 800072e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000730:	2300      	movs	r3, #0
 8000732:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000734:	2300      	movs	r3, #0
 8000736:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000738:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800073c:	4619      	mov	r1, r3
 800073e:	4857      	ldr	r0, [pc, #348]	@ (800089c <MX_GPIO_Init+0x2e4>)
 8000740:	f001 f818 	bl	8001774 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_D2_Pin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8000744:	2304      	movs	r3, #4
 8000746:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000748:	2302      	movs	r3, #2
 800074a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074c:	2300      	movs	r3, #0
 800074e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000750:	2303      	movs	r3, #3
 8000752:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000754:	2309      	movs	r3, #9
 8000756:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8000758:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800075c:	4619      	mov	r1, r3
 800075e:	484f      	ldr	r0, [pc, #316]	@ (800089c <MX_GPIO_Init+0x2e4>)
 8000760:	f001 f808 	bl	8001774 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8000764:	f44f 43d0 	mov.w	r3, #26624	@ 0x6800
 8000768:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800076a:	2302      	movs	r3, #2
 800076c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076e:	2300      	movs	r3, #0
 8000770:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000772:	2303      	movs	r3, #3
 8000774:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000776:	230b      	movs	r3, #11
 8000778:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800077a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800077e:	4619      	mov	r1, r3
 8000780:	4845      	ldr	r0, [pc, #276]	@ (8000898 <MX_GPIO_Init+0x2e0>)
 8000782:	f000 fff7 	bl	8001774 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_NBL1_Pin FMC_NBL0_Pin FMC_D5_Pin FMC_D6_Pin
                           FMC_D8_Pin FMC_D11_Pin FMC_D4_Pin FMC_D7_Pin
                           FMC_D9_Pin FMC_D12_Pin FMC_D10_Pin */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8000786:	f64f 7383 	movw	r3, #65411	@ 0xff83
 800078a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800078c:	2302      	movs	r3, #2
 800078e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000790:	2300      	movs	r3, #0
 8000792:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000794:	2303      	movs	r3, #3
 8000796:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000798:	230c      	movs	r3, #12
 800079a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800079c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80007a0:	4619      	mov	r1, r3
 80007a2:	483e      	ldr	r0, [pc, #248]	@ (800089c <MX_GPIO_Init+0x2e4>)
 80007a4:	f000 ffe6 	bl	8001774 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_SCL_D15_Pin ARDUINO_SDA_D14_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 80007a8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80007ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007ae:	2312      	movs	r3, #18
 80007b0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b2:	2300      	movs	r3, #0
 80007b4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b6:	2300      	movs	r3, #0
 80007b8:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80007ba:	2304      	movs	r3, #4
 80007bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007be:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80007c2:	4619      	mov	r1, r3
 80007c4:	4836      	ldr	r0, [pc, #216]	@ (80008a0 <MX_GPIO_Init+0x2e8>)
 80007c6:	f000 ffd5 	bl	8001774 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 80007ca:	f643 4323 	movw	r3, #15395	@ 0x3c23
 80007ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007d0:	2302      	movs	r3, #2
 80007d2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d4:	2300      	movs	r3, #0
 80007d6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007d8:	2303      	movs	r3, #3
 80007da:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80007dc:	230a      	movs	r3, #10
 80007de:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007e0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80007e4:	4619      	mov	r1, r3
 80007e6:	482e      	ldr	r0, [pc, #184]	@ (80008a0 <MX_GPIO_Init+0x2e8>)
 80007e8:	f000 ffc4 	bl	8001774 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 80007ec:	2310      	movs	r3, #16
 80007ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007f0:	2302      	movs	r3, #2
 80007f2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f4:	2300      	movs	r3, #0
 80007f6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f8:	2300      	movs	r3, #0
 80007fa:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80007fc:	2302      	movs	r3, #2
 80007fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 8000800:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000804:	4619      	mov	r1, r3
 8000806:	4826      	ldr	r0, [pc, #152]	@ (80008a0 <MX_GPIO_Init+0x2e8>)
 8000808:	f000 ffb4 	bl	8001774 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPDIF_RX0_Pin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 800080c:	2380      	movs	r3, #128	@ 0x80
 800080e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000810:	2302      	movs	r3, #2
 8000812:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000814:	2300      	movs	r3, #0
 8000816:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000818:	2300      	movs	r3, #0
 800081a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 800081c:	2308      	movs	r3, #8
 800081e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8000820:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000824:	4619      	mov	r1, r3
 8000826:	4818      	ldr	r0, [pc, #96]	@ (8000888 <MX_GPIO_Init+0x2d0>)
 8000828:	f000 ffa4 	bl	8001774 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDMMC_CK_Pin SDMMC_D3_Pin SDMMC_D2_Pin PC9
                           PC8 */
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 800082c:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8000830:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000832:	2302      	movs	r3, #2
 8000834:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000836:	2300      	movs	r3, #0
 8000838:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800083a:	2303      	movs	r3, #3
 800083c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800083e:	230c      	movs	r3, #12
 8000840:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000842:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000846:	4619      	mov	r1, r3
 8000848:	4816      	ldr	r0, [pc, #88]	@ (80008a4 <MX_GPIO_Init+0x2ec>)
 800084a:	f000 ff93 	bl	8001774 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D9_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 800084e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000852:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000854:	2302      	movs	r3, #2
 8000856:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000858:	2300      	movs	r3, #0
 800085a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800085c:	2300      	movs	r3, #0
 800085e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000860:	2301      	movs	r3, #1
 8000862:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8000864:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000868:	4619      	mov	r1, r3
 800086a:	480f      	ldr	r0, [pc, #60]	@ (80008a8 <MX_GPIO_Init+0x2f0>)
 800086c:	f000 ff82 	bl	8001774 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D6_Pin DCMI_D7_Pin */
  GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8000870:	2360      	movs	r3, #96	@ 0x60
 8000872:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000874:	2302      	movs	r3, #2
 8000876:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000878:	2300      	movs	r3, #0
 800087a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800087c:	2300      	movs	r3, #0
 800087e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000880:	230d      	movs	r3, #13
 8000882:	e013      	b.n	80008ac <MX_GPIO_Init+0x2f4>
 8000884:	40023800 	.word	0x40023800
 8000888:	40020c00 	.word	0x40020c00
 800088c:	40022000 	.word	0x40022000
 8000890:	40022800 	.word	0x40022800
 8000894:	40021c00 	.word	0x40021c00
 8000898:	40021800 	.word	0x40021800
 800089c:	40021000 	.word	0x40021000
 80008a0:	40020400 	.word	0x40020400
 80008a4:	40020800 	.word	0x40020800
 80008a8:	40020000 	.word	0x40020000
 80008ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80008ae:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80008b2:	4619      	mov	r1, r3
 80008b4:	48bc      	ldr	r0, [pc, #752]	@ (8000ba8 <MX_GPIO_Init+0x5f0>)
 80008b6:	f000 ff5d 	bl	8001774 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_NCS_Pin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 80008ba:	2340      	movs	r3, #64	@ 0x40
 80008bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008be:	2302      	movs	r3, #2
 80008c0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c2:	2300      	movs	r3, #0
 80008c4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008c6:	2303      	movs	r3, #3
 80008c8:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80008ca:	230a      	movs	r3, #10
 80008cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 80008ce:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80008d2:	4619      	mov	r1, r3
 80008d4:	48b5      	ldr	r0, [pc, #724]	@ (8000bac <MX_GPIO_Init+0x5f4>)
 80008d6:	f000 ff4d 	bl	8001774 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNCAS_Pin FMC_SDCLK_Pin FMC_A11_Pin FMC_A10_Pin
                           FMC_BA1_Pin FMC_BA0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 80008da:	f248 1333 	movw	r3, #33075	@ 0x8133
 80008de:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e0:	2302      	movs	r3, #2
 80008e2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e4:	2300      	movs	r3, #0
 80008e6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008e8:	2303      	movs	r3, #3
 80008ea:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80008ec:	230c      	movs	r3, #12
 80008ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80008f0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80008f4:	4619      	mov	r1, r3
 80008f6:	48ae      	ldr	r0, [pc, #696]	@ (8000bb0 <MX_GPIO_Init+0x5f8>)
 80008f8:	f000 ff3c 	bl	8001774 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_B1_Pin LCD_B2_Pin LCD_B3_Pin LCD_G4_Pin
                           LCD_G1_Pin LCD_G3_Pin LCD_G0_Pin LCD_G2_Pin
                           LCD_R7_Pin LCD_R5_Pin LCD_R6_Pin LCD_R4_Pin
                           LCD_R3_Pin LCD_R1_Pin LCD_R2_Pin */
  GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 80008fc:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 8000900:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000902:	2302      	movs	r3, #2
 8000904:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000906:	2300      	movs	r3, #0
 8000908:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090a:	2300      	movs	r3, #0
 800090c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800090e:	230e      	movs	r3, #14
 8000910:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000912:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000916:	4619      	mov	r1, r3
 8000918:	48a6      	ldr	r0, [pc, #664]	@ (8000bb4 <MX_GPIO_Init+0x5fc>)
 800091a:	f000 ff2b 	bl	8001774 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 800091e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000922:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000924:	2300      	movs	r3, #0
 8000926:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000928:	2300      	movs	r3, #0
 800092a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800092c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000930:	4619      	mov	r1, r3
 8000932:	48a0      	ldr	r0, [pc, #640]	@ (8000bb4 <MX_GPIO_Init+0x5fc>)
 8000934:	f000 ff1e 	bl	8001774 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8000938:	2340      	movs	r3, #64	@ 0x40
 800093a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800093c:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000940:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000942:	2300      	movs	r3, #0
 8000944:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8000946:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800094a:	4619      	mov	r1, r3
 800094c:	489a      	ldr	r0, [pc, #616]	@ (8000bb8 <MX_GPIO_Init+0x600>)
 800094e:	f000 ff11 	bl	8001774 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_D2_Pin FMC_D3_Pin FMC_D1_Pin FMC_D15_Pin
                           FMC_D0_Pin FMC_D14_Pin FMC_D13_Pin */
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8000952:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8000956:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000958:	2302      	movs	r3, #2
 800095a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095c:	2300      	movs	r3, #0
 800095e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000960:	2303      	movs	r3, #3
 8000962:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000964:	230c      	movs	r3, #12
 8000966:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000968:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800096c:	4619      	mov	r1, r3
 800096e:	4892      	ldr	r0, [pc, #584]	@ (8000bb8 <MX_GPIO_Init+0x600>)
 8000970:	f000 ff00 	bl	8001774 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 8000974:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000978:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800097a:	2302      	movs	r3, #2
 800097c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097e:	2300      	movs	r3, #0
 8000980:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000982:	2303      	movs	r3, #3
 8000984:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000986:	230a      	movs	r3, #10
 8000988:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800098a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800098e:	4619      	mov	r1, r3
 8000990:	488a      	ldr	r0, [pc, #552]	@ (8000bbc <MX_GPIO_Init+0x604>)
 8000992:	f000 feef 	bl	8001774 <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI2_MCLKA_Pin SAI2_SCKA_Pin SAI2_FSA_Pin SAI2_SDA_Pin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8000996:	23f0      	movs	r3, #240	@ 0xf0
 8000998:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800099a:	2302      	movs	r3, #2
 800099c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099e:	2300      	movs	r3, #0
 80009a0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a2:	2300      	movs	r3, #0
 80009a4:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80009a6:	230a      	movs	r3, #10
 80009a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80009aa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80009ae:	4619      	mov	r1, r3
 80009b0:	4883      	ldr	r0, [pc, #524]	@ (8000bc0 <MX_GPIO_Init+0x608>)
 80009b2:	f000 fedf 	bl	8001774 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_DE_Pin LCD_B7_Pin LCD_B6_Pin LCD_B5_Pin
                           LCD_G6_Pin LCD_G7_Pin LCD_G5_Pin */
  GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 80009b6:	23f7      	movs	r3, #247	@ 0xf7
 80009b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ba:	2302      	movs	r3, #2
 80009bc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009be:	2300      	movs	r3, #0
 80009c0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c2:	2300      	movs	r3, #0
 80009c4:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80009c6:	230e      	movs	r3, #14
 80009c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80009ca:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80009ce:	4619      	mov	r1, r3
 80009d0:	487c      	ldr	r0, [pc, #496]	@ (8000bc4 <MX_GPIO_Init+0x60c>)
 80009d2:	f000 fecf 	bl	8001774 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_B4_Pin */
  GPIO_InitStruct.Pin = LCD_B4_Pin;
 80009d6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009dc:	2302      	movs	r3, #2
 80009de:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e0:	2300      	movs	r3, #0
 80009e2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e4:	2300      	movs	r3, #0
 80009e6:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80009e8:	2309      	movs	r3, #9
 80009ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 80009ec:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80009f0:	4619      	mov	r1, r3
 80009f2:	486f      	ldr	r0, [pc, #444]	@ (8000bb0 <MX_GPIO_Init+0x5f8>)
 80009f4:	f000 febe 	bl	8001774 <HAL_GPIO_Init>

  /*Configure GPIO pin : SAI2_SDB_Pin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 80009f8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80009fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009fe:	2302      	movs	r3, #2
 8000a00:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a02:	2300      	movs	r3, #0
 8000a04:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a06:	2300      	movs	r3, #0
 8000a08:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8000a0a:	230a      	movs	r3, #10
 8000a0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8000a0e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a12:	4619      	mov	r1, r3
 8000a14:	4866      	ldr	r0, [pc, #408]	@ (8000bb0 <MX_GPIO_Init+0x5f8>)
 8000a16:	f000 fead 	bl	8001774 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000a1a:	2320      	movs	r3, #32
 8000a1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a1e:	2301      	movs	r3, #1
 8000a20:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a22:	2300      	movs	r3, #0
 8000a24:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a26:	2300      	movs	r3, #0
 8000a28:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a2a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a2e:	4619      	mov	r1, r3
 8000a30:	4861      	ldr	r0, [pc, #388]	@ (8000bb8 <MX_GPIO_Init+0x600>)
 8000a32:	f000 fe9f 	bl	8001774 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_D5_Pin */
  GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8000a36:	2308      	movs	r3, #8
 8000a38:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a3a:	2302      	movs	r3, #2
 8000a3c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a42:	2300      	movs	r3, #0
 8000a44:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000a46:	230d      	movs	r3, #13
 8000a48:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8000a4a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a4e:	4619      	mov	r1, r3
 8000a50:	4859      	ldr	r0, [pc, #356]	@ (8000bb8 <MX_GPIO_Init+0x600>)
 8000a52:	f000 fe8f 	bl	8001774 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LED_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LED_Pin|LCD_DISP_Pin;
 8000a56:	f241 030e 	movw	r3, #4110	@ 0x100e
 8000a5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a5c:	2301      	movs	r3, #1
 8000a5e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a60:	2300      	movs	r3, #0
 8000a62:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a64:	2300      	movs	r3, #0
 8000a66:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000a68:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	4854      	ldr	r0, [pc, #336]	@ (8000bc0 <MX_GPIO_Init+0x608>)
 8000a70:	f000 fe80 	bl	8001774 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8000a74:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a78:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8000a82:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a86:	4619      	mov	r1, r3
 8000a88:	484f      	ldr	r0, [pc, #316]	@ (8000bc8 <MX_GPIO_Init+0x610>)
 8000a8a:	f000 fe73 	bl	8001774 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_A0_Pin FMC_A1_Pin FMC_A2_Pin FMC_A3_Pin
                           FMC_A4_Pin FMC_A5_Pin FMC_A6_Pin FMC_A9_Pin
                           FMC_A7_Pin FMC_A8_Pin FMC_SDNRAS_Pin */
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8000a8e:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8000a92:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a94:	2302      	movs	r3, #2
 8000a96:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a9c:	2303      	movs	r3, #3
 8000a9e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000aa0:	230c      	movs	r3, #12
 8000aa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000aa4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	4848      	ldr	r0, [pc, #288]	@ (8000bcc <MX_GPIO_Init+0x614>)
 8000aac:	f000 fe62 	bl	8001774 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_HSYNC_Pin LCD_VSYNC_Pin LCD_R0_Pin LCD_CLK_Pin */
  GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8000ab0:	f44f 4346 	mov.w	r3, #50688	@ 0xc600
 8000ab4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab6:	2302      	movs	r3, #2
 8000ab8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aba:	2300      	movs	r3, #0
 8000abc:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000ac2:	230e      	movs	r3, #14
 8000ac4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000ac6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000aca:	4619      	mov	r1, r3
 8000acc:	483c      	ldr	r0, [pc, #240]	@ (8000bc0 <MX_GPIO_Init+0x608>)
 8000ace:	f000 fe51 	bl	8001774 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8000ad2:	2308      	movs	r3, #8
 8000ad4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ad6:	2301      	movs	r3, #1
 8000ad8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ada:	2300      	movs	r3, #0
 8000adc:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8000ae2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	4836      	ldr	r0, [pc, #216]	@ (8000bc4 <MX_GPIO_Init+0x60c>)
 8000aea:	f000 fe43 	bl	8001774 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_VSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8000aee:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000af2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af4:	2302      	movs	r3, #2
 8000af6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af8:	2300      	movs	r3, #0
 8000afa:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000afc:	2300      	movs	r3, #0
 8000afe:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000b00:	230d      	movs	r3, #13
 8000b02:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8000b04:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b08:	4619      	mov	r1, r3
 8000b0a:	4829      	ldr	r0, [pc, #164]	@ (8000bb0 <MX_GPIO_Init+0x5f8>)
 8000b0c:	f000 fe32 	bl	8001774 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000b10:	2310      	movs	r3, #16
 8000b12:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b14:	2300      	movs	r3, #0
 8000b16:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b1c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b20:	4619      	mov	r1, r3
 8000b22:	4825      	ldr	r0, [pc, #148]	@ (8000bb8 <MX_GPIO_Init+0x600>)
 8000b24:	f000 fe26 	bl	8001774 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDMMC_D0_Pin */
  GPIO_InitStruct.Pin = SDMMC_D0_Pin;
 8000b28:	2304      	movs	r3, #4
 8000b2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b2c:	2302      	movs	r3, #2
 8000b2e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b30:	2300      	movs	r3, #0
 8000b32:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b34:	2303      	movs	r3, #3
 8000b36:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000b38:	230c      	movs	r3, #12
 8000b3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SDMMC_D0_GPIO_Port, &GPIO_InitStruct);
 8000b3c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b40:	4619      	mov	r1, r3
 8000b42:	481d      	ldr	r0, [pc, #116]	@ (8000bb8 <MX_GPIO_Init+0x600>)
 8000b44:	f000 fe16 	bl	8001774 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8000b48:	f248 0304 	movw	r3, #32772	@ 0x8004
 8000b4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b52:	2300      	movs	r3, #0
 8000b54:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000b56:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	481c      	ldr	r0, [pc, #112]	@ (8000bd0 <MX_GPIO_Init+0x618>)
 8000b5e:	f000 fe09 	bl	8001774 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8000b62:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b66:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b68:	2301      	movs	r3, #1
 8000b6a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b70:	2300      	movs	r3, #0
 8000b72:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000b74:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b78:	4619      	mov	r1, r3
 8000b7a:	4815      	ldr	r0, [pc, #84]	@ (8000bd0 <MX_GPIO_Init+0x618>)
 8000b7c:	f000 fdfa 	bl	8001774 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D4_Pin DCMI_D3_Pin DCMI_D0_Pin DCMI_D2_Pin
                           DCMI_D1_Pin */
  GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8000b80:	f44f 43bc 	mov.w	r3, #24064	@ 0x5e00
 8000b84:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |DCMI_D1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b86:	2302      	movs	r3, #2
 8000b88:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000b92:	230d      	movs	r3, #13
 8000b94:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000b96:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	480c      	ldr	r0, [pc, #48]	@ (8000bd0 <MX_GPIO_Init+0x618>)
 8000b9e:	f000 fde9 	bl	8001774 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_CS_D5_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	e016      	b.n	8000bd4 <MX_GPIO_Init+0x61c>
 8000ba6:	bf00      	nop
 8000ba8:	40021000 	.word	0x40021000
 8000bac:	40020400 	.word	0x40020400
 8000bb0:	40021800 	.word	0x40021800
 8000bb4:	40022400 	.word	0x40022400
 8000bb8:	40020c00 	.word	0x40020c00
 8000bbc:	40020000 	.word	0x40020000
 8000bc0:	40022000 	.word	0x40022000
 8000bc4:	40022800 	.word	0x40022800
 8000bc8:	40020800 	.word	0x40020800
 8000bcc:	40021400 	.word	0x40021400
 8000bd0:	40021c00 	.word	0x40021c00
 8000bd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd6:	2302      	movs	r3, #2
 8000bd8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bde:	2300      	movs	r3, #0
 8000be0:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8000be2:	2302      	movs	r3, #2
 8000be4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 8000be6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000bea:	4619      	mov	r1, r3
 8000bec:	48a4      	ldr	r0, [pc, #656]	@ (8000e80 <MX_GPIO_Init+0x8c8>)
 8000bee:	f000 fdc1 	bl	8001774 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8000bf2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000bf6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000c00:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c04:	4619      	mov	r1, r3
 8000c06:	489e      	ldr	r0, [pc, #632]	@ (8000e80 <MX_GPIO_Init+0x8c8>)
 8000c08:	f000 fdb4 	bl	8001774 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D10_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8000c0c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000c10:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c12:	2302      	movs	r3, #2
 8000c14:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c16:	2300      	movs	r3, #0
 8000c18:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000c1e:	2301      	movs	r3, #1
 8000c20:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8000c22:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c26:	4619      	mov	r1, r3
 8000c28:	4896      	ldr	r0, [pc, #600]	@ (8000e84 <MX_GPIO_Init+0x8cc>)
 8000c2a:	f000 fda3 	bl	8001774 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8000c2e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c32:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000c34:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000c38:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8000c3e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c42:	4619      	mov	r1, r3
 8000c44:	488e      	ldr	r0, [pc, #568]	@ (8000e80 <MX_GPIO_Init+0x8c8>)
 8000c46:	f000 fd95 	bl	8001774 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_RX_D0_Pin ARDUINO_TX_D1_Pin */
  GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8000c4a:	23c0      	movs	r3, #192	@ 0xc0
 8000c4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c4e:	2302      	movs	r3, #2
 8000c50:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c52:	2300      	movs	r3, #0
 8000c54:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c56:	2303      	movs	r3, #3
 8000c58:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000c5a:	2308      	movs	r3, #8
 8000c5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c5e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c62:	4619      	mov	r1, r3
 8000c64:	4888      	ldr	r0, [pc, #544]	@ (8000e88 <MX_GPIO_Init+0x8d0>)
 8000c66:	f000 fd85 	bl	8001774 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8000c6a:	2310      	movs	r3, #16
 8000c6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c6e:	2302      	movs	r3, #2
 8000c70:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c72:	2300      	movs	r3, #0
 8000c74:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c76:	2303      	movs	r3, #3
 8000c78:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000c7a:	230a      	movs	r3, #10
 8000c7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8000c7e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c82:	4619      	mov	r1, r3
 8000c84:	4881      	ldr	r0, [pc, #516]	@ (8000e8c <MX_GPIO_Init+0x8d4>)
 8000c86:	f000 fd75 	bl	8001774 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNME_Pin FMC_SDNE0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8000c8a:	2328      	movs	r3, #40	@ 0x28
 8000c8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c8e:	2302      	movs	r3, #2
 8000c90:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c92:	2300      	movs	r3, #0
 8000c94:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c96:	2303      	movs	r3, #3
 8000c98:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000c9a:	230c      	movs	r3, #12
 8000c9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000c9e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	4879      	ldr	r0, [pc, #484]	@ (8000e8c <MX_GPIO_Init+0x8d4>)
 8000ca6:	f000 fd65 	bl	8001774 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8000caa:	23c8      	movs	r3, #200	@ 0xc8
 8000cac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cae:	2301      	movs	r3, #1
 8000cb0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000cba:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000cbe:	4619      	mov	r1, r3
 8000cc0:	4873      	ldr	r0, [pc, #460]	@ (8000e90 <MX_GPIO_Init+0x8d8>)
 8000cc2:	f000 fd57 	bl	8001774 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_A4_Pin ARDUINO_A5_Pin ARDUINO_A1_Pin ARDUINO_A2_Pin
                           ARDUINO_A3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 8000cc6:	f44f 63f8 	mov.w	r3, #1984	@ 0x7c0
 8000cca:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |ARDUINO_A3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ccc:	2303      	movs	r3, #3
 8000cce:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000cd4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000cd8:	4619      	mov	r1, r3
 8000cda:	486e      	ldr	r0, [pc, #440]	@ (8000e94 <MX_GPIO_Init+0x8dc>)
 8000cdc:	f000 fd4a 	bl	8001774 <HAL_GPIO_Init>

  /*Configure GPIO pin : FMC_SDCKE0_Pin */
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8000ce0:	2308      	movs	r3, #8
 8000ce2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce4:	2302      	movs	r3, #2
 8000ce6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cec:	2303      	movs	r3, #3
 8000cee:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000cf0:	230c      	movs	r3, #12
 8000cf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8000cf4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	4863      	ldr	r0, [pc, #396]	@ (8000e88 <MX_GPIO_Init+0x8d0>)
 8000cfc:	f000 fd3a 	bl	8001774 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8000d00:	2305      	movs	r3, #5
 8000d02:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d04:	2302      	movs	r3, #2
 8000d06:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d0c:	2303      	movs	r3, #3
 8000d0e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000d10:	230a      	movs	r3, #10
 8000d12:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d14:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d18:	4619      	mov	r1, r3
 8000d1a:	485b      	ldr	r0, [pc, #364]	@ (8000e88 <MX_GPIO_Init+0x8d0>)
 8000d1c:	f000 fd2a 	bl	8001774 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000d20:	2332      	movs	r3, #50	@ 0x32
 8000d22:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d24:	2302      	movs	r3, #2
 8000d26:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d2c:	2303      	movs	r3, #3
 8000d2e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d30:	230b      	movs	r3, #11
 8000d32:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d34:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d38:	4619      	mov	r1, r3
 8000d3a:	4853      	ldr	r0, [pc, #332]	@ (8000e88 <MX_GPIO_Init+0x8d0>)
 8000d3c:	f000 fd1a 	bl	8001774 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000d40:	2304      	movs	r3, #4
 8000d42:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d44:	2302      	movs	r3, #2
 8000d46:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d4c:	2303      	movs	r3, #3
 8000d4e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000d50:	2309      	movs	r3, #9
 8000d52:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d54:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d58:	4619      	mov	r1, r3
 8000d5a:	484f      	ldr	r0, [pc, #316]	@ (8000e98 <MX_GPIO_Init+0x8e0>)
 8000d5c:	f000 fd0a 	bl	8001774 <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_D1_Pin QSPI_D3_Pin QSPI_D0_Pin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8000d60:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8000d64:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d66:	2302      	movs	r3, #2
 8000d68:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d6e:	2303      	movs	r3, #3
 8000d70:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000d72:	2309      	movs	r3, #9
 8000d74:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d76:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	4847      	ldr	r0, [pc, #284]	@ (8000e9c <MX_GPIO_Init+0x8e4>)
 8000d7e:	f000 fcf9 	bl	8001774 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8000d82:	2304      	movs	r3, #4
 8000d84:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d86:	2300      	movs	r3, #0
 8000d88:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8000d8e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d92:	4619      	mov	r1, r3
 8000d94:	483e      	ldr	r0, [pc, #248]	@ (8000e90 <MX_GPIO_Init+0x8d8>)
 8000d96:	f000 fced 	bl	8001774 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000d9a:	2386      	movs	r3, #134	@ 0x86
 8000d9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d9e:	2302      	movs	r3, #2
 8000da0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da2:	2300      	movs	r3, #0
 8000da4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000da6:	2303      	movs	r3, #3
 8000da8:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000daa:	230b      	movs	r3, #11
 8000dac:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dae:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000db2:	4619      	mov	r1, r3
 8000db4:	4833      	ldr	r0, [pc, #204]	@ (8000e84 <MX_GPIO_Init+0x8cc>)
 8000db6:	f000 fcdd 	bl	8001774 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_A0_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8000dba:	2301      	movs	r3, #1
 8000dbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000dbe:	2303      	movs	r3, #3
 8000dc0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8000dc6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000dca:	4619      	mov	r1, r3
 8000dcc:	482d      	ldr	r0, [pc, #180]	@ (8000e84 <MX_GPIO_Init+0x8cc>)
 8000dce:	f000 fcd1 	bl	8001774 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_HSYNC_Pin PA6 */
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8000dd2:	2350      	movs	r3, #80	@ 0x50
 8000dd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd6:	2302      	movs	r3, #2
 8000dd8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dde:	2300      	movs	r3, #0
 8000de0:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000de2:	230d      	movs	r3, #13
 8000de4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000de6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000dea:	4619      	mov	r1, r3
 8000dec:	4825      	ldr	r0, [pc, #148]	@ (8000e84 <MX_GPIO_Init+0x8cc>)
 8000dee:	f000 fcc1 	bl	8001774 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_SCL_Pin LCD_SDA_Pin */
  GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8000df2:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000df6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000df8:	2312      	movs	r3, #18
 8000dfa:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e00:	2303      	movs	r3, #3
 8000e02:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000e04:	2304      	movs	r3, #4
 8000e06:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000e08:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	481f      	ldr	r0, [pc, #124]	@ (8000e8c <MX_GPIO_Init+0x8d4>)
 8000e10:	f000 fcb0 	bl	8001774 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8000e14:	2328      	movs	r3, #40	@ 0x28
 8000e16:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e18:	2302      	movs	r3, #2
 8000e1a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e20:	2303      	movs	r3, #3
 8000e22:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000e24:	230a      	movs	r3, #10
 8000e26:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e28:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	4815      	ldr	r0, [pc, #84]	@ (8000e84 <MX_GPIO_Init+0x8cc>)
 8000e30:	f000 fca0 	bl	8001774 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D6_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8000e34:	2340      	movs	r3, #64	@ 0x40
 8000e36:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e38:	2302      	movs	r3, #2
 8000e3a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e40:	2300      	movs	r3, #0
 8000e42:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8000e44:	2309      	movs	r3, #9
 8000e46:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8000e48:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	480f      	ldr	r0, [pc, #60]	@ (8000e8c <MX_GPIO_Init+0x8d4>)
 8000e50:	f000 fc90 	bl	8001774 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8000e54:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000e58:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e5a:	2302      	movs	r3, #2
 8000e5c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e62:	2300      	movs	r3, #0
 8000e64:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e66:	2305      	movs	r3, #5
 8000e68:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e6a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e6e:	4619      	mov	r1, r3
 8000e70:	4809      	ldr	r0, [pc, #36]	@ (8000e98 <MX_GPIO_Init+0x8e0>)
 8000e72:	f000 fc7f 	bl	8001774 <HAL_GPIO_Init>

}
 8000e76:	bf00      	nop
 8000e78:	3740      	adds	r7, #64	@ 0x40
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	40022000 	.word	0x40022000
 8000e84:	40020000 	.word	0x40020000
 8000e88:	40020800 	.word	0x40020800
 8000e8c:	40021c00 	.word	0x40021c00
 8000e90:	40021800 	.word	0x40021800
 8000e94:	40021400 	.word	0x40021400
 8000e98:	40020400 	.word	0x40020400
 8000e9c:	40020c00 	.word	0x40020c00

08000ea0 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000ea4:	f3bf 8f4f 	dsb	sy
}
 8000ea8:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000eaa:	4b06      	ldr	r3, [pc, #24]	@ (8000ec4 <__NVIC_SystemReset+0x24>)
 8000eac:	68db      	ldr	r3, [r3, #12]
 8000eae:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000eb2:	4904      	ldr	r1, [pc, #16]	@ (8000ec4 <__NVIC_SystemReset+0x24>)
 8000eb4:	4b04      	ldr	r3, [pc, #16]	@ (8000ec8 <__NVIC_SystemReset+0x28>)
 8000eb6:	4313      	orrs	r3, r2
 8000eb8:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000eba:	f3bf 8f4f 	dsb	sy
}
 8000ebe:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000ec0:	bf00      	nop
 8000ec2:	e7fd      	b.n	8000ec0 <__NVIC_SystemReset+0x20>
 8000ec4:	e000ed00 	.word	0xe000ed00
 8000ec8:	05fa0004 	.word	0x05fa0004

08000ecc <__io_putchar>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
void MX_FREERTOS_Init(void);
/* USER CODE BEGIN PFP */
int __io_putchar(int chr)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)&chr, 1, HAL_MAX_DELAY);
 8000ed4:	1d39      	adds	r1, r7, #4
 8000ed6:	f04f 33ff 	mov.w	r3, #4294967295
 8000eda:	2201      	movs	r2, #1
 8000edc:	4803      	ldr	r0, [pc, #12]	@ (8000eec <__io_putchar+0x20>)
 8000ede:	f001 ff4f 	bl	8002d80 <HAL_UART_Transmit>
	return chr;
 8000ee2:	687b      	ldr	r3, [r7, #4]
}
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	3708      	adds	r7, #8
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	200002ec 	.word	0x200002ec

08000ef0 <taskGive>:
		printf("LED toggled\r\n");
		vTaskDelay(100 / portTICK_PERIOD_MS);
	}
}
void taskGive(void *pvParameters)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
	for (;;)
	{
		printf("taskGive: avant xSemaphoreGive()\r\n");
 8000ef8:	4810      	ldr	r0, [pc, #64]	@ (8000f3c <taskGive+0x4c>)
 8000efa:	f004 fe51 	bl	8005ba0 <puts>
		xSemaphoreGive(xSemaphore);
 8000efe:	4b10      	ldr	r3, [pc, #64]	@ (8000f40 <taskGive+0x50>)
 8000f00:	6818      	ldr	r0, [r3, #0]
 8000f02:	2300      	movs	r3, #0
 8000f04:	2200      	movs	r2, #0
 8000f06:	2100      	movs	r1, #0
 8000f08:	f002 fdf4 	bl	8003af4 <xQueueGenericSend>
		printf("taskGive: après xSemaphoreGive()\r\n");
 8000f0c:	480d      	ldr	r0, [pc, #52]	@ (8000f44 <taskGive+0x54>)
 8000f0e:	f004 fe47 	bl	8005ba0 <puts>

		vTaskDelay(pdMS_TO_TICKS(delay_ms));
 8000f12:	4b0d      	ldr	r3, [pc, #52]	@ (8000f48 <taskGive+0x58>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000f1a:	fb02 f303 	mul.w	r3, r2, r3
 8000f1e:	4a0b      	ldr	r2, [pc, #44]	@ (8000f4c <taskGive+0x5c>)
 8000f20:	fba2 2303 	umull	r2, r3, r2, r3
 8000f24:	099b      	lsrs	r3, r3, #6
 8000f26:	4618      	mov	r0, r3
 8000f28:	f003 faa8 	bl	800447c <vTaskDelay>

		// Incrémente le délai de 100ms à chaque tour
		delay_ms += 100;
 8000f2c:	4b06      	ldr	r3, [pc, #24]	@ (8000f48 <taskGive+0x58>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	3364      	adds	r3, #100	@ 0x64
 8000f32:	4a05      	ldr	r2, [pc, #20]	@ (8000f48 <taskGive+0x58>)
 8000f34:	6013      	str	r3, [r2, #0]
		printf("taskGive: avant xSemaphoreGive()\r\n");
 8000f36:	bf00      	nop
 8000f38:	e7de      	b.n	8000ef8 <taskGive+0x8>
 8000f3a:	bf00      	nop
 8000f3c:	08006334 	.word	0x08006334
 8000f40:	200002e4 	.word	0x200002e4
 8000f44:	08006358 	.word	0x08006358
 8000f48:	20000000 	.word	0x20000000
 8000f4c:	10624dd3 	.word	0x10624dd3

08000f50 <taskTake>:
	}
}

void taskTake(void *pvParameters)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
	for (;;)
	{
		printf("taskTake: en attente de sémaphore...\r\n");
 8000f58:	480a      	ldr	r0, [pc, #40]	@ (8000f84 <taskTake+0x34>)
 8000f5a:	f004 fe21 	bl	8005ba0 <puts>
		if (xSemaphoreTake(xSemaphore, pdMS_TO_TICKS(1000)) == pdTRUE)
 8000f5e:	4b0a      	ldr	r3, [pc, #40]	@ (8000f88 <taskTake+0x38>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000f66:	4618      	mov	r0, r3
 8000f68:	f002 fece 	bl	8003d08 <xQueueSemaphoreTake>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b01      	cmp	r3, #1
 8000f70:	d103      	bne.n	8000f7a <taskTake+0x2a>
		{
			printf("taskTake: sémaphore acquis !\r\n");
 8000f72:	4806      	ldr	r0, [pc, #24]	@ (8000f8c <taskTake+0x3c>)
 8000f74:	f004 fe14 	bl	8005ba0 <puts>
 8000f78:	e7ee      	b.n	8000f58 <taskTake+0x8>
		}
		else
		{
			printf("taskTake: Timeout! Sémaphore non acquis.\r\n");
 8000f7a:	4805      	ldr	r0, [pc, #20]	@ (8000f90 <taskTake+0x40>)
 8000f7c:	f004 fe10 	bl	8005ba0 <puts>
			// Reset software STM32
			NVIC_SystemReset();
 8000f80:	f7ff ff8e 	bl	8000ea0 <__NVIC_SystemReset>
 8000f84:	0800637c 	.word	0x0800637c
 8000f88:	200002e4 	.word	0x200002e4
 8000f8c:	080063a4 	.word	0x080063a4
 8000f90:	080063c4 	.word	0x080063c4

08000f94 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000f9a:	f000 faa8 	bl	80014ee <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000f9e:	f000 f84f 	bl	8001040 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000fa2:	f7ff fb09 	bl	80005b8 <MX_GPIO_Init>
	MX_USART1_UART_Init();
 8000fa6:	f000 f9c7 	bl	8001338 <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */
	//xTaskCreate(LedTask, "LED Task", 128, NULL, 1, NULL);
	// Création du sémaphore binaire
	xSemaphore = xSemaphoreCreateBinary();
 8000faa:	2203      	movs	r2, #3
 8000fac:	2100      	movs	r1, #0
 8000fae:	2001      	movs	r0, #1
 8000fb0:	f002 fd3e 	bl	8003a30 <xQueueGenericCreate>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	4a1b      	ldr	r2, [pc, #108]	@ (8001024 <main+0x90>)
 8000fb8:	6013      	str	r3, [r2, #0]
	if (xSemaphore == NULL) {
 8000fba:	4b1a      	ldr	r3, [pc, #104]	@ (8001024 <main+0x90>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d101      	bne.n	8000fc6 <main+0x32>
		Error_Handler(); // Erreur d'initialisation
 8000fc2:	f000 f8ad 	bl	8001120 <Error_Handler>
	}

	// Création des tâches avec priorités différentes
	xTaskCreate(taskGive, "Give", 128, NULL, 1, NULL);  // Priorité haute
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	9301      	str	r3, [sp, #4]
 8000fca:	2301      	movs	r3, #1
 8000fcc:	9300      	str	r3, [sp, #0]
 8000fce:	2300      	movs	r3, #0
 8000fd0:	2280      	movs	r2, #128	@ 0x80
 8000fd2:	4915      	ldr	r1, [pc, #84]	@ (8001028 <main+0x94>)
 8000fd4:	4815      	ldr	r0, [pc, #84]	@ (800102c <main+0x98>)
 8000fd6:	f003 f917 	bl	8004208 <xTaskCreate>
	xTaskCreate(taskTake, "Take", 128, NULL, 2, NULL);  // Priorité basse
 8000fda:	2300      	movs	r3, #0
 8000fdc:	9301      	str	r3, [sp, #4]
 8000fde:	2302      	movs	r3, #2
 8000fe0:	9300      	str	r3, [sp, #0]
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	2280      	movs	r2, #128	@ 0x80
 8000fe6:	4912      	ldr	r1, [pc, #72]	@ (8001030 <main+0x9c>)
 8000fe8:	4812      	ldr	r0, [pc, #72]	@ (8001034 <main+0xa0>)
 8000fea:	f003 f90d 	bl	8004208 <xTaskCreate>
	/* USER CODE END 2 */

	/* Call init function for freertos objects (in cmsis_os2.c) */
	MX_FREERTOS_Init();
 8000fee:	f7ff fabf 	bl	8000570 <MX_FREERTOS_Init>

	/* Start scheduler */
	osKernelStart();
 8000ff2:	f002 fb95 	bl	8003720 <osKernelStart>
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		//HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
		//HAL_Delay(100);
		if (HAL_GPIO_ReadPin(BUTTON_GPIO_Port, BUTTON_Pin) == GPIO_PIN_SET) {
 8000ff6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000ffa:	480f      	ldr	r0, [pc, #60]	@ (8001038 <main+0xa4>)
 8000ffc:	f000 fd66 	bl	8001acc <HAL_GPIO_ReadPin>
 8001000:	4603      	mov	r3, r0
 8001002:	2b01      	cmp	r3, #1
 8001004:	d105      	bne.n	8001012 <main+0x7e>
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);  // Allume la LED
 8001006:	2201      	movs	r2, #1
 8001008:	2102      	movs	r1, #2
 800100a:	480b      	ldr	r0, [pc, #44]	@ (8001038 <main+0xa4>)
 800100c:	f000 fd76 	bl	8001afc <HAL_GPIO_WritePin>
 8001010:	e004      	b.n	800101c <main+0x88>
		} else {
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);  // Éteint la LED
 8001012:	2200      	movs	r2, #0
 8001014:	2102      	movs	r1, #2
 8001016:	4808      	ldr	r0, [pc, #32]	@ (8001038 <main+0xa4>)
 8001018:	f000 fd70 	bl	8001afc <HAL_GPIO_WritePin>
		}
		printf("Test printf bien\r\n");
 800101c:	4807      	ldr	r0, [pc, #28]	@ (800103c <main+0xa8>)
 800101e:	f004 fdbf 	bl	8005ba0 <puts>
		if (HAL_GPIO_ReadPin(BUTTON_GPIO_Port, BUTTON_Pin) == GPIO_PIN_SET) {
 8001022:	e7e8      	b.n	8000ff6 <main+0x62>
 8001024:	200002e4 	.word	0x200002e4
 8001028:	080063f0 	.word	0x080063f0
 800102c:	08000ef1 	.word	0x08000ef1
 8001030:	080063f8 	.word	0x080063f8
 8001034:	08000f51 	.word	0x08000f51
 8001038:	40022000 	.word	0x40022000
 800103c:	08006400 	.word	0x08006400

08001040 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b094      	sub	sp, #80	@ 0x50
 8001044:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001046:	f107 0320 	add.w	r3, r7, #32
 800104a:	2230      	movs	r2, #48	@ 0x30
 800104c:	2100      	movs	r1, #0
 800104e:	4618      	mov	r0, r3
 8001050:	f004 fe86 	bl	8005d60 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001054:	f107 030c 	add.w	r3, r7, #12
 8001058:	2200      	movs	r2, #0
 800105a:	601a      	str	r2, [r3, #0]
 800105c:	605a      	str	r2, [r3, #4]
 800105e:	609a      	str	r2, [r3, #8]
 8001060:	60da      	str	r2, [r3, #12]
 8001062:	611a      	str	r2, [r3, #16]

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 8001064:	f000 fd64 	bl	8001b30 <HAL_PWR_EnableBkUpAccess>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001068:	4b2b      	ldr	r3, [pc, #172]	@ (8001118 <SystemClock_Config+0xd8>)
 800106a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800106c:	4a2a      	ldr	r2, [pc, #168]	@ (8001118 <SystemClock_Config+0xd8>)
 800106e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001072:	6413      	str	r3, [r2, #64]	@ 0x40
 8001074:	4b28      	ldr	r3, [pc, #160]	@ (8001118 <SystemClock_Config+0xd8>)
 8001076:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001078:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800107c:	60bb      	str	r3, [r7, #8]
 800107e:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001080:	4b26      	ldr	r3, [pc, #152]	@ (800111c <SystemClock_Config+0xdc>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a25      	ldr	r2, [pc, #148]	@ (800111c <SystemClock_Config+0xdc>)
 8001086:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800108a:	6013      	str	r3, [r2, #0]
 800108c:	4b23      	ldr	r3, [pc, #140]	@ (800111c <SystemClock_Config+0xdc>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001094:	607b      	str	r3, [r7, #4]
 8001096:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001098:	2301      	movs	r3, #1
 800109a:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800109c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80010a0:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010a2:	2302      	movs	r3, #2
 80010a4:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010a6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80010aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLM = 25;
 80010ac:	2319      	movs	r3, #25
 80010ae:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLN = 432;
 80010b0:	f44f 73d8 	mov.w	r3, #432	@ 0x1b0
 80010b4:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010b6:	2302      	movs	r3, #2
 80010b8:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLQ = 2;
 80010ba:	2302      	movs	r3, #2
 80010bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010be:	f107 0320 	add.w	r3, r7, #32
 80010c2:	4618      	mov	r0, r3
 80010c4:	f000 fd94 	bl	8001bf0 <HAL_RCC_OscConfig>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <SystemClock_Config+0x92>
	{
		Error_Handler();
 80010ce:	f000 f827 	bl	8001120 <Error_Handler>
	}

	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80010d2:	f000 fd3d 	bl	8001b50 <HAL_PWREx_EnableOverDrive>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d001      	beq.n	80010e0 <SystemClock_Config+0xa0>
	{
		Error_Handler();
 80010dc:	f000 f820 	bl	8001120 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010e0:	230f      	movs	r3, #15
 80010e2:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010e4:	2302      	movs	r3, #2
 80010e6:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010e8:	2300      	movs	r3, #0
 80010ea:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80010ec:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80010f0:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80010f2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010f6:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80010f8:	f107 030c 	add.w	r3, r7, #12
 80010fc:	2107      	movs	r1, #7
 80010fe:	4618      	mov	r0, r3
 8001100:	f001 f81a 	bl	8002138 <HAL_RCC_ClockConfig>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <SystemClock_Config+0xce>
	{
		Error_Handler();
 800110a:	f000 f809 	bl	8001120 <Error_Handler>
	}
}
 800110e:	bf00      	nop
 8001110:	3750      	adds	r7, #80	@ 0x50
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	40023800 	.word	0x40023800
 800111c:	40007000 	.word	0x40007000

08001120 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001124:	b672      	cpsid	i
}
 8001126:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001128:	bf00      	nop
 800112a:	e7fd      	b.n	8001128 <Error_Handler+0x8>

0800112c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001132:	4b11      	ldr	r3, [pc, #68]	@ (8001178 <HAL_MspInit+0x4c>)
 8001134:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001136:	4a10      	ldr	r2, [pc, #64]	@ (8001178 <HAL_MspInit+0x4c>)
 8001138:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800113c:	6413      	str	r3, [r2, #64]	@ 0x40
 800113e:	4b0e      	ldr	r3, [pc, #56]	@ (8001178 <HAL_MspInit+0x4c>)
 8001140:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001142:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001146:	607b      	str	r3, [r7, #4]
 8001148:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800114a:	4b0b      	ldr	r3, [pc, #44]	@ (8001178 <HAL_MspInit+0x4c>)
 800114c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800114e:	4a0a      	ldr	r2, [pc, #40]	@ (8001178 <HAL_MspInit+0x4c>)
 8001150:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001154:	6453      	str	r3, [r2, #68]	@ 0x44
 8001156:	4b08      	ldr	r3, [pc, #32]	@ (8001178 <HAL_MspInit+0x4c>)
 8001158:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800115a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800115e:	603b      	str	r3, [r7, #0]
 8001160:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001162:	2200      	movs	r2, #0
 8001164:	210f      	movs	r1, #15
 8001166:	f06f 0001 	mvn.w	r0, #1
 800116a:	f000 fada 	bl	8001722 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800116e:	bf00      	nop
 8001170:	3708      	adds	r7, #8
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	40023800 	.word	0x40023800

0800117c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001180:	bf00      	nop
 8001182:	e7fd      	b.n	8001180 <NMI_Handler+0x4>

08001184 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001188:	bf00      	nop
 800118a:	e7fd      	b.n	8001188 <HardFault_Handler+0x4>

0800118c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001190:	bf00      	nop
 8001192:	e7fd      	b.n	8001190 <MemManage_Handler+0x4>

08001194 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001198:	bf00      	nop
 800119a:	e7fd      	b.n	8001198 <BusFault_Handler+0x4>

0800119c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011a0:	bf00      	nop
 80011a2:	e7fd      	b.n	80011a0 <UsageFault_Handler+0x4>

080011a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011a8:	bf00      	nop
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr

080011b2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011b2:	b580      	push	{r7, lr}
 80011b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011b6:	f000 f9d7 	bl	8001568 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80011ba:	f003 fdb5 	bl	8004d28 <xTaskGetSchedulerState>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b01      	cmp	r3, #1
 80011c2:	d001      	beq.n	80011c8 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80011c4:	f004 f998 	bl	80054f8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011c8:	bf00      	nop
 80011ca:	bd80      	pop	{r7, pc}

080011cc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b086      	sub	sp, #24
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	60f8      	str	r0, [r7, #12]
 80011d4:	60b9      	str	r1, [r7, #8]
 80011d6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011d8:	2300      	movs	r3, #0
 80011da:	617b      	str	r3, [r7, #20]
 80011dc:	e00a      	b.n	80011f4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80011de:	f3af 8000 	nop.w
 80011e2:	4601      	mov	r1, r0
 80011e4:	68bb      	ldr	r3, [r7, #8]
 80011e6:	1c5a      	adds	r2, r3, #1
 80011e8:	60ba      	str	r2, [r7, #8]
 80011ea:	b2ca      	uxtb	r2, r1
 80011ec:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011ee:	697b      	ldr	r3, [r7, #20]
 80011f0:	3301      	adds	r3, #1
 80011f2:	617b      	str	r3, [r7, #20]
 80011f4:	697a      	ldr	r2, [r7, #20]
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	429a      	cmp	r2, r3
 80011fa:	dbf0      	blt.n	80011de <_read+0x12>
  }

  return len;
 80011fc:	687b      	ldr	r3, [r7, #4]
}
 80011fe:	4618      	mov	r0, r3
 8001200:	3718      	adds	r7, #24
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}

08001206 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001206:	b580      	push	{r7, lr}
 8001208:	b086      	sub	sp, #24
 800120a:	af00      	add	r7, sp, #0
 800120c:	60f8      	str	r0, [r7, #12]
 800120e:	60b9      	str	r1, [r7, #8]
 8001210:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001212:	2300      	movs	r3, #0
 8001214:	617b      	str	r3, [r7, #20]
 8001216:	e009      	b.n	800122c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001218:	68bb      	ldr	r3, [r7, #8]
 800121a:	1c5a      	adds	r2, r3, #1
 800121c:	60ba      	str	r2, [r7, #8]
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	4618      	mov	r0, r3
 8001222:	f7ff fe53 	bl	8000ecc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001226:	697b      	ldr	r3, [r7, #20]
 8001228:	3301      	adds	r3, #1
 800122a:	617b      	str	r3, [r7, #20]
 800122c:	697a      	ldr	r2, [r7, #20]
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	429a      	cmp	r2, r3
 8001232:	dbf1      	blt.n	8001218 <_write+0x12>
  }
  return len;
 8001234:	687b      	ldr	r3, [r7, #4]
}
 8001236:	4618      	mov	r0, r3
 8001238:	3718      	adds	r7, #24
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}

0800123e <_close>:

int _close(int file)
{
 800123e:	b480      	push	{r7}
 8001240:	b083      	sub	sp, #12
 8001242:	af00      	add	r7, sp, #0
 8001244:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001246:	f04f 33ff 	mov.w	r3, #4294967295
}
 800124a:	4618      	mov	r0, r3
 800124c:	370c      	adds	r7, #12
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr

08001256 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001256:	b480      	push	{r7}
 8001258:	b083      	sub	sp, #12
 800125a:	af00      	add	r7, sp, #0
 800125c:	6078      	str	r0, [r7, #4]
 800125e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001266:	605a      	str	r2, [r3, #4]
  return 0;
 8001268:	2300      	movs	r3, #0
}
 800126a:	4618      	mov	r0, r3
 800126c:	370c      	adds	r7, #12
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr

08001276 <_isatty>:

int _isatty(int file)
{
 8001276:	b480      	push	{r7}
 8001278:	b083      	sub	sp, #12
 800127a:	af00      	add	r7, sp, #0
 800127c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800127e:	2301      	movs	r3, #1
}
 8001280:	4618      	mov	r0, r3
 8001282:	370c      	adds	r7, #12
 8001284:	46bd      	mov	sp, r7
 8001286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128a:	4770      	bx	lr

0800128c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800128c:	b480      	push	{r7}
 800128e:	b085      	sub	sp, #20
 8001290:	af00      	add	r7, sp, #0
 8001292:	60f8      	str	r0, [r7, #12]
 8001294:	60b9      	str	r1, [r7, #8]
 8001296:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001298:	2300      	movs	r3, #0
}
 800129a:	4618      	mov	r0, r3
 800129c:	3714      	adds	r7, #20
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr
	...

080012a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b086      	sub	sp, #24
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012b0:	4a14      	ldr	r2, [pc, #80]	@ (8001304 <_sbrk+0x5c>)
 80012b2:	4b15      	ldr	r3, [pc, #84]	@ (8001308 <_sbrk+0x60>)
 80012b4:	1ad3      	subs	r3, r2, r3
 80012b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012b8:	697b      	ldr	r3, [r7, #20]
 80012ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012bc:	4b13      	ldr	r3, [pc, #76]	@ (800130c <_sbrk+0x64>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d102      	bne.n	80012ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012c4:	4b11      	ldr	r3, [pc, #68]	@ (800130c <_sbrk+0x64>)
 80012c6:	4a12      	ldr	r2, [pc, #72]	@ (8001310 <_sbrk+0x68>)
 80012c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012ca:	4b10      	ldr	r3, [pc, #64]	@ (800130c <_sbrk+0x64>)
 80012cc:	681a      	ldr	r2, [r3, #0]
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	4413      	add	r3, r2
 80012d2:	693a      	ldr	r2, [r7, #16]
 80012d4:	429a      	cmp	r2, r3
 80012d6:	d207      	bcs.n	80012e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012d8:	f004 fd90 	bl	8005dfc <__errno>
 80012dc:	4603      	mov	r3, r0
 80012de:	220c      	movs	r2, #12
 80012e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012e2:	f04f 33ff 	mov.w	r3, #4294967295
 80012e6:	e009      	b.n	80012fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012e8:	4b08      	ldr	r3, [pc, #32]	@ (800130c <_sbrk+0x64>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012ee:	4b07      	ldr	r3, [pc, #28]	@ (800130c <_sbrk+0x64>)
 80012f0:	681a      	ldr	r2, [r3, #0]
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	4413      	add	r3, r2
 80012f6:	4a05      	ldr	r2, [pc, #20]	@ (800130c <_sbrk+0x64>)
 80012f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012fa:	68fb      	ldr	r3, [r7, #12]
}
 80012fc:	4618      	mov	r0, r3
 80012fe:	3718      	adds	r7, #24
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}
 8001304:	20050000 	.word	0x20050000
 8001308:	00000400 	.word	0x00000400
 800130c:	200002e8 	.word	0x200002e8
 8001310:	20004210 	.word	0x20004210

08001314 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001318:	4b06      	ldr	r3, [pc, #24]	@ (8001334 <SystemInit+0x20>)
 800131a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800131e:	4a05      	ldr	r2, [pc, #20]	@ (8001334 <SystemInit+0x20>)
 8001320:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001324:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001328:	bf00      	nop
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr
 8001332:	bf00      	nop
 8001334:	e000ed00 	.word	0xe000ed00

08001338 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800133c:	4b14      	ldr	r3, [pc, #80]	@ (8001390 <MX_USART1_UART_Init+0x58>)
 800133e:	4a15      	ldr	r2, [pc, #84]	@ (8001394 <MX_USART1_UART_Init+0x5c>)
 8001340:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001342:	4b13      	ldr	r3, [pc, #76]	@ (8001390 <MX_USART1_UART_Init+0x58>)
 8001344:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001348:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800134a:	4b11      	ldr	r3, [pc, #68]	@ (8001390 <MX_USART1_UART_Init+0x58>)
 800134c:	2200      	movs	r2, #0
 800134e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001350:	4b0f      	ldr	r3, [pc, #60]	@ (8001390 <MX_USART1_UART_Init+0x58>)
 8001352:	2200      	movs	r2, #0
 8001354:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001356:	4b0e      	ldr	r3, [pc, #56]	@ (8001390 <MX_USART1_UART_Init+0x58>)
 8001358:	2200      	movs	r2, #0
 800135a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800135c:	4b0c      	ldr	r3, [pc, #48]	@ (8001390 <MX_USART1_UART_Init+0x58>)
 800135e:	220c      	movs	r2, #12
 8001360:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001362:	4b0b      	ldr	r3, [pc, #44]	@ (8001390 <MX_USART1_UART_Init+0x58>)
 8001364:	2200      	movs	r2, #0
 8001366:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001368:	4b09      	ldr	r3, [pc, #36]	@ (8001390 <MX_USART1_UART_Init+0x58>)
 800136a:	2200      	movs	r2, #0
 800136c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800136e:	4b08      	ldr	r3, [pc, #32]	@ (8001390 <MX_USART1_UART_Init+0x58>)
 8001370:	2200      	movs	r2, #0
 8001372:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001374:	4b06      	ldr	r3, [pc, #24]	@ (8001390 <MX_USART1_UART_Init+0x58>)
 8001376:	2200      	movs	r2, #0
 8001378:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800137a:	4805      	ldr	r0, [pc, #20]	@ (8001390 <MX_USART1_UART_Init+0x58>)
 800137c:	f001 fcb2 	bl	8002ce4 <HAL_UART_Init>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d001      	beq.n	800138a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001386:	f7ff fecb 	bl	8001120 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800138a:	bf00      	nop
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	200002ec 	.word	0x200002ec
 8001394:	40011000 	.word	0x40011000

08001398 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b0ac      	sub	sp, #176	@ 0xb0
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013a0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80013a4:	2200      	movs	r2, #0
 80013a6:	601a      	str	r2, [r3, #0]
 80013a8:	605a      	str	r2, [r3, #4]
 80013aa:	609a      	str	r2, [r3, #8]
 80013ac:	60da      	str	r2, [r3, #12]
 80013ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013b0:	f107 0318 	add.w	r3, r7, #24
 80013b4:	2284      	movs	r2, #132	@ 0x84
 80013b6:	2100      	movs	r1, #0
 80013b8:	4618      	mov	r0, r3
 80013ba:	f004 fcd1 	bl	8005d60 <memset>
  if(uartHandle->Instance==USART1)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4a32      	ldr	r2, [pc, #200]	@ (800148c <HAL_UART_MspInit+0xf4>)
 80013c4:	4293      	cmp	r3, r2
 80013c6:	d15c      	bne.n	8001482 <HAL_UART_MspInit+0xea>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80013c8:	2340      	movs	r3, #64	@ 0x40
 80013ca:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80013cc:	2300      	movs	r3, #0
 80013ce:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013d0:	f107 0318 	add.w	r3, r7, #24
 80013d4:	4618      	mov	r0, r3
 80013d6:	f001 f895 	bl	8002504 <HAL_RCCEx_PeriphCLKConfig>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d001      	beq.n	80013e4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80013e0:	f7ff fe9e 	bl	8001120 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80013e4:	4b2a      	ldr	r3, [pc, #168]	@ (8001490 <HAL_UART_MspInit+0xf8>)
 80013e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013e8:	4a29      	ldr	r2, [pc, #164]	@ (8001490 <HAL_UART_MspInit+0xf8>)
 80013ea:	f043 0310 	orr.w	r3, r3, #16
 80013ee:	6453      	str	r3, [r2, #68]	@ 0x44
 80013f0:	4b27      	ldr	r3, [pc, #156]	@ (8001490 <HAL_UART_MspInit+0xf8>)
 80013f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013f4:	f003 0310 	and.w	r3, r3, #16
 80013f8:	617b      	str	r3, [r7, #20]
 80013fa:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013fc:	4b24      	ldr	r3, [pc, #144]	@ (8001490 <HAL_UART_MspInit+0xf8>)
 80013fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001400:	4a23      	ldr	r2, [pc, #140]	@ (8001490 <HAL_UART_MspInit+0xf8>)
 8001402:	f043 0302 	orr.w	r3, r3, #2
 8001406:	6313      	str	r3, [r2, #48]	@ 0x30
 8001408:	4b21      	ldr	r3, [pc, #132]	@ (8001490 <HAL_UART_MspInit+0xf8>)
 800140a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800140c:	f003 0302 	and.w	r3, r3, #2
 8001410:	613b      	str	r3, [r7, #16]
 8001412:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001414:	4b1e      	ldr	r3, [pc, #120]	@ (8001490 <HAL_UART_MspInit+0xf8>)
 8001416:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001418:	4a1d      	ldr	r2, [pc, #116]	@ (8001490 <HAL_UART_MspInit+0xf8>)
 800141a:	f043 0301 	orr.w	r3, r3, #1
 800141e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001420:	4b1b      	ldr	r3, [pc, #108]	@ (8001490 <HAL_UART_MspInit+0xf8>)
 8001422:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001424:	f003 0301 	and.w	r3, r3, #1
 8001428:	60fb      	str	r3, [r7, #12]
 800142a:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 800142c:	2380      	movs	r3, #128	@ 0x80
 800142e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001432:	2302      	movs	r3, #2
 8001434:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001438:	2300      	movs	r3, #0
 800143a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800143e:	2300      	movs	r3, #0
 8001440:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001444:	2307      	movs	r3, #7
 8001446:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 800144a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800144e:	4619      	mov	r1, r3
 8001450:	4810      	ldr	r0, [pc, #64]	@ (8001494 <HAL_UART_MspInit+0xfc>)
 8001452:	f000 f98f 	bl	8001774 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8001456:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800145a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800145e:	2302      	movs	r3, #2
 8001460:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001464:	2300      	movs	r3, #0
 8001466:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800146a:	2300      	movs	r3, #0
 800146c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001470:	2307      	movs	r3, #7
 8001472:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8001476:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800147a:	4619      	mov	r1, r3
 800147c:	4806      	ldr	r0, [pc, #24]	@ (8001498 <HAL_UART_MspInit+0x100>)
 800147e:	f000 f979 	bl	8001774 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001482:	bf00      	nop
 8001484:	37b0      	adds	r7, #176	@ 0xb0
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	40011000 	.word	0x40011000
 8001490:	40023800 	.word	0x40023800
 8001494:	40020400 	.word	0x40020400
 8001498:	40020000 	.word	0x40020000

0800149c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800149c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80014d4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 80014a0:	f7ff ff38 	bl	8001314 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80014a4:	480c      	ldr	r0, [pc, #48]	@ (80014d8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80014a6:	490d      	ldr	r1, [pc, #52]	@ (80014dc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80014a8:	4a0d      	ldr	r2, [pc, #52]	@ (80014e0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80014aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014ac:	e002      	b.n	80014b4 <LoopCopyDataInit>

080014ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014b2:	3304      	adds	r3, #4

080014b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014b8:	d3f9      	bcc.n	80014ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014ba:	4a0a      	ldr	r2, [pc, #40]	@ (80014e4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80014bc:	4c0a      	ldr	r4, [pc, #40]	@ (80014e8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80014be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014c0:	e001      	b.n	80014c6 <LoopFillZerobss>

080014c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014c4:	3204      	adds	r2, #4

080014c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014c8:	d3fb      	bcc.n	80014c2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80014ca:	f004 fc9d 	bl	8005e08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014ce:	f7ff fd61 	bl	8000f94 <main>
  bx  lr    
 80014d2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80014d4:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80014d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014dc:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80014e0:	08006444 	.word	0x08006444
  ldr r2, =_sbss
 80014e4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80014e8:	20004210 	.word	0x20004210

080014ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014ec:	e7fe      	b.n	80014ec <ADC_IRQHandler>

080014ee <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014ee:	b580      	push	{r7, lr}
 80014f0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014f2:	2003      	movs	r0, #3
 80014f4:	f000 f90a 	bl	800170c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014f8:	200f      	movs	r0, #15
 80014fa:	f000 f805 	bl	8001508 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014fe:	f7ff fe15 	bl	800112c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001502:	2300      	movs	r3, #0
}
 8001504:	4618      	mov	r0, r3
 8001506:	bd80      	pop	{r7, pc}

08001508 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001510:	4b12      	ldr	r3, [pc, #72]	@ (800155c <HAL_InitTick+0x54>)
 8001512:	681a      	ldr	r2, [r3, #0]
 8001514:	4b12      	ldr	r3, [pc, #72]	@ (8001560 <HAL_InitTick+0x58>)
 8001516:	781b      	ldrb	r3, [r3, #0]
 8001518:	4619      	mov	r1, r3
 800151a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800151e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001522:	fbb2 f3f3 	udiv	r3, r2, r3
 8001526:	4618      	mov	r0, r3
 8001528:	f000 f917 	bl	800175a <HAL_SYSTICK_Config>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d001      	beq.n	8001536 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001532:	2301      	movs	r3, #1
 8001534:	e00e      	b.n	8001554 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	2b0f      	cmp	r3, #15
 800153a:	d80a      	bhi.n	8001552 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800153c:	2200      	movs	r2, #0
 800153e:	6879      	ldr	r1, [r7, #4]
 8001540:	f04f 30ff 	mov.w	r0, #4294967295
 8001544:	f000 f8ed 	bl	8001722 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001548:	4a06      	ldr	r2, [pc, #24]	@ (8001564 <HAL_InitTick+0x5c>)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800154e:	2300      	movs	r3, #0
 8001550:	e000      	b.n	8001554 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001552:	2301      	movs	r3, #1
}
 8001554:	4618      	mov	r0, r3
 8001556:	3708      	adds	r7, #8
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}
 800155c:	20000004 	.word	0x20000004
 8001560:	2000000c 	.word	0x2000000c
 8001564:	20000008 	.word	0x20000008

08001568 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001568:	b480      	push	{r7}
 800156a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800156c:	4b06      	ldr	r3, [pc, #24]	@ (8001588 <HAL_IncTick+0x20>)
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	461a      	mov	r2, r3
 8001572:	4b06      	ldr	r3, [pc, #24]	@ (800158c <HAL_IncTick+0x24>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4413      	add	r3, r2
 8001578:	4a04      	ldr	r2, [pc, #16]	@ (800158c <HAL_IncTick+0x24>)
 800157a:	6013      	str	r3, [r2, #0]
}
 800157c:	bf00      	nop
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr
 8001586:	bf00      	nop
 8001588:	2000000c 	.word	0x2000000c
 800158c:	20000374 	.word	0x20000374

08001590 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0
  return uwTick;
 8001594:	4b03      	ldr	r3, [pc, #12]	@ (80015a4 <HAL_GetTick+0x14>)
 8001596:	681b      	ldr	r3, [r3, #0]
}
 8001598:	4618      	mov	r0, r3
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr
 80015a2:	bf00      	nop
 80015a4:	20000374 	.word	0x20000374

080015a8 <__NVIC_SetPriorityGrouping>:
{
 80015a8:	b480      	push	{r7}
 80015aa:	b085      	sub	sp, #20
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	f003 0307 	and.w	r3, r3, #7
 80015b6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015b8:	4b0b      	ldr	r3, [pc, #44]	@ (80015e8 <__NVIC_SetPriorityGrouping+0x40>)
 80015ba:	68db      	ldr	r3, [r3, #12]
 80015bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015be:	68ba      	ldr	r2, [r7, #8]
 80015c0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80015c4:	4013      	ands	r3, r2
 80015c6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015cc:	68bb      	ldr	r3, [r7, #8]
 80015ce:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80015d0:	4b06      	ldr	r3, [pc, #24]	@ (80015ec <__NVIC_SetPriorityGrouping+0x44>)
 80015d2:	4313      	orrs	r3, r2
 80015d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015d6:	4a04      	ldr	r2, [pc, #16]	@ (80015e8 <__NVIC_SetPriorityGrouping+0x40>)
 80015d8:	68bb      	ldr	r3, [r7, #8]
 80015da:	60d3      	str	r3, [r2, #12]
}
 80015dc:	bf00      	nop
 80015de:	3714      	adds	r7, #20
 80015e0:	46bd      	mov	sp, r7
 80015e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e6:	4770      	bx	lr
 80015e8:	e000ed00 	.word	0xe000ed00
 80015ec:	05fa0000 	.word	0x05fa0000

080015f0 <__NVIC_GetPriorityGrouping>:
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015f4:	4b04      	ldr	r3, [pc, #16]	@ (8001608 <__NVIC_GetPriorityGrouping+0x18>)
 80015f6:	68db      	ldr	r3, [r3, #12]
 80015f8:	0a1b      	lsrs	r3, r3, #8
 80015fa:	f003 0307 	and.w	r3, r3, #7
}
 80015fe:	4618      	mov	r0, r3
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr
 8001608:	e000ed00 	.word	0xe000ed00

0800160c <__NVIC_SetPriority>:
{
 800160c:	b480      	push	{r7}
 800160e:	b083      	sub	sp, #12
 8001610:	af00      	add	r7, sp, #0
 8001612:	4603      	mov	r3, r0
 8001614:	6039      	str	r1, [r7, #0]
 8001616:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001618:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800161c:	2b00      	cmp	r3, #0
 800161e:	db0a      	blt.n	8001636 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	b2da      	uxtb	r2, r3
 8001624:	490c      	ldr	r1, [pc, #48]	@ (8001658 <__NVIC_SetPriority+0x4c>)
 8001626:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800162a:	0112      	lsls	r2, r2, #4
 800162c:	b2d2      	uxtb	r2, r2
 800162e:	440b      	add	r3, r1
 8001630:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001634:	e00a      	b.n	800164c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	b2da      	uxtb	r2, r3
 800163a:	4908      	ldr	r1, [pc, #32]	@ (800165c <__NVIC_SetPriority+0x50>)
 800163c:	79fb      	ldrb	r3, [r7, #7]
 800163e:	f003 030f 	and.w	r3, r3, #15
 8001642:	3b04      	subs	r3, #4
 8001644:	0112      	lsls	r2, r2, #4
 8001646:	b2d2      	uxtb	r2, r2
 8001648:	440b      	add	r3, r1
 800164a:	761a      	strb	r2, [r3, #24]
}
 800164c:	bf00      	nop
 800164e:	370c      	adds	r7, #12
 8001650:	46bd      	mov	sp, r7
 8001652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001656:	4770      	bx	lr
 8001658:	e000e100 	.word	0xe000e100
 800165c:	e000ed00 	.word	0xe000ed00

08001660 <NVIC_EncodePriority>:
{
 8001660:	b480      	push	{r7}
 8001662:	b089      	sub	sp, #36	@ 0x24
 8001664:	af00      	add	r7, sp, #0
 8001666:	60f8      	str	r0, [r7, #12]
 8001668:	60b9      	str	r1, [r7, #8]
 800166a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	f003 0307 	and.w	r3, r3, #7
 8001672:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001674:	69fb      	ldr	r3, [r7, #28]
 8001676:	f1c3 0307 	rsb	r3, r3, #7
 800167a:	2b04      	cmp	r3, #4
 800167c:	bf28      	it	cs
 800167e:	2304      	movcs	r3, #4
 8001680:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001682:	69fb      	ldr	r3, [r7, #28]
 8001684:	3304      	adds	r3, #4
 8001686:	2b06      	cmp	r3, #6
 8001688:	d902      	bls.n	8001690 <NVIC_EncodePriority+0x30>
 800168a:	69fb      	ldr	r3, [r7, #28]
 800168c:	3b03      	subs	r3, #3
 800168e:	e000      	b.n	8001692 <NVIC_EncodePriority+0x32>
 8001690:	2300      	movs	r3, #0
 8001692:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001694:	f04f 32ff 	mov.w	r2, #4294967295
 8001698:	69bb      	ldr	r3, [r7, #24]
 800169a:	fa02 f303 	lsl.w	r3, r2, r3
 800169e:	43da      	mvns	r2, r3
 80016a0:	68bb      	ldr	r3, [r7, #8]
 80016a2:	401a      	ands	r2, r3
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016a8:	f04f 31ff 	mov.w	r1, #4294967295
 80016ac:	697b      	ldr	r3, [r7, #20]
 80016ae:	fa01 f303 	lsl.w	r3, r1, r3
 80016b2:	43d9      	mvns	r1, r3
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016b8:	4313      	orrs	r3, r2
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	3724      	adds	r7, #36	@ 0x24
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr
	...

080016c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	3b01      	subs	r3, #1
 80016d4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80016d8:	d301      	bcc.n	80016de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016da:	2301      	movs	r3, #1
 80016dc:	e00f      	b.n	80016fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016de:	4a0a      	ldr	r2, [pc, #40]	@ (8001708 <SysTick_Config+0x40>)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	3b01      	subs	r3, #1
 80016e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016e6:	210f      	movs	r1, #15
 80016e8:	f04f 30ff 	mov.w	r0, #4294967295
 80016ec:	f7ff ff8e 	bl	800160c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016f0:	4b05      	ldr	r3, [pc, #20]	@ (8001708 <SysTick_Config+0x40>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016f6:	4b04      	ldr	r3, [pc, #16]	@ (8001708 <SysTick_Config+0x40>)
 80016f8:	2207      	movs	r2, #7
 80016fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016fc:	2300      	movs	r3, #0
}
 80016fe:	4618      	mov	r0, r3
 8001700:	3708      	adds	r7, #8
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	e000e010 	.word	0xe000e010

0800170c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b082      	sub	sp, #8
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001714:	6878      	ldr	r0, [r7, #4]
 8001716:	f7ff ff47 	bl	80015a8 <__NVIC_SetPriorityGrouping>
}
 800171a:	bf00      	nop
 800171c:	3708      	adds	r7, #8
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}

08001722 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001722:	b580      	push	{r7, lr}
 8001724:	b086      	sub	sp, #24
 8001726:	af00      	add	r7, sp, #0
 8001728:	4603      	mov	r3, r0
 800172a:	60b9      	str	r1, [r7, #8]
 800172c:	607a      	str	r2, [r7, #4]
 800172e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001730:	2300      	movs	r3, #0
 8001732:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001734:	f7ff ff5c 	bl	80015f0 <__NVIC_GetPriorityGrouping>
 8001738:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800173a:	687a      	ldr	r2, [r7, #4]
 800173c:	68b9      	ldr	r1, [r7, #8]
 800173e:	6978      	ldr	r0, [r7, #20]
 8001740:	f7ff ff8e 	bl	8001660 <NVIC_EncodePriority>
 8001744:	4602      	mov	r2, r0
 8001746:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800174a:	4611      	mov	r1, r2
 800174c:	4618      	mov	r0, r3
 800174e:	f7ff ff5d 	bl	800160c <__NVIC_SetPriority>
}
 8001752:	bf00      	nop
 8001754:	3718      	adds	r7, #24
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}

0800175a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800175a:	b580      	push	{r7, lr}
 800175c:	b082      	sub	sp, #8
 800175e:	af00      	add	r7, sp, #0
 8001760:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001762:	6878      	ldr	r0, [r7, #4]
 8001764:	f7ff ffb0 	bl	80016c8 <SysTick_Config>
 8001768:	4603      	mov	r3, r0
}
 800176a:	4618      	mov	r0, r3
 800176c:	3708      	adds	r7, #8
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
	...

08001774 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001774:	b480      	push	{r7}
 8001776:	b089      	sub	sp, #36	@ 0x24
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
 800177c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800177e:	2300      	movs	r3, #0
 8001780:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001782:	2300      	movs	r3, #0
 8001784:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001786:	2300      	movs	r3, #0
 8001788:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800178a:	2300      	movs	r3, #0
 800178c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 800178e:	2300      	movs	r3, #0
 8001790:	61fb      	str	r3, [r7, #28]
 8001792:	e175      	b.n	8001a80 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001794:	2201      	movs	r2, #1
 8001796:	69fb      	ldr	r3, [r7, #28]
 8001798:	fa02 f303 	lsl.w	r3, r2, r3
 800179c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	697a      	ldr	r2, [r7, #20]
 80017a4:	4013      	ands	r3, r2
 80017a6:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 80017a8:	693a      	ldr	r2, [r7, #16]
 80017aa:	697b      	ldr	r3, [r7, #20]
 80017ac:	429a      	cmp	r2, r3
 80017ae:	f040 8164 	bne.w	8001a7a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	f003 0303 	and.w	r3, r3, #3
 80017ba:	2b01      	cmp	r3, #1
 80017bc:	d005      	beq.n	80017ca <HAL_GPIO_Init+0x56>
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	f003 0303 	and.w	r3, r3, #3
 80017c6:	2b02      	cmp	r3, #2
 80017c8:	d130      	bne.n	800182c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	689b      	ldr	r3, [r3, #8]
 80017ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80017d0:	69fb      	ldr	r3, [r7, #28]
 80017d2:	005b      	lsls	r3, r3, #1
 80017d4:	2203      	movs	r2, #3
 80017d6:	fa02 f303 	lsl.w	r3, r2, r3
 80017da:	43db      	mvns	r3, r3
 80017dc:	69ba      	ldr	r2, [r7, #24]
 80017de:	4013      	ands	r3, r2
 80017e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	68da      	ldr	r2, [r3, #12]
 80017e6:	69fb      	ldr	r3, [r7, #28]
 80017e8:	005b      	lsls	r3, r3, #1
 80017ea:	fa02 f303 	lsl.w	r3, r2, r3
 80017ee:	69ba      	ldr	r2, [r7, #24]
 80017f0:	4313      	orrs	r3, r2
 80017f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	69ba      	ldr	r2, [r7, #24]
 80017f8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001800:	2201      	movs	r2, #1
 8001802:	69fb      	ldr	r3, [r7, #28]
 8001804:	fa02 f303 	lsl.w	r3, r2, r3
 8001808:	43db      	mvns	r3, r3
 800180a:	69ba      	ldr	r2, [r7, #24]
 800180c:	4013      	ands	r3, r2
 800180e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	091b      	lsrs	r3, r3, #4
 8001816:	f003 0201 	and.w	r2, r3, #1
 800181a:	69fb      	ldr	r3, [r7, #28]
 800181c:	fa02 f303 	lsl.w	r3, r2, r3
 8001820:	69ba      	ldr	r2, [r7, #24]
 8001822:	4313      	orrs	r3, r2
 8001824:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	69ba      	ldr	r2, [r7, #24]
 800182a:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	f003 0303 	and.w	r3, r3, #3
 8001834:	2b03      	cmp	r3, #3
 8001836:	d017      	beq.n	8001868 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	68db      	ldr	r3, [r3, #12]
 800183c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800183e:	69fb      	ldr	r3, [r7, #28]
 8001840:	005b      	lsls	r3, r3, #1
 8001842:	2203      	movs	r2, #3
 8001844:	fa02 f303 	lsl.w	r3, r2, r3
 8001848:	43db      	mvns	r3, r3
 800184a:	69ba      	ldr	r2, [r7, #24]
 800184c:	4013      	ands	r3, r2
 800184e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	689a      	ldr	r2, [r3, #8]
 8001854:	69fb      	ldr	r3, [r7, #28]
 8001856:	005b      	lsls	r3, r3, #1
 8001858:	fa02 f303 	lsl.w	r3, r2, r3
 800185c:	69ba      	ldr	r2, [r7, #24]
 800185e:	4313      	orrs	r3, r2
 8001860:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	69ba      	ldr	r2, [r7, #24]
 8001866:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	f003 0303 	and.w	r3, r3, #3
 8001870:	2b02      	cmp	r3, #2
 8001872:	d123      	bne.n	80018bc <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001874:	69fb      	ldr	r3, [r7, #28]
 8001876:	08da      	lsrs	r2, r3, #3
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	3208      	adds	r2, #8
 800187c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001880:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001882:	69fb      	ldr	r3, [r7, #28]
 8001884:	f003 0307 	and.w	r3, r3, #7
 8001888:	009b      	lsls	r3, r3, #2
 800188a:	220f      	movs	r2, #15
 800188c:	fa02 f303 	lsl.w	r3, r2, r3
 8001890:	43db      	mvns	r3, r3
 8001892:	69ba      	ldr	r2, [r7, #24]
 8001894:	4013      	ands	r3, r2
 8001896:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	691a      	ldr	r2, [r3, #16]
 800189c:	69fb      	ldr	r3, [r7, #28]
 800189e:	f003 0307 	and.w	r3, r3, #7
 80018a2:	009b      	lsls	r3, r3, #2
 80018a4:	fa02 f303 	lsl.w	r3, r2, r3
 80018a8:	69ba      	ldr	r2, [r7, #24]
 80018aa:	4313      	orrs	r3, r2
 80018ac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80018ae:	69fb      	ldr	r3, [r7, #28]
 80018b0:	08da      	lsrs	r2, r3, #3
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	3208      	adds	r2, #8
 80018b6:	69b9      	ldr	r1, [r7, #24]
 80018b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80018c2:	69fb      	ldr	r3, [r7, #28]
 80018c4:	005b      	lsls	r3, r3, #1
 80018c6:	2203      	movs	r2, #3
 80018c8:	fa02 f303 	lsl.w	r3, r2, r3
 80018cc:	43db      	mvns	r3, r3
 80018ce:	69ba      	ldr	r2, [r7, #24]
 80018d0:	4013      	ands	r3, r2
 80018d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	f003 0203 	and.w	r2, r3, #3
 80018dc:	69fb      	ldr	r3, [r7, #28]
 80018de:	005b      	lsls	r3, r3, #1
 80018e0:	fa02 f303 	lsl.w	r3, r2, r3
 80018e4:	69ba      	ldr	r2, [r7, #24]
 80018e6:	4313      	orrs	r3, r2
 80018e8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	69ba      	ldr	r2, [r7, #24]
 80018ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	f000 80be 	beq.w	8001a7a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018fe:	4b66      	ldr	r3, [pc, #408]	@ (8001a98 <HAL_GPIO_Init+0x324>)
 8001900:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001902:	4a65      	ldr	r2, [pc, #404]	@ (8001a98 <HAL_GPIO_Init+0x324>)
 8001904:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001908:	6453      	str	r3, [r2, #68]	@ 0x44
 800190a:	4b63      	ldr	r3, [pc, #396]	@ (8001a98 <HAL_GPIO_Init+0x324>)
 800190c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800190e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001912:	60fb      	str	r3, [r7, #12]
 8001914:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001916:	4a61      	ldr	r2, [pc, #388]	@ (8001a9c <HAL_GPIO_Init+0x328>)
 8001918:	69fb      	ldr	r3, [r7, #28]
 800191a:	089b      	lsrs	r3, r3, #2
 800191c:	3302      	adds	r3, #2
 800191e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001922:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001924:	69fb      	ldr	r3, [r7, #28]
 8001926:	f003 0303 	and.w	r3, r3, #3
 800192a:	009b      	lsls	r3, r3, #2
 800192c:	220f      	movs	r2, #15
 800192e:	fa02 f303 	lsl.w	r3, r2, r3
 8001932:	43db      	mvns	r3, r3
 8001934:	69ba      	ldr	r2, [r7, #24]
 8001936:	4013      	ands	r3, r2
 8001938:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	4a58      	ldr	r2, [pc, #352]	@ (8001aa0 <HAL_GPIO_Init+0x32c>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d037      	beq.n	80019b2 <HAL_GPIO_Init+0x23e>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	4a57      	ldr	r2, [pc, #348]	@ (8001aa4 <HAL_GPIO_Init+0x330>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d031      	beq.n	80019ae <HAL_GPIO_Init+0x23a>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	4a56      	ldr	r2, [pc, #344]	@ (8001aa8 <HAL_GPIO_Init+0x334>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d02b      	beq.n	80019aa <HAL_GPIO_Init+0x236>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	4a55      	ldr	r2, [pc, #340]	@ (8001aac <HAL_GPIO_Init+0x338>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d025      	beq.n	80019a6 <HAL_GPIO_Init+0x232>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	4a54      	ldr	r2, [pc, #336]	@ (8001ab0 <HAL_GPIO_Init+0x33c>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d01f      	beq.n	80019a2 <HAL_GPIO_Init+0x22e>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	4a53      	ldr	r2, [pc, #332]	@ (8001ab4 <HAL_GPIO_Init+0x340>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d019      	beq.n	800199e <HAL_GPIO_Init+0x22a>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	4a52      	ldr	r2, [pc, #328]	@ (8001ab8 <HAL_GPIO_Init+0x344>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d013      	beq.n	800199a <HAL_GPIO_Init+0x226>
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	4a51      	ldr	r2, [pc, #324]	@ (8001abc <HAL_GPIO_Init+0x348>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d00d      	beq.n	8001996 <HAL_GPIO_Init+0x222>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	4a50      	ldr	r2, [pc, #320]	@ (8001ac0 <HAL_GPIO_Init+0x34c>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d007      	beq.n	8001992 <HAL_GPIO_Init+0x21e>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	4a4f      	ldr	r2, [pc, #316]	@ (8001ac4 <HAL_GPIO_Init+0x350>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d101      	bne.n	800198e <HAL_GPIO_Init+0x21a>
 800198a:	2309      	movs	r3, #9
 800198c:	e012      	b.n	80019b4 <HAL_GPIO_Init+0x240>
 800198e:	230a      	movs	r3, #10
 8001990:	e010      	b.n	80019b4 <HAL_GPIO_Init+0x240>
 8001992:	2308      	movs	r3, #8
 8001994:	e00e      	b.n	80019b4 <HAL_GPIO_Init+0x240>
 8001996:	2307      	movs	r3, #7
 8001998:	e00c      	b.n	80019b4 <HAL_GPIO_Init+0x240>
 800199a:	2306      	movs	r3, #6
 800199c:	e00a      	b.n	80019b4 <HAL_GPIO_Init+0x240>
 800199e:	2305      	movs	r3, #5
 80019a0:	e008      	b.n	80019b4 <HAL_GPIO_Init+0x240>
 80019a2:	2304      	movs	r3, #4
 80019a4:	e006      	b.n	80019b4 <HAL_GPIO_Init+0x240>
 80019a6:	2303      	movs	r3, #3
 80019a8:	e004      	b.n	80019b4 <HAL_GPIO_Init+0x240>
 80019aa:	2302      	movs	r3, #2
 80019ac:	e002      	b.n	80019b4 <HAL_GPIO_Init+0x240>
 80019ae:	2301      	movs	r3, #1
 80019b0:	e000      	b.n	80019b4 <HAL_GPIO_Init+0x240>
 80019b2:	2300      	movs	r3, #0
 80019b4:	69fa      	ldr	r2, [r7, #28]
 80019b6:	f002 0203 	and.w	r2, r2, #3
 80019ba:	0092      	lsls	r2, r2, #2
 80019bc:	4093      	lsls	r3, r2
 80019be:	69ba      	ldr	r2, [r7, #24]
 80019c0:	4313      	orrs	r3, r2
 80019c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80019c4:	4935      	ldr	r1, [pc, #212]	@ (8001a9c <HAL_GPIO_Init+0x328>)
 80019c6:	69fb      	ldr	r3, [r7, #28]
 80019c8:	089b      	lsrs	r3, r3, #2
 80019ca:	3302      	adds	r3, #2
 80019cc:	69ba      	ldr	r2, [r7, #24]
 80019ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019d2:	4b3d      	ldr	r3, [pc, #244]	@ (8001ac8 <HAL_GPIO_Init+0x354>)
 80019d4:	689b      	ldr	r3, [r3, #8]
 80019d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019d8:	693b      	ldr	r3, [r7, #16]
 80019da:	43db      	mvns	r3, r3
 80019dc:	69ba      	ldr	r2, [r7, #24]
 80019de:	4013      	ands	r3, r2
 80019e0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d003      	beq.n	80019f6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80019ee:	69ba      	ldr	r2, [r7, #24]
 80019f0:	693b      	ldr	r3, [r7, #16]
 80019f2:	4313      	orrs	r3, r2
 80019f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80019f6:	4a34      	ldr	r2, [pc, #208]	@ (8001ac8 <HAL_GPIO_Init+0x354>)
 80019f8:	69bb      	ldr	r3, [r7, #24]
 80019fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80019fc:	4b32      	ldr	r3, [pc, #200]	@ (8001ac8 <HAL_GPIO_Init+0x354>)
 80019fe:	68db      	ldr	r3, [r3, #12]
 8001a00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a02:	693b      	ldr	r3, [r7, #16]
 8001a04:	43db      	mvns	r3, r3
 8001a06:	69ba      	ldr	r2, [r7, #24]
 8001a08:	4013      	ands	r3, r2
 8001a0a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d003      	beq.n	8001a20 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001a18:	69ba      	ldr	r2, [r7, #24]
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	4313      	orrs	r3, r2
 8001a1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a20:	4a29      	ldr	r2, [pc, #164]	@ (8001ac8 <HAL_GPIO_Init+0x354>)
 8001a22:	69bb      	ldr	r3, [r7, #24]
 8001a24:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001a26:	4b28      	ldr	r3, [pc, #160]	@ (8001ac8 <HAL_GPIO_Init+0x354>)
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a2c:	693b      	ldr	r3, [r7, #16]
 8001a2e:	43db      	mvns	r3, r3
 8001a30:	69ba      	ldr	r2, [r7, #24]
 8001a32:	4013      	ands	r3, r2
 8001a34:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d003      	beq.n	8001a4a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001a42:	69ba      	ldr	r2, [r7, #24]
 8001a44:	693b      	ldr	r3, [r7, #16]
 8001a46:	4313      	orrs	r3, r2
 8001a48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a4a:	4a1f      	ldr	r2, [pc, #124]	@ (8001ac8 <HAL_GPIO_Init+0x354>)
 8001a4c:	69bb      	ldr	r3, [r7, #24]
 8001a4e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a50:	4b1d      	ldr	r3, [pc, #116]	@ (8001ac8 <HAL_GPIO_Init+0x354>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	43db      	mvns	r3, r3
 8001a5a:	69ba      	ldr	r2, [r7, #24]
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d003      	beq.n	8001a74 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001a6c:	69ba      	ldr	r2, [r7, #24]
 8001a6e:	693b      	ldr	r3, [r7, #16]
 8001a70:	4313      	orrs	r3, r2
 8001a72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a74:	4a14      	ldr	r2, [pc, #80]	@ (8001ac8 <HAL_GPIO_Init+0x354>)
 8001a76:	69bb      	ldr	r3, [r7, #24]
 8001a78:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8001a7a:	69fb      	ldr	r3, [r7, #28]
 8001a7c:	3301      	adds	r3, #1
 8001a7e:	61fb      	str	r3, [r7, #28]
 8001a80:	69fb      	ldr	r3, [r7, #28]
 8001a82:	2b0f      	cmp	r3, #15
 8001a84:	f67f ae86 	bls.w	8001794 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001a88:	bf00      	nop
 8001a8a:	bf00      	nop
 8001a8c:	3724      	adds	r7, #36	@ 0x24
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr
 8001a96:	bf00      	nop
 8001a98:	40023800 	.word	0x40023800
 8001a9c:	40013800 	.word	0x40013800
 8001aa0:	40020000 	.word	0x40020000
 8001aa4:	40020400 	.word	0x40020400
 8001aa8:	40020800 	.word	0x40020800
 8001aac:	40020c00 	.word	0x40020c00
 8001ab0:	40021000 	.word	0x40021000
 8001ab4:	40021400 	.word	0x40021400
 8001ab8:	40021800 	.word	0x40021800
 8001abc:	40021c00 	.word	0x40021c00
 8001ac0:	40022000 	.word	0x40022000
 8001ac4:	40022400 	.word	0x40022400
 8001ac8:	40013c00 	.word	0x40013c00

08001acc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b085      	sub	sp, #20
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
 8001ad4:	460b      	mov	r3, r1
 8001ad6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	691a      	ldr	r2, [r3, #16]
 8001adc:	887b      	ldrh	r3, [r7, #2]
 8001ade:	4013      	ands	r3, r2
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d002      	beq.n	8001aea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	73fb      	strb	r3, [r7, #15]
 8001ae8:	e001      	b.n	8001aee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001aea:	2300      	movs	r3, #0
 8001aec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001aee:	7bfb      	ldrb	r3, [r7, #15]
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	3714      	adds	r7, #20
 8001af4:	46bd      	mov	sp, r7
 8001af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afa:	4770      	bx	lr

08001afc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b083      	sub	sp, #12
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
 8001b04:	460b      	mov	r3, r1
 8001b06:	807b      	strh	r3, [r7, #2]
 8001b08:	4613      	mov	r3, r2
 8001b0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b0c:	787b      	ldrb	r3, [r7, #1]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d003      	beq.n	8001b1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b12:	887a      	ldrh	r2, [r7, #2]
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001b18:	e003      	b.n	8001b22 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001b1a:	887b      	ldrh	r3, [r7, #2]
 8001b1c:	041a      	lsls	r2, r3, #16
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	619a      	str	r2, [r3, #24]
}
 8001b22:	bf00      	nop
 8001b24:	370c      	adds	r7, #12
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr
	...

08001b30 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001b30:	b480      	push	{r7}
 8001b32:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001b34:	4b05      	ldr	r3, [pc, #20]	@ (8001b4c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a04      	ldr	r2, [pc, #16]	@ (8001b4c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001b3a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b3e:	6013      	str	r3, [r2, #0]
}
 8001b40:	bf00      	nop
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr
 8001b4a:	bf00      	nop
 8001b4c:	40007000 	.word	0x40007000

08001b50 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b082      	sub	sp, #8
 8001b54:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001b56:	2300      	movs	r3, #0
 8001b58:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001b5a:	4b23      	ldr	r3, [pc, #140]	@ (8001be8 <HAL_PWREx_EnableOverDrive+0x98>)
 8001b5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b5e:	4a22      	ldr	r2, [pc, #136]	@ (8001be8 <HAL_PWREx_EnableOverDrive+0x98>)
 8001b60:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b64:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b66:	4b20      	ldr	r3, [pc, #128]	@ (8001be8 <HAL_PWREx_EnableOverDrive+0x98>)
 8001b68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b6e:	603b      	str	r3, [r7, #0]
 8001b70:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001b72:	4b1e      	ldr	r3, [pc, #120]	@ (8001bec <HAL_PWREx_EnableOverDrive+0x9c>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4a1d      	ldr	r2, [pc, #116]	@ (8001bec <HAL_PWREx_EnableOverDrive+0x9c>)
 8001b78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b7c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001b7e:	f7ff fd07 	bl	8001590 <HAL_GetTick>
 8001b82:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001b84:	e009      	b.n	8001b9a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001b86:	f7ff fd03 	bl	8001590 <HAL_GetTick>
 8001b8a:	4602      	mov	r2, r0
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	1ad3      	subs	r3, r2, r3
 8001b90:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001b94:	d901      	bls.n	8001b9a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001b96:	2303      	movs	r3, #3
 8001b98:	e022      	b.n	8001be0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001b9a:	4b14      	ldr	r3, [pc, #80]	@ (8001bec <HAL_PWREx_EnableOverDrive+0x9c>)
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ba2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ba6:	d1ee      	bne.n	8001b86 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001ba8:	4b10      	ldr	r3, [pc, #64]	@ (8001bec <HAL_PWREx_EnableOverDrive+0x9c>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a0f      	ldr	r2, [pc, #60]	@ (8001bec <HAL_PWREx_EnableOverDrive+0x9c>)
 8001bae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001bb2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001bb4:	f7ff fcec 	bl	8001590 <HAL_GetTick>
 8001bb8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001bba:	e009      	b.n	8001bd0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001bbc:	f7ff fce8 	bl	8001590 <HAL_GetTick>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	1ad3      	subs	r3, r2, r3
 8001bc6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001bca:	d901      	bls.n	8001bd0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001bcc:	2303      	movs	r3, #3
 8001bce:	e007      	b.n	8001be0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001bd0:	4b06      	ldr	r3, [pc, #24]	@ (8001bec <HAL_PWREx_EnableOverDrive+0x9c>)
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bd8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001bdc:	d1ee      	bne.n	8001bbc <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001bde:	2300      	movs	r3, #0
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	3708      	adds	r7, #8
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	40023800 	.word	0x40023800
 8001bec:	40007000 	.word	0x40007000

08001bf0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b086      	sub	sp, #24
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d101      	bne.n	8001c06 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
 8001c04:	e291      	b.n	800212a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f003 0301 	and.w	r3, r3, #1
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	f000 8087 	beq.w	8001d22 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c14:	4b96      	ldr	r3, [pc, #600]	@ (8001e70 <HAL_RCC_OscConfig+0x280>)
 8001c16:	689b      	ldr	r3, [r3, #8]
 8001c18:	f003 030c 	and.w	r3, r3, #12
 8001c1c:	2b04      	cmp	r3, #4
 8001c1e:	d00c      	beq.n	8001c3a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c20:	4b93      	ldr	r3, [pc, #588]	@ (8001e70 <HAL_RCC_OscConfig+0x280>)
 8001c22:	689b      	ldr	r3, [r3, #8]
 8001c24:	f003 030c 	and.w	r3, r3, #12
 8001c28:	2b08      	cmp	r3, #8
 8001c2a:	d112      	bne.n	8001c52 <HAL_RCC_OscConfig+0x62>
 8001c2c:	4b90      	ldr	r3, [pc, #576]	@ (8001e70 <HAL_RCC_OscConfig+0x280>)
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c34:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001c38:	d10b      	bne.n	8001c52 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c3a:	4b8d      	ldr	r3, [pc, #564]	@ (8001e70 <HAL_RCC_OscConfig+0x280>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d06c      	beq.n	8001d20 <HAL_RCC_OscConfig+0x130>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d168      	bne.n	8001d20 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e26b      	b.n	800212a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c5a:	d106      	bne.n	8001c6a <HAL_RCC_OscConfig+0x7a>
 8001c5c:	4b84      	ldr	r3, [pc, #528]	@ (8001e70 <HAL_RCC_OscConfig+0x280>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a83      	ldr	r2, [pc, #524]	@ (8001e70 <HAL_RCC_OscConfig+0x280>)
 8001c62:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c66:	6013      	str	r3, [r2, #0]
 8001c68:	e02e      	b.n	8001cc8 <HAL_RCC_OscConfig+0xd8>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d10c      	bne.n	8001c8c <HAL_RCC_OscConfig+0x9c>
 8001c72:	4b7f      	ldr	r3, [pc, #508]	@ (8001e70 <HAL_RCC_OscConfig+0x280>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4a7e      	ldr	r2, [pc, #504]	@ (8001e70 <HAL_RCC_OscConfig+0x280>)
 8001c78:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c7c:	6013      	str	r3, [r2, #0]
 8001c7e:	4b7c      	ldr	r3, [pc, #496]	@ (8001e70 <HAL_RCC_OscConfig+0x280>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4a7b      	ldr	r2, [pc, #492]	@ (8001e70 <HAL_RCC_OscConfig+0x280>)
 8001c84:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c88:	6013      	str	r3, [r2, #0]
 8001c8a:	e01d      	b.n	8001cc8 <HAL_RCC_OscConfig+0xd8>
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001c94:	d10c      	bne.n	8001cb0 <HAL_RCC_OscConfig+0xc0>
 8001c96:	4b76      	ldr	r3, [pc, #472]	@ (8001e70 <HAL_RCC_OscConfig+0x280>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4a75      	ldr	r2, [pc, #468]	@ (8001e70 <HAL_RCC_OscConfig+0x280>)
 8001c9c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ca0:	6013      	str	r3, [r2, #0]
 8001ca2:	4b73      	ldr	r3, [pc, #460]	@ (8001e70 <HAL_RCC_OscConfig+0x280>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4a72      	ldr	r2, [pc, #456]	@ (8001e70 <HAL_RCC_OscConfig+0x280>)
 8001ca8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001cac:	6013      	str	r3, [r2, #0]
 8001cae:	e00b      	b.n	8001cc8 <HAL_RCC_OscConfig+0xd8>
 8001cb0:	4b6f      	ldr	r3, [pc, #444]	@ (8001e70 <HAL_RCC_OscConfig+0x280>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a6e      	ldr	r2, [pc, #440]	@ (8001e70 <HAL_RCC_OscConfig+0x280>)
 8001cb6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001cba:	6013      	str	r3, [r2, #0]
 8001cbc:	4b6c      	ldr	r3, [pc, #432]	@ (8001e70 <HAL_RCC_OscConfig+0x280>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a6b      	ldr	r2, [pc, #428]	@ (8001e70 <HAL_RCC_OscConfig+0x280>)
 8001cc2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001cc6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d013      	beq.n	8001cf8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cd0:	f7ff fc5e 	bl	8001590 <HAL_GetTick>
 8001cd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cd6:	e008      	b.n	8001cea <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cd8:	f7ff fc5a 	bl	8001590 <HAL_GetTick>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	1ad3      	subs	r3, r2, r3
 8001ce2:	2b64      	cmp	r3, #100	@ 0x64
 8001ce4:	d901      	bls.n	8001cea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001ce6:	2303      	movs	r3, #3
 8001ce8:	e21f      	b.n	800212a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cea:	4b61      	ldr	r3, [pc, #388]	@ (8001e70 <HAL_RCC_OscConfig+0x280>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d0f0      	beq.n	8001cd8 <HAL_RCC_OscConfig+0xe8>
 8001cf6:	e014      	b.n	8001d22 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cf8:	f7ff fc4a 	bl	8001590 <HAL_GetTick>
 8001cfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cfe:	e008      	b.n	8001d12 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d00:	f7ff fc46 	bl	8001590 <HAL_GetTick>
 8001d04:	4602      	mov	r2, r0
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	1ad3      	subs	r3, r2, r3
 8001d0a:	2b64      	cmp	r3, #100	@ 0x64
 8001d0c:	d901      	bls.n	8001d12 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001d0e:	2303      	movs	r3, #3
 8001d10:	e20b      	b.n	800212a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d12:	4b57      	ldr	r3, [pc, #348]	@ (8001e70 <HAL_RCC_OscConfig+0x280>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d1f0      	bne.n	8001d00 <HAL_RCC_OscConfig+0x110>
 8001d1e:	e000      	b.n	8001d22 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f003 0302 	and.w	r3, r3, #2
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d069      	beq.n	8001e02 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d2e:	4b50      	ldr	r3, [pc, #320]	@ (8001e70 <HAL_RCC_OscConfig+0x280>)
 8001d30:	689b      	ldr	r3, [r3, #8]
 8001d32:	f003 030c 	and.w	r3, r3, #12
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d00b      	beq.n	8001d52 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d3a:	4b4d      	ldr	r3, [pc, #308]	@ (8001e70 <HAL_RCC_OscConfig+0x280>)
 8001d3c:	689b      	ldr	r3, [r3, #8]
 8001d3e:	f003 030c 	and.w	r3, r3, #12
 8001d42:	2b08      	cmp	r3, #8
 8001d44:	d11c      	bne.n	8001d80 <HAL_RCC_OscConfig+0x190>
 8001d46:	4b4a      	ldr	r3, [pc, #296]	@ (8001e70 <HAL_RCC_OscConfig+0x280>)
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d116      	bne.n	8001d80 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d52:	4b47      	ldr	r3, [pc, #284]	@ (8001e70 <HAL_RCC_OscConfig+0x280>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f003 0302 	and.w	r3, r3, #2
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d005      	beq.n	8001d6a <HAL_RCC_OscConfig+0x17a>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	68db      	ldr	r3, [r3, #12]
 8001d62:	2b01      	cmp	r3, #1
 8001d64:	d001      	beq.n	8001d6a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001d66:	2301      	movs	r3, #1
 8001d68:	e1df      	b.n	800212a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d6a:	4b41      	ldr	r3, [pc, #260]	@ (8001e70 <HAL_RCC_OscConfig+0x280>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	691b      	ldr	r3, [r3, #16]
 8001d76:	00db      	lsls	r3, r3, #3
 8001d78:	493d      	ldr	r1, [pc, #244]	@ (8001e70 <HAL_RCC_OscConfig+0x280>)
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d7e:	e040      	b.n	8001e02 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	68db      	ldr	r3, [r3, #12]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d023      	beq.n	8001dd0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d88:	4b39      	ldr	r3, [pc, #228]	@ (8001e70 <HAL_RCC_OscConfig+0x280>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a38      	ldr	r2, [pc, #224]	@ (8001e70 <HAL_RCC_OscConfig+0x280>)
 8001d8e:	f043 0301 	orr.w	r3, r3, #1
 8001d92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d94:	f7ff fbfc 	bl	8001590 <HAL_GetTick>
 8001d98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d9a:	e008      	b.n	8001dae <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d9c:	f7ff fbf8 	bl	8001590 <HAL_GetTick>
 8001da0:	4602      	mov	r2, r0
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	1ad3      	subs	r3, r2, r3
 8001da6:	2b02      	cmp	r3, #2
 8001da8:	d901      	bls.n	8001dae <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001daa:	2303      	movs	r3, #3
 8001dac:	e1bd      	b.n	800212a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dae:	4b30      	ldr	r3, [pc, #192]	@ (8001e70 <HAL_RCC_OscConfig+0x280>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f003 0302 	and.w	r3, r3, #2
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d0f0      	beq.n	8001d9c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dba:	4b2d      	ldr	r3, [pc, #180]	@ (8001e70 <HAL_RCC_OscConfig+0x280>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	691b      	ldr	r3, [r3, #16]
 8001dc6:	00db      	lsls	r3, r3, #3
 8001dc8:	4929      	ldr	r1, [pc, #164]	@ (8001e70 <HAL_RCC_OscConfig+0x280>)
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	600b      	str	r3, [r1, #0]
 8001dce:	e018      	b.n	8001e02 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001dd0:	4b27      	ldr	r3, [pc, #156]	@ (8001e70 <HAL_RCC_OscConfig+0x280>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a26      	ldr	r2, [pc, #152]	@ (8001e70 <HAL_RCC_OscConfig+0x280>)
 8001dd6:	f023 0301 	bic.w	r3, r3, #1
 8001dda:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ddc:	f7ff fbd8 	bl	8001590 <HAL_GetTick>
 8001de0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001de2:	e008      	b.n	8001df6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001de4:	f7ff fbd4 	bl	8001590 <HAL_GetTick>
 8001de8:	4602      	mov	r2, r0
 8001dea:	693b      	ldr	r3, [r7, #16]
 8001dec:	1ad3      	subs	r3, r2, r3
 8001dee:	2b02      	cmp	r3, #2
 8001df0:	d901      	bls.n	8001df6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001df2:	2303      	movs	r3, #3
 8001df4:	e199      	b.n	800212a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001df6:	4b1e      	ldr	r3, [pc, #120]	@ (8001e70 <HAL_RCC_OscConfig+0x280>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f003 0302 	and.w	r3, r3, #2
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d1f0      	bne.n	8001de4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f003 0308 	and.w	r3, r3, #8
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d038      	beq.n	8001e80 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	695b      	ldr	r3, [r3, #20]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d019      	beq.n	8001e4a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e16:	4b16      	ldr	r3, [pc, #88]	@ (8001e70 <HAL_RCC_OscConfig+0x280>)
 8001e18:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001e1a:	4a15      	ldr	r2, [pc, #84]	@ (8001e70 <HAL_RCC_OscConfig+0x280>)
 8001e1c:	f043 0301 	orr.w	r3, r3, #1
 8001e20:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e22:	f7ff fbb5 	bl	8001590 <HAL_GetTick>
 8001e26:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e28:	e008      	b.n	8001e3c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e2a:	f7ff fbb1 	bl	8001590 <HAL_GetTick>
 8001e2e:	4602      	mov	r2, r0
 8001e30:	693b      	ldr	r3, [r7, #16]
 8001e32:	1ad3      	subs	r3, r2, r3
 8001e34:	2b02      	cmp	r3, #2
 8001e36:	d901      	bls.n	8001e3c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001e38:	2303      	movs	r3, #3
 8001e3a:	e176      	b.n	800212a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e3c:	4b0c      	ldr	r3, [pc, #48]	@ (8001e70 <HAL_RCC_OscConfig+0x280>)
 8001e3e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001e40:	f003 0302 	and.w	r3, r3, #2
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d0f0      	beq.n	8001e2a <HAL_RCC_OscConfig+0x23a>
 8001e48:	e01a      	b.n	8001e80 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e4a:	4b09      	ldr	r3, [pc, #36]	@ (8001e70 <HAL_RCC_OscConfig+0x280>)
 8001e4c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001e4e:	4a08      	ldr	r2, [pc, #32]	@ (8001e70 <HAL_RCC_OscConfig+0x280>)
 8001e50:	f023 0301 	bic.w	r3, r3, #1
 8001e54:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e56:	f7ff fb9b 	bl	8001590 <HAL_GetTick>
 8001e5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e5c:	e00a      	b.n	8001e74 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e5e:	f7ff fb97 	bl	8001590 <HAL_GetTick>
 8001e62:	4602      	mov	r2, r0
 8001e64:	693b      	ldr	r3, [r7, #16]
 8001e66:	1ad3      	subs	r3, r2, r3
 8001e68:	2b02      	cmp	r3, #2
 8001e6a:	d903      	bls.n	8001e74 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001e6c:	2303      	movs	r3, #3
 8001e6e:	e15c      	b.n	800212a <HAL_RCC_OscConfig+0x53a>
 8001e70:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e74:	4b91      	ldr	r3, [pc, #580]	@ (80020bc <HAL_RCC_OscConfig+0x4cc>)
 8001e76:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001e78:	f003 0302 	and.w	r3, r3, #2
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d1ee      	bne.n	8001e5e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f003 0304 	and.w	r3, r3, #4
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	f000 80a4 	beq.w	8001fd6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e8e:	4b8b      	ldr	r3, [pc, #556]	@ (80020bc <HAL_RCC_OscConfig+0x4cc>)
 8001e90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d10d      	bne.n	8001eb6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e9a:	4b88      	ldr	r3, [pc, #544]	@ (80020bc <HAL_RCC_OscConfig+0x4cc>)
 8001e9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e9e:	4a87      	ldr	r2, [pc, #540]	@ (80020bc <HAL_RCC_OscConfig+0x4cc>)
 8001ea0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ea4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ea6:	4b85      	ldr	r3, [pc, #532]	@ (80020bc <HAL_RCC_OscConfig+0x4cc>)
 8001ea8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eaa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001eae:	60bb      	str	r3, [r7, #8]
 8001eb0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001eb6:	4b82      	ldr	r3, [pc, #520]	@ (80020c0 <HAL_RCC_OscConfig+0x4d0>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d118      	bne.n	8001ef4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001ec2:	4b7f      	ldr	r3, [pc, #508]	@ (80020c0 <HAL_RCC_OscConfig+0x4d0>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4a7e      	ldr	r2, [pc, #504]	@ (80020c0 <HAL_RCC_OscConfig+0x4d0>)
 8001ec8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ecc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ece:	f7ff fb5f 	bl	8001590 <HAL_GetTick>
 8001ed2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ed4:	e008      	b.n	8001ee8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ed6:	f7ff fb5b 	bl	8001590 <HAL_GetTick>
 8001eda:	4602      	mov	r2, r0
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	1ad3      	subs	r3, r2, r3
 8001ee0:	2b64      	cmp	r3, #100	@ 0x64
 8001ee2:	d901      	bls.n	8001ee8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001ee4:	2303      	movs	r3, #3
 8001ee6:	e120      	b.n	800212a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ee8:	4b75      	ldr	r3, [pc, #468]	@ (80020c0 <HAL_RCC_OscConfig+0x4d0>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d0f0      	beq.n	8001ed6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	689b      	ldr	r3, [r3, #8]
 8001ef8:	2b01      	cmp	r3, #1
 8001efa:	d106      	bne.n	8001f0a <HAL_RCC_OscConfig+0x31a>
 8001efc:	4b6f      	ldr	r3, [pc, #444]	@ (80020bc <HAL_RCC_OscConfig+0x4cc>)
 8001efe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f00:	4a6e      	ldr	r2, [pc, #440]	@ (80020bc <HAL_RCC_OscConfig+0x4cc>)
 8001f02:	f043 0301 	orr.w	r3, r3, #1
 8001f06:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f08:	e02d      	b.n	8001f66 <HAL_RCC_OscConfig+0x376>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	689b      	ldr	r3, [r3, #8]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d10c      	bne.n	8001f2c <HAL_RCC_OscConfig+0x33c>
 8001f12:	4b6a      	ldr	r3, [pc, #424]	@ (80020bc <HAL_RCC_OscConfig+0x4cc>)
 8001f14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f16:	4a69      	ldr	r2, [pc, #420]	@ (80020bc <HAL_RCC_OscConfig+0x4cc>)
 8001f18:	f023 0301 	bic.w	r3, r3, #1
 8001f1c:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f1e:	4b67      	ldr	r3, [pc, #412]	@ (80020bc <HAL_RCC_OscConfig+0x4cc>)
 8001f20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f22:	4a66      	ldr	r2, [pc, #408]	@ (80020bc <HAL_RCC_OscConfig+0x4cc>)
 8001f24:	f023 0304 	bic.w	r3, r3, #4
 8001f28:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f2a:	e01c      	b.n	8001f66 <HAL_RCC_OscConfig+0x376>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	689b      	ldr	r3, [r3, #8]
 8001f30:	2b05      	cmp	r3, #5
 8001f32:	d10c      	bne.n	8001f4e <HAL_RCC_OscConfig+0x35e>
 8001f34:	4b61      	ldr	r3, [pc, #388]	@ (80020bc <HAL_RCC_OscConfig+0x4cc>)
 8001f36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f38:	4a60      	ldr	r2, [pc, #384]	@ (80020bc <HAL_RCC_OscConfig+0x4cc>)
 8001f3a:	f043 0304 	orr.w	r3, r3, #4
 8001f3e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f40:	4b5e      	ldr	r3, [pc, #376]	@ (80020bc <HAL_RCC_OscConfig+0x4cc>)
 8001f42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f44:	4a5d      	ldr	r2, [pc, #372]	@ (80020bc <HAL_RCC_OscConfig+0x4cc>)
 8001f46:	f043 0301 	orr.w	r3, r3, #1
 8001f4a:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f4c:	e00b      	b.n	8001f66 <HAL_RCC_OscConfig+0x376>
 8001f4e:	4b5b      	ldr	r3, [pc, #364]	@ (80020bc <HAL_RCC_OscConfig+0x4cc>)
 8001f50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f52:	4a5a      	ldr	r2, [pc, #360]	@ (80020bc <HAL_RCC_OscConfig+0x4cc>)
 8001f54:	f023 0301 	bic.w	r3, r3, #1
 8001f58:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f5a:	4b58      	ldr	r3, [pc, #352]	@ (80020bc <HAL_RCC_OscConfig+0x4cc>)
 8001f5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f5e:	4a57      	ldr	r2, [pc, #348]	@ (80020bc <HAL_RCC_OscConfig+0x4cc>)
 8001f60:	f023 0304 	bic.w	r3, r3, #4
 8001f64:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	689b      	ldr	r3, [r3, #8]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d015      	beq.n	8001f9a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f6e:	f7ff fb0f 	bl	8001590 <HAL_GetTick>
 8001f72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f74:	e00a      	b.n	8001f8c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f76:	f7ff fb0b 	bl	8001590 <HAL_GetTick>
 8001f7a:	4602      	mov	r2, r0
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	1ad3      	subs	r3, r2, r3
 8001f80:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d901      	bls.n	8001f8c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001f88:	2303      	movs	r3, #3
 8001f8a:	e0ce      	b.n	800212a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f8c:	4b4b      	ldr	r3, [pc, #300]	@ (80020bc <HAL_RCC_OscConfig+0x4cc>)
 8001f8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f90:	f003 0302 	and.w	r3, r3, #2
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d0ee      	beq.n	8001f76 <HAL_RCC_OscConfig+0x386>
 8001f98:	e014      	b.n	8001fc4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f9a:	f7ff faf9 	bl	8001590 <HAL_GetTick>
 8001f9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fa0:	e00a      	b.n	8001fb8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fa2:	f7ff faf5 	bl	8001590 <HAL_GetTick>
 8001fa6:	4602      	mov	r2, r0
 8001fa8:	693b      	ldr	r3, [r7, #16]
 8001faa:	1ad3      	subs	r3, r2, r3
 8001fac:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d901      	bls.n	8001fb8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001fb4:	2303      	movs	r3, #3
 8001fb6:	e0b8      	b.n	800212a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fb8:	4b40      	ldr	r3, [pc, #256]	@ (80020bc <HAL_RCC_OscConfig+0x4cc>)
 8001fba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fbc:	f003 0302 	and.w	r3, r3, #2
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d1ee      	bne.n	8001fa2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001fc4:	7dfb      	ldrb	r3, [r7, #23]
 8001fc6:	2b01      	cmp	r3, #1
 8001fc8:	d105      	bne.n	8001fd6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fca:	4b3c      	ldr	r3, [pc, #240]	@ (80020bc <HAL_RCC_OscConfig+0x4cc>)
 8001fcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fce:	4a3b      	ldr	r2, [pc, #236]	@ (80020bc <HAL_RCC_OscConfig+0x4cc>)
 8001fd0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001fd4:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	699b      	ldr	r3, [r3, #24]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	f000 80a4 	beq.w	8002128 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001fe0:	4b36      	ldr	r3, [pc, #216]	@ (80020bc <HAL_RCC_OscConfig+0x4cc>)
 8001fe2:	689b      	ldr	r3, [r3, #8]
 8001fe4:	f003 030c 	and.w	r3, r3, #12
 8001fe8:	2b08      	cmp	r3, #8
 8001fea:	d06b      	beq.n	80020c4 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	699b      	ldr	r3, [r3, #24]
 8001ff0:	2b02      	cmp	r3, #2
 8001ff2:	d149      	bne.n	8002088 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ff4:	4b31      	ldr	r3, [pc, #196]	@ (80020bc <HAL_RCC_OscConfig+0x4cc>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a30      	ldr	r2, [pc, #192]	@ (80020bc <HAL_RCC_OscConfig+0x4cc>)
 8001ffa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001ffe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002000:	f7ff fac6 	bl	8001590 <HAL_GetTick>
 8002004:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002006:	e008      	b.n	800201a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002008:	f7ff fac2 	bl	8001590 <HAL_GetTick>
 800200c:	4602      	mov	r2, r0
 800200e:	693b      	ldr	r3, [r7, #16]
 8002010:	1ad3      	subs	r3, r2, r3
 8002012:	2b02      	cmp	r3, #2
 8002014:	d901      	bls.n	800201a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002016:	2303      	movs	r3, #3
 8002018:	e087      	b.n	800212a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800201a:	4b28      	ldr	r3, [pc, #160]	@ (80020bc <HAL_RCC_OscConfig+0x4cc>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002022:	2b00      	cmp	r3, #0
 8002024:	d1f0      	bne.n	8002008 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	69da      	ldr	r2, [r3, #28]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6a1b      	ldr	r3, [r3, #32]
 800202e:	431a      	orrs	r2, r3
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002034:	019b      	lsls	r3, r3, #6
 8002036:	431a      	orrs	r2, r3
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800203c:	085b      	lsrs	r3, r3, #1
 800203e:	3b01      	subs	r3, #1
 8002040:	041b      	lsls	r3, r3, #16
 8002042:	431a      	orrs	r2, r3
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002048:	061b      	lsls	r3, r3, #24
 800204a:	4313      	orrs	r3, r2
 800204c:	4a1b      	ldr	r2, [pc, #108]	@ (80020bc <HAL_RCC_OscConfig+0x4cc>)
 800204e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002052:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002054:	4b19      	ldr	r3, [pc, #100]	@ (80020bc <HAL_RCC_OscConfig+0x4cc>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a18      	ldr	r2, [pc, #96]	@ (80020bc <HAL_RCC_OscConfig+0x4cc>)
 800205a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800205e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002060:	f7ff fa96 	bl	8001590 <HAL_GetTick>
 8002064:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002066:	e008      	b.n	800207a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002068:	f7ff fa92 	bl	8001590 <HAL_GetTick>
 800206c:	4602      	mov	r2, r0
 800206e:	693b      	ldr	r3, [r7, #16]
 8002070:	1ad3      	subs	r3, r2, r3
 8002072:	2b02      	cmp	r3, #2
 8002074:	d901      	bls.n	800207a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002076:	2303      	movs	r3, #3
 8002078:	e057      	b.n	800212a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800207a:	4b10      	ldr	r3, [pc, #64]	@ (80020bc <HAL_RCC_OscConfig+0x4cc>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002082:	2b00      	cmp	r3, #0
 8002084:	d0f0      	beq.n	8002068 <HAL_RCC_OscConfig+0x478>
 8002086:	e04f      	b.n	8002128 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002088:	4b0c      	ldr	r3, [pc, #48]	@ (80020bc <HAL_RCC_OscConfig+0x4cc>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a0b      	ldr	r2, [pc, #44]	@ (80020bc <HAL_RCC_OscConfig+0x4cc>)
 800208e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002092:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002094:	f7ff fa7c 	bl	8001590 <HAL_GetTick>
 8002098:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800209a:	e008      	b.n	80020ae <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800209c:	f7ff fa78 	bl	8001590 <HAL_GetTick>
 80020a0:	4602      	mov	r2, r0
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	1ad3      	subs	r3, r2, r3
 80020a6:	2b02      	cmp	r3, #2
 80020a8:	d901      	bls.n	80020ae <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80020aa:	2303      	movs	r3, #3
 80020ac:	e03d      	b.n	800212a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020ae:	4b03      	ldr	r3, [pc, #12]	@ (80020bc <HAL_RCC_OscConfig+0x4cc>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d1f0      	bne.n	800209c <HAL_RCC_OscConfig+0x4ac>
 80020ba:	e035      	b.n	8002128 <HAL_RCC_OscConfig+0x538>
 80020bc:	40023800 	.word	0x40023800
 80020c0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80020c4:	4b1b      	ldr	r3, [pc, #108]	@ (8002134 <HAL_RCC_OscConfig+0x544>)
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	699b      	ldr	r3, [r3, #24]
 80020ce:	2b01      	cmp	r3, #1
 80020d0:	d028      	beq.n	8002124 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80020dc:	429a      	cmp	r2, r3
 80020de:	d121      	bne.n	8002124 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020ea:	429a      	cmp	r2, r3
 80020ec:	d11a      	bne.n	8002124 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80020ee:	68fa      	ldr	r2, [r7, #12]
 80020f0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80020f4:	4013      	ands	r3, r2
 80020f6:	687a      	ldr	r2, [r7, #4]
 80020f8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80020fa:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d111      	bne.n	8002124 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800210a:	085b      	lsrs	r3, r3, #1
 800210c:	3b01      	subs	r3, #1
 800210e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002110:	429a      	cmp	r2, r3
 8002112:	d107      	bne.n	8002124 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800211e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002120:	429a      	cmp	r2, r3
 8002122:	d001      	beq.n	8002128 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002124:	2301      	movs	r3, #1
 8002126:	e000      	b.n	800212a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002128:	2300      	movs	r3, #0
}
 800212a:	4618      	mov	r0, r3
 800212c:	3718      	adds	r7, #24
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}
 8002132:	bf00      	nop
 8002134:	40023800 	.word	0x40023800

08002138 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b084      	sub	sp, #16
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
 8002140:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002142:	2300      	movs	r3, #0
 8002144:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d101      	bne.n	8002150 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800214c:	2301      	movs	r3, #1
 800214e:	e0d0      	b.n	80022f2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002150:	4b6a      	ldr	r3, [pc, #424]	@ (80022fc <HAL_RCC_ClockConfig+0x1c4>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f003 030f 	and.w	r3, r3, #15
 8002158:	683a      	ldr	r2, [r7, #0]
 800215a:	429a      	cmp	r2, r3
 800215c:	d910      	bls.n	8002180 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800215e:	4b67      	ldr	r3, [pc, #412]	@ (80022fc <HAL_RCC_ClockConfig+0x1c4>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f023 020f 	bic.w	r2, r3, #15
 8002166:	4965      	ldr	r1, [pc, #404]	@ (80022fc <HAL_RCC_ClockConfig+0x1c4>)
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	4313      	orrs	r3, r2
 800216c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800216e:	4b63      	ldr	r3, [pc, #396]	@ (80022fc <HAL_RCC_ClockConfig+0x1c4>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f003 030f 	and.w	r3, r3, #15
 8002176:	683a      	ldr	r2, [r7, #0]
 8002178:	429a      	cmp	r2, r3
 800217a:	d001      	beq.n	8002180 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800217c:	2301      	movs	r3, #1
 800217e:	e0b8      	b.n	80022f2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f003 0302 	and.w	r3, r3, #2
 8002188:	2b00      	cmp	r3, #0
 800218a:	d020      	beq.n	80021ce <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f003 0304 	and.w	r3, r3, #4
 8002194:	2b00      	cmp	r3, #0
 8002196:	d005      	beq.n	80021a4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002198:	4b59      	ldr	r3, [pc, #356]	@ (8002300 <HAL_RCC_ClockConfig+0x1c8>)
 800219a:	689b      	ldr	r3, [r3, #8]
 800219c:	4a58      	ldr	r2, [pc, #352]	@ (8002300 <HAL_RCC_ClockConfig+0x1c8>)
 800219e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80021a2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f003 0308 	and.w	r3, r3, #8
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d005      	beq.n	80021bc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80021b0:	4b53      	ldr	r3, [pc, #332]	@ (8002300 <HAL_RCC_ClockConfig+0x1c8>)
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	4a52      	ldr	r2, [pc, #328]	@ (8002300 <HAL_RCC_ClockConfig+0x1c8>)
 80021b6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80021ba:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021bc:	4b50      	ldr	r3, [pc, #320]	@ (8002300 <HAL_RCC_ClockConfig+0x1c8>)
 80021be:	689b      	ldr	r3, [r3, #8]
 80021c0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	689b      	ldr	r3, [r3, #8]
 80021c8:	494d      	ldr	r1, [pc, #308]	@ (8002300 <HAL_RCC_ClockConfig+0x1c8>)
 80021ca:	4313      	orrs	r3, r2
 80021cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 0301 	and.w	r3, r3, #1
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d040      	beq.n	800225c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	2b01      	cmp	r3, #1
 80021e0:	d107      	bne.n	80021f2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021e2:	4b47      	ldr	r3, [pc, #284]	@ (8002300 <HAL_RCC_ClockConfig+0x1c8>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d115      	bne.n	800221a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	e07f      	b.n	80022f2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	2b02      	cmp	r3, #2
 80021f8:	d107      	bne.n	800220a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021fa:	4b41      	ldr	r3, [pc, #260]	@ (8002300 <HAL_RCC_ClockConfig+0x1c8>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002202:	2b00      	cmp	r3, #0
 8002204:	d109      	bne.n	800221a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	e073      	b.n	80022f2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800220a:	4b3d      	ldr	r3, [pc, #244]	@ (8002300 <HAL_RCC_ClockConfig+0x1c8>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f003 0302 	and.w	r3, r3, #2
 8002212:	2b00      	cmp	r3, #0
 8002214:	d101      	bne.n	800221a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	e06b      	b.n	80022f2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800221a:	4b39      	ldr	r3, [pc, #228]	@ (8002300 <HAL_RCC_ClockConfig+0x1c8>)
 800221c:	689b      	ldr	r3, [r3, #8]
 800221e:	f023 0203 	bic.w	r2, r3, #3
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	4936      	ldr	r1, [pc, #216]	@ (8002300 <HAL_RCC_ClockConfig+0x1c8>)
 8002228:	4313      	orrs	r3, r2
 800222a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800222c:	f7ff f9b0 	bl	8001590 <HAL_GetTick>
 8002230:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002232:	e00a      	b.n	800224a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002234:	f7ff f9ac 	bl	8001590 <HAL_GetTick>
 8002238:	4602      	mov	r2, r0
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	1ad3      	subs	r3, r2, r3
 800223e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002242:	4293      	cmp	r3, r2
 8002244:	d901      	bls.n	800224a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002246:	2303      	movs	r3, #3
 8002248:	e053      	b.n	80022f2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800224a:	4b2d      	ldr	r3, [pc, #180]	@ (8002300 <HAL_RCC_ClockConfig+0x1c8>)
 800224c:	689b      	ldr	r3, [r3, #8]
 800224e:	f003 020c 	and.w	r2, r3, #12
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	009b      	lsls	r3, r3, #2
 8002258:	429a      	cmp	r2, r3
 800225a:	d1eb      	bne.n	8002234 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800225c:	4b27      	ldr	r3, [pc, #156]	@ (80022fc <HAL_RCC_ClockConfig+0x1c4>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f003 030f 	and.w	r3, r3, #15
 8002264:	683a      	ldr	r2, [r7, #0]
 8002266:	429a      	cmp	r2, r3
 8002268:	d210      	bcs.n	800228c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800226a:	4b24      	ldr	r3, [pc, #144]	@ (80022fc <HAL_RCC_ClockConfig+0x1c4>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f023 020f 	bic.w	r2, r3, #15
 8002272:	4922      	ldr	r1, [pc, #136]	@ (80022fc <HAL_RCC_ClockConfig+0x1c4>)
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	4313      	orrs	r3, r2
 8002278:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800227a:	4b20      	ldr	r3, [pc, #128]	@ (80022fc <HAL_RCC_ClockConfig+0x1c4>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f003 030f 	and.w	r3, r3, #15
 8002282:	683a      	ldr	r2, [r7, #0]
 8002284:	429a      	cmp	r2, r3
 8002286:	d001      	beq.n	800228c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002288:	2301      	movs	r3, #1
 800228a:	e032      	b.n	80022f2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f003 0304 	and.w	r3, r3, #4
 8002294:	2b00      	cmp	r3, #0
 8002296:	d008      	beq.n	80022aa <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002298:	4b19      	ldr	r3, [pc, #100]	@ (8002300 <HAL_RCC_ClockConfig+0x1c8>)
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	68db      	ldr	r3, [r3, #12]
 80022a4:	4916      	ldr	r1, [pc, #88]	@ (8002300 <HAL_RCC_ClockConfig+0x1c8>)
 80022a6:	4313      	orrs	r3, r2
 80022a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 0308 	and.w	r3, r3, #8
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d009      	beq.n	80022ca <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80022b6:	4b12      	ldr	r3, [pc, #72]	@ (8002300 <HAL_RCC_ClockConfig+0x1c8>)
 80022b8:	689b      	ldr	r3, [r3, #8]
 80022ba:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	691b      	ldr	r3, [r3, #16]
 80022c2:	00db      	lsls	r3, r3, #3
 80022c4:	490e      	ldr	r1, [pc, #56]	@ (8002300 <HAL_RCC_ClockConfig+0x1c8>)
 80022c6:	4313      	orrs	r3, r2
 80022c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80022ca:	f000 f821 	bl	8002310 <HAL_RCC_GetSysClockFreq>
 80022ce:	4602      	mov	r2, r0
 80022d0:	4b0b      	ldr	r3, [pc, #44]	@ (8002300 <HAL_RCC_ClockConfig+0x1c8>)
 80022d2:	689b      	ldr	r3, [r3, #8]
 80022d4:	091b      	lsrs	r3, r3, #4
 80022d6:	f003 030f 	and.w	r3, r3, #15
 80022da:	490a      	ldr	r1, [pc, #40]	@ (8002304 <HAL_RCC_ClockConfig+0x1cc>)
 80022dc:	5ccb      	ldrb	r3, [r1, r3]
 80022de:	fa22 f303 	lsr.w	r3, r2, r3
 80022e2:	4a09      	ldr	r2, [pc, #36]	@ (8002308 <HAL_RCC_ClockConfig+0x1d0>)
 80022e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80022e6:	4b09      	ldr	r3, [pc, #36]	@ (800230c <HAL_RCC_ClockConfig+0x1d4>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4618      	mov	r0, r3
 80022ec:	f7ff f90c 	bl	8001508 <HAL_InitTick>

  return HAL_OK;
 80022f0:	2300      	movs	r3, #0
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	3710      	adds	r7, #16
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	40023c00 	.word	0x40023c00
 8002300:	40023800 	.word	0x40023800
 8002304:	0800641c 	.word	0x0800641c
 8002308:	20000004 	.word	0x20000004
 800230c:	20000008 	.word	0x20000008

08002310 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002310:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002314:	b090      	sub	sp, #64	@ 0x40
 8002316:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002318:	2300      	movs	r3, #0
 800231a:	637b      	str	r3, [r7, #52]	@ 0x34
 800231c:	2300      	movs	r3, #0
 800231e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002320:	2300      	movs	r3, #0
 8002322:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8002324:	2300      	movs	r3, #0
 8002326:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002328:	4b59      	ldr	r3, [pc, #356]	@ (8002490 <HAL_RCC_GetSysClockFreq+0x180>)
 800232a:	689b      	ldr	r3, [r3, #8]
 800232c:	f003 030c 	and.w	r3, r3, #12
 8002330:	2b08      	cmp	r3, #8
 8002332:	d00d      	beq.n	8002350 <HAL_RCC_GetSysClockFreq+0x40>
 8002334:	2b08      	cmp	r3, #8
 8002336:	f200 80a1 	bhi.w	800247c <HAL_RCC_GetSysClockFreq+0x16c>
 800233a:	2b00      	cmp	r3, #0
 800233c:	d002      	beq.n	8002344 <HAL_RCC_GetSysClockFreq+0x34>
 800233e:	2b04      	cmp	r3, #4
 8002340:	d003      	beq.n	800234a <HAL_RCC_GetSysClockFreq+0x3a>
 8002342:	e09b      	b.n	800247c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002344:	4b53      	ldr	r3, [pc, #332]	@ (8002494 <HAL_RCC_GetSysClockFreq+0x184>)
 8002346:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002348:	e09b      	b.n	8002482 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800234a:	4b53      	ldr	r3, [pc, #332]	@ (8002498 <HAL_RCC_GetSysClockFreq+0x188>)
 800234c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800234e:	e098      	b.n	8002482 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002350:	4b4f      	ldr	r3, [pc, #316]	@ (8002490 <HAL_RCC_GetSysClockFreq+0x180>)
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002358:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800235a:	4b4d      	ldr	r3, [pc, #308]	@ (8002490 <HAL_RCC_GetSysClockFreq+0x180>)
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002362:	2b00      	cmp	r3, #0
 8002364:	d028      	beq.n	80023b8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002366:	4b4a      	ldr	r3, [pc, #296]	@ (8002490 <HAL_RCC_GetSysClockFreq+0x180>)
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	099b      	lsrs	r3, r3, #6
 800236c:	2200      	movs	r2, #0
 800236e:	623b      	str	r3, [r7, #32]
 8002370:	627a      	str	r2, [r7, #36]	@ 0x24
 8002372:	6a3b      	ldr	r3, [r7, #32]
 8002374:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002378:	2100      	movs	r1, #0
 800237a:	4b47      	ldr	r3, [pc, #284]	@ (8002498 <HAL_RCC_GetSysClockFreq+0x188>)
 800237c:	fb03 f201 	mul.w	r2, r3, r1
 8002380:	2300      	movs	r3, #0
 8002382:	fb00 f303 	mul.w	r3, r0, r3
 8002386:	4413      	add	r3, r2
 8002388:	4a43      	ldr	r2, [pc, #268]	@ (8002498 <HAL_RCC_GetSysClockFreq+0x188>)
 800238a:	fba0 1202 	umull	r1, r2, r0, r2
 800238e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002390:	460a      	mov	r2, r1
 8002392:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002394:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002396:	4413      	add	r3, r2
 8002398:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800239a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800239c:	2200      	movs	r2, #0
 800239e:	61bb      	str	r3, [r7, #24]
 80023a0:	61fa      	str	r2, [r7, #28]
 80023a2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80023a6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80023aa:	f7fd ff31 	bl	8000210 <__aeabi_uldivmod>
 80023ae:	4602      	mov	r2, r0
 80023b0:	460b      	mov	r3, r1
 80023b2:	4613      	mov	r3, r2
 80023b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80023b6:	e053      	b.n	8002460 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023b8:	4b35      	ldr	r3, [pc, #212]	@ (8002490 <HAL_RCC_GetSysClockFreq+0x180>)
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	099b      	lsrs	r3, r3, #6
 80023be:	2200      	movs	r2, #0
 80023c0:	613b      	str	r3, [r7, #16]
 80023c2:	617a      	str	r2, [r7, #20]
 80023c4:	693b      	ldr	r3, [r7, #16]
 80023c6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80023ca:	f04f 0b00 	mov.w	fp, #0
 80023ce:	4652      	mov	r2, sl
 80023d0:	465b      	mov	r3, fp
 80023d2:	f04f 0000 	mov.w	r0, #0
 80023d6:	f04f 0100 	mov.w	r1, #0
 80023da:	0159      	lsls	r1, r3, #5
 80023dc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80023e0:	0150      	lsls	r0, r2, #5
 80023e2:	4602      	mov	r2, r0
 80023e4:	460b      	mov	r3, r1
 80023e6:	ebb2 080a 	subs.w	r8, r2, sl
 80023ea:	eb63 090b 	sbc.w	r9, r3, fp
 80023ee:	f04f 0200 	mov.w	r2, #0
 80023f2:	f04f 0300 	mov.w	r3, #0
 80023f6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80023fa:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80023fe:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002402:	ebb2 0408 	subs.w	r4, r2, r8
 8002406:	eb63 0509 	sbc.w	r5, r3, r9
 800240a:	f04f 0200 	mov.w	r2, #0
 800240e:	f04f 0300 	mov.w	r3, #0
 8002412:	00eb      	lsls	r3, r5, #3
 8002414:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002418:	00e2      	lsls	r2, r4, #3
 800241a:	4614      	mov	r4, r2
 800241c:	461d      	mov	r5, r3
 800241e:	eb14 030a 	adds.w	r3, r4, sl
 8002422:	603b      	str	r3, [r7, #0]
 8002424:	eb45 030b 	adc.w	r3, r5, fp
 8002428:	607b      	str	r3, [r7, #4]
 800242a:	f04f 0200 	mov.w	r2, #0
 800242e:	f04f 0300 	mov.w	r3, #0
 8002432:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002436:	4629      	mov	r1, r5
 8002438:	028b      	lsls	r3, r1, #10
 800243a:	4621      	mov	r1, r4
 800243c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002440:	4621      	mov	r1, r4
 8002442:	028a      	lsls	r2, r1, #10
 8002444:	4610      	mov	r0, r2
 8002446:	4619      	mov	r1, r3
 8002448:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800244a:	2200      	movs	r2, #0
 800244c:	60bb      	str	r3, [r7, #8]
 800244e:	60fa      	str	r2, [r7, #12]
 8002450:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002454:	f7fd fedc 	bl	8000210 <__aeabi_uldivmod>
 8002458:	4602      	mov	r2, r0
 800245a:	460b      	mov	r3, r1
 800245c:	4613      	mov	r3, r2
 800245e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002460:	4b0b      	ldr	r3, [pc, #44]	@ (8002490 <HAL_RCC_GetSysClockFreq+0x180>)
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	0c1b      	lsrs	r3, r3, #16
 8002466:	f003 0303 	and.w	r3, r3, #3
 800246a:	3301      	adds	r3, #1
 800246c:	005b      	lsls	r3, r3, #1
 800246e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002470:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002472:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002474:	fbb2 f3f3 	udiv	r3, r2, r3
 8002478:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800247a:	e002      	b.n	8002482 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800247c:	4b05      	ldr	r3, [pc, #20]	@ (8002494 <HAL_RCC_GetSysClockFreq+0x184>)
 800247e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002480:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002482:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002484:	4618      	mov	r0, r3
 8002486:	3740      	adds	r7, #64	@ 0x40
 8002488:	46bd      	mov	sp, r7
 800248a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800248e:	bf00      	nop
 8002490:	40023800 	.word	0x40023800
 8002494:	00f42400 	.word	0x00f42400
 8002498:	017d7840 	.word	0x017d7840

0800249c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800249c:	b480      	push	{r7}
 800249e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80024a0:	4b03      	ldr	r3, [pc, #12]	@ (80024b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80024a2:	681b      	ldr	r3, [r3, #0]
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	46bd      	mov	sp, r7
 80024a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ac:	4770      	bx	lr
 80024ae:	bf00      	nop
 80024b0:	20000004 	.word	0x20000004

080024b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80024b8:	f7ff fff0 	bl	800249c <HAL_RCC_GetHCLKFreq>
 80024bc:	4602      	mov	r2, r0
 80024be:	4b05      	ldr	r3, [pc, #20]	@ (80024d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	0a9b      	lsrs	r3, r3, #10
 80024c4:	f003 0307 	and.w	r3, r3, #7
 80024c8:	4903      	ldr	r1, [pc, #12]	@ (80024d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80024ca:	5ccb      	ldrb	r3, [r1, r3]
 80024cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	bd80      	pop	{r7, pc}
 80024d4:	40023800 	.word	0x40023800
 80024d8:	0800642c 	.word	0x0800642c

080024dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80024e0:	f7ff ffdc 	bl	800249c <HAL_RCC_GetHCLKFreq>
 80024e4:	4602      	mov	r2, r0
 80024e6:	4b05      	ldr	r3, [pc, #20]	@ (80024fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	0b5b      	lsrs	r3, r3, #13
 80024ec:	f003 0307 	and.w	r3, r3, #7
 80024f0:	4903      	ldr	r1, [pc, #12]	@ (8002500 <HAL_RCC_GetPCLK2Freq+0x24>)
 80024f2:	5ccb      	ldrb	r3, [r1, r3]
 80024f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024f8:	4618      	mov	r0, r3
 80024fa:	bd80      	pop	{r7, pc}
 80024fc:	40023800 	.word	0x40023800
 8002500:	0800642c 	.word	0x0800642c

08002504 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b088      	sub	sp, #32
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800250c:	2300      	movs	r3, #0
 800250e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002510:	2300      	movs	r3, #0
 8002512:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002514:	2300      	movs	r3, #0
 8002516:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002518:	2300      	movs	r3, #0
 800251a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800251c:	2300      	movs	r3, #0
 800251e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f003 0301 	and.w	r3, r3, #1
 8002528:	2b00      	cmp	r3, #0
 800252a:	d012      	beq.n	8002552 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800252c:	4b69      	ldr	r3, [pc, #420]	@ (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	4a68      	ldr	r2, [pc, #416]	@ (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002532:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002536:	6093      	str	r3, [r2, #8]
 8002538:	4b66      	ldr	r3, [pc, #408]	@ (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800253a:	689a      	ldr	r2, [r3, #8]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002540:	4964      	ldr	r1, [pc, #400]	@ (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002542:	4313      	orrs	r3, r2
 8002544:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800254a:	2b00      	cmp	r3, #0
 800254c:	d101      	bne.n	8002552 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800254e:	2301      	movs	r3, #1
 8002550:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800255a:	2b00      	cmp	r3, #0
 800255c:	d017      	beq.n	800258e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800255e:	4b5d      	ldr	r3, [pc, #372]	@ (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002560:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002564:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800256c:	4959      	ldr	r1, [pc, #356]	@ (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800256e:	4313      	orrs	r3, r2
 8002570:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002578:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800257c:	d101      	bne.n	8002582 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800257e:	2301      	movs	r3, #1
 8002580:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002586:	2b00      	cmp	r3, #0
 8002588:	d101      	bne.n	800258e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800258a:	2301      	movs	r3, #1
 800258c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002596:	2b00      	cmp	r3, #0
 8002598:	d017      	beq.n	80025ca <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800259a:	4b4e      	ldr	r3, [pc, #312]	@ (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800259c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80025a0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025a8:	494a      	ldr	r1, [pc, #296]	@ (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025aa:	4313      	orrs	r3, r2
 80025ac:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025b4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80025b8:	d101      	bne.n	80025be <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80025ba:	2301      	movs	r3, #1
 80025bc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d101      	bne.n	80025ca <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80025c6:	2301      	movs	r3, #1
 80025c8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d001      	beq.n	80025da <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80025d6:	2301      	movs	r3, #1
 80025d8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 0320 	and.w	r3, r3, #32
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	f000 808b 	beq.w	80026fe <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80025e8:	4b3a      	ldr	r3, [pc, #232]	@ (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025ec:	4a39      	ldr	r2, [pc, #228]	@ (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80025f2:	6413      	str	r3, [r2, #64]	@ 0x40
 80025f4:	4b37      	ldr	r3, [pc, #220]	@ (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025fc:	60bb      	str	r3, [r7, #8]
 80025fe:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002600:	4b35      	ldr	r3, [pc, #212]	@ (80026d8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a34      	ldr	r2, [pc, #208]	@ (80026d8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002606:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800260a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800260c:	f7fe ffc0 	bl	8001590 <HAL_GetTick>
 8002610:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002612:	e008      	b.n	8002626 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002614:	f7fe ffbc 	bl	8001590 <HAL_GetTick>
 8002618:	4602      	mov	r2, r0
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	1ad3      	subs	r3, r2, r3
 800261e:	2b64      	cmp	r3, #100	@ 0x64
 8002620:	d901      	bls.n	8002626 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002622:	2303      	movs	r3, #3
 8002624:	e357      	b.n	8002cd6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002626:	4b2c      	ldr	r3, [pc, #176]	@ (80026d8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800262e:	2b00      	cmp	r3, #0
 8002630:	d0f0      	beq.n	8002614 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002632:	4b28      	ldr	r3, [pc, #160]	@ (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002634:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002636:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800263a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d035      	beq.n	80026ae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002646:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800264a:	693a      	ldr	r2, [r7, #16]
 800264c:	429a      	cmp	r2, r3
 800264e:	d02e      	beq.n	80026ae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002650:	4b20      	ldr	r3, [pc, #128]	@ (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002652:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002654:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002658:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800265a:	4b1e      	ldr	r3, [pc, #120]	@ (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800265c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800265e:	4a1d      	ldr	r2, [pc, #116]	@ (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002660:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002664:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002666:	4b1b      	ldr	r3, [pc, #108]	@ (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002668:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800266a:	4a1a      	ldr	r2, [pc, #104]	@ (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800266c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002670:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002672:	4a18      	ldr	r2, [pc, #96]	@ (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002678:	4b16      	ldr	r3, [pc, #88]	@ (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800267a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800267c:	f003 0301 	and.w	r3, r3, #1
 8002680:	2b01      	cmp	r3, #1
 8002682:	d114      	bne.n	80026ae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002684:	f7fe ff84 	bl	8001590 <HAL_GetTick>
 8002688:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800268a:	e00a      	b.n	80026a2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800268c:	f7fe ff80 	bl	8001590 <HAL_GetTick>
 8002690:	4602      	mov	r2, r0
 8002692:	697b      	ldr	r3, [r7, #20]
 8002694:	1ad3      	subs	r3, r2, r3
 8002696:	f241 3288 	movw	r2, #5000	@ 0x1388
 800269a:	4293      	cmp	r3, r2
 800269c:	d901      	bls.n	80026a2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800269e:	2303      	movs	r3, #3
 80026a0:	e319      	b.n	8002cd6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026a2:	4b0c      	ldr	r3, [pc, #48]	@ (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026a6:	f003 0302 	and.w	r3, r3, #2
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d0ee      	beq.n	800268c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80026b6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80026ba:	d111      	bne.n	80026e0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80026bc:	4b05      	ldr	r3, [pc, #20]	@ (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026be:	689b      	ldr	r3, [r3, #8]
 80026c0:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80026c8:	4b04      	ldr	r3, [pc, #16]	@ (80026dc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80026ca:	400b      	ands	r3, r1
 80026cc:	4901      	ldr	r1, [pc, #4]	@ (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026ce:	4313      	orrs	r3, r2
 80026d0:	608b      	str	r3, [r1, #8]
 80026d2:	e00b      	b.n	80026ec <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80026d4:	40023800 	.word	0x40023800
 80026d8:	40007000 	.word	0x40007000
 80026dc:	0ffffcff 	.word	0x0ffffcff
 80026e0:	4baa      	ldr	r3, [pc, #680]	@ (800298c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	4aa9      	ldr	r2, [pc, #676]	@ (800298c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80026e6:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80026ea:	6093      	str	r3, [r2, #8]
 80026ec:	4ba7      	ldr	r3, [pc, #668]	@ (800298c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80026ee:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026f8:	49a4      	ldr	r1, [pc, #656]	@ (800298c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80026fa:	4313      	orrs	r3, r2
 80026fc:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f003 0310 	and.w	r3, r3, #16
 8002706:	2b00      	cmp	r3, #0
 8002708:	d010      	beq.n	800272c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800270a:	4ba0      	ldr	r3, [pc, #640]	@ (800298c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800270c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002710:	4a9e      	ldr	r2, [pc, #632]	@ (800298c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002712:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002716:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800271a:	4b9c      	ldr	r3, [pc, #624]	@ (800298c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800271c:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002724:	4999      	ldr	r1, [pc, #612]	@ (800298c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002726:	4313      	orrs	r3, r2
 8002728:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002734:	2b00      	cmp	r3, #0
 8002736:	d00a      	beq.n	800274e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002738:	4b94      	ldr	r3, [pc, #592]	@ (800298c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800273a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800273e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002746:	4991      	ldr	r1, [pc, #580]	@ (800298c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002748:	4313      	orrs	r3, r2
 800274a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002756:	2b00      	cmp	r3, #0
 8002758:	d00a      	beq.n	8002770 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800275a:	4b8c      	ldr	r3, [pc, #560]	@ (800298c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800275c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002760:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002768:	4988      	ldr	r1, [pc, #544]	@ (800298c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800276a:	4313      	orrs	r3, r2
 800276c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002778:	2b00      	cmp	r3, #0
 800277a:	d00a      	beq.n	8002792 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800277c:	4b83      	ldr	r3, [pc, #524]	@ (800298c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800277e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002782:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800278a:	4980      	ldr	r1, [pc, #512]	@ (800298c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800278c:	4313      	orrs	r3, r2
 800278e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800279a:	2b00      	cmp	r3, #0
 800279c:	d00a      	beq.n	80027b4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800279e:	4b7b      	ldr	r3, [pc, #492]	@ (800298c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027a4:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027ac:	4977      	ldr	r1, [pc, #476]	@ (800298c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027ae:	4313      	orrs	r3, r2
 80027b0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d00a      	beq.n	80027d6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80027c0:	4b72      	ldr	r3, [pc, #456]	@ (800298c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027c6:	f023 0203 	bic.w	r2, r3, #3
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027ce:	496f      	ldr	r1, [pc, #444]	@ (800298c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027d0:	4313      	orrs	r3, r2
 80027d2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d00a      	beq.n	80027f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80027e2:	4b6a      	ldr	r3, [pc, #424]	@ (800298c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027e8:	f023 020c 	bic.w	r2, r3, #12
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80027f0:	4966      	ldr	r1, [pc, #408]	@ (800298c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027f2:	4313      	orrs	r3, r2
 80027f4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002800:	2b00      	cmp	r3, #0
 8002802:	d00a      	beq.n	800281a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002804:	4b61      	ldr	r3, [pc, #388]	@ (800298c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002806:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800280a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002812:	495e      	ldr	r1, [pc, #376]	@ (800298c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002814:	4313      	orrs	r3, r2
 8002816:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002822:	2b00      	cmp	r3, #0
 8002824:	d00a      	beq.n	800283c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002826:	4b59      	ldr	r3, [pc, #356]	@ (800298c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002828:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800282c:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002834:	4955      	ldr	r1, [pc, #340]	@ (800298c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002836:	4313      	orrs	r3, r2
 8002838:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002844:	2b00      	cmp	r3, #0
 8002846:	d00a      	beq.n	800285e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002848:	4b50      	ldr	r3, [pc, #320]	@ (800298c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800284a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800284e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002856:	494d      	ldr	r1, [pc, #308]	@ (800298c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002858:	4313      	orrs	r3, r2
 800285a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002866:	2b00      	cmp	r3, #0
 8002868:	d00a      	beq.n	8002880 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800286a:	4b48      	ldr	r3, [pc, #288]	@ (800298c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800286c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002870:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002878:	4944      	ldr	r1, [pc, #272]	@ (800298c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800287a:	4313      	orrs	r3, r2
 800287c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002888:	2b00      	cmp	r3, #0
 800288a:	d00a      	beq.n	80028a2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800288c:	4b3f      	ldr	r3, [pc, #252]	@ (800298c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800288e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002892:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800289a:	493c      	ldr	r1, [pc, #240]	@ (800298c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800289c:	4313      	orrs	r3, r2
 800289e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d00a      	beq.n	80028c4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80028ae:	4b37      	ldr	r3, [pc, #220]	@ (800298c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028b4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80028bc:	4933      	ldr	r1, [pc, #204]	@ (800298c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028be:	4313      	orrs	r3, r2
 80028c0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d00a      	beq.n	80028e6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80028d0:	4b2e      	ldr	r3, [pc, #184]	@ (800298c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028d6:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80028de:	492b      	ldr	r1, [pc, #172]	@ (800298c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028e0:	4313      	orrs	r3, r2
 80028e2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d011      	beq.n	8002916 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80028f2:	4b26      	ldr	r3, [pc, #152]	@ (800298c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028f8:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002900:	4922      	ldr	r1, [pc, #136]	@ (800298c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002902:	4313      	orrs	r3, r2
 8002904:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800290c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002910:	d101      	bne.n	8002916 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002912:	2301      	movs	r3, #1
 8002914:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f003 0308 	and.w	r3, r3, #8
 800291e:	2b00      	cmp	r3, #0
 8002920:	d001      	beq.n	8002926 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002922:	2301      	movs	r3, #1
 8002924:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800292e:	2b00      	cmp	r3, #0
 8002930:	d00a      	beq.n	8002948 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002932:	4b16      	ldr	r3, [pc, #88]	@ (800298c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002934:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002938:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002940:	4912      	ldr	r1, [pc, #72]	@ (800298c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002942:	4313      	orrs	r3, r2
 8002944:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002950:	2b00      	cmp	r3, #0
 8002952:	d00b      	beq.n	800296c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002954:	4b0d      	ldr	r3, [pc, #52]	@ (800298c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002956:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800295a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002964:	4909      	ldr	r1, [pc, #36]	@ (800298c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002966:	4313      	orrs	r3, r2
 8002968:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800296c:	69fb      	ldr	r3, [r7, #28]
 800296e:	2b01      	cmp	r3, #1
 8002970:	d006      	beq.n	8002980 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800297a:	2b00      	cmp	r3, #0
 800297c:	f000 80d9 	beq.w	8002b32 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002980:	4b02      	ldr	r3, [pc, #8]	@ (800298c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a01      	ldr	r2, [pc, #4]	@ (800298c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002986:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800298a:	e001      	b.n	8002990 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 800298c:	40023800 	.word	0x40023800
 8002990:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002992:	f7fe fdfd 	bl	8001590 <HAL_GetTick>
 8002996:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002998:	e008      	b.n	80029ac <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800299a:	f7fe fdf9 	bl	8001590 <HAL_GetTick>
 800299e:	4602      	mov	r2, r0
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	1ad3      	subs	r3, r2, r3
 80029a4:	2b64      	cmp	r3, #100	@ 0x64
 80029a6:	d901      	bls.n	80029ac <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80029a8:	2303      	movs	r3, #3
 80029aa:	e194      	b.n	8002cd6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80029ac:	4b6c      	ldr	r3, [pc, #432]	@ (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d1f0      	bne.n	800299a <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f003 0301 	and.w	r3, r3, #1
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d021      	beq.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d11d      	bne.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80029cc:	4b64      	ldr	r3, [pc, #400]	@ (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80029ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80029d2:	0c1b      	lsrs	r3, r3, #16
 80029d4:	f003 0303 	and.w	r3, r3, #3
 80029d8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80029da:	4b61      	ldr	r3, [pc, #388]	@ (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80029dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80029e0:	0e1b      	lsrs	r3, r3, #24
 80029e2:	f003 030f 	and.w	r3, r3, #15
 80029e6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	019a      	lsls	r2, r3, #6
 80029ee:	693b      	ldr	r3, [r7, #16]
 80029f0:	041b      	lsls	r3, r3, #16
 80029f2:	431a      	orrs	r2, r3
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	061b      	lsls	r3, r3, #24
 80029f8:	431a      	orrs	r2, r3
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	689b      	ldr	r3, [r3, #8]
 80029fe:	071b      	lsls	r3, r3, #28
 8002a00:	4957      	ldr	r1, [pc, #348]	@ (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a02:	4313      	orrs	r3, r2
 8002a04:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d004      	beq.n	8002a1e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a18:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002a1c:	d00a      	beq.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d02e      	beq.n	8002a88 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a2e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002a32:	d129      	bne.n	8002a88 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002a34:	4b4a      	ldr	r3, [pc, #296]	@ (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a36:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002a3a:	0c1b      	lsrs	r3, r3, #16
 8002a3c:	f003 0303 	and.w	r3, r3, #3
 8002a40:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002a42:	4b47      	ldr	r3, [pc, #284]	@ (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a44:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002a48:	0f1b      	lsrs	r3, r3, #28
 8002a4a:	f003 0307 	and.w	r3, r3, #7
 8002a4e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	019a      	lsls	r2, r3, #6
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	041b      	lsls	r3, r3, #16
 8002a5a:	431a      	orrs	r2, r3
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	68db      	ldr	r3, [r3, #12]
 8002a60:	061b      	lsls	r3, r3, #24
 8002a62:	431a      	orrs	r2, r3
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	071b      	lsls	r3, r3, #28
 8002a68:	493d      	ldr	r1, [pc, #244]	@ (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002a70:	4b3b      	ldr	r3, [pc, #236]	@ (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a72:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002a76:	f023 021f 	bic.w	r2, r3, #31
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a7e:	3b01      	subs	r3, #1
 8002a80:	4937      	ldr	r1, [pc, #220]	@ (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a82:	4313      	orrs	r3, r2
 8002a84:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d01d      	beq.n	8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002a94:	4b32      	ldr	r3, [pc, #200]	@ (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a96:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002a9a:	0e1b      	lsrs	r3, r3, #24
 8002a9c:	f003 030f 	and.w	r3, r3, #15
 8002aa0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002aa2:	4b2f      	ldr	r3, [pc, #188]	@ (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002aa4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002aa8:	0f1b      	lsrs	r3, r3, #28
 8002aaa:	f003 0307 	and.w	r3, r3, #7
 8002aae:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	019a      	lsls	r2, r3, #6
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	691b      	ldr	r3, [r3, #16]
 8002aba:	041b      	lsls	r3, r3, #16
 8002abc:	431a      	orrs	r2, r3
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	061b      	lsls	r3, r3, #24
 8002ac2:	431a      	orrs	r2, r3
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	071b      	lsls	r3, r3, #28
 8002ac8:	4925      	ldr	r1, [pc, #148]	@ (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002aca:	4313      	orrs	r3, r2
 8002acc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d011      	beq.n	8002b00 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	019a      	lsls	r2, r3, #6
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	691b      	ldr	r3, [r3, #16]
 8002ae6:	041b      	lsls	r3, r3, #16
 8002ae8:	431a      	orrs	r2, r3
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	68db      	ldr	r3, [r3, #12]
 8002aee:	061b      	lsls	r3, r3, #24
 8002af0:	431a      	orrs	r2, r3
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	689b      	ldr	r3, [r3, #8]
 8002af6:	071b      	lsls	r3, r3, #28
 8002af8:	4919      	ldr	r1, [pc, #100]	@ (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002afa:	4313      	orrs	r3, r2
 8002afc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002b00:	4b17      	ldr	r3, [pc, #92]	@ (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a16      	ldr	r2, [pc, #88]	@ (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b06:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002b0a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b0c:	f7fe fd40 	bl	8001590 <HAL_GetTick>
 8002b10:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002b12:	e008      	b.n	8002b26 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002b14:	f7fe fd3c 	bl	8001590 <HAL_GetTick>
 8002b18:	4602      	mov	r2, r0
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	1ad3      	subs	r3, r2, r3
 8002b1e:	2b64      	cmp	r3, #100	@ 0x64
 8002b20:	d901      	bls.n	8002b26 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002b22:	2303      	movs	r3, #3
 8002b24:	e0d7      	b.n	8002cd6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002b26:	4b0e      	ldr	r3, [pc, #56]	@ (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d0f0      	beq.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002b32:	69bb      	ldr	r3, [r7, #24]
 8002b34:	2b01      	cmp	r3, #1
 8002b36:	f040 80cd 	bne.w	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002b3a:	4b09      	ldr	r3, [pc, #36]	@ (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a08      	ldr	r2, [pc, #32]	@ (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b40:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b44:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b46:	f7fe fd23 	bl	8001590 <HAL_GetTick>
 8002b4a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002b4c:	e00a      	b.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002b4e:	f7fe fd1f 	bl	8001590 <HAL_GetTick>
 8002b52:	4602      	mov	r2, r0
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	1ad3      	subs	r3, r2, r3
 8002b58:	2b64      	cmp	r3, #100	@ 0x64
 8002b5a:	d903      	bls.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002b5c:	2303      	movs	r3, #3
 8002b5e:	e0ba      	b.n	8002cd6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8002b60:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002b64:	4b5e      	ldr	r3, [pc, #376]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002b6c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002b70:	d0ed      	beq.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d003      	beq.n	8002b86 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d009      	beq.n	8002b9a <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d02e      	beq.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d12a      	bne.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002b9a:	4b51      	ldr	r3, [pc, #324]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002b9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ba0:	0c1b      	lsrs	r3, r3, #16
 8002ba2:	f003 0303 	and.w	r3, r3, #3
 8002ba6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002ba8:	4b4d      	ldr	r3, [pc, #308]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002baa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bae:	0f1b      	lsrs	r3, r3, #28
 8002bb0:	f003 0307 	and.w	r3, r3, #7
 8002bb4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	695b      	ldr	r3, [r3, #20]
 8002bba:	019a      	lsls	r2, r3, #6
 8002bbc:	693b      	ldr	r3, [r7, #16]
 8002bbe:	041b      	lsls	r3, r3, #16
 8002bc0:	431a      	orrs	r2, r3
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	699b      	ldr	r3, [r3, #24]
 8002bc6:	061b      	lsls	r3, r3, #24
 8002bc8:	431a      	orrs	r2, r3
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	071b      	lsls	r3, r3, #28
 8002bce:	4944      	ldr	r1, [pc, #272]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002bd6:	4b42      	ldr	r3, [pc, #264]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002bd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002bdc:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002be4:	3b01      	subs	r3, #1
 8002be6:	021b      	lsls	r3, r3, #8
 8002be8:	493d      	ldr	r1, [pc, #244]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002bea:	4313      	orrs	r3, r2
 8002bec:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d022      	beq.n	8002c42 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002c00:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002c04:	d11d      	bne.n	8002c42 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002c06:	4b36      	ldr	r3, [pc, #216]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002c08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c0c:	0e1b      	lsrs	r3, r3, #24
 8002c0e:	f003 030f 	and.w	r3, r3, #15
 8002c12:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002c14:	4b32      	ldr	r3, [pc, #200]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002c16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c1a:	0f1b      	lsrs	r3, r3, #28
 8002c1c:	f003 0307 	and.w	r3, r3, #7
 8002c20:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	695b      	ldr	r3, [r3, #20]
 8002c26:	019a      	lsls	r2, r3, #6
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6a1b      	ldr	r3, [r3, #32]
 8002c2c:	041b      	lsls	r3, r3, #16
 8002c2e:	431a      	orrs	r2, r3
 8002c30:	693b      	ldr	r3, [r7, #16]
 8002c32:	061b      	lsls	r3, r3, #24
 8002c34:	431a      	orrs	r2, r3
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	071b      	lsls	r3, r3, #28
 8002c3a:	4929      	ldr	r1, [pc, #164]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f003 0308 	and.w	r3, r3, #8
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d028      	beq.n	8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002c4e:	4b24      	ldr	r3, [pc, #144]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002c50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c54:	0e1b      	lsrs	r3, r3, #24
 8002c56:	f003 030f 	and.w	r3, r3, #15
 8002c5a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002c5c:	4b20      	ldr	r3, [pc, #128]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002c5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c62:	0c1b      	lsrs	r3, r3, #16
 8002c64:	f003 0303 	and.w	r3, r3, #3
 8002c68:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	695b      	ldr	r3, [r3, #20]
 8002c6e:	019a      	lsls	r2, r3, #6
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	041b      	lsls	r3, r3, #16
 8002c74:	431a      	orrs	r2, r3
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	061b      	lsls	r3, r3, #24
 8002c7a:	431a      	orrs	r2, r3
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	69db      	ldr	r3, [r3, #28]
 8002c80:	071b      	lsls	r3, r3, #28
 8002c82:	4917      	ldr	r1, [pc, #92]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002c84:	4313      	orrs	r3, r2
 8002c86:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002c8a:	4b15      	ldr	r3, [pc, #84]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002c8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002c90:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c98:	4911      	ldr	r1, [pc, #68]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002ca0:	4b0f      	ldr	r3, [pc, #60]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a0e      	ldr	r2, [pc, #56]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002ca6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002caa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002cac:	f7fe fc70 	bl	8001590 <HAL_GetTick>
 8002cb0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002cb2:	e008      	b.n	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002cb4:	f7fe fc6c 	bl	8001590 <HAL_GetTick>
 8002cb8:	4602      	mov	r2, r0
 8002cba:	697b      	ldr	r3, [r7, #20]
 8002cbc:	1ad3      	subs	r3, r2, r3
 8002cbe:	2b64      	cmp	r3, #100	@ 0x64
 8002cc0:	d901      	bls.n	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002cc2:	2303      	movs	r3, #3
 8002cc4:	e007      	b.n	8002cd6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002cc6:	4b06      	ldr	r3, [pc, #24]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002cce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002cd2:	d1ef      	bne.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8002cd4:	2300      	movs	r3, #0
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	3720      	adds	r7, #32
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}
 8002cde:	bf00      	nop
 8002ce0:	40023800 	.word	0x40023800

08002ce4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b082      	sub	sp, #8
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d101      	bne.n	8002cf6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e040      	b.n	8002d78 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d106      	bne.n	8002d0c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2200      	movs	r2, #0
 8002d02:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d06:	6878      	ldr	r0, [r7, #4]
 8002d08:	f7fe fb46 	bl	8001398 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2224      	movs	r2, #36	@ 0x24
 8002d10:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	681a      	ldr	r2, [r3, #0]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f022 0201 	bic.w	r2, r2, #1
 8002d20:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d002      	beq.n	8002d30 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002d2a:	6878      	ldr	r0, [r7, #4]
 8002d2c:	f000 fb16 	bl	800335c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002d30:	6878      	ldr	r0, [r7, #4]
 8002d32:	f000 f8af 	bl	8002e94 <UART_SetConfig>
 8002d36:	4603      	mov	r3, r0
 8002d38:	2b01      	cmp	r3, #1
 8002d3a:	d101      	bne.n	8002d40 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	e01b      	b.n	8002d78 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	685a      	ldr	r2, [r3, #4]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002d4e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	689a      	ldr	r2, [r3, #8]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002d5e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	681a      	ldr	r2, [r3, #0]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f042 0201 	orr.w	r2, r2, #1
 8002d6e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002d70:	6878      	ldr	r0, [r7, #4]
 8002d72:	f000 fb95 	bl	80034a0 <UART_CheckIdleState>
 8002d76:	4603      	mov	r3, r0
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	3708      	adds	r7, #8
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd80      	pop	{r7, pc}

08002d80 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b08a      	sub	sp, #40	@ 0x28
 8002d84:	af02      	add	r7, sp, #8
 8002d86:	60f8      	str	r0, [r7, #12]
 8002d88:	60b9      	str	r1, [r7, #8]
 8002d8a:	603b      	str	r3, [r7, #0]
 8002d8c:	4613      	mov	r3, r2
 8002d8e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002d94:	2b20      	cmp	r3, #32
 8002d96:	d177      	bne.n	8002e88 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d002      	beq.n	8002da4 <HAL_UART_Transmit+0x24>
 8002d9e:	88fb      	ldrh	r3, [r7, #6]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d101      	bne.n	8002da8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002da4:	2301      	movs	r3, #1
 8002da6:	e070      	b.n	8002e8a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	2200      	movs	r2, #0
 8002dac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	2221      	movs	r2, #33	@ 0x21
 8002db4:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002db6:	f7fe fbeb 	bl	8001590 <HAL_GetTick>
 8002dba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	88fa      	ldrh	r2, [r7, #6]
 8002dc0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	88fa      	ldrh	r2, [r7, #6]
 8002dc8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	689b      	ldr	r3, [r3, #8]
 8002dd0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002dd4:	d108      	bne.n	8002de8 <HAL_UART_Transmit+0x68>
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	691b      	ldr	r3, [r3, #16]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d104      	bne.n	8002de8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002dde:	2300      	movs	r3, #0
 8002de0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002de2:	68bb      	ldr	r3, [r7, #8]
 8002de4:	61bb      	str	r3, [r7, #24]
 8002de6:	e003      	b.n	8002df0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002dec:	2300      	movs	r3, #0
 8002dee:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002df0:	e02f      	b.n	8002e52 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	9300      	str	r3, [sp, #0]
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	2180      	movs	r1, #128	@ 0x80
 8002dfc:	68f8      	ldr	r0, [r7, #12]
 8002dfe:	f000 fba6 	bl	800354e <UART_WaitOnFlagUntilTimeout>
 8002e02:	4603      	mov	r3, r0
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d004      	beq.n	8002e12 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	2220      	movs	r2, #32
 8002e0c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8002e0e:	2303      	movs	r3, #3
 8002e10:	e03b      	b.n	8002e8a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8002e12:	69fb      	ldr	r3, [r7, #28]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d10b      	bne.n	8002e30 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002e18:	69bb      	ldr	r3, [r7, #24]
 8002e1a:	881b      	ldrh	r3, [r3, #0]
 8002e1c:	461a      	mov	r2, r3
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e26:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002e28:	69bb      	ldr	r3, [r7, #24]
 8002e2a:	3302      	adds	r3, #2
 8002e2c:	61bb      	str	r3, [r7, #24]
 8002e2e:	e007      	b.n	8002e40 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002e30:	69fb      	ldr	r3, [r7, #28]
 8002e32:	781a      	ldrb	r2, [r3, #0]
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002e3a:	69fb      	ldr	r3, [r7, #28]
 8002e3c:	3301      	adds	r3, #1
 8002e3e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002e46:	b29b      	uxth	r3, r3
 8002e48:	3b01      	subs	r3, #1
 8002e4a:	b29a      	uxth	r2, r3
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002e58:	b29b      	uxth	r3, r3
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d1c9      	bne.n	8002df2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	9300      	str	r3, [sp, #0]
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	2200      	movs	r2, #0
 8002e66:	2140      	movs	r1, #64	@ 0x40
 8002e68:	68f8      	ldr	r0, [r7, #12]
 8002e6a:	f000 fb70 	bl	800354e <UART_WaitOnFlagUntilTimeout>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d004      	beq.n	8002e7e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	2220      	movs	r2, #32
 8002e78:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8002e7a:	2303      	movs	r3, #3
 8002e7c:	e005      	b.n	8002e8a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	2220      	movs	r2, #32
 8002e82:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8002e84:	2300      	movs	r3, #0
 8002e86:	e000      	b.n	8002e8a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8002e88:	2302      	movs	r3, #2
  }
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	3720      	adds	r7, #32
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}
	...

08002e94 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b088      	sub	sp, #32
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	689a      	ldr	r2, [r3, #8]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	691b      	ldr	r3, [r3, #16]
 8002ea8:	431a      	orrs	r2, r3
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	695b      	ldr	r3, [r3, #20]
 8002eae:	431a      	orrs	r2, r3
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	69db      	ldr	r3, [r3, #28]
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	681a      	ldr	r2, [r3, #0]
 8002ebe:	4ba6      	ldr	r3, [pc, #664]	@ (8003158 <UART_SetConfig+0x2c4>)
 8002ec0:	4013      	ands	r3, r2
 8002ec2:	687a      	ldr	r2, [r7, #4]
 8002ec4:	6812      	ldr	r2, [r2, #0]
 8002ec6:	6979      	ldr	r1, [r7, #20]
 8002ec8:	430b      	orrs	r3, r1
 8002eca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	68da      	ldr	r2, [r3, #12]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	430a      	orrs	r2, r1
 8002ee0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	699b      	ldr	r3, [r3, #24]
 8002ee6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6a1b      	ldr	r3, [r3, #32]
 8002eec:	697a      	ldr	r2, [r7, #20]
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	689b      	ldr	r3, [r3, #8]
 8002ef8:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	697a      	ldr	r2, [r7, #20]
 8002f02:	430a      	orrs	r2, r1
 8002f04:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a94      	ldr	r2, [pc, #592]	@ (800315c <UART_SetConfig+0x2c8>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d120      	bne.n	8002f52 <UART_SetConfig+0xbe>
 8002f10:	4b93      	ldr	r3, [pc, #588]	@ (8003160 <UART_SetConfig+0x2cc>)
 8002f12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f16:	f003 0303 	and.w	r3, r3, #3
 8002f1a:	2b03      	cmp	r3, #3
 8002f1c:	d816      	bhi.n	8002f4c <UART_SetConfig+0xb8>
 8002f1e:	a201      	add	r2, pc, #4	@ (adr r2, 8002f24 <UART_SetConfig+0x90>)
 8002f20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f24:	08002f35 	.word	0x08002f35
 8002f28:	08002f41 	.word	0x08002f41
 8002f2c:	08002f3b 	.word	0x08002f3b
 8002f30:	08002f47 	.word	0x08002f47
 8002f34:	2301      	movs	r3, #1
 8002f36:	77fb      	strb	r3, [r7, #31]
 8002f38:	e150      	b.n	80031dc <UART_SetConfig+0x348>
 8002f3a:	2302      	movs	r3, #2
 8002f3c:	77fb      	strb	r3, [r7, #31]
 8002f3e:	e14d      	b.n	80031dc <UART_SetConfig+0x348>
 8002f40:	2304      	movs	r3, #4
 8002f42:	77fb      	strb	r3, [r7, #31]
 8002f44:	e14a      	b.n	80031dc <UART_SetConfig+0x348>
 8002f46:	2308      	movs	r3, #8
 8002f48:	77fb      	strb	r3, [r7, #31]
 8002f4a:	e147      	b.n	80031dc <UART_SetConfig+0x348>
 8002f4c:	2310      	movs	r3, #16
 8002f4e:	77fb      	strb	r3, [r7, #31]
 8002f50:	e144      	b.n	80031dc <UART_SetConfig+0x348>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a83      	ldr	r2, [pc, #524]	@ (8003164 <UART_SetConfig+0x2d0>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d132      	bne.n	8002fc2 <UART_SetConfig+0x12e>
 8002f5c:	4b80      	ldr	r3, [pc, #512]	@ (8003160 <UART_SetConfig+0x2cc>)
 8002f5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f62:	f003 030c 	and.w	r3, r3, #12
 8002f66:	2b0c      	cmp	r3, #12
 8002f68:	d828      	bhi.n	8002fbc <UART_SetConfig+0x128>
 8002f6a:	a201      	add	r2, pc, #4	@ (adr r2, 8002f70 <UART_SetConfig+0xdc>)
 8002f6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f70:	08002fa5 	.word	0x08002fa5
 8002f74:	08002fbd 	.word	0x08002fbd
 8002f78:	08002fbd 	.word	0x08002fbd
 8002f7c:	08002fbd 	.word	0x08002fbd
 8002f80:	08002fb1 	.word	0x08002fb1
 8002f84:	08002fbd 	.word	0x08002fbd
 8002f88:	08002fbd 	.word	0x08002fbd
 8002f8c:	08002fbd 	.word	0x08002fbd
 8002f90:	08002fab 	.word	0x08002fab
 8002f94:	08002fbd 	.word	0x08002fbd
 8002f98:	08002fbd 	.word	0x08002fbd
 8002f9c:	08002fbd 	.word	0x08002fbd
 8002fa0:	08002fb7 	.word	0x08002fb7
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	77fb      	strb	r3, [r7, #31]
 8002fa8:	e118      	b.n	80031dc <UART_SetConfig+0x348>
 8002faa:	2302      	movs	r3, #2
 8002fac:	77fb      	strb	r3, [r7, #31]
 8002fae:	e115      	b.n	80031dc <UART_SetConfig+0x348>
 8002fb0:	2304      	movs	r3, #4
 8002fb2:	77fb      	strb	r3, [r7, #31]
 8002fb4:	e112      	b.n	80031dc <UART_SetConfig+0x348>
 8002fb6:	2308      	movs	r3, #8
 8002fb8:	77fb      	strb	r3, [r7, #31]
 8002fba:	e10f      	b.n	80031dc <UART_SetConfig+0x348>
 8002fbc:	2310      	movs	r3, #16
 8002fbe:	77fb      	strb	r3, [r7, #31]
 8002fc0:	e10c      	b.n	80031dc <UART_SetConfig+0x348>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a68      	ldr	r2, [pc, #416]	@ (8003168 <UART_SetConfig+0x2d4>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d120      	bne.n	800300e <UART_SetConfig+0x17a>
 8002fcc:	4b64      	ldr	r3, [pc, #400]	@ (8003160 <UART_SetConfig+0x2cc>)
 8002fce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fd2:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002fd6:	2b30      	cmp	r3, #48	@ 0x30
 8002fd8:	d013      	beq.n	8003002 <UART_SetConfig+0x16e>
 8002fda:	2b30      	cmp	r3, #48	@ 0x30
 8002fdc:	d814      	bhi.n	8003008 <UART_SetConfig+0x174>
 8002fde:	2b20      	cmp	r3, #32
 8002fe0:	d009      	beq.n	8002ff6 <UART_SetConfig+0x162>
 8002fe2:	2b20      	cmp	r3, #32
 8002fe4:	d810      	bhi.n	8003008 <UART_SetConfig+0x174>
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d002      	beq.n	8002ff0 <UART_SetConfig+0x15c>
 8002fea:	2b10      	cmp	r3, #16
 8002fec:	d006      	beq.n	8002ffc <UART_SetConfig+0x168>
 8002fee:	e00b      	b.n	8003008 <UART_SetConfig+0x174>
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	77fb      	strb	r3, [r7, #31]
 8002ff4:	e0f2      	b.n	80031dc <UART_SetConfig+0x348>
 8002ff6:	2302      	movs	r3, #2
 8002ff8:	77fb      	strb	r3, [r7, #31]
 8002ffa:	e0ef      	b.n	80031dc <UART_SetConfig+0x348>
 8002ffc:	2304      	movs	r3, #4
 8002ffe:	77fb      	strb	r3, [r7, #31]
 8003000:	e0ec      	b.n	80031dc <UART_SetConfig+0x348>
 8003002:	2308      	movs	r3, #8
 8003004:	77fb      	strb	r3, [r7, #31]
 8003006:	e0e9      	b.n	80031dc <UART_SetConfig+0x348>
 8003008:	2310      	movs	r3, #16
 800300a:	77fb      	strb	r3, [r7, #31]
 800300c:	e0e6      	b.n	80031dc <UART_SetConfig+0x348>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a56      	ldr	r2, [pc, #344]	@ (800316c <UART_SetConfig+0x2d8>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d120      	bne.n	800305a <UART_SetConfig+0x1c6>
 8003018:	4b51      	ldr	r3, [pc, #324]	@ (8003160 <UART_SetConfig+0x2cc>)
 800301a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800301e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003022:	2bc0      	cmp	r3, #192	@ 0xc0
 8003024:	d013      	beq.n	800304e <UART_SetConfig+0x1ba>
 8003026:	2bc0      	cmp	r3, #192	@ 0xc0
 8003028:	d814      	bhi.n	8003054 <UART_SetConfig+0x1c0>
 800302a:	2b80      	cmp	r3, #128	@ 0x80
 800302c:	d009      	beq.n	8003042 <UART_SetConfig+0x1ae>
 800302e:	2b80      	cmp	r3, #128	@ 0x80
 8003030:	d810      	bhi.n	8003054 <UART_SetConfig+0x1c0>
 8003032:	2b00      	cmp	r3, #0
 8003034:	d002      	beq.n	800303c <UART_SetConfig+0x1a8>
 8003036:	2b40      	cmp	r3, #64	@ 0x40
 8003038:	d006      	beq.n	8003048 <UART_SetConfig+0x1b4>
 800303a:	e00b      	b.n	8003054 <UART_SetConfig+0x1c0>
 800303c:	2300      	movs	r3, #0
 800303e:	77fb      	strb	r3, [r7, #31]
 8003040:	e0cc      	b.n	80031dc <UART_SetConfig+0x348>
 8003042:	2302      	movs	r3, #2
 8003044:	77fb      	strb	r3, [r7, #31]
 8003046:	e0c9      	b.n	80031dc <UART_SetConfig+0x348>
 8003048:	2304      	movs	r3, #4
 800304a:	77fb      	strb	r3, [r7, #31]
 800304c:	e0c6      	b.n	80031dc <UART_SetConfig+0x348>
 800304e:	2308      	movs	r3, #8
 8003050:	77fb      	strb	r3, [r7, #31]
 8003052:	e0c3      	b.n	80031dc <UART_SetConfig+0x348>
 8003054:	2310      	movs	r3, #16
 8003056:	77fb      	strb	r3, [r7, #31]
 8003058:	e0c0      	b.n	80031dc <UART_SetConfig+0x348>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a44      	ldr	r2, [pc, #272]	@ (8003170 <UART_SetConfig+0x2dc>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d125      	bne.n	80030b0 <UART_SetConfig+0x21c>
 8003064:	4b3e      	ldr	r3, [pc, #248]	@ (8003160 <UART_SetConfig+0x2cc>)
 8003066:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800306a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800306e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003072:	d017      	beq.n	80030a4 <UART_SetConfig+0x210>
 8003074:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003078:	d817      	bhi.n	80030aa <UART_SetConfig+0x216>
 800307a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800307e:	d00b      	beq.n	8003098 <UART_SetConfig+0x204>
 8003080:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003084:	d811      	bhi.n	80030aa <UART_SetConfig+0x216>
 8003086:	2b00      	cmp	r3, #0
 8003088:	d003      	beq.n	8003092 <UART_SetConfig+0x1fe>
 800308a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800308e:	d006      	beq.n	800309e <UART_SetConfig+0x20a>
 8003090:	e00b      	b.n	80030aa <UART_SetConfig+0x216>
 8003092:	2300      	movs	r3, #0
 8003094:	77fb      	strb	r3, [r7, #31]
 8003096:	e0a1      	b.n	80031dc <UART_SetConfig+0x348>
 8003098:	2302      	movs	r3, #2
 800309a:	77fb      	strb	r3, [r7, #31]
 800309c:	e09e      	b.n	80031dc <UART_SetConfig+0x348>
 800309e:	2304      	movs	r3, #4
 80030a0:	77fb      	strb	r3, [r7, #31]
 80030a2:	e09b      	b.n	80031dc <UART_SetConfig+0x348>
 80030a4:	2308      	movs	r3, #8
 80030a6:	77fb      	strb	r3, [r7, #31]
 80030a8:	e098      	b.n	80031dc <UART_SetConfig+0x348>
 80030aa:	2310      	movs	r3, #16
 80030ac:	77fb      	strb	r3, [r7, #31]
 80030ae:	e095      	b.n	80031dc <UART_SetConfig+0x348>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a2f      	ldr	r2, [pc, #188]	@ (8003174 <UART_SetConfig+0x2e0>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d125      	bne.n	8003106 <UART_SetConfig+0x272>
 80030ba:	4b29      	ldr	r3, [pc, #164]	@ (8003160 <UART_SetConfig+0x2cc>)
 80030bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030c0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80030c4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80030c8:	d017      	beq.n	80030fa <UART_SetConfig+0x266>
 80030ca:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80030ce:	d817      	bhi.n	8003100 <UART_SetConfig+0x26c>
 80030d0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80030d4:	d00b      	beq.n	80030ee <UART_SetConfig+0x25a>
 80030d6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80030da:	d811      	bhi.n	8003100 <UART_SetConfig+0x26c>
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d003      	beq.n	80030e8 <UART_SetConfig+0x254>
 80030e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80030e4:	d006      	beq.n	80030f4 <UART_SetConfig+0x260>
 80030e6:	e00b      	b.n	8003100 <UART_SetConfig+0x26c>
 80030e8:	2301      	movs	r3, #1
 80030ea:	77fb      	strb	r3, [r7, #31]
 80030ec:	e076      	b.n	80031dc <UART_SetConfig+0x348>
 80030ee:	2302      	movs	r3, #2
 80030f0:	77fb      	strb	r3, [r7, #31]
 80030f2:	e073      	b.n	80031dc <UART_SetConfig+0x348>
 80030f4:	2304      	movs	r3, #4
 80030f6:	77fb      	strb	r3, [r7, #31]
 80030f8:	e070      	b.n	80031dc <UART_SetConfig+0x348>
 80030fa:	2308      	movs	r3, #8
 80030fc:	77fb      	strb	r3, [r7, #31]
 80030fe:	e06d      	b.n	80031dc <UART_SetConfig+0x348>
 8003100:	2310      	movs	r3, #16
 8003102:	77fb      	strb	r3, [r7, #31]
 8003104:	e06a      	b.n	80031dc <UART_SetConfig+0x348>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a1b      	ldr	r2, [pc, #108]	@ (8003178 <UART_SetConfig+0x2e4>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d138      	bne.n	8003182 <UART_SetConfig+0x2ee>
 8003110:	4b13      	ldr	r3, [pc, #76]	@ (8003160 <UART_SetConfig+0x2cc>)
 8003112:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003116:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800311a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800311e:	d017      	beq.n	8003150 <UART_SetConfig+0x2bc>
 8003120:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003124:	d82a      	bhi.n	800317c <UART_SetConfig+0x2e8>
 8003126:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800312a:	d00b      	beq.n	8003144 <UART_SetConfig+0x2b0>
 800312c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003130:	d824      	bhi.n	800317c <UART_SetConfig+0x2e8>
 8003132:	2b00      	cmp	r3, #0
 8003134:	d003      	beq.n	800313e <UART_SetConfig+0x2aa>
 8003136:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800313a:	d006      	beq.n	800314a <UART_SetConfig+0x2b6>
 800313c:	e01e      	b.n	800317c <UART_SetConfig+0x2e8>
 800313e:	2300      	movs	r3, #0
 8003140:	77fb      	strb	r3, [r7, #31]
 8003142:	e04b      	b.n	80031dc <UART_SetConfig+0x348>
 8003144:	2302      	movs	r3, #2
 8003146:	77fb      	strb	r3, [r7, #31]
 8003148:	e048      	b.n	80031dc <UART_SetConfig+0x348>
 800314a:	2304      	movs	r3, #4
 800314c:	77fb      	strb	r3, [r7, #31]
 800314e:	e045      	b.n	80031dc <UART_SetConfig+0x348>
 8003150:	2308      	movs	r3, #8
 8003152:	77fb      	strb	r3, [r7, #31]
 8003154:	e042      	b.n	80031dc <UART_SetConfig+0x348>
 8003156:	bf00      	nop
 8003158:	efff69f3 	.word	0xefff69f3
 800315c:	40011000 	.word	0x40011000
 8003160:	40023800 	.word	0x40023800
 8003164:	40004400 	.word	0x40004400
 8003168:	40004800 	.word	0x40004800
 800316c:	40004c00 	.word	0x40004c00
 8003170:	40005000 	.word	0x40005000
 8003174:	40011400 	.word	0x40011400
 8003178:	40007800 	.word	0x40007800
 800317c:	2310      	movs	r3, #16
 800317e:	77fb      	strb	r3, [r7, #31]
 8003180:	e02c      	b.n	80031dc <UART_SetConfig+0x348>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4a72      	ldr	r2, [pc, #456]	@ (8003350 <UART_SetConfig+0x4bc>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d125      	bne.n	80031d8 <UART_SetConfig+0x344>
 800318c:	4b71      	ldr	r3, [pc, #452]	@ (8003354 <UART_SetConfig+0x4c0>)
 800318e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003192:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8003196:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800319a:	d017      	beq.n	80031cc <UART_SetConfig+0x338>
 800319c:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80031a0:	d817      	bhi.n	80031d2 <UART_SetConfig+0x33e>
 80031a2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80031a6:	d00b      	beq.n	80031c0 <UART_SetConfig+0x32c>
 80031a8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80031ac:	d811      	bhi.n	80031d2 <UART_SetConfig+0x33e>
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d003      	beq.n	80031ba <UART_SetConfig+0x326>
 80031b2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80031b6:	d006      	beq.n	80031c6 <UART_SetConfig+0x332>
 80031b8:	e00b      	b.n	80031d2 <UART_SetConfig+0x33e>
 80031ba:	2300      	movs	r3, #0
 80031bc:	77fb      	strb	r3, [r7, #31]
 80031be:	e00d      	b.n	80031dc <UART_SetConfig+0x348>
 80031c0:	2302      	movs	r3, #2
 80031c2:	77fb      	strb	r3, [r7, #31]
 80031c4:	e00a      	b.n	80031dc <UART_SetConfig+0x348>
 80031c6:	2304      	movs	r3, #4
 80031c8:	77fb      	strb	r3, [r7, #31]
 80031ca:	e007      	b.n	80031dc <UART_SetConfig+0x348>
 80031cc:	2308      	movs	r3, #8
 80031ce:	77fb      	strb	r3, [r7, #31]
 80031d0:	e004      	b.n	80031dc <UART_SetConfig+0x348>
 80031d2:	2310      	movs	r3, #16
 80031d4:	77fb      	strb	r3, [r7, #31]
 80031d6:	e001      	b.n	80031dc <UART_SetConfig+0x348>
 80031d8:	2310      	movs	r3, #16
 80031da:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	69db      	ldr	r3, [r3, #28]
 80031e0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80031e4:	d15b      	bne.n	800329e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80031e6:	7ffb      	ldrb	r3, [r7, #31]
 80031e8:	2b08      	cmp	r3, #8
 80031ea:	d828      	bhi.n	800323e <UART_SetConfig+0x3aa>
 80031ec:	a201      	add	r2, pc, #4	@ (adr r2, 80031f4 <UART_SetConfig+0x360>)
 80031ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031f2:	bf00      	nop
 80031f4:	08003219 	.word	0x08003219
 80031f8:	08003221 	.word	0x08003221
 80031fc:	08003229 	.word	0x08003229
 8003200:	0800323f 	.word	0x0800323f
 8003204:	0800322f 	.word	0x0800322f
 8003208:	0800323f 	.word	0x0800323f
 800320c:	0800323f 	.word	0x0800323f
 8003210:	0800323f 	.word	0x0800323f
 8003214:	08003237 	.word	0x08003237
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003218:	f7ff f94c 	bl	80024b4 <HAL_RCC_GetPCLK1Freq>
 800321c:	61b8      	str	r0, [r7, #24]
        break;
 800321e:	e013      	b.n	8003248 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003220:	f7ff f95c 	bl	80024dc <HAL_RCC_GetPCLK2Freq>
 8003224:	61b8      	str	r0, [r7, #24]
        break;
 8003226:	e00f      	b.n	8003248 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003228:	4b4b      	ldr	r3, [pc, #300]	@ (8003358 <UART_SetConfig+0x4c4>)
 800322a:	61bb      	str	r3, [r7, #24]
        break;
 800322c:	e00c      	b.n	8003248 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800322e:	f7ff f86f 	bl	8002310 <HAL_RCC_GetSysClockFreq>
 8003232:	61b8      	str	r0, [r7, #24]
        break;
 8003234:	e008      	b.n	8003248 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003236:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800323a:	61bb      	str	r3, [r7, #24]
        break;
 800323c:	e004      	b.n	8003248 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800323e:	2300      	movs	r3, #0
 8003240:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	77bb      	strb	r3, [r7, #30]
        break;
 8003246:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003248:	69bb      	ldr	r3, [r7, #24]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d074      	beq.n	8003338 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800324e:	69bb      	ldr	r3, [r7, #24]
 8003250:	005a      	lsls	r2, r3, #1
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	085b      	lsrs	r3, r3, #1
 8003258:	441a      	add	r2, r3
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003262:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003264:	693b      	ldr	r3, [r7, #16]
 8003266:	2b0f      	cmp	r3, #15
 8003268:	d916      	bls.n	8003298 <UART_SetConfig+0x404>
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003270:	d212      	bcs.n	8003298 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	b29b      	uxth	r3, r3
 8003276:	f023 030f 	bic.w	r3, r3, #15
 800327a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800327c:	693b      	ldr	r3, [r7, #16]
 800327e:	085b      	lsrs	r3, r3, #1
 8003280:	b29b      	uxth	r3, r3
 8003282:	f003 0307 	and.w	r3, r3, #7
 8003286:	b29a      	uxth	r2, r3
 8003288:	89fb      	ldrh	r3, [r7, #14]
 800328a:	4313      	orrs	r3, r2
 800328c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	89fa      	ldrh	r2, [r7, #14]
 8003294:	60da      	str	r2, [r3, #12]
 8003296:	e04f      	b.n	8003338 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003298:	2301      	movs	r3, #1
 800329a:	77bb      	strb	r3, [r7, #30]
 800329c:	e04c      	b.n	8003338 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800329e:	7ffb      	ldrb	r3, [r7, #31]
 80032a0:	2b08      	cmp	r3, #8
 80032a2:	d828      	bhi.n	80032f6 <UART_SetConfig+0x462>
 80032a4:	a201      	add	r2, pc, #4	@ (adr r2, 80032ac <UART_SetConfig+0x418>)
 80032a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032aa:	bf00      	nop
 80032ac:	080032d1 	.word	0x080032d1
 80032b0:	080032d9 	.word	0x080032d9
 80032b4:	080032e1 	.word	0x080032e1
 80032b8:	080032f7 	.word	0x080032f7
 80032bc:	080032e7 	.word	0x080032e7
 80032c0:	080032f7 	.word	0x080032f7
 80032c4:	080032f7 	.word	0x080032f7
 80032c8:	080032f7 	.word	0x080032f7
 80032cc:	080032ef 	.word	0x080032ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80032d0:	f7ff f8f0 	bl	80024b4 <HAL_RCC_GetPCLK1Freq>
 80032d4:	61b8      	str	r0, [r7, #24]
        break;
 80032d6:	e013      	b.n	8003300 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80032d8:	f7ff f900 	bl	80024dc <HAL_RCC_GetPCLK2Freq>
 80032dc:	61b8      	str	r0, [r7, #24]
        break;
 80032de:	e00f      	b.n	8003300 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80032e0:	4b1d      	ldr	r3, [pc, #116]	@ (8003358 <UART_SetConfig+0x4c4>)
 80032e2:	61bb      	str	r3, [r7, #24]
        break;
 80032e4:	e00c      	b.n	8003300 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80032e6:	f7ff f813 	bl	8002310 <HAL_RCC_GetSysClockFreq>
 80032ea:	61b8      	str	r0, [r7, #24]
        break;
 80032ec:	e008      	b.n	8003300 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80032ee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80032f2:	61bb      	str	r3, [r7, #24]
        break;
 80032f4:	e004      	b.n	8003300 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80032f6:	2300      	movs	r3, #0
 80032f8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	77bb      	strb	r3, [r7, #30]
        break;
 80032fe:	bf00      	nop
    }

    if (pclk != 0U)
 8003300:	69bb      	ldr	r3, [r7, #24]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d018      	beq.n	8003338 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	085a      	lsrs	r2, r3, #1
 800330c:	69bb      	ldr	r3, [r7, #24]
 800330e:	441a      	add	r2, r3
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	fbb2 f3f3 	udiv	r3, r2, r3
 8003318:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	2b0f      	cmp	r3, #15
 800331e:	d909      	bls.n	8003334 <UART_SetConfig+0x4a0>
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003326:	d205      	bcs.n	8003334 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003328:	693b      	ldr	r3, [r7, #16]
 800332a:	b29a      	uxth	r2, r3
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	60da      	str	r2, [r3, #12]
 8003332:	e001      	b.n	8003338 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003334:	2301      	movs	r3, #1
 8003336:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2200      	movs	r2, #0
 800333c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2200      	movs	r2, #0
 8003342:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003344:	7fbb      	ldrb	r3, [r7, #30]
}
 8003346:	4618      	mov	r0, r3
 8003348:	3720      	adds	r7, #32
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}
 800334e:	bf00      	nop
 8003350:	40007c00 	.word	0x40007c00
 8003354:	40023800 	.word	0x40023800
 8003358:	00f42400 	.word	0x00f42400

0800335c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800335c:	b480      	push	{r7}
 800335e:	b083      	sub	sp, #12
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003368:	f003 0308 	and.w	r3, r3, #8
 800336c:	2b00      	cmp	r3, #0
 800336e:	d00a      	beq.n	8003386 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	430a      	orrs	r2, r1
 8003384:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800338a:	f003 0301 	and.w	r3, r3, #1
 800338e:	2b00      	cmp	r3, #0
 8003390:	d00a      	beq.n	80033a8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	430a      	orrs	r2, r1
 80033a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033ac:	f003 0302 	and.w	r3, r3, #2
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d00a      	beq.n	80033ca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	430a      	orrs	r2, r1
 80033c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033ce:	f003 0304 	and.w	r3, r3, #4
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d00a      	beq.n	80033ec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	430a      	orrs	r2, r1
 80033ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033f0:	f003 0310 	and.w	r3, r3, #16
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d00a      	beq.n	800340e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	689b      	ldr	r3, [r3, #8]
 80033fe:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	430a      	orrs	r2, r1
 800340c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003412:	f003 0320 	and.w	r3, r3, #32
 8003416:	2b00      	cmp	r3, #0
 8003418:	d00a      	beq.n	8003430 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	689b      	ldr	r3, [r3, #8]
 8003420:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	430a      	orrs	r2, r1
 800342e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003434:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003438:	2b00      	cmp	r3, #0
 800343a:	d01a      	beq.n	8003472 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	430a      	orrs	r2, r1
 8003450:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003456:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800345a:	d10a      	bne.n	8003472 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	430a      	orrs	r2, r1
 8003470:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003476:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800347a:	2b00      	cmp	r3, #0
 800347c:	d00a      	beq.n	8003494 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	430a      	orrs	r2, r1
 8003492:	605a      	str	r2, [r3, #4]
  }
}
 8003494:	bf00      	nop
 8003496:	370c      	adds	r7, #12
 8003498:	46bd      	mov	sp, r7
 800349a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349e:	4770      	bx	lr

080034a0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b08c      	sub	sp, #48	@ 0x30
 80034a4:	af02      	add	r7, sp, #8
 80034a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2200      	movs	r2, #0
 80034ac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80034b0:	f7fe f86e 	bl	8001590 <HAL_GetTick>
 80034b4:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f003 0308 	and.w	r3, r3, #8
 80034c0:	2b08      	cmp	r3, #8
 80034c2:	d12e      	bne.n	8003522 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80034c4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80034c8:	9300      	str	r3, [sp, #0]
 80034ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034cc:	2200      	movs	r2, #0
 80034ce:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80034d2:	6878      	ldr	r0, [r7, #4]
 80034d4:	f000 f83b 	bl	800354e <UART_WaitOnFlagUntilTimeout>
 80034d8:	4603      	mov	r3, r0
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d021      	beq.n	8003522 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034e4:	693b      	ldr	r3, [r7, #16]
 80034e6:	e853 3f00 	ldrex	r3, [r3]
 80034ea:	60fb      	str	r3, [r7, #12]
   return(result);
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80034f2:	623b      	str	r3, [r7, #32]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	461a      	mov	r2, r3
 80034fa:	6a3b      	ldr	r3, [r7, #32]
 80034fc:	61fb      	str	r3, [r7, #28]
 80034fe:	61ba      	str	r2, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003500:	69b9      	ldr	r1, [r7, #24]
 8003502:	69fa      	ldr	r2, [r7, #28]
 8003504:	e841 2300 	strex	r3, r2, [r1]
 8003508:	617b      	str	r3, [r7, #20]
   return(result);
 800350a:	697b      	ldr	r3, [r7, #20]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d1e6      	bne.n	80034de <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2220      	movs	r2, #32
 8003514:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2200      	movs	r2, #0
 800351a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800351e:	2303      	movs	r3, #3
 8003520:	e011      	b.n	8003546 <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2220      	movs	r2, #32
 8003526:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2220      	movs	r2, #32
 800352c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2200      	movs	r2, #0
 8003534:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2200      	movs	r2, #0
 800353a:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2200      	movs	r2, #0
 8003540:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003544:	2300      	movs	r3, #0
}
 8003546:	4618      	mov	r0, r3
 8003548:	3728      	adds	r7, #40	@ 0x28
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}

0800354e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800354e:	b580      	push	{r7, lr}
 8003550:	b084      	sub	sp, #16
 8003552:	af00      	add	r7, sp, #0
 8003554:	60f8      	str	r0, [r7, #12]
 8003556:	60b9      	str	r1, [r7, #8]
 8003558:	603b      	str	r3, [r7, #0]
 800355a:	4613      	mov	r3, r2
 800355c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800355e:	e04f      	b.n	8003600 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003560:	69bb      	ldr	r3, [r7, #24]
 8003562:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003566:	d04b      	beq.n	8003600 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003568:	f7fe f812 	bl	8001590 <HAL_GetTick>
 800356c:	4602      	mov	r2, r0
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	1ad3      	subs	r3, r2, r3
 8003572:	69ba      	ldr	r2, [r7, #24]
 8003574:	429a      	cmp	r2, r3
 8003576:	d302      	bcc.n	800357e <UART_WaitOnFlagUntilTimeout+0x30>
 8003578:	69bb      	ldr	r3, [r7, #24]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d101      	bne.n	8003582 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800357e:	2303      	movs	r3, #3
 8003580:	e04e      	b.n	8003620 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f003 0304 	and.w	r3, r3, #4
 800358c:	2b00      	cmp	r3, #0
 800358e:	d037      	beq.n	8003600 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	2b80      	cmp	r3, #128	@ 0x80
 8003594:	d034      	beq.n	8003600 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003596:	68bb      	ldr	r3, [r7, #8]
 8003598:	2b40      	cmp	r3, #64	@ 0x40
 800359a:	d031      	beq.n	8003600 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	69db      	ldr	r3, [r3, #28]
 80035a2:	f003 0308 	and.w	r3, r3, #8
 80035a6:	2b08      	cmp	r3, #8
 80035a8:	d110      	bne.n	80035cc <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	2208      	movs	r2, #8
 80035b0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80035b2:	68f8      	ldr	r0, [r7, #12]
 80035b4:	f000 f838 	bl	8003628 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	2208      	movs	r2, #8
 80035bc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	2200      	movs	r2, #0
 80035c4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80035c8:	2301      	movs	r3, #1
 80035ca:	e029      	b.n	8003620 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	69db      	ldr	r3, [r3, #28]
 80035d2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80035d6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80035da:	d111      	bne.n	8003600 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80035e4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80035e6:	68f8      	ldr	r0, [r7, #12]
 80035e8:	f000 f81e 	bl	8003628 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	2220      	movs	r2, #32
 80035f0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	2200      	movs	r2, #0
 80035f8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80035fc:	2303      	movs	r3, #3
 80035fe:	e00f      	b.n	8003620 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	69da      	ldr	r2, [r3, #28]
 8003606:	68bb      	ldr	r3, [r7, #8]
 8003608:	4013      	ands	r3, r2
 800360a:	68ba      	ldr	r2, [r7, #8]
 800360c:	429a      	cmp	r2, r3
 800360e:	bf0c      	ite	eq
 8003610:	2301      	moveq	r3, #1
 8003612:	2300      	movne	r3, #0
 8003614:	b2db      	uxtb	r3, r3
 8003616:	461a      	mov	r2, r3
 8003618:	79fb      	ldrb	r3, [r7, #7]
 800361a:	429a      	cmp	r2, r3
 800361c:	d0a0      	beq.n	8003560 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800361e:	2300      	movs	r3, #0
}
 8003620:	4618      	mov	r0, r3
 8003622:	3710      	adds	r7, #16
 8003624:	46bd      	mov	sp, r7
 8003626:	bd80      	pop	{r7, pc}

08003628 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003628:	b480      	push	{r7}
 800362a:	b095      	sub	sp, #84	@ 0x54
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003636:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003638:	e853 3f00 	ldrex	r3, [r3]
 800363c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800363e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003640:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003644:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	461a      	mov	r2, r3
 800364c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800364e:	643b      	str	r3, [r7, #64]	@ 0x40
 8003650:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003652:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003654:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003656:	e841 2300 	strex	r3, r2, [r1]
 800365a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800365c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800365e:	2b00      	cmp	r3, #0
 8003660:	d1e6      	bne.n	8003630 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	3308      	adds	r3, #8
 8003668:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800366a:	6a3b      	ldr	r3, [r7, #32]
 800366c:	e853 3f00 	ldrex	r3, [r3]
 8003670:	61fb      	str	r3, [r7, #28]
   return(result);
 8003672:	69fb      	ldr	r3, [r7, #28]
 8003674:	f023 0301 	bic.w	r3, r3, #1
 8003678:	64bb      	str	r3, [r7, #72]	@ 0x48
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	3308      	adds	r3, #8
 8003680:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003682:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003684:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003686:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003688:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800368a:	e841 2300 	strex	r3, r2, [r1]
 800368e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003692:	2b00      	cmp	r3, #0
 8003694:	d1e5      	bne.n	8003662 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800369a:	2b01      	cmp	r3, #1
 800369c:	d118      	bne.n	80036d0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	e853 3f00 	ldrex	r3, [r3]
 80036aa:	60bb      	str	r3, [r7, #8]
   return(result);
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	f023 0310 	bic.w	r3, r3, #16
 80036b2:	647b      	str	r3, [r7, #68]	@ 0x44
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	461a      	mov	r2, r3
 80036ba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80036bc:	61bb      	str	r3, [r7, #24]
 80036be:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036c0:	6979      	ldr	r1, [r7, #20]
 80036c2:	69ba      	ldr	r2, [r7, #24]
 80036c4:	e841 2300 	strex	r3, r2, [r1]
 80036c8:	613b      	str	r3, [r7, #16]
   return(result);
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d1e6      	bne.n	800369e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2220      	movs	r2, #32
 80036d4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2200      	movs	r2, #0
 80036dc:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2200      	movs	r2, #0
 80036e2:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80036e4:	bf00      	nop
 80036e6:	3754      	adds	r7, #84	@ 0x54
 80036e8:	46bd      	mov	sp, r7
 80036ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ee:	4770      	bx	lr

080036f0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80036f0:	b480      	push	{r7}
 80036f2:	b085      	sub	sp, #20
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	4603      	mov	r3, r0
 80036f8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80036fa:	2300      	movs	r3, #0
 80036fc:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80036fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003702:	2b84      	cmp	r3, #132	@ 0x84
 8003704:	d005      	beq.n	8003712 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003706:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	4413      	add	r3, r2
 800370e:	3303      	adds	r3, #3
 8003710:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003712:	68fb      	ldr	r3, [r7, #12]
}
 8003714:	4618      	mov	r0, r3
 8003716:	3714      	adds	r7, #20
 8003718:	46bd      	mov	sp, r7
 800371a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371e:	4770      	bx	lr

08003720 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003724:	f000 fee2 	bl	80044ec <vTaskStartScheduler>
  
  return osOK;
 8003728:	2300      	movs	r3, #0
}
 800372a:	4618      	mov	r0, r3
 800372c:	bd80      	pop	{r7, pc}

0800372e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800372e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003730:	b089      	sub	sp, #36	@ 0x24
 8003732:	af04      	add	r7, sp, #16
 8003734:	6078      	str	r0, [r7, #4]
 8003736:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	695b      	ldr	r3, [r3, #20]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d020      	beq.n	8003782 <osThreadCreate+0x54>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	699b      	ldr	r3, [r3, #24]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d01c      	beq.n	8003782 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	685c      	ldr	r4, [r3, #4]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	691e      	ldr	r6, [r3, #16]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800375a:	4618      	mov	r0, r3
 800375c:	f7ff ffc8 	bl	80036f0 <makeFreeRtosPriority>
 8003760:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	695b      	ldr	r3, [r3, #20]
 8003766:	687a      	ldr	r2, [r7, #4]
 8003768:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800376a:	9202      	str	r2, [sp, #8]
 800376c:	9301      	str	r3, [sp, #4]
 800376e:	9100      	str	r1, [sp, #0]
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	4632      	mov	r2, r6
 8003774:	4629      	mov	r1, r5
 8003776:	4620      	mov	r0, r4
 8003778:	f000 fce0 	bl	800413c <xTaskCreateStatic>
 800377c:	4603      	mov	r3, r0
 800377e:	60fb      	str	r3, [r7, #12]
 8003780:	e01c      	b.n	80037bc <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	685c      	ldr	r4, [r3, #4]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800378e:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003796:	4618      	mov	r0, r3
 8003798:	f7ff ffaa 	bl	80036f0 <makeFreeRtosPriority>
 800379c:	4602      	mov	r2, r0
 800379e:	f107 030c 	add.w	r3, r7, #12
 80037a2:	9301      	str	r3, [sp, #4]
 80037a4:	9200      	str	r2, [sp, #0]
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	4632      	mov	r2, r6
 80037aa:	4629      	mov	r1, r5
 80037ac:	4620      	mov	r0, r4
 80037ae:	f000 fd2b 	bl	8004208 <xTaskCreate>
 80037b2:	4603      	mov	r3, r0
 80037b4:	2b01      	cmp	r3, #1
 80037b6:	d001      	beq.n	80037bc <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80037b8:	2300      	movs	r3, #0
 80037ba:	e000      	b.n	80037be <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80037bc:	68fb      	ldr	r3, [r7, #12]
}
 80037be:	4618      	mov	r0, r3
 80037c0:	3714      	adds	r7, #20
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080037c6 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80037c6:	b580      	push	{r7, lr}
 80037c8:	b084      	sub	sp, #16
 80037ca:	af00      	add	r7, sp, #0
 80037cc:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d001      	beq.n	80037dc <osDelay+0x16>
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	e000      	b.n	80037de <osDelay+0x18>
 80037dc:	2301      	movs	r3, #1
 80037de:	4618      	mov	r0, r3
 80037e0:	f000 fe4c 	bl	800447c <vTaskDelay>
  
  return osOK;
 80037e4:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	3710      	adds	r7, #16
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd80      	pop	{r7, pc}

080037ee <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80037ee:	b480      	push	{r7}
 80037f0:	b083      	sub	sp, #12
 80037f2:	af00      	add	r7, sp, #0
 80037f4:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	f103 0208 	add.w	r2, r3, #8
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	f04f 32ff 	mov.w	r2, #4294967295
 8003806:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	f103 0208 	add.w	r2, r3, #8
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	f103 0208 	add.w	r2, r3, #8
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2200      	movs	r2, #0
 8003820:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003822:	bf00      	nop
 8003824:	370c      	adds	r7, #12
 8003826:	46bd      	mov	sp, r7
 8003828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382c:	4770      	bx	lr

0800382e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800382e:	b480      	push	{r7}
 8003830:	b083      	sub	sp, #12
 8003832:	af00      	add	r7, sp, #0
 8003834:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2200      	movs	r2, #0
 800383a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800383c:	bf00      	nop
 800383e:	370c      	adds	r7, #12
 8003840:	46bd      	mov	sp, r7
 8003842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003846:	4770      	bx	lr

08003848 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003848:	b480      	push	{r7}
 800384a:	b085      	sub	sp, #20
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
 8003850:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	68fa      	ldr	r2, [r7, #12]
 800385c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	689a      	ldr	r2, [r3, #8]
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	689b      	ldr	r3, [r3, #8]
 800386a:	683a      	ldr	r2, [r7, #0]
 800386c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	683a      	ldr	r2, [r7, #0]
 8003872:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	687a      	ldr	r2, [r7, #4]
 8003878:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	1c5a      	adds	r2, r3, #1
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	601a      	str	r2, [r3, #0]
}
 8003884:	bf00      	nop
 8003886:	3714      	adds	r7, #20
 8003888:	46bd      	mov	sp, r7
 800388a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388e:	4770      	bx	lr

08003890 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003890:	b480      	push	{r7}
 8003892:	b085      	sub	sp, #20
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
 8003898:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038a6:	d103      	bne.n	80038b0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	691b      	ldr	r3, [r3, #16]
 80038ac:	60fb      	str	r3, [r7, #12]
 80038ae:	e00c      	b.n	80038ca <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	3308      	adds	r3, #8
 80038b4:	60fb      	str	r3, [r7, #12]
 80038b6:	e002      	b.n	80038be <vListInsert+0x2e>
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	60fb      	str	r3, [r7, #12]
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	68ba      	ldr	r2, [r7, #8]
 80038c6:	429a      	cmp	r2, r3
 80038c8:	d2f6      	bcs.n	80038b8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	685a      	ldr	r2, [r3, #4]
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	683a      	ldr	r2, [r7, #0]
 80038d8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	68fa      	ldr	r2, [r7, #12]
 80038de:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	683a      	ldr	r2, [r7, #0]
 80038e4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	687a      	ldr	r2, [r7, #4]
 80038ea:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	1c5a      	adds	r2, r3, #1
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	601a      	str	r2, [r3, #0]
}
 80038f6:	bf00      	nop
 80038f8:	3714      	adds	r7, #20
 80038fa:	46bd      	mov	sp, r7
 80038fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003900:	4770      	bx	lr

08003902 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003902:	b480      	push	{r7}
 8003904:	b085      	sub	sp, #20
 8003906:	af00      	add	r7, sp, #0
 8003908:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	691b      	ldr	r3, [r3, #16]
 800390e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	687a      	ldr	r2, [r7, #4]
 8003916:	6892      	ldr	r2, [r2, #8]
 8003918:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	689b      	ldr	r3, [r3, #8]
 800391e:	687a      	ldr	r2, [r7, #4]
 8003920:	6852      	ldr	r2, [r2, #4]
 8003922:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	687a      	ldr	r2, [r7, #4]
 800392a:	429a      	cmp	r2, r3
 800392c:	d103      	bne.n	8003936 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	689a      	ldr	r2, [r3, #8]
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2200      	movs	r2, #0
 800393a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	1e5a      	subs	r2, r3, #1
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
}
 800394a:	4618      	mov	r0, r3
 800394c:	3714      	adds	r7, #20
 800394e:	46bd      	mov	sp, r7
 8003950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003954:	4770      	bx	lr
	...

08003958 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b084      	sub	sp, #16
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
 8003960:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d10d      	bne.n	8003988 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800396c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003970:	b672      	cpsid	i
 8003972:	f383 8811 	msr	BASEPRI, r3
 8003976:	f3bf 8f6f 	isb	sy
 800397a:	f3bf 8f4f 	dsb	sy
 800397e:	b662      	cpsie	i
 8003980:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003982:	bf00      	nop
 8003984:	bf00      	nop
 8003986:	e7fd      	b.n	8003984 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8003988:	f001 fd20 	bl	80053cc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681a      	ldr	r2, [r3, #0]
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003994:	68f9      	ldr	r1, [r7, #12]
 8003996:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003998:	fb01 f303 	mul.w	r3, r1, r3
 800399c:	441a      	add	r2, r3
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	2200      	movs	r2, #0
 80039a6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681a      	ldr	r2, [r3, #0]
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681a      	ldr	r2, [r3, #0]
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039b8:	3b01      	subs	r3, #1
 80039ba:	68f9      	ldr	r1, [r7, #12]
 80039bc:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80039be:	fb01 f303 	mul.w	r3, r1, r3
 80039c2:	441a      	add	r2, r3
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	22ff      	movs	r2, #255	@ 0xff
 80039cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	22ff      	movs	r2, #255	@ 0xff
 80039d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d114      	bne.n	8003a08 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	691b      	ldr	r3, [r3, #16]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d01a      	beq.n	8003a1c <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	3310      	adds	r3, #16
 80039ea:	4618      	mov	r0, r3
 80039ec:	f000 ffd4 	bl	8004998 <xTaskRemoveFromEventList>
 80039f0:	4603      	mov	r3, r0
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d012      	beq.n	8003a1c <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80039f6:	4b0d      	ldr	r3, [pc, #52]	@ (8003a2c <xQueueGenericReset+0xd4>)
 80039f8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80039fc:	601a      	str	r2, [r3, #0]
 80039fe:	f3bf 8f4f 	dsb	sy
 8003a02:	f3bf 8f6f 	isb	sy
 8003a06:	e009      	b.n	8003a1c <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	3310      	adds	r3, #16
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f7ff feee 	bl	80037ee <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	3324      	adds	r3, #36	@ 0x24
 8003a16:	4618      	mov	r0, r3
 8003a18:	f7ff fee9 	bl	80037ee <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003a1c:	f001 fd0c 	bl	8005438 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003a20:	2301      	movs	r3, #1
}
 8003a22:	4618      	mov	r0, r3
 8003a24:	3710      	adds	r7, #16
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd80      	pop	{r7, pc}
 8003a2a:	bf00      	nop
 8003a2c:	e000ed04 	.word	0xe000ed04

08003a30 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b08a      	sub	sp, #40	@ 0x28
 8003a34:	af02      	add	r7, sp, #8
 8003a36:	60f8      	str	r0, [r7, #12]
 8003a38:	60b9      	str	r1, [r7, #8]
 8003a3a:	4613      	mov	r3, r2
 8003a3c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d10d      	bne.n	8003a60 <xQueueGenericCreate+0x30>
	__asm volatile
 8003a44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a48:	b672      	cpsid	i
 8003a4a:	f383 8811 	msr	BASEPRI, r3
 8003a4e:	f3bf 8f6f 	isb	sy
 8003a52:	f3bf 8f4f 	dsb	sy
 8003a56:	b662      	cpsie	i
 8003a58:	613b      	str	r3, [r7, #16]
}
 8003a5a:	bf00      	nop
 8003a5c:	bf00      	nop
 8003a5e:	e7fd      	b.n	8003a5c <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d102      	bne.n	8003a6c <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8003a66:	2300      	movs	r3, #0
 8003a68:	61fb      	str	r3, [r7, #28]
 8003a6a:	e004      	b.n	8003a76 <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	68ba      	ldr	r2, [r7, #8]
 8003a70:	fb02 f303 	mul.w	r3, r2, r3
 8003a74:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003a76:	69fb      	ldr	r3, [r7, #28]
 8003a78:	3348      	adds	r3, #72	@ 0x48
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	f001 fd8e 	bl	800559c <pvPortMalloc>
 8003a80:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003a82:	69bb      	ldr	r3, [r7, #24]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d011      	beq.n	8003aac <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003a88:	69bb      	ldr	r3, [r7, #24]
 8003a8a:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003a8c:	697b      	ldr	r3, [r7, #20]
 8003a8e:	3348      	adds	r3, #72	@ 0x48
 8003a90:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003a92:	69bb      	ldr	r3, [r7, #24]
 8003a94:	2200      	movs	r2, #0
 8003a96:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003a9a:	79fa      	ldrb	r2, [r7, #7]
 8003a9c:	69bb      	ldr	r3, [r7, #24]
 8003a9e:	9300      	str	r3, [sp, #0]
 8003aa0:	4613      	mov	r3, r2
 8003aa2:	697a      	ldr	r2, [r7, #20]
 8003aa4:	68b9      	ldr	r1, [r7, #8]
 8003aa6:	68f8      	ldr	r0, [r7, #12]
 8003aa8:	f000 f805 	bl	8003ab6 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003aac:	69bb      	ldr	r3, [r7, #24]
	}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	3720      	adds	r7, #32
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}

08003ab6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003ab6:	b580      	push	{r7, lr}
 8003ab8:	b084      	sub	sp, #16
 8003aba:	af00      	add	r7, sp, #0
 8003abc:	60f8      	str	r0, [r7, #12]
 8003abe:	60b9      	str	r1, [r7, #8]
 8003ac0:	607a      	str	r2, [r7, #4]
 8003ac2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003ac4:	68bb      	ldr	r3, [r7, #8]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d103      	bne.n	8003ad2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003aca:	69bb      	ldr	r3, [r7, #24]
 8003acc:	69ba      	ldr	r2, [r7, #24]
 8003ace:	601a      	str	r2, [r3, #0]
 8003ad0:	e002      	b.n	8003ad8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003ad2:	69bb      	ldr	r3, [r7, #24]
 8003ad4:	687a      	ldr	r2, [r7, #4]
 8003ad6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003ad8:	69bb      	ldr	r3, [r7, #24]
 8003ada:	68fa      	ldr	r2, [r7, #12]
 8003adc:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003ade:	69bb      	ldr	r3, [r7, #24]
 8003ae0:	68ba      	ldr	r2, [r7, #8]
 8003ae2:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003ae4:	2101      	movs	r1, #1
 8003ae6:	69b8      	ldr	r0, [r7, #24]
 8003ae8:	f7ff ff36 	bl	8003958 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003aec:	bf00      	nop
 8003aee:	3710      	adds	r7, #16
 8003af0:	46bd      	mov	sp, r7
 8003af2:	bd80      	pop	{r7, pc}

08003af4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b08e      	sub	sp, #56	@ 0x38
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	60f8      	str	r0, [r7, #12]
 8003afc:	60b9      	str	r1, [r7, #8]
 8003afe:	607a      	str	r2, [r7, #4]
 8003b00:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003b02:	2300      	movs	r3, #0
 8003b04:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8003b0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d10d      	bne.n	8003b2c <xQueueGenericSend+0x38>
	__asm volatile
 8003b10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b14:	b672      	cpsid	i
 8003b16:	f383 8811 	msr	BASEPRI, r3
 8003b1a:	f3bf 8f6f 	isb	sy
 8003b1e:	f3bf 8f4f 	dsb	sy
 8003b22:	b662      	cpsie	i
 8003b24:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003b26:	bf00      	nop
 8003b28:	bf00      	nop
 8003b2a:	e7fd      	b.n	8003b28 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d103      	bne.n	8003b3a <xQueueGenericSend+0x46>
 8003b32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d101      	bne.n	8003b3e <xQueueGenericSend+0x4a>
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	e000      	b.n	8003b40 <xQueueGenericSend+0x4c>
 8003b3e:	2300      	movs	r3, #0
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d10d      	bne.n	8003b60 <xQueueGenericSend+0x6c>
	__asm volatile
 8003b44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b48:	b672      	cpsid	i
 8003b4a:	f383 8811 	msr	BASEPRI, r3
 8003b4e:	f3bf 8f6f 	isb	sy
 8003b52:	f3bf 8f4f 	dsb	sy
 8003b56:	b662      	cpsie	i
 8003b58:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003b5a:	bf00      	nop
 8003b5c:	bf00      	nop
 8003b5e:	e7fd      	b.n	8003b5c <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	2b02      	cmp	r3, #2
 8003b64:	d103      	bne.n	8003b6e <xQueueGenericSend+0x7a>
 8003b66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b6a:	2b01      	cmp	r3, #1
 8003b6c:	d101      	bne.n	8003b72 <xQueueGenericSend+0x7e>
 8003b6e:	2301      	movs	r3, #1
 8003b70:	e000      	b.n	8003b74 <xQueueGenericSend+0x80>
 8003b72:	2300      	movs	r3, #0
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d10d      	bne.n	8003b94 <xQueueGenericSend+0xa0>
	__asm volatile
 8003b78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b7c:	b672      	cpsid	i
 8003b7e:	f383 8811 	msr	BASEPRI, r3
 8003b82:	f3bf 8f6f 	isb	sy
 8003b86:	f3bf 8f4f 	dsb	sy
 8003b8a:	b662      	cpsie	i
 8003b8c:	623b      	str	r3, [r7, #32]
}
 8003b8e:	bf00      	nop
 8003b90:	bf00      	nop
 8003b92:	e7fd      	b.n	8003b90 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003b94:	f001 f8c8 	bl	8004d28 <xTaskGetSchedulerState>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d102      	bne.n	8003ba4 <xQueueGenericSend+0xb0>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d101      	bne.n	8003ba8 <xQueueGenericSend+0xb4>
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	e000      	b.n	8003baa <xQueueGenericSend+0xb6>
 8003ba8:	2300      	movs	r3, #0
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d10d      	bne.n	8003bca <xQueueGenericSend+0xd6>
	__asm volatile
 8003bae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bb2:	b672      	cpsid	i
 8003bb4:	f383 8811 	msr	BASEPRI, r3
 8003bb8:	f3bf 8f6f 	isb	sy
 8003bbc:	f3bf 8f4f 	dsb	sy
 8003bc0:	b662      	cpsie	i
 8003bc2:	61fb      	str	r3, [r7, #28]
}
 8003bc4:	bf00      	nop
 8003bc6:	bf00      	nop
 8003bc8:	e7fd      	b.n	8003bc6 <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003bca:	f001 fbff 	bl	80053cc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003bce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bd0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003bd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bd6:	429a      	cmp	r2, r3
 8003bd8:	d302      	bcc.n	8003be0 <xQueueGenericSend+0xec>
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	2b02      	cmp	r3, #2
 8003bde:	d129      	bne.n	8003c34 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003be0:	683a      	ldr	r2, [r7, #0]
 8003be2:	68b9      	ldr	r1, [r7, #8]
 8003be4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003be6:	f000 f9bf 	bl	8003f68 <prvCopyDataToQueue>
 8003bea:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003bec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d010      	beq.n	8003c16 <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003bf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bf6:	3324      	adds	r3, #36	@ 0x24
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	f000 fecd 	bl	8004998 <xTaskRemoveFromEventList>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d013      	beq.n	8003c2c <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003c04:	4b3f      	ldr	r3, [pc, #252]	@ (8003d04 <xQueueGenericSend+0x210>)
 8003c06:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003c0a:	601a      	str	r2, [r3, #0]
 8003c0c:	f3bf 8f4f 	dsb	sy
 8003c10:	f3bf 8f6f 	isb	sy
 8003c14:	e00a      	b.n	8003c2c <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003c16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d007      	beq.n	8003c2c <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003c1c:	4b39      	ldr	r3, [pc, #228]	@ (8003d04 <xQueueGenericSend+0x210>)
 8003c1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003c22:	601a      	str	r2, [r3, #0]
 8003c24:	f3bf 8f4f 	dsb	sy
 8003c28:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003c2c:	f001 fc04 	bl	8005438 <vPortExitCritical>
				return pdPASS;
 8003c30:	2301      	movs	r3, #1
 8003c32:	e063      	b.n	8003cfc <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d103      	bne.n	8003c42 <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003c3a:	f001 fbfd 	bl	8005438 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003c3e:	2300      	movs	r3, #0
 8003c40:	e05c      	b.n	8003cfc <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003c42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d106      	bne.n	8003c56 <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003c48:	f107 0314 	add.w	r3, r7, #20
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	f000 ff09 	bl	8004a64 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003c52:	2301      	movs	r3, #1
 8003c54:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003c56:	f001 fbef 	bl	8005438 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003c5a:	f000 fcad 	bl	80045b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003c5e:	f001 fbb5 	bl	80053cc <vPortEnterCritical>
 8003c62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c64:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003c68:	b25b      	sxtb	r3, r3
 8003c6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c6e:	d103      	bne.n	8003c78 <xQueueGenericSend+0x184>
 8003c70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c72:	2200      	movs	r2, #0
 8003c74:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003c78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c7a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003c7e:	b25b      	sxtb	r3, r3
 8003c80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c84:	d103      	bne.n	8003c8e <xQueueGenericSend+0x19a>
 8003c86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c88:	2200      	movs	r2, #0
 8003c8a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003c8e:	f001 fbd3 	bl	8005438 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003c92:	1d3a      	adds	r2, r7, #4
 8003c94:	f107 0314 	add.w	r3, r7, #20
 8003c98:	4611      	mov	r1, r2
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f000 fef8 	bl	8004a90 <xTaskCheckForTimeOut>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d124      	bne.n	8003cf0 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003ca6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003ca8:	f000 fa30 	bl	800410c <prvIsQueueFull>
 8003cac:	4603      	mov	r3, r0
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d018      	beq.n	8003ce4 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003cb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cb4:	3310      	adds	r3, #16
 8003cb6:	687a      	ldr	r2, [r7, #4]
 8003cb8:	4611      	mov	r1, r2
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f000 fe44 	bl	8004948 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003cc0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003cc2:	f000 f9bb 	bl	800403c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003cc6:	f000 fc85 	bl	80045d4 <xTaskResumeAll>
 8003cca:	4603      	mov	r3, r0
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	f47f af7c 	bne.w	8003bca <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 8003cd2:	4b0c      	ldr	r3, [pc, #48]	@ (8003d04 <xQueueGenericSend+0x210>)
 8003cd4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003cd8:	601a      	str	r2, [r3, #0]
 8003cda:	f3bf 8f4f 	dsb	sy
 8003cde:	f3bf 8f6f 	isb	sy
 8003ce2:	e772      	b.n	8003bca <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003ce4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003ce6:	f000 f9a9 	bl	800403c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003cea:	f000 fc73 	bl	80045d4 <xTaskResumeAll>
 8003cee:	e76c      	b.n	8003bca <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003cf0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003cf2:	f000 f9a3 	bl	800403c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003cf6:	f000 fc6d 	bl	80045d4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003cfa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	3738      	adds	r7, #56	@ 0x38
 8003d00:	46bd      	mov	sp, r7
 8003d02:	bd80      	pop	{r7, pc}
 8003d04:	e000ed04 	.word	0xe000ed04

08003d08 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b08e      	sub	sp, #56	@ 0x38
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
 8003d10:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8003d12:	2300      	movs	r3, #0
 8003d14:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003d1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d10d      	bne.n	8003d40 <xQueueSemaphoreTake+0x38>
	__asm volatile
 8003d24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d28:	b672      	cpsid	i
 8003d2a:	f383 8811 	msr	BASEPRI, r3
 8003d2e:	f3bf 8f6f 	isb	sy
 8003d32:	f3bf 8f4f 	dsb	sy
 8003d36:	b662      	cpsie	i
 8003d38:	623b      	str	r3, [r7, #32]
}
 8003d3a:	bf00      	nop
 8003d3c:	bf00      	nop
 8003d3e:	e7fd      	b.n	8003d3c <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003d40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d00d      	beq.n	8003d64 <xQueueSemaphoreTake+0x5c>
	__asm volatile
 8003d48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d4c:	b672      	cpsid	i
 8003d4e:	f383 8811 	msr	BASEPRI, r3
 8003d52:	f3bf 8f6f 	isb	sy
 8003d56:	f3bf 8f4f 	dsb	sy
 8003d5a:	b662      	cpsie	i
 8003d5c:	61fb      	str	r3, [r7, #28]
}
 8003d5e:	bf00      	nop
 8003d60:	bf00      	nop
 8003d62:	e7fd      	b.n	8003d60 <xQueueSemaphoreTake+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003d64:	f000 ffe0 	bl	8004d28 <xTaskGetSchedulerState>
 8003d68:	4603      	mov	r3, r0
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d102      	bne.n	8003d74 <xQueueSemaphoreTake+0x6c>
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d101      	bne.n	8003d78 <xQueueSemaphoreTake+0x70>
 8003d74:	2301      	movs	r3, #1
 8003d76:	e000      	b.n	8003d7a <xQueueSemaphoreTake+0x72>
 8003d78:	2300      	movs	r3, #0
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d10d      	bne.n	8003d9a <xQueueSemaphoreTake+0x92>
	__asm volatile
 8003d7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d82:	b672      	cpsid	i
 8003d84:	f383 8811 	msr	BASEPRI, r3
 8003d88:	f3bf 8f6f 	isb	sy
 8003d8c:	f3bf 8f4f 	dsb	sy
 8003d90:	b662      	cpsie	i
 8003d92:	61bb      	str	r3, [r7, #24]
}
 8003d94:	bf00      	nop
 8003d96:	bf00      	nop
 8003d98:	e7fd      	b.n	8003d96 <xQueueSemaphoreTake+0x8e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003d9a:	f001 fb17 	bl	80053cc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8003d9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003da0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003da2:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003da4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d024      	beq.n	8003df4 <xQueueSemaphoreTake+0xec>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003daa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dac:	1e5a      	subs	r2, r3, #1
 8003dae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003db0:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003db2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d104      	bne.n	8003dc4 <xQueueSemaphoreTake+0xbc>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8003dba:	f001 f97f 	bl	80050bc <pvTaskIncrementMutexHeldCount>
 8003dbe:	4602      	mov	r2, r0
 8003dc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003dc2:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003dc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003dc6:	691b      	ldr	r3, [r3, #16]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d00f      	beq.n	8003dec <xQueueSemaphoreTake+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003dcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003dce:	3310      	adds	r3, #16
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	f000 fde1 	bl	8004998 <xTaskRemoveFromEventList>
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d007      	beq.n	8003dec <xQueueSemaphoreTake+0xe4>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003ddc:	4b55      	ldr	r3, [pc, #340]	@ (8003f34 <xQueueSemaphoreTake+0x22c>)
 8003dde:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003de2:	601a      	str	r2, [r3, #0]
 8003de4:	f3bf 8f4f 	dsb	sy
 8003de8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003dec:	f001 fb24 	bl	8005438 <vPortExitCritical>
				return pdPASS;
 8003df0:	2301      	movs	r3, #1
 8003df2:	e09a      	b.n	8003f2a <xQueueSemaphoreTake+0x222>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d114      	bne.n	8003e24 <xQueueSemaphoreTake+0x11c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8003dfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d00d      	beq.n	8003e1c <xQueueSemaphoreTake+0x114>
	__asm volatile
 8003e00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e04:	b672      	cpsid	i
 8003e06:	f383 8811 	msr	BASEPRI, r3
 8003e0a:	f3bf 8f6f 	isb	sy
 8003e0e:	f3bf 8f4f 	dsb	sy
 8003e12:	b662      	cpsie	i
 8003e14:	617b      	str	r3, [r7, #20]
}
 8003e16:	bf00      	nop
 8003e18:	bf00      	nop
 8003e1a:	e7fd      	b.n	8003e18 <xQueueSemaphoreTake+0x110>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8003e1c:	f001 fb0c 	bl	8005438 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003e20:	2300      	movs	r3, #0
 8003e22:	e082      	b.n	8003f2a <xQueueSemaphoreTake+0x222>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003e24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d106      	bne.n	8003e38 <xQueueSemaphoreTake+0x130>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003e2a:	f107 030c 	add.w	r3, r7, #12
 8003e2e:	4618      	mov	r0, r3
 8003e30:	f000 fe18 	bl	8004a64 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003e34:	2301      	movs	r3, #1
 8003e36:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003e38:	f001 fafe 	bl	8005438 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003e3c:	f000 fbbc 	bl	80045b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003e40:	f001 fac4 	bl	80053cc <vPortEnterCritical>
 8003e44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e46:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003e4a:	b25b      	sxtb	r3, r3
 8003e4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e50:	d103      	bne.n	8003e5a <xQueueSemaphoreTake+0x152>
 8003e52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e54:	2200      	movs	r2, #0
 8003e56:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003e5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e5c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003e60:	b25b      	sxtb	r3, r3
 8003e62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e66:	d103      	bne.n	8003e70 <xQueueSemaphoreTake+0x168>
 8003e68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003e70:	f001 fae2 	bl	8005438 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003e74:	463a      	mov	r2, r7
 8003e76:	f107 030c 	add.w	r3, r7, #12
 8003e7a:	4611      	mov	r1, r2
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	f000 fe07 	bl	8004a90 <xTaskCheckForTimeOut>
 8003e82:	4603      	mov	r3, r0
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d132      	bne.n	8003eee <xQueueSemaphoreTake+0x1e6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003e88:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003e8a:	f000 f929 	bl	80040e0 <prvIsQueueEmpty>
 8003e8e:	4603      	mov	r3, r0
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d026      	beq.n	8003ee2 <xQueueSemaphoreTake+0x1da>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003e94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d109      	bne.n	8003eb0 <xQueueSemaphoreTake+0x1a8>
					{
						taskENTER_CRITICAL();
 8003e9c:	f001 fa96 	bl	80053cc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003ea0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ea2:	689b      	ldr	r3, [r3, #8]
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	f000 ff5d 	bl	8004d64 <xTaskPriorityInherit>
 8003eaa:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8003eac:	f001 fac4 	bl	8005438 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003eb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003eb2:	3324      	adds	r3, #36	@ 0x24
 8003eb4:	683a      	ldr	r2, [r7, #0]
 8003eb6:	4611      	mov	r1, r2
 8003eb8:	4618      	mov	r0, r3
 8003eba:	f000 fd45 	bl	8004948 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003ebe:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003ec0:	f000 f8bc 	bl	800403c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003ec4:	f000 fb86 	bl	80045d4 <xTaskResumeAll>
 8003ec8:	4603      	mov	r3, r0
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	f47f af65 	bne.w	8003d9a <xQueueSemaphoreTake+0x92>
				{
					portYIELD_WITHIN_API();
 8003ed0:	4b18      	ldr	r3, [pc, #96]	@ (8003f34 <xQueueSemaphoreTake+0x22c>)
 8003ed2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003ed6:	601a      	str	r2, [r3, #0]
 8003ed8:	f3bf 8f4f 	dsb	sy
 8003edc:	f3bf 8f6f 	isb	sy
 8003ee0:	e75b      	b.n	8003d9a <xQueueSemaphoreTake+0x92>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8003ee2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003ee4:	f000 f8aa 	bl	800403c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003ee8:	f000 fb74 	bl	80045d4 <xTaskResumeAll>
 8003eec:	e755      	b.n	8003d9a <xQueueSemaphoreTake+0x92>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8003eee:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003ef0:	f000 f8a4 	bl	800403c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003ef4:	f000 fb6e 	bl	80045d4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003ef8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003efa:	f000 f8f1 	bl	80040e0 <prvIsQueueEmpty>
 8003efe:	4603      	mov	r3, r0
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	f43f af4a 	beq.w	8003d9a <xQueueSemaphoreTake+0x92>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8003f06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d00d      	beq.n	8003f28 <xQueueSemaphoreTake+0x220>
					{
						taskENTER_CRITICAL();
 8003f0c:	f001 fa5e 	bl	80053cc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003f10:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003f12:	f000 f811 	bl	8003f38 <prvGetDisinheritPriorityAfterTimeout>
 8003f16:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8003f18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f1a:	689b      	ldr	r3, [r3, #8]
 8003f1c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f001 f82c 	bl	8004f7c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8003f24:	f001 fa88 	bl	8005438 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003f28:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	3738      	adds	r7, #56	@ 0x38
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}
 8003f32:	bf00      	nop
 8003f34:	e000ed04 	.word	0xe000ed04

08003f38 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8003f38:	b480      	push	{r7}
 8003f3a:	b085      	sub	sp, #20
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d006      	beq.n	8003f56 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f1c3 0307 	rsb	r3, r3, #7
 8003f52:	60fb      	str	r3, [r7, #12]
 8003f54:	e001      	b.n	8003f5a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8003f56:	2300      	movs	r3, #0
 8003f58:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
	}
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	3714      	adds	r7, #20
 8003f60:	46bd      	mov	sp, r7
 8003f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f66:	4770      	bx	lr

08003f68 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b086      	sub	sp, #24
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	60f8      	str	r0, [r7, #12]
 8003f70:	60b9      	str	r1, [r7, #8]
 8003f72:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003f74:	2300      	movs	r3, #0
 8003f76:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f7c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d10d      	bne.n	8003fa2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d14d      	bne.n	800402a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	4618      	mov	r0, r3
 8003f94:	f000 ff66 	bl	8004e64 <xTaskPriorityDisinherit>
 8003f98:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	609a      	str	r2, [r3, #8]
 8003fa0:	e043      	b.n	800402a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d119      	bne.n	8003fdc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	6858      	ldr	r0, [r3, #4]
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fb0:	461a      	mov	r2, r3
 8003fb2:	68b9      	ldr	r1, [r7, #8]
 8003fb4:	f001 ff4f 	bl	8005e56 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	685a      	ldr	r2, [r3, #4]
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fc0:	441a      	add	r2, r3
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	685a      	ldr	r2, [r3, #4]
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	689b      	ldr	r3, [r3, #8]
 8003fce:	429a      	cmp	r2, r3
 8003fd0:	d32b      	bcc.n	800402a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681a      	ldr	r2, [r3, #0]
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	605a      	str	r2, [r3, #4]
 8003fda:	e026      	b.n	800402a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	68d8      	ldr	r0, [r3, #12]
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fe4:	461a      	mov	r2, r3
 8003fe6:	68b9      	ldr	r1, [r7, #8]
 8003fe8:	f001 ff35 	bl	8005e56 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	68da      	ldr	r2, [r3, #12]
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ff4:	425b      	negs	r3, r3
 8003ff6:	441a      	add	r2, r3
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	68da      	ldr	r2, [r3, #12]
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	429a      	cmp	r2, r3
 8004006:	d207      	bcs.n	8004018 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	689a      	ldr	r2, [r3, #8]
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004010:	425b      	negs	r3, r3
 8004012:	441a      	add	r2, r3
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2b02      	cmp	r3, #2
 800401c:	d105      	bne.n	800402a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800401e:	693b      	ldr	r3, [r7, #16]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d002      	beq.n	800402a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004024:	693b      	ldr	r3, [r7, #16]
 8004026:	3b01      	subs	r3, #1
 8004028:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800402a:	693b      	ldr	r3, [r7, #16]
 800402c:	1c5a      	adds	r2, r3, #1
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8004032:	697b      	ldr	r3, [r7, #20]
}
 8004034:	4618      	mov	r0, r3
 8004036:	3718      	adds	r7, #24
 8004038:	46bd      	mov	sp, r7
 800403a:	bd80      	pop	{r7, pc}

0800403c <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b084      	sub	sp, #16
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004044:	f001 f9c2 	bl	80053cc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800404e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004050:	e011      	b.n	8004076 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004056:	2b00      	cmp	r3, #0
 8004058:	d012      	beq.n	8004080 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	3324      	adds	r3, #36	@ 0x24
 800405e:	4618      	mov	r0, r3
 8004060:	f000 fc9a 	bl	8004998 <xTaskRemoveFromEventList>
 8004064:	4603      	mov	r3, r0
 8004066:	2b00      	cmp	r3, #0
 8004068:	d001      	beq.n	800406e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800406a:	f000 fd79 	bl	8004b60 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800406e:	7bfb      	ldrb	r3, [r7, #15]
 8004070:	3b01      	subs	r3, #1
 8004072:	b2db      	uxtb	r3, r3
 8004074:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004076:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800407a:	2b00      	cmp	r3, #0
 800407c:	dce9      	bgt.n	8004052 <prvUnlockQueue+0x16>
 800407e:	e000      	b.n	8004082 <prvUnlockQueue+0x46>
					break;
 8004080:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	22ff      	movs	r2, #255	@ 0xff
 8004086:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800408a:	f001 f9d5 	bl	8005438 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800408e:	f001 f99d 	bl	80053cc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004098:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800409a:	e011      	b.n	80040c0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	691b      	ldr	r3, [r3, #16]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d012      	beq.n	80040ca <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	3310      	adds	r3, #16
 80040a8:	4618      	mov	r0, r3
 80040aa:	f000 fc75 	bl	8004998 <xTaskRemoveFromEventList>
 80040ae:	4603      	mov	r3, r0
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d001      	beq.n	80040b8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80040b4:	f000 fd54 	bl	8004b60 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80040b8:	7bbb      	ldrb	r3, [r7, #14]
 80040ba:	3b01      	subs	r3, #1
 80040bc:	b2db      	uxtb	r3, r3
 80040be:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80040c0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	dce9      	bgt.n	800409c <prvUnlockQueue+0x60>
 80040c8:	e000      	b.n	80040cc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80040ca:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	22ff      	movs	r2, #255	@ 0xff
 80040d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80040d4:	f001 f9b0 	bl	8005438 <vPortExitCritical>
}
 80040d8:	bf00      	nop
 80040da:	3710      	adds	r7, #16
 80040dc:	46bd      	mov	sp, r7
 80040de:	bd80      	pop	{r7, pc}

080040e0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b084      	sub	sp, #16
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80040e8:	f001 f970 	bl	80053cc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d102      	bne.n	80040fa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80040f4:	2301      	movs	r3, #1
 80040f6:	60fb      	str	r3, [r7, #12]
 80040f8:	e001      	b.n	80040fe <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80040fa:	2300      	movs	r3, #0
 80040fc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80040fe:	f001 f99b 	bl	8005438 <vPortExitCritical>

	return xReturn;
 8004102:	68fb      	ldr	r3, [r7, #12]
}
 8004104:	4618      	mov	r0, r3
 8004106:	3710      	adds	r7, #16
 8004108:	46bd      	mov	sp, r7
 800410a:	bd80      	pop	{r7, pc}

0800410c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b084      	sub	sp, #16
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004114:	f001 f95a 	bl	80053cc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004120:	429a      	cmp	r2, r3
 8004122:	d102      	bne.n	800412a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004124:	2301      	movs	r3, #1
 8004126:	60fb      	str	r3, [r7, #12]
 8004128:	e001      	b.n	800412e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800412a:	2300      	movs	r3, #0
 800412c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800412e:	f001 f983 	bl	8005438 <vPortExitCritical>

	return xReturn;
 8004132:	68fb      	ldr	r3, [r7, #12]
}
 8004134:	4618      	mov	r0, r3
 8004136:	3710      	adds	r7, #16
 8004138:	46bd      	mov	sp, r7
 800413a:	bd80      	pop	{r7, pc}

0800413c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800413c:	b580      	push	{r7, lr}
 800413e:	b08e      	sub	sp, #56	@ 0x38
 8004140:	af04      	add	r7, sp, #16
 8004142:	60f8      	str	r0, [r7, #12]
 8004144:	60b9      	str	r1, [r7, #8]
 8004146:	607a      	str	r2, [r7, #4]
 8004148:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800414a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800414c:	2b00      	cmp	r3, #0
 800414e:	d10d      	bne.n	800416c <xTaskCreateStatic+0x30>
	__asm volatile
 8004150:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004154:	b672      	cpsid	i
 8004156:	f383 8811 	msr	BASEPRI, r3
 800415a:	f3bf 8f6f 	isb	sy
 800415e:	f3bf 8f4f 	dsb	sy
 8004162:	b662      	cpsie	i
 8004164:	623b      	str	r3, [r7, #32]
}
 8004166:	bf00      	nop
 8004168:	bf00      	nop
 800416a:	e7fd      	b.n	8004168 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800416c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800416e:	2b00      	cmp	r3, #0
 8004170:	d10d      	bne.n	800418e <xTaskCreateStatic+0x52>
	__asm volatile
 8004172:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004176:	b672      	cpsid	i
 8004178:	f383 8811 	msr	BASEPRI, r3
 800417c:	f3bf 8f6f 	isb	sy
 8004180:	f3bf 8f4f 	dsb	sy
 8004184:	b662      	cpsie	i
 8004186:	61fb      	str	r3, [r7, #28]
}
 8004188:	bf00      	nop
 800418a:	bf00      	nop
 800418c:	e7fd      	b.n	800418a <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800418e:	2354      	movs	r3, #84	@ 0x54
 8004190:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004192:	693b      	ldr	r3, [r7, #16]
 8004194:	2b54      	cmp	r3, #84	@ 0x54
 8004196:	d00d      	beq.n	80041b4 <xTaskCreateStatic+0x78>
	__asm volatile
 8004198:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800419c:	b672      	cpsid	i
 800419e:	f383 8811 	msr	BASEPRI, r3
 80041a2:	f3bf 8f6f 	isb	sy
 80041a6:	f3bf 8f4f 	dsb	sy
 80041aa:	b662      	cpsie	i
 80041ac:	61bb      	str	r3, [r7, #24]
}
 80041ae:	bf00      	nop
 80041b0:	bf00      	nop
 80041b2:	e7fd      	b.n	80041b0 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80041b4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80041b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d01e      	beq.n	80041fa <xTaskCreateStatic+0xbe>
 80041bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d01b      	beq.n	80041fa <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80041c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041c4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80041c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041c8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80041ca:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80041cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041ce:	2202      	movs	r2, #2
 80041d0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80041d4:	2300      	movs	r3, #0
 80041d6:	9303      	str	r3, [sp, #12]
 80041d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041da:	9302      	str	r3, [sp, #8]
 80041dc:	f107 0314 	add.w	r3, r7, #20
 80041e0:	9301      	str	r3, [sp, #4]
 80041e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041e4:	9300      	str	r3, [sp, #0]
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	687a      	ldr	r2, [r7, #4]
 80041ea:	68b9      	ldr	r1, [r7, #8]
 80041ec:	68f8      	ldr	r0, [r7, #12]
 80041ee:	f000 f850 	bl	8004292 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80041f2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80041f4:	f000 f8d8 	bl	80043a8 <prvAddNewTaskToReadyList>
 80041f8:	e001      	b.n	80041fe <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 80041fa:	2300      	movs	r3, #0
 80041fc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80041fe:	697b      	ldr	r3, [r7, #20]
	}
 8004200:	4618      	mov	r0, r3
 8004202:	3728      	adds	r7, #40	@ 0x28
 8004204:	46bd      	mov	sp, r7
 8004206:	bd80      	pop	{r7, pc}

08004208 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004208:	b580      	push	{r7, lr}
 800420a:	b08c      	sub	sp, #48	@ 0x30
 800420c:	af04      	add	r7, sp, #16
 800420e:	60f8      	str	r0, [r7, #12]
 8004210:	60b9      	str	r1, [r7, #8]
 8004212:	603b      	str	r3, [r7, #0]
 8004214:	4613      	mov	r3, r2
 8004216:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004218:	88fb      	ldrh	r3, [r7, #6]
 800421a:	009b      	lsls	r3, r3, #2
 800421c:	4618      	mov	r0, r3
 800421e:	f001 f9bd 	bl	800559c <pvPortMalloc>
 8004222:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004224:	697b      	ldr	r3, [r7, #20]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d00e      	beq.n	8004248 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800422a:	2054      	movs	r0, #84	@ 0x54
 800422c:	f001 f9b6 	bl	800559c <pvPortMalloc>
 8004230:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004232:	69fb      	ldr	r3, [r7, #28]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d003      	beq.n	8004240 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004238:	69fb      	ldr	r3, [r7, #28]
 800423a:	697a      	ldr	r2, [r7, #20]
 800423c:	631a      	str	r2, [r3, #48]	@ 0x30
 800423e:	e005      	b.n	800424c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004240:	6978      	ldr	r0, [r7, #20]
 8004242:	f001 fa79 	bl	8005738 <vPortFree>
 8004246:	e001      	b.n	800424c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004248:	2300      	movs	r3, #0
 800424a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800424c:	69fb      	ldr	r3, [r7, #28]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d017      	beq.n	8004282 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004252:	69fb      	ldr	r3, [r7, #28]
 8004254:	2200      	movs	r2, #0
 8004256:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800425a:	88fa      	ldrh	r2, [r7, #6]
 800425c:	2300      	movs	r3, #0
 800425e:	9303      	str	r3, [sp, #12]
 8004260:	69fb      	ldr	r3, [r7, #28]
 8004262:	9302      	str	r3, [sp, #8]
 8004264:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004266:	9301      	str	r3, [sp, #4]
 8004268:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800426a:	9300      	str	r3, [sp, #0]
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	68b9      	ldr	r1, [r7, #8]
 8004270:	68f8      	ldr	r0, [r7, #12]
 8004272:	f000 f80e 	bl	8004292 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004276:	69f8      	ldr	r0, [r7, #28]
 8004278:	f000 f896 	bl	80043a8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800427c:	2301      	movs	r3, #1
 800427e:	61bb      	str	r3, [r7, #24]
 8004280:	e002      	b.n	8004288 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004282:	f04f 33ff 	mov.w	r3, #4294967295
 8004286:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004288:	69bb      	ldr	r3, [r7, #24]
	}
 800428a:	4618      	mov	r0, r3
 800428c:	3720      	adds	r7, #32
 800428e:	46bd      	mov	sp, r7
 8004290:	bd80      	pop	{r7, pc}

08004292 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004292:	b580      	push	{r7, lr}
 8004294:	b088      	sub	sp, #32
 8004296:	af00      	add	r7, sp, #0
 8004298:	60f8      	str	r0, [r7, #12]
 800429a:	60b9      	str	r1, [r7, #8]
 800429c:	607a      	str	r2, [r7, #4]
 800429e:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80042a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042a2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80042a4:	6879      	ldr	r1, [r7, #4]
 80042a6:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 80042aa:	440b      	add	r3, r1
 80042ac:	009b      	lsls	r3, r3, #2
 80042ae:	4413      	add	r3, r2
 80042b0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80042b2:	69bb      	ldr	r3, [r7, #24]
 80042b4:	f023 0307 	bic.w	r3, r3, #7
 80042b8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80042ba:	69bb      	ldr	r3, [r7, #24]
 80042bc:	f003 0307 	and.w	r3, r3, #7
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d00d      	beq.n	80042e0 <prvInitialiseNewTask+0x4e>
	__asm volatile
 80042c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042c8:	b672      	cpsid	i
 80042ca:	f383 8811 	msr	BASEPRI, r3
 80042ce:	f3bf 8f6f 	isb	sy
 80042d2:	f3bf 8f4f 	dsb	sy
 80042d6:	b662      	cpsie	i
 80042d8:	617b      	str	r3, [r7, #20]
}
 80042da:	bf00      	nop
 80042dc:	bf00      	nop
 80042de:	e7fd      	b.n	80042dc <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d01f      	beq.n	8004326 <prvInitialiseNewTask+0x94>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80042e6:	2300      	movs	r3, #0
 80042e8:	61fb      	str	r3, [r7, #28]
 80042ea:	e012      	b.n	8004312 <prvInitialiseNewTask+0x80>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80042ec:	68ba      	ldr	r2, [r7, #8]
 80042ee:	69fb      	ldr	r3, [r7, #28]
 80042f0:	4413      	add	r3, r2
 80042f2:	7819      	ldrb	r1, [r3, #0]
 80042f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80042f6:	69fb      	ldr	r3, [r7, #28]
 80042f8:	4413      	add	r3, r2
 80042fa:	3334      	adds	r3, #52	@ 0x34
 80042fc:	460a      	mov	r2, r1
 80042fe:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004300:	68ba      	ldr	r2, [r7, #8]
 8004302:	69fb      	ldr	r3, [r7, #28]
 8004304:	4413      	add	r3, r2
 8004306:	781b      	ldrb	r3, [r3, #0]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d006      	beq.n	800431a <prvInitialiseNewTask+0x88>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800430c:	69fb      	ldr	r3, [r7, #28]
 800430e:	3301      	adds	r3, #1
 8004310:	61fb      	str	r3, [r7, #28]
 8004312:	69fb      	ldr	r3, [r7, #28]
 8004314:	2b0f      	cmp	r3, #15
 8004316:	d9e9      	bls.n	80042ec <prvInitialiseNewTask+0x5a>
 8004318:	e000      	b.n	800431c <prvInitialiseNewTask+0x8a>
			{
				break;
 800431a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800431c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800431e:	2200      	movs	r2, #0
 8004320:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004324:	e003      	b.n	800432e <prvInitialiseNewTask+0x9c>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004326:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004328:	2200      	movs	r2, #0
 800432a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800432e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004330:	2b06      	cmp	r3, #6
 8004332:	d901      	bls.n	8004338 <prvInitialiseNewTask+0xa6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004334:	2306      	movs	r3, #6
 8004336:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004338:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800433a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800433c:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800433e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004340:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004342:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004344:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004346:	2200      	movs	r2, #0
 8004348:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800434a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800434c:	3304      	adds	r3, #4
 800434e:	4618      	mov	r0, r3
 8004350:	f7ff fa6d 	bl	800382e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004354:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004356:	3318      	adds	r3, #24
 8004358:	4618      	mov	r0, r3
 800435a:	f7ff fa68 	bl	800382e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800435e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004360:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004362:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004364:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004366:	f1c3 0207 	rsb	r2, r3, #7
 800436a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800436c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800436e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004370:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004372:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004374:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004376:	2200      	movs	r2, #0
 8004378:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800437a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800437c:	2200      	movs	r2, #0
 800437e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004382:	683a      	ldr	r2, [r7, #0]
 8004384:	68f9      	ldr	r1, [r7, #12]
 8004386:	69b8      	ldr	r0, [r7, #24]
 8004388:	f000 ff12 	bl	80051b0 <pxPortInitialiseStack>
 800438c:	4602      	mov	r2, r0
 800438e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004390:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004392:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004394:	2b00      	cmp	r3, #0
 8004396:	d002      	beq.n	800439e <prvInitialiseNewTask+0x10c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004398:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800439a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800439c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800439e:	bf00      	nop
 80043a0:	3720      	adds	r7, #32
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bd80      	pop	{r7, pc}
	...

080043a8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b082      	sub	sp, #8
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80043b0:	f001 f80c 	bl	80053cc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80043b4:	4b2a      	ldr	r3, [pc, #168]	@ (8004460 <prvAddNewTaskToReadyList+0xb8>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	3301      	adds	r3, #1
 80043ba:	4a29      	ldr	r2, [pc, #164]	@ (8004460 <prvAddNewTaskToReadyList+0xb8>)
 80043bc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80043be:	4b29      	ldr	r3, [pc, #164]	@ (8004464 <prvAddNewTaskToReadyList+0xbc>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d109      	bne.n	80043da <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80043c6:	4a27      	ldr	r2, [pc, #156]	@ (8004464 <prvAddNewTaskToReadyList+0xbc>)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80043cc:	4b24      	ldr	r3, [pc, #144]	@ (8004460 <prvAddNewTaskToReadyList+0xb8>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	2b01      	cmp	r3, #1
 80043d2:	d110      	bne.n	80043f6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80043d4:	f000 fbe8 	bl	8004ba8 <prvInitialiseTaskLists>
 80043d8:	e00d      	b.n	80043f6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80043da:	4b23      	ldr	r3, [pc, #140]	@ (8004468 <prvAddNewTaskToReadyList+0xc0>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d109      	bne.n	80043f6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80043e2:	4b20      	ldr	r3, [pc, #128]	@ (8004464 <prvAddNewTaskToReadyList+0xbc>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043ec:	429a      	cmp	r2, r3
 80043ee:	d802      	bhi.n	80043f6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80043f0:	4a1c      	ldr	r2, [pc, #112]	@ (8004464 <prvAddNewTaskToReadyList+0xbc>)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80043f6:	4b1d      	ldr	r3, [pc, #116]	@ (800446c <prvAddNewTaskToReadyList+0xc4>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	3301      	adds	r3, #1
 80043fc:	4a1b      	ldr	r2, [pc, #108]	@ (800446c <prvAddNewTaskToReadyList+0xc4>)
 80043fe:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004404:	2201      	movs	r2, #1
 8004406:	409a      	lsls	r2, r3
 8004408:	4b19      	ldr	r3, [pc, #100]	@ (8004470 <prvAddNewTaskToReadyList+0xc8>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4313      	orrs	r3, r2
 800440e:	4a18      	ldr	r2, [pc, #96]	@ (8004470 <prvAddNewTaskToReadyList+0xc8>)
 8004410:	6013      	str	r3, [r2, #0]
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004416:	4613      	mov	r3, r2
 8004418:	009b      	lsls	r3, r3, #2
 800441a:	4413      	add	r3, r2
 800441c:	009b      	lsls	r3, r3, #2
 800441e:	4a15      	ldr	r2, [pc, #84]	@ (8004474 <prvAddNewTaskToReadyList+0xcc>)
 8004420:	441a      	add	r2, r3
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	3304      	adds	r3, #4
 8004426:	4619      	mov	r1, r3
 8004428:	4610      	mov	r0, r2
 800442a:	f7ff fa0d 	bl	8003848 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800442e:	f001 f803 	bl	8005438 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004432:	4b0d      	ldr	r3, [pc, #52]	@ (8004468 <prvAddNewTaskToReadyList+0xc0>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d00e      	beq.n	8004458 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800443a:	4b0a      	ldr	r3, [pc, #40]	@ (8004464 <prvAddNewTaskToReadyList+0xbc>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004444:	429a      	cmp	r2, r3
 8004446:	d207      	bcs.n	8004458 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004448:	4b0b      	ldr	r3, [pc, #44]	@ (8004478 <prvAddNewTaskToReadyList+0xd0>)
 800444a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800444e:	601a      	str	r2, [r3, #0]
 8004450:	f3bf 8f4f 	dsb	sy
 8004454:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004458:	bf00      	nop
 800445a:	3708      	adds	r7, #8
 800445c:	46bd      	mov	sp, r7
 800445e:	bd80      	pop	{r7, pc}
 8004460:	20000478 	.word	0x20000478
 8004464:	20000378 	.word	0x20000378
 8004468:	20000484 	.word	0x20000484
 800446c:	20000494 	.word	0x20000494
 8004470:	20000480 	.word	0x20000480
 8004474:	2000037c 	.word	0x2000037c
 8004478:	e000ed04 	.word	0xe000ed04

0800447c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800447c:	b580      	push	{r7, lr}
 800447e:	b084      	sub	sp, #16
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004484:	2300      	movs	r3, #0
 8004486:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d01a      	beq.n	80044c4 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800448e:	4b15      	ldr	r3, [pc, #84]	@ (80044e4 <vTaskDelay+0x68>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d00d      	beq.n	80044b2 <vTaskDelay+0x36>
	__asm volatile
 8004496:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800449a:	b672      	cpsid	i
 800449c:	f383 8811 	msr	BASEPRI, r3
 80044a0:	f3bf 8f6f 	isb	sy
 80044a4:	f3bf 8f4f 	dsb	sy
 80044a8:	b662      	cpsie	i
 80044aa:	60bb      	str	r3, [r7, #8]
}
 80044ac:	bf00      	nop
 80044ae:	bf00      	nop
 80044b0:	e7fd      	b.n	80044ae <vTaskDelay+0x32>
			vTaskSuspendAll();
 80044b2:	f000 f881 	bl	80045b8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80044b6:	2100      	movs	r1, #0
 80044b8:	6878      	ldr	r0, [r7, #4]
 80044ba:	f000 fe13 	bl	80050e4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80044be:	f000 f889 	bl	80045d4 <xTaskResumeAll>
 80044c2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d107      	bne.n	80044da <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 80044ca:	4b07      	ldr	r3, [pc, #28]	@ (80044e8 <vTaskDelay+0x6c>)
 80044cc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80044d0:	601a      	str	r2, [r3, #0]
 80044d2:	f3bf 8f4f 	dsb	sy
 80044d6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80044da:	bf00      	nop
 80044dc:	3710      	adds	r7, #16
 80044de:	46bd      	mov	sp, r7
 80044e0:	bd80      	pop	{r7, pc}
 80044e2:	bf00      	nop
 80044e4:	200004a0 	.word	0x200004a0
 80044e8:	e000ed04 	.word	0xe000ed04

080044ec <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b08a      	sub	sp, #40	@ 0x28
 80044f0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80044f2:	2300      	movs	r3, #0
 80044f4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80044f6:	2300      	movs	r3, #0
 80044f8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80044fa:	463a      	mov	r2, r7
 80044fc:	1d39      	adds	r1, r7, #4
 80044fe:	f107 0308 	add.w	r3, r7, #8
 8004502:	4618      	mov	r0, r3
 8004504:	f7fc f81a 	bl	800053c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004508:	6839      	ldr	r1, [r7, #0]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	68ba      	ldr	r2, [r7, #8]
 800450e:	9202      	str	r2, [sp, #8]
 8004510:	9301      	str	r3, [sp, #4]
 8004512:	2300      	movs	r3, #0
 8004514:	9300      	str	r3, [sp, #0]
 8004516:	2300      	movs	r3, #0
 8004518:	460a      	mov	r2, r1
 800451a:	4921      	ldr	r1, [pc, #132]	@ (80045a0 <vTaskStartScheduler+0xb4>)
 800451c:	4821      	ldr	r0, [pc, #132]	@ (80045a4 <vTaskStartScheduler+0xb8>)
 800451e:	f7ff fe0d 	bl	800413c <xTaskCreateStatic>
 8004522:	4603      	mov	r3, r0
 8004524:	4a20      	ldr	r2, [pc, #128]	@ (80045a8 <vTaskStartScheduler+0xbc>)
 8004526:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004528:	4b1f      	ldr	r3, [pc, #124]	@ (80045a8 <vTaskStartScheduler+0xbc>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d002      	beq.n	8004536 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004530:	2301      	movs	r3, #1
 8004532:	617b      	str	r3, [r7, #20]
 8004534:	e001      	b.n	800453a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004536:	2300      	movs	r3, #0
 8004538:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800453a:	697b      	ldr	r3, [r7, #20]
 800453c:	2b01      	cmp	r3, #1
 800453e:	d118      	bne.n	8004572 <vTaskStartScheduler+0x86>
	__asm volatile
 8004540:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004544:	b672      	cpsid	i
 8004546:	f383 8811 	msr	BASEPRI, r3
 800454a:	f3bf 8f6f 	isb	sy
 800454e:	f3bf 8f4f 	dsb	sy
 8004552:	b662      	cpsie	i
 8004554:	613b      	str	r3, [r7, #16]
}
 8004556:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004558:	4b14      	ldr	r3, [pc, #80]	@ (80045ac <vTaskStartScheduler+0xc0>)
 800455a:	f04f 32ff 	mov.w	r2, #4294967295
 800455e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004560:	4b13      	ldr	r3, [pc, #76]	@ (80045b0 <vTaskStartScheduler+0xc4>)
 8004562:	2201      	movs	r2, #1
 8004564:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004566:	4b13      	ldr	r3, [pc, #76]	@ (80045b4 <vTaskStartScheduler+0xc8>)
 8004568:	2200      	movs	r2, #0
 800456a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800456c:	f000 feb0 	bl	80052d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004570:	e011      	b.n	8004596 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004572:	697b      	ldr	r3, [r7, #20]
 8004574:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004578:	d10d      	bne.n	8004596 <vTaskStartScheduler+0xaa>
	__asm volatile
 800457a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800457e:	b672      	cpsid	i
 8004580:	f383 8811 	msr	BASEPRI, r3
 8004584:	f3bf 8f6f 	isb	sy
 8004588:	f3bf 8f4f 	dsb	sy
 800458c:	b662      	cpsie	i
 800458e:	60fb      	str	r3, [r7, #12]
}
 8004590:	bf00      	nop
 8004592:	bf00      	nop
 8004594:	e7fd      	b.n	8004592 <vTaskStartScheduler+0xa6>
}
 8004596:	bf00      	nop
 8004598:	3718      	adds	r7, #24
 800459a:	46bd      	mov	sp, r7
 800459c:	bd80      	pop	{r7, pc}
 800459e:	bf00      	nop
 80045a0:	08006414 	.word	0x08006414
 80045a4:	08004b79 	.word	0x08004b79
 80045a8:	2000049c 	.word	0x2000049c
 80045ac:	20000498 	.word	0x20000498
 80045b0:	20000484 	.word	0x20000484
 80045b4:	2000047c 	.word	0x2000047c

080045b8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80045b8:	b480      	push	{r7}
 80045ba:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80045bc:	4b04      	ldr	r3, [pc, #16]	@ (80045d0 <vTaskSuspendAll+0x18>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	3301      	adds	r3, #1
 80045c2:	4a03      	ldr	r2, [pc, #12]	@ (80045d0 <vTaskSuspendAll+0x18>)
 80045c4:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80045c6:	bf00      	nop
 80045c8:	46bd      	mov	sp, r7
 80045ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ce:	4770      	bx	lr
 80045d0:	200004a0 	.word	0x200004a0

080045d4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b084      	sub	sp, #16
 80045d8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80045da:	2300      	movs	r3, #0
 80045dc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80045de:	2300      	movs	r3, #0
 80045e0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80045e2:	4b43      	ldr	r3, [pc, #268]	@ (80046f0 <xTaskResumeAll+0x11c>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d10d      	bne.n	8004606 <xTaskResumeAll+0x32>
	__asm volatile
 80045ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045ee:	b672      	cpsid	i
 80045f0:	f383 8811 	msr	BASEPRI, r3
 80045f4:	f3bf 8f6f 	isb	sy
 80045f8:	f3bf 8f4f 	dsb	sy
 80045fc:	b662      	cpsie	i
 80045fe:	603b      	str	r3, [r7, #0]
}
 8004600:	bf00      	nop
 8004602:	bf00      	nop
 8004604:	e7fd      	b.n	8004602 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004606:	f000 fee1 	bl	80053cc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800460a:	4b39      	ldr	r3, [pc, #228]	@ (80046f0 <xTaskResumeAll+0x11c>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	3b01      	subs	r3, #1
 8004610:	4a37      	ldr	r2, [pc, #220]	@ (80046f0 <xTaskResumeAll+0x11c>)
 8004612:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004614:	4b36      	ldr	r3, [pc, #216]	@ (80046f0 <xTaskResumeAll+0x11c>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d161      	bne.n	80046e0 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800461c:	4b35      	ldr	r3, [pc, #212]	@ (80046f4 <xTaskResumeAll+0x120>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d05d      	beq.n	80046e0 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004624:	e02e      	b.n	8004684 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004626:	4b34      	ldr	r3, [pc, #208]	@ (80046f8 <xTaskResumeAll+0x124>)
 8004628:	68db      	ldr	r3, [r3, #12]
 800462a:	68db      	ldr	r3, [r3, #12]
 800462c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	3318      	adds	r3, #24
 8004632:	4618      	mov	r0, r3
 8004634:	f7ff f965 	bl	8003902 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	3304      	adds	r3, #4
 800463c:	4618      	mov	r0, r3
 800463e:	f7ff f960 	bl	8003902 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004646:	2201      	movs	r2, #1
 8004648:	409a      	lsls	r2, r3
 800464a:	4b2c      	ldr	r3, [pc, #176]	@ (80046fc <xTaskResumeAll+0x128>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4313      	orrs	r3, r2
 8004650:	4a2a      	ldr	r2, [pc, #168]	@ (80046fc <xTaskResumeAll+0x128>)
 8004652:	6013      	str	r3, [r2, #0]
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004658:	4613      	mov	r3, r2
 800465a:	009b      	lsls	r3, r3, #2
 800465c:	4413      	add	r3, r2
 800465e:	009b      	lsls	r3, r3, #2
 8004660:	4a27      	ldr	r2, [pc, #156]	@ (8004700 <xTaskResumeAll+0x12c>)
 8004662:	441a      	add	r2, r3
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	3304      	adds	r3, #4
 8004668:	4619      	mov	r1, r3
 800466a:	4610      	mov	r0, r2
 800466c:	f7ff f8ec 	bl	8003848 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004674:	4b23      	ldr	r3, [pc, #140]	@ (8004704 <xTaskResumeAll+0x130>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800467a:	429a      	cmp	r2, r3
 800467c:	d302      	bcc.n	8004684 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 800467e:	4b22      	ldr	r3, [pc, #136]	@ (8004708 <xTaskResumeAll+0x134>)
 8004680:	2201      	movs	r2, #1
 8004682:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004684:	4b1c      	ldr	r3, [pc, #112]	@ (80046f8 <xTaskResumeAll+0x124>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d1cc      	bne.n	8004626 <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d001      	beq.n	8004696 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004692:	f000 fb29 	bl	8004ce8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004696:	4b1d      	ldr	r3, [pc, #116]	@ (800470c <xTaskResumeAll+0x138>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d010      	beq.n	80046c4 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80046a2:	f000 f837 	bl	8004714 <xTaskIncrementTick>
 80046a6:	4603      	mov	r3, r0
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d002      	beq.n	80046b2 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 80046ac:	4b16      	ldr	r3, [pc, #88]	@ (8004708 <xTaskResumeAll+0x134>)
 80046ae:	2201      	movs	r2, #1
 80046b0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	3b01      	subs	r3, #1
 80046b6:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d1f1      	bne.n	80046a2 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 80046be:	4b13      	ldr	r3, [pc, #76]	@ (800470c <xTaskResumeAll+0x138>)
 80046c0:	2200      	movs	r2, #0
 80046c2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80046c4:	4b10      	ldr	r3, [pc, #64]	@ (8004708 <xTaskResumeAll+0x134>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d009      	beq.n	80046e0 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80046cc:	2301      	movs	r3, #1
 80046ce:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80046d0:	4b0f      	ldr	r3, [pc, #60]	@ (8004710 <xTaskResumeAll+0x13c>)
 80046d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80046d6:	601a      	str	r2, [r3, #0]
 80046d8:	f3bf 8f4f 	dsb	sy
 80046dc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80046e0:	f000 feaa 	bl	8005438 <vPortExitCritical>

	return xAlreadyYielded;
 80046e4:	68bb      	ldr	r3, [r7, #8]
}
 80046e6:	4618      	mov	r0, r3
 80046e8:	3710      	adds	r7, #16
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bd80      	pop	{r7, pc}
 80046ee:	bf00      	nop
 80046f0:	200004a0 	.word	0x200004a0
 80046f4:	20000478 	.word	0x20000478
 80046f8:	20000438 	.word	0x20000438
 80046fc:	20000480 	.word	0x20000480
 8004700:	2000037c 	.word	0x2000037c
 8004704:	20000378 	.word	0x20000378
 8004708:	2000048c 	.word	0x2000048c
 800470c:	20000488 	.word	0x20000488
 8004710:	e000ed04 	.word	0xe000ed04

08004714 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b086      	sub	sp, #24
 8004718:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800471a:	2300      	movs	r3, #0
 800471c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800471e:	4b50      	ldr	r3, [pc, #320]	@ (8004860 <xTaskIncrementTick+0x14c>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	2b00      	cmp	r3, #0
 8004724:	f040 808b 	bne.w	800483e <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004728:	4b4e      	ldr	r3, [pc, #312]	@ (8004864 <xTaskIncrementTick+0x150>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	3301      	adds	r3, #1
 800472e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004730:	4a4c      	ldr	r2, [pc, #304]	@ (8004864 <xTaskIncrementTick+0x150>)
 8004732:	693b      	ldr	r3, [r7, #16]
 8004734:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004736:	693b      	ldr	r3, [r7, #16]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d123      	bne.n	8004784 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 800473c:	4b4a      	ldr	r3, [pc, #296]	@ (8004868 <xTaskIncrementTick+0x154>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d00d      	beq.n	8004762 <xTaskIncrementTick+0x4e>
	__asm volatile
 8004746:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800474a:	b672      	cpsid	i
 800474c:	f383 8811 	msr	BASEPRI, r3
 8004750:	f3bf 8f6f 	isb	sy
 8004754:	f3bf 8f4f 	dsb	sy
 8004758:	b662      	cpsie	i
 800475a:	603b      	str	r3, [r7, #0]
}
 800475c:	bf00      	nop
 800475e:	bf00      	nop
 8004760:	e7fd      	b.n	800475e <xTaskIncrementTick+0x4a>
 8004762:	4b41      	ldr	r3, [pc, #260]	@ (8004868 <xTaskIncrementTick+0x154>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	60fb      	str	r3, [r7, #12]
 8004768:	4b40      	ldr	r3, [pc, #256]	@ (800486c <xTaskIncrementTick+0x158>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4a3e      	ldr	r2, [pc, #248]	@ (8004868 <xTaskIncrementTick+0x154>)
 800476e:	6013      	str	r3, [r2, #0]
 8004770:	4a3e      	ldr	r2, [pc, #248]	@ (800486c <xTaskIncrementTick+0x158>)
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	6013      	str	r3, [r2, #0]
 8004776:	4b3e      	ldr	r3, [pc, #248]	@ (8004870 <xTaskIncrementTick+0x15c>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	3301      	adds	r3, #1
 800477c:	4a3c      	ldr	r2, [pc, #240]	@ (8004870 <xTaskIncrementTick+0x15c>)
 800477e:	6013      	str	r3, [r2, #0]
 8004780:	f000 fab2 	bl	8004ce8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004784:	4b3b      	ldr	r3, [pc, #236]	@ (8004874 <xTaskIncrementTick+0x160>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	693a      	ldr	r2, [r7, #16]
 800478a:	429a      	cmp	r2, r3
 800478c:	d348      	bcc.n	8004820 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800478e:	4b36      	ldr	r3, [pc, #216]	@ (8004868 <xTaskIncrementTick+0x154>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d104      	bne.n	80047a2 <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004798:	4b36      	ldr	r3, [pc, #216]	@ (8004874 <xTaskIncrementTick+0x160>)
 800479a:	f04f 32ff 	mov.w	r2, #4294967295
 800479e:	601a      	str	r2, [r3, #0]
					break;
 80047a0:	e03e      	b.n	8004820 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80047a2:	4b31      	ldr	r3, [pc, #196]	@ (8004868 <xTaskIncrementTick+0x154>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	68db      	ldr	r3, [r3, #12]
 80047a8:	68db      	ldr	r3, [r3, #12]
 80047aa:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	685b      	ldr	r3, [r3, #4]
 80047b0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80047b2:	693a      	ldr	r2, [r7, #16]
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	429a      	cmp	r2, r3
 80047b8:	d203      	bcs.n	80047c2 <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80047ba:	4a2e      	ldr	r2, [pc, #184]	@ (8004874 <xTaskIncrementTick+0x160>)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80047c0:	e02e      	b.n	8004820 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80047c2:	68bb      	ldr	r3, [r7, #8]
 80047c4:	3304      	adds	r3, #4
 80047c6:	4618      	mov	r0, r3
 80047c8:	f7ff f89b 	bl	8003902 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d004      	beq.n	80047de <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80047d4:	68bb      	ldr	r3, [r7, #8]
 80047d6:	3318      	adds	r3, #24
 80047d8:	4618      	mov	r0, r3
 80047da:	f7ff f892 	bl	8003902 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80047de:	68bb      	ldr	r3, [r7, #8]
 80047e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047e2:	2201      	movs	r2, #1
 80047e4:	409a      	lsls	r2, r3
 80047e6:	4b24      	ldr	r3, [pc, #144]	@ (8004878 <xTaskIncrementTick+0x164>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4313      	orrs	r3, r2
 80047ec:	4a22      	ldr	r2, [pc, #136]	@ (8004878 <xTaskIncrementTick+0x164>)
 80047ee:	6013      	str	r3, [r2, #0]
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047f4:	4613      	mov	r3, r2
 80047f6:	009b      	lsls	r3, r3, #2
 80047f8:	4413      	add	r3, r2
 80047fa:	009b      	lsls	r3, r3, #2
 80047fc:	4a1f      	ldr	r2, [pc, #124]	@ (800487c <xTaskIncrementTick+0x168>)
 80047fe:	441a      	add	r2, r3
 8004800:	68bb      	ldr	r3, [r7, #8]
 8004802:	3304      	adds	r3, #4
 8004804:	4619      	mov	r1, r3
 8004806:	4610      	mov	r0, r2
 8004808:	f7ff f81e 	bl	8003848 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800480c:	68bb      	ldr	r3, [r7, #8]
 800480e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004810:	4b1b      	ldr	r3, [pc, #108]	@ (8004880 <xTaskIncrementTick+0x16c>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004816:	429a      	cmp	r2, r3
 8004818:	d3b9      	bcc.n	800478e <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 800481a:	2301      	movs	r3, #1
 800481c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800481e:	e7b6      	b.n	800478e <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004820:	4b17      	ldr	r3, [pc, #92]	@ (8004880 <xTaskIncrementTick+0x16c>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004826:	4915      	ldr	r1, [pc, #84]	@ (800487c <xTaskIncrementTick+0x168>)
 8004828:	4613      	mov	r3, r2
 800482a:	009b      	lsls	r3, r3, #2
 800482c:	4413      	add	r3, r2
 800482e:	009b      	lsls	r3, r3, #2
 8004830:	440b      	add	r3, r1
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	2b01      	cmp	r3, #1
 8004836:	d907      	bls.n	8004848 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8004838:	2301      	movs	r3, #1
 800483a:	617b      	str	r3, [r7, #20]
 800483c:	e004      	b.n	8004848 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800483e:	4b11      	ldr	r3, [pc, #68]	@ (8004884 <xTaskIncrementTick+0x170>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	3301      	adds	r3, #1
 8004844:	4a0f      	ldr	r2, [pc, #60]	@ (8004884 <xTaskIncrementTick+0x170>)
 8004846:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004848:	4b0f      	ldr	r3, [pc, #60]	@ (8004888 <xTaskIncrementTick+0x174>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d001      	beq.n	8004854 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8004850:	2301      	movs	r3, #1
 8004852:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004854:	697b      	ldr	r3, [r7, #20]
}
 8004856:	4618      	mov	r0, r3
 8004858:	3718      	adds	r7, #24
 800485a:	46bd      	mov	sp, r7
 800485c:	bd80      	pop	{r7, pc}
 800485e:	bf00      	nop
 8004860:	200004a0 	.word	0x200004a0
 8004864:	2000047c 	.word	0x2000047c
 8004868:	20000430 	.word	0x20000430
 800486c:	20000434 	.word	0x20000434
 8004870:	20000490 	.word	0x20000490
 8004874:	20000498 	.word	0x20000498
 8004878:	20000480 	.word	0x20000480
 800487c:	2000037c 	.word	0x2000037c
 8004880:	20000378 	.word	0x20000378
 8004884:	20000488 	.word	0x20000488
 8004888:	2000048c 	.word	0x2000048c

0800488c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800488c:	b480      	push	{r7}
 800488e:	b087      	sub	sp, #28
 8004890:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004892:	4b28      	ldr	r3, [pc, #160]	@ (8004934 <vTaskSwitchContext+0xa8>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d003      	beq.n	80048a2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800489a:	4b27      	ldr	r3, [pc, #156]	@ (8004938 <vTaskSwitchContext+0xac>)
 800489c:	2201      	movs	r2, #1
 800489e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80048a0:	e042      	b.n	8004928 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 80048a2:	4b25      	ldr	r3, [pc, #148]	@ (8004938 <vTaskSwitchContext+0xac>)
 80048a4:	2200      	movs	r2, #0
 80048a6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80048a8:	4b24      	ldr	r3, [pc, #144]	@ (800493c <vTaskSwitchContext+0xb0>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	fab3 f383 	clz	r3, r3
 80048b4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80048b6:	7afb      	ldrb	r3, [r7, #11]
 80048b8:	f1c3 031f 	rsb	r3, r3, #31
 80048bc:	617b      	str	r3, [r7, #20]
 80048be:	4920      	ldr	r1, [pc, #128]	@ (8004940 <vTaskSwitchContext+0xb4>)
 80048c0:	697a      	ldr	r2, [r7, #20]
 80048c2:	4613      	mov	r3, r2
 80048c4:	009b      	lsls	r3, r3, #2
 80048c6:	4413      	add	r3, r2
 80048c8:	009b      	lsls	r3, r3, #2
 80048ca:	440b      	add	r3, r1
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d10d      	bne.n	80048ee <vTaskSwitchContext+0x62>
	__asm volatile
 80048d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048d6:	b672      	cpsid	i
 80048d8:	f383 8811 	msr	BASEPRI, r3
 80048dc:	f3bf 8f6f 	isb	sy
 80048e0:	f3bf 8f4f 	dsb	sy
 80048e4:	b662      	cpsie	i
 80048e6:	607b      	str	r3, [r7, #4]
}
 80048e8:	bf00      	nop
 80048ea:	bf00      	nop
 80048ec:	e7fd      	b.n	80048ea <vTaskSwitchContext+0x5e>
 80048ee:	697a      	ldr	r2, [r7, #20]
 80048f0:	4613      	mov	r3, r2
 80048f2:	009b      	lsls	r3, r3, #2
 80048f4:	4413      	add	r3, r2
 80048f6:	009b      	lsls	r3, r3, #2
 80048f8:	4a11      	ldr	r2, [pc, #68]	@ (8004940 <vTaskSwitchContext+0xb4>)
 80048fa:	4413      	add	r3, r2
 80048fc:	613b      	str	r3, [r7, #16]
 80048fe:	693b      	ldr	r3, [r7, #16]
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	685a      	ldr	r2, [r3, #4]
 8004904:	693b      	ldr	r3, [r7, #16]
 8004906:	605a      	str	r2, [r3, #4]
 8004908:	693b      	ldr	r3, [r7, #16]
 800490a:	685a      	ldr	r2, [r3, #4]
 800490c:	693b      	ldr	r3, [r7, #16]
 800490e:	3308      	adds	r3, #8
 8004910:	429a      	cmp	r2, r3
 8004912:	d104      	bne.n	800491e <vTaskSwitchContext+0x92>
 8004914:	693b      	ldr	r3, [r7, #16]
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	685a      	ldr	r2, [r3, #4]
 800491a:	693b      	ldr	r3, [r7, #16]
 800491c:	605a      	str	r2, [r3, #4]
 800491e:	693b      	ldr	r3, [r7, #16]
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	68db      	ldr	r3, [r3, #12]
 8004924:	4a07      	ldr	r2, [pc, #28]	@ (8004944 <vTaskSwitchContext+0xb8>)
 8004926:	6013      	str	r3, [r2, #0]
}
 8004928:	bf00      	nop
 800492a:	371c      	adds	r7, #28
 800492c:	46bd      	mov	sp, r7
 800492e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004932:	4770      	bx	lr
 8004934:	200004a0 	.word	0x200004a0
 8004938:	2000048c 	.word	0x2000048c
 800493c:	20000480 	.word	0x20000480
 8004940:	2000037c 	.word	0x2000037c
 8004944:	20000378 	.word	0x20000378

08004948 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b084      	sub	sp, #16
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
 8004950:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d10d      	bne.n	8004974 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 8004958:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800495c:	b672      	cpsid	i
 800495e:	f383 8811 	msr	BASEPRI, r3
 8004962:	f3bf 8f6f 	isb	sy
 8004966:	f3bf 8f4f 	dsb	sy
 800496a:	b662      	cpsie	i
 800496c:	60fb      	str	r3, [r7, #12]
}
 800496e:	bf00      	nop
 8004970:	bf00      	nop
 8004972:	e7fd      	b.n	8004970 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004974:	4b07      	ldr	r3, [pc, #28]	@ (8004994 <vTaskPlaceOnEventList+0x4c>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	3318      	adds	r3, #24
 800497a:	4619      	mov	r1, r3
 800497c:	6878      	ldr	r0, [r7, #4]
 800497e:	f7fe ff87 	bl	8003890 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004982:	2101      	movs	r1, #1
 8004984:	6838      	ldr	r0, [r7, #0]
 8004986:	f000 fbad 	bl	80050e4 <prvAddCurrentTaskToDelayedList>
}
 800498a:	bf00      	nop
 800498c:	3710      	adds	r7, #16
 800498e:	46bd      	mov	sp, r7
 8004990:	bd80      	pop	{r7, pc}
 8004992:	bf00      	nop
 8004994:	20000378 	.word	0x20000378

08004998 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b086      	sub	sp, #24
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	68db      	ldr	r3, [r3, #12]
 80049a4:	68db      	ldr	r3, [r3, #12]
 80049a6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80049a8:	693b      	ldr	r3, [r7, #16]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d10d      	bne.n	80049ca <xTaskRemoveFromEventList+0x32>
	__asm volatile
 80049ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049b2:	b672      	cpsid	i
 80049b4:	f383 8811 	msr	BASEPRI, r3
 80049b8:	f3bf 8f6f 	isb	sy
 80049bc:	f3bf 8f4f 	dsb	sy
 80049c0:	b662      	cpsie	i
 80049c2:	60fb      	str	r3, [r7, #12]
}
 80049c4:	bf00      	nop
 80049c6:	bf00      	nop
 80049c8:	e7fd      	b.n	80049c6 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80049ca:	693b      	ldr	r3, [r7, #16]
 80049cc:	3318      	adds	r3, #24
 80049ce:	4618      	mov	r0, r3
 80049d0:	f7fe ff97 	bl	8003902 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80049d4:	4b1d      	ldr	r3, [pc, #116]	@ (8004a4c <xTaskRemoveFromEventList+0xb4>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d11c      	bne.n	8004a16 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80049dc:	693b      	ldr	r3, [r7, #16]
 80049de:	3304      	adds	r3, #4
 80049e0:	4618      	mov	r0, r3
 80049e2:	f7fe ff8e 	bl	8003902 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80049e6:	693b      	ldr	r3, [r7, #16]
 80049e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049ea:	2201      	movs	r2, #1
 80049ec:	409a      	lsls	r2, r3
 80049ee:	4b18      	ldr	r3, [pc, #96]	@ (8004a50 <xTaskRemoveFromEventList+0xb8>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	4313      	orrs	r3, r2
 80049f4:	4a16      	ldr	r2, [pc, #88]	@ (8004a50 <xTaskRemoveFromEventList+0xb8>)
 80049f6:	6013      	str	r3, [r2, #0]
 80049f8:	693b      	ldr	r3, [r7, #16]
 80049fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049fc:	4613      	mov	r3, r2
 80049fe:	009b      	lsls	r3, r3, #2
 8004a00:	4413      	add	r3, r2
 8004a02:	009b      	lsls	r3, r3, #2
 8004a04:	4a13      	ldr	r2, [pc, #76]	@ (8004a54 <xTaskRemoveFromEventList+0xbc>)
 8004a06:	441a      	add	r2, r3
 8004a08:	693b      	ldr	r3, [r7, #16]
 8004a0a:	3304      	adds	r3, #4
 8004a0c:	4619      	mov	r1, r3
 8004a0e:	4610      	mov	r0, r2
 8004a10:	f7fe ff1a 	bl	8003848 <vListInsertEnd>
 8004a14:	e005      	b.n	8004a22 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004a16:	693b      	ldr	r3, [r7, #16]
 8004a18:	3318      	adds	r3, #24
 8004a1a:	4619      	mov	r1, r3
 8004a1c:	480e      	ldr	r0, [pc, #56]	@ (8004a58 <xTaskRemoveFromEventList+0xc0>)
 8004a1e:	f7fe ff13 	bl	8003848 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a26:	4b0d      	ldr	r3, [pc, #52]	@ (8004a5c <xTaskRemoveFromEventList+0xc4>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a2c:	429a      	cmp	r2, r3
 8004a2e:	d905      	bls.n	8004a3c <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004a30:	2301      	movs	r3, #1
 8004a32:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004a34:	4b0a      	ldr	r3, [pc, #40]	@ (8004a60 <xTaskRemoveFromEventList+0xc8>)
 8004a36:	2201      	movs	r2, #1
 8004a38:	601a      	str	r2, [r3, #0]
 8004a3a:	e001      	b.n	8004a40 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004a40:	697b      	ldr	r3, [r7, #20]
}
 8004a42:	4618      	mov	r0, r3
 8004a44:	3718      	adds	r7, #24
 8004a46:	46bd      	mov	sp, r7
 8004a48:	bd80      	pop	{r7, pc}
 8004a4a:	bf00      	nop
 8004a4c:	200004a0 	.word	0x200004a0
 8004a50:	20000480 	.word	0x20000480
 8004a54:	2000037c 	.word	0x2000037c
 8004a58:	20000438 	.word	0x20000438
 8004a5c:	20000378 	.word	0x20000378
 8004a60:	2000048c 	.word	0x2000048c

08004a64 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004a64:	b480      	push	{r7}
 8004a66:	b083      	sub	sp, #12
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004a6c:	4b06      	ldr	r3, [pc, #24]	@ (8004a88 <vTaskInternalSetTimeOutState+0x24>)
 8004a6e:	681a      	ldr	r2, [r3, #0]
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004a74:	4b05      	ldr	r3, [pc, #20]	@ (8004a8c <vTaskInternalSetTimeOutState+0x28>)
 8004a76:	681a      	ldr	r2, [r3, #0]
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	605a      	str	r2, [r3, #4]
}
 8004a7c:	bf00      	nop
 8004a7e:	370c      	adds	r7, #12
 8004a80:	46bd      	mov	sp, r7
 8004a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a86:	4770      	bx	lr
 8004a88:	20000490 	.word	0x20000490
 8004a8c:	2000047c 	.word	0x2000047c

08004a90 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b088      	sub	sp, #32
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
 8004a98:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d10d      	bne.n	8004abc <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 8004aa0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004aa4:	b672      	cpsid	i
 8004aa6:	f383 8811 	msr	BASEPRI, r3
 8004aaa:	f3bf 8f6f 	isb	sy
 8004aae:	f3bf 8f4f 	dsb	sy
 8004ab2:	b662      	cpsie	i
 8004ab4:	613b      	str	r3, [r7, #16]
}
 8004ab6:	bf00      	nop
 8004ab8:	bf00      	nop
 8004aba:	e7fd      	b.n	8004ab8 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d10d      	bne.n	8004ade <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 8004ac2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ac6:	b672      	cpsid	i
 8004ac8:	f383 8811 	msr	BASEPRI, r3
 8004acc:	f3bf 8f6f 	isb	sy
 8004ad0:	f3bf 8f4f 	dsb	sy
 8004ad4:	b662      	cpsie	i
 8004ad6:	60fb      	str	r3, [r7, #12]
}
 8004ad8:	bf00      	nop
 8004ada:	bf00      	nop
 8004adc:	e7fd      	b.n	8004ada <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 8004ade:	f000 fc75 	bl	80053cc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004ae2:	4b1d      	ldr	r3, [pc, #116]	@ (8004b58 <xTaskCheckForTimeOut+0xc8>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	69ba      	ldr	r2, [r7, #24]
 8004aee:	1ad3      	subs	r3, r2, r3
 8004af0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004afa:	d102      	bne.n	8004b02 <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004afc:	2300      	movs	r3, #0
 8004afe:	61fb      	str	r3, [r7, #28]
 8004b00:	e023      	b.n	8004b4a <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681a      	ldr	r2, [r3, #0]
 8004b06:	4b15      	ldr	r3, [pc, #84]	@ (8004b5c <xTaskCheckForTimeOut+0xcc>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	429a      	cmp	r2, r3
 8004b0c:	d007      	beq.n	8004b1e <xTaskCheckForTimeOut+0x8e>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	685b      	ldr	r3, [r3, #4]
 8004b12:	69ba      	ldr	r2, [r7, #24]
 8004b14:	429a      	cmp	r2, r3
 8004b16:	d302      	bcc.n	8004b1e <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004b18:	2301      	movs	r3, #1
 8004b1a:	61fb      	str	r3, [r7, #28]
 8004b1c:	e015      	b.n	8004b4a <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	697a      	ldr	r2, [r7, #20]
 8004b24:	429a      	cmp	r2, r3
 8004b26:	d20b      	bcs.n	8004b40 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	681a      	ldr	r2, [r3, #0]
 8004b2c:	697b      	ldr	r3, [r7, #20]
 8004b2e:	1ad2      	subs	r2, r2, r3
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004b34:	6878      	ldr	r0, [r7, #4]
 8004b36:	f7ff ff95 	bl	8004a64 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	61fb      	str	r3, [r7, #28]
 8004b3e:	e004      	b.n	8004b4a <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	2200      	movs	r2, #0
 8004b44:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004b46:	2301      	movs	r3, #1
 8004b48:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004b4a:	f000 fc75 	bl	8005438 <vPortExitCritical>

	return xReturn;
 8004b4e:	69fb      	ldr	r3, [r7, #28]
}
 8004b50:	4618      	mov	r0, r3
 8004b52:	3720      	adds	r7, #32
 8004b54:	46bd      	mov	sp, r7
 8004b56:	bd80      	pop	{r7, pc}
 8004b58:	2000047c 	.word	0x2000047c
 8004b5c:	20000490 	.word	0x20000490

08004b60 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004b60:	b480      	push	{r7}
 8004b62:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004b64:	4b03      	ldr	r3, [pc, #12]	@ (8004b74 <vTaskMissedYield+0x14>)
 8004b66:	2201      	movs	r2, #1
 8004b68:	601a      	str	r2, [r3, #0]
}
 8004b6a:	bf00      	nop
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b72:	4770      	bx	lr
 8004b74:	2000048c 	.word	0x2000048c

08004b78 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b082      	sub	sp, #8
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004b80:	f000 f852 	bl	8004c28 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004b84:	4b06      	ldr	r3, [pc, #24]	@ (8004ba0 <prvIdleTask+0x28>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	2b01      	cmp	r3, #1
 8004b8a:	d9f9      	bls.n	8004b80 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004b8c:	4b05      	ldr	r3, [pc, #20]	@ (8004ba4 <prvIdleTask+0x2c>)
 8004b8e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004b92:	601a      	str	r2, [r3, #0]
 8004b94:	f3bf 8f4f 	dsb	sy
 8004b98:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004b9c:	e7f0      	b.n	8004b80 <prvIdleTask+0x8>
 8004b9e:	bf00      	nop
 8004ba0:	2000037c 	.word	0x2000037c
 8004ba4:	e000ed04 	.word	0xe000ed04

08004ba8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b082      	sub	sp, #8
 8004bac:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004bae:	2300      	movs	r3, #0
 8004bb0:	607b      	str	r3, [r7, #4]
 8004bb2:	e00c      	b.n	8004bce <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004bb4:	687a      	ldr	r2, [r7, #4]
 8004bb6:	4613      	mov	r3, r2
 8004bb8:	009b      	lsls	r3, r3, #2
 8004bba:	4413      	add	r3, r2
 8004bbc:	009b      	lsls	r3, r3, #2
 8004bbe:	4a12      	ldr	r2, [pc, #72]	@ (8004c08 <prvInitialiseTaskLists+0x60>)
 8004bc0:	4413      	add	r3, r2
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	f7fe fe13 	bl	80037ee <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	3301      	adds	r3, #1
 8004bcc:	607b      	str	r3, [r7, #4]
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2b06      	cmp	r3, #6
 8004bd2:	d9ef      	bls.n	8004bb4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004bd4:	480d      	ldr	r0, [pc, #52]	@ (8004c0c <prvInitialiseTaskLists+0x64>)
 8004bd6:	f7fe fe0a 	bl	80037ee <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004bda:	480d      	ldr	r0, [pc, #52]	@ (8004c10 <prvInitialiseTaskLists+0x68>)
 8004bdc:	f7fe fe07 	bl	80037ee <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004be0:	480c      	ldr	r0, [pc, #48]	@ (8004c14 <prvInitialiseTaskLists+0x6c>)
 8004be2:	f7fe fe04 	bl	80037ee <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004be6:	480c      	ldr	r0, [pc, #48]	@ (8004c18 <prvInitialiseTaskLists+0x70>)
 8004be8:	f7fe fe01 	bl	80037ee <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004bec:	480b      	ldr	r0, [pc, #44]	@ (8004c1c <prvInitialiseTaskLists+0x74>)
 8004bee:	f7fe fdfe 	bl	80037ee <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004bf2:	4b0b      	ldr	r3, [pc, #44]	@ (8004c20 <prvInitialiseTaskLists+0x78>)
 8004bf4:	4a05      	ldr	r2, [pc, #20]	@ (8004c0c <prvInitialiseTaskLists+0x64>)
 8004bf6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004bf8:	4b0a      	ldr	r3, [pc, #40]	@ (8004c24 <prvInitialiseTaskLists+0x7c>)
 8004bfa:	4a05      	ldr	r2, [pc, #20]	@ (8004c10 <prvInitialiseTaskLists+0x68>)
 8004bfc:	601a      	str	r2, [r3, #0]
}
 8004bfe:	bf00      	nop
 8004c00:	3708      	adds	r7, #8
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bd80      	pop	{r7, pc}
 8004c06:	bf00      	nop
 8004c08:	2000037c 	.word	0x2000037c
 8004c0c:	20000408 	.word	0x20000408
 8004c10:	2000041c 	.word	0x2000041c
 8004c14:	20000438 	.word	0x20000438
 8004c18:	2000044c 	.word	0x2000044c
 8004c1c:	20000464 	.word	0x20000464
 8004c20:	20000430 	.word	0x20000430
 8004c24:	20000434 	.word	0x20000434

08004c28 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b082      	sub	sp, #8
 8004c2c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004c2e:	e019      	b.n	8004c64 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004c30:	f000 fbcc 	bl	80053cc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c34:	4b10      	ldr	r3, [pc, #64]	@ (8004c78 <prvCheckTasksWaitingTermination+0x50>)
 8004c36:	68db      	ldr	r3, [r3, #12]
 8004c38:	68db      	ldr	r3, [r3, #12]
 8004c3a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	3304      	adds	r3, #4
 8004c40:	4618      	mov	r0, r3
 8004c42:	f7fe fe5e 	bl	8003902 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004c46:	4b0d      	ldr	r3, [pc, #52]	@ (8004c7c <prvCheckTasksWaitingTermination+0x54>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	3b01      	subs	r3, #1
 8004c4c:	4a0b      	ldr	r2, [pc, #44]	@ (8004c7c <prvCheckTasksWaitingTermination+0x54>)
 8004c4e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004c50:	4b0b      	ldr	r3, [pc, #44]	@ (8004c80 <prvCheckTasksWaitingTermination+0x58>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	3b01      	subs	r3, #1
 8004c56:	4a0a      	ldr	r2, [pc, #40]	@ (8004c80 <prvCheckTasksWaitingTermination+0x58>)
 8004c58:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004c5a:	f000 fbed 	bl	8005438 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004c5e:	6878      	ldr	r0, [r7, #4]
 8004c60:	f000 f810 	bl	8004c84 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004c64:	4b06      	ldr	r3, [pc, #24]	@ (8004c80 <prvCheckTasksWaitingTermination+0x58>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d1e1      	bne.n	8004c30 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004c6c:	bf00      	nop
 8004c6e:	bf00      	nop
 8004c70:	3708      	adds	r7, #8
 8004c72:	46bd      	mov	sp, r7
 8004c74:	bd80      	pop	{r7, pc}
 8004c76:	bf00      	nop
 8004c78:	2000044c 	.word	0x2000044c
 8004c7c:	20000478 	.word	0x20000478
 8004c80:	20000460 	.word	0x20000460

08004c84 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b084      	sub	sp, #16
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d108      	bne.n	8004ca8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	f000 fd4c 	bl	8005738 <vPortFree>
				vPortFree( pxTCB );
 8004ca0:	6878      	ldr	r0, [r7, #4]
 8004ca2:	f000 fd49 	bl	8005738 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004ca6:	e01b      	b.n	8004ce0 <prvDeleteTCB+0x5c>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004cae:	2b01      	cmp	r3, #1
 8004cb0:	d103      	bne.n	8004cba <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004cb2:	6878      	ldr	r0, [r7, #4]
 8004cb4:	f000 fd40 	bl	8005738 <vPortFree>
	}
 8004cb8:	e012      	b.n	8004ce0 <prvDeleteTCB+0x5c>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004cc0:	2b02      	cmp	r3, #2
 8004cc2:	d00d      	beq.n	8004ce0 <prvDeleteTCB+0x5c>
	__asm volatile
 8004cc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cc8:	b672      	cpsid	i
 8004cca:	f383 8811 	msr	BASEPRI, r3
 8004cce:	f3bf 8f6f 	isb	sy
 8004cd2:	f3bf 8f4f 	dsb	sy
 8004cd6:	b662      	cpsie	i
 8004cd8:	60fb      	str	r3, [r7, #12]
}
 8004cda:	bf00      	nop
 8004cdc:	bf00      	nop
 8004cde:	e7fd      	b.n	8004cdc <prvDeleteTCB+0x58>
	}
 8004ce0:	bf00      	nop
 8004ce2:	3710      	adds	r7, #16
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	bd80      	pop	{r7, pc}

08004ce8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004ce8:	b480      	push	{r7}
 8004cea:	b083      	sub	sp, #12
 8004cec:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004cee:	4b0c      	ldr	r3, [pc, #48]	@ (8004d20 <prvResetNextTaskUnblockTime+0x38>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d104      	bne.n	8004d02 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004cf8:	4b0a      	ldr	r3, [pc, #40]	@ (8004d24 <prvResetNextTaskUnblockTime+0x3c>)
 8004cfa:	f04f 32ff 	mov.w	r2, #4294967295
 8004cfe:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004d00:	e008      	b.n	8004d14 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d02:	4b07      	ldr	r3, [pc, #28]	@ (8004d20 <prvResetNextTaskUnblockTime+0x38>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	68db      	ldr	r3, [r3, #12]
 8004d08:	68db      	ldr	r3, [r3, #12]
 8004d0a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	4a04      	ldr	r2, [pc, #16]	@ (8004d24 <prvResetNextTaskUnblockTime+0x3c>)
 8004d12:	6013      	str	r3, [r2, #0]
}
 8004d14:	bf00      	nop
 8004d16:	370c      	adds	r7, #12
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1e:	4770      	bx	lr
 8004d20:	20000430 	.word	0x20000430
 8004d24:	20000498 	.word	0x20000498

08004d28 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004d28:	b480      	push	{r7}
 8004d2a:	b083      	sub	sp, #12
 8004d2c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004d2e:	4b0b      	ldr	r3, [pc, #44]	@ (8004d5c <xTaskGetSchedulerState+0x34>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d102      	bne.n	8004d3c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004d36:	2301      	movs	r3, #1
 8004d38:	607b      	str	r3, [r7, #4]
 8004d3a:	e008      	b.n	8004d4e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004d3c:	4b08      	ldr	r3, [pc, #32]	@ (8004d60 <xTaskGetSchedulerState+0x38>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d102      	bne.n	8004d4a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004d44:	2302      	movs	r3, #2
 8004d46:	607b      	str	r3, [r7, #4]
 8004d48:	e001      	b.n	8004d4e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004d4e:	687b      	ldr	r3, [r7, #4]
	}
 8004d50:	4618      	mov	r0, r3
 8004d52:	370c      	adds	r7, #12
 8004d54:	46bd      	mov	sp, r7
 8004d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5a:	4770      	bx	lr
 8004d5c:	20000484 	.word	0x20000484
 8004d60:	200004a0 	.word	0x200004a0

08004d64 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b084      	sub	sp, #16
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8004d70:	2300      	movs	r3, #0
 8004d72:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d069      	beq.n	8004e4e <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d7e:	4b36      	ldr	r3, [pc, #216]	@ (8004e58 <xTaskPriorityInherit+0xf4>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d84:	429a      	cmp	r2, r3
 8004d86:	d259      	bcs.n	8004e3c <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	699b      	ldr	r3, [r3, #24]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	db06      	blt.n	8004d9e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d90:	4b31      	ldr	r3, [pc, #196]	@ (8004e58 <xTaskPriorityInherit+0xf4>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d96:	f1c3 0207 	rsb	r2, r3, #7
 8004d9a:	68bb      	ldr	r3, [r7, #8]
 8004d9c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	6959      	ldr	r1, [r3, #20]
 8004da2:	68bb      	ldr	r3, [r7, #8]
 8004da4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004da6:	4613      	mov	r3, r2
 8004da8:	009b      	lsls	r3, r3, #2
 8004daa:	4413      	add	r3, r2
 8004dac:	009b      	lsls	r3, r3, #2
 8004dae:	4a2b      	ldr	r2, [pc, #172]	@ (8004e5c <xTaskPriorityInherit+0xf8>)
 8004db0:	4413      	add	r3, r2
 8004db2:	4299      	cmp	r1, r3
 8004db4:	d13a      	bne.n	8004e2c <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004db6:	68bb      	ldr	r3, [r7, #8]
 8004db8:	3304      	adds	r3, #4
 8004dba:	4618      	mov	r0, r3
 8004dbc:	f7fe fda1 	bl	8003902 <uxListRemove>
 8004dc0:	4603      	mov	r3, r0
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d115      	bne.n	8004df2 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004dca:	4924      	ldr	r1, [pc, #144]	@ (8004e5c <xTaskPriorityInherit+0xf8>)
 8004dcc:	4613      	mov	r3, r2
 8004dce:	009b      	lsls	r3, r3, #2
 8004dd0:	4413      	add	r3, r2
 8004dd2:	009b      	lsls	r3, r3, #2
 8004dd4:	440b      	add	r3, r1
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d10a      	bne.n	8004df2 <xTaskPriorityInherit+0x8e>
 8004ddc:	68bb      	ldr	r3, [r7, #8]
 8004dde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004de0:	2201      	movs	r2, #1
 8004de2:	fa02 f303 	lsl.w	r3, r2, r3
 8004de6:	43da      	mvns	r2, r3
 8004de8:	4b1d      	ldr	r3, [pc, #116]	@ (8004e60 <xTaskPriorityInherit+0xfc>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4013      	ands	r3, r2
 8004dee:	4a1c      	ldr	r2, [pc, #112]	@ (8004e60 <xTaskPriorityInherit+0xfc>)
 8004df0:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004df2:	4b19      	ldr	r3, [pc, #100]	@ (8004e58 <xTaskPriorityInherit+0xf4>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004df8:	68bb      	ldr	r3, [r7, #8]
 8004dfa:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e00:	2201      	movs	r2, #1
 8004e02:	409a      	lsls	r2, r3
 8004e04:	4b16      	ldr	r3, [pc, #88]	@ (8004e60 <xTaskPriorityInherit+0xfc>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4313      	orrs	r3, r2
 8004e0a:	4a15      	ldr	r2, [pc, #84]	@ (8004e60 <xTaskPriorityInherit+0xfc>)
 8004e0c:	6013      	str	r3, [r2, #0]
 8004e0e:	68bb      	ldr	r3, [r7, #8]
 8004e10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e12:	4613      	mov	r3, r2
 8004e14:	009b      	lsls	r3, r3, #2
 8004e16:	4413      	add	r3, r2
 8004e18:	009b      	lsls	r3, r3, #2
 8004e1a:	4a10      	ldr	r2, [pc, #64]	@ (8004e5c <xTaskPriorityInherit+0xf8>)
 8004e1c:	441a      	add	r2, r3
 8004e1e:	68bb      	ldr	r3, [r7, #8]
 8004e20:	3304      	adds	r3, #4
 8004e22:	4619      	mov	r1, r3
 8004e24:	4610      	mov	r0, r2
 8004e26:	f7fe fd0f 	bl	8003848 <vListInsertEnd>
 8004e2a:	e004      	b.n	8004e36 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004e2c:	4b0a      	ldr	r3, [pc, #40]	@ (8004e58 <xTaskPriorityInherit+0xf4>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e32:	68bb      	ldr	r3, [r7, #8]
 8004e34:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8004e36:	2301      	movs	r3, #1
 8004e38:	60fb      	str	r3, [r7, #12]
 8004e3a:	e008      	b.n	8004e4e <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004e40:	4b05      	ldr	r3, [pc, #20]	@ (8004e58 <xTaskPriorityInherit+0xf4>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e46:	429a      	cmp	r2, r3
 8004e48:	d201      	bcs.n	8004e4e <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
	}
 8004e50:	4618      	mov	r0, r3
 8004e52:	3710      	adds	r7, #16
 8004e54:	46bd      	mov	sp, r7
 8004e56:	bd80      	pop	{r7, pc}
 8004e58:	20000378 	.word	0x20000378
 8004e5c:	2000037c 	.word	0x2000037c
 8004e60:	20000480 	.word	0x20000480

08004e64 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b086      	sub	sp, #24
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004e70:	2300      	movs	r3, #0
 8004e72:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d074      	beq.n	8004f64 <xTaskPriorityDisinherit+0x100>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004e7a:	4b3d      	ldr	r3, [pc, #244]	@ (8004f70 <xTaskPriorityDisinherit+0x10c>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	693a      	ldr	r2, [r7, #16]
 8004e80:	429a      	cmp	r2, r3
 8004e82:	d00d      	beq.n	8004ea0 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 8004e84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e88:	b672      	cpsid	i
 8004e8a:	f383 8811 	msr	BASEPRI, r3
 8004e8e:	f3bf 8f6f 	isb	sy
 8004e92:	f3bf 8f4f 	dsb	sy
 8004e96:	b662      	cpsie	i
 8004e98:	60fb      	str	r3, [r7, #12]
}
 8004e9a:	bf00      	nop
 8004e9c:	bf00      	nop
 8004e9e:	e7fd      	b.n	8004e9c <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8004ea0:	693b      	ldr	r3, [r7, #16]
 8004ea2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d10d      	bne.n	8004ec4 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 8004ea8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004eac:	b672      	cpsid	i
 8004eae:	f383 8811 	msr	BASEPRI, r3
 8004eb2:	f3bf 8f6f 	isb	sy
 8004eb6:	f3bf 8f4f 	dsb	sy
 8004eba:	b662      	cpsie	i
 8004ebc:	60bb      	str	r3, [r7, #8]
}
 8004ebe:	bf00      	nop
 8004ec0:	bf00      	nop
 8004ec2:	e7fd      	b.n	8004ec0 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 8004ec4:	693b      	ldr	r3, [r7, #16]
 8004ec6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ec8:	1e5a      	subs	r2, r3, #1
 8004eca:	693b      	ldr	r3, [r7, #16]
 8004ecc:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004ece:	693b      	ldr	r3, [r7, #16]
 8004ed0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ed2:	693b      	ldr	r3, [r7, #16]
 8004ed4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ed6:	429a      	cmp	r2, r3
 8004ed8:	d044      	beq.n	8004f64 <xTaskPriorityDisinherit+0x100>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004eda:	693b      	ldr	r3, [r7, #16]
 8004edc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d140      	bne.n	8004f64 <xTaskPriorityDisinherit+0x100>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004ee2:	693b      	ldr	r3, [r7, #16]
 8004ee4:	3304      	adds	r3, #4
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	f7fe fd0b 	bl	8003902 <uxListRemove>
 8004eec:	4603      	mov	r3, r0
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d115      	bne.n	8004f1e <xTaskPriorityDisinherit+0xba>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004ef2:	693b      	ldr	r3, [r7, #16]
 8004ef4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ef6:	491f      	ldr	r1, [pc, #124]	@ (8004f74 <xTaskPriorityDisinherit+0x110>)
 8004ef8:	4613      	mov	r3, r2
 8004efa:	009b      	lsls	r3, r3, #2
 8004efc:	4413      	add	r3, r2
 8004efe:	009b      	lsls	r3, r3, #2
 8004f00:	440b      	add	r3, r1
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d10a      	bne.n	8004f1e <xTaskPriorityDisinherit+0xba>
 8004f08:	693b      	ldr	r3, [r7, #16]
 8004f0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f0c:	2201      	movs	r2, #1
 8004f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f12:	43da      	mvns	r2, r3
 8004f14:	4b18      	ldr	r3, [pc, #96]	@ (8004f78 <xTaskPriorityDisinherit+0x114>)
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4013      	ands	r3, r2
 8004f1a:	4a17      	ldr	r2, [pc, #92]	@ (8004f78 <xTaskPriorityDisinherit+0x114>)
 8004f1c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004f1e:	693b      	ldr	r3, [r7, #16]
 8004f20:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004f22:	693b      	ldr	r3, [r7, #16]
 8004f24:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f26:	693b      	ldr	r3, [r7, #16]
 8004f28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f2a:	f1c3 0207 	rsb	r2, r3, #7
 8004f2e:	693b      	ldr	r3, [r7, #16]
 8004f30:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004f32:	693b      	ldr	r3, [r7, #16]
 8004f34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f36:	2201      	movs	r2, #1
 8004f38:	409a      	lsls	r2, r3
 8004f3a:	4b0f      	ldr	r3, [pc, #60]	@ (8004f78 <xTaskPriorityDisinherit+0x114>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	4a0d      	ldr	r2, [pc, #52]	@ (8004f78 <xTaskPriorityDisinherit+0x114>)
 8004f42:	6013      	str	r3, [r2, #0]
 8004f44:	693b      	ldr	r3, [r7, #16]
 8004f46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f48:	4613      	mov	r3, r2
 8004f4a:	009b      	lsls	r3, r3, #2
 8004f4c:	4413      	add	r3, r2
 8004f4e:	009b      	lsls	r3, r3, #2
 8004f50:	4a08      	ldr	r2, [pc, #32]	@ (8004f74 <xTaskPriorityDisinherit+0x110>)
 8004f52:	441a      	add	r2, r3
 8004f54:	693b      	ldr	r3, [r7, #16]
 8004f56:	3304      	adds	r3, #4
 8004f58:	4619      	mov	r1, r3
 8004f5a:	4610      	mov	r0, r2
 8004f5c:	f7fe fc74 	bl	8003848 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004f60:	2301      	movs	r3, #1
 8004f62:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004f64:	697b      	ldr	r3, [r7, #20]
	}
 8004f66:	4618      	mov	r0, r3
 8004f68:	3718      	adds	r7, #24
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bd80      	pop	{r7, pc}
 8004f6e:	bf00      	nop
 8004f70:	20000378 	.word	0x20000378
 8004f74:	2000037c 	.word	0x2000037c
 8004f78:	20000480 	.word	0x20000480

08004f7c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b088      	sub	sp, #32
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
 8004f84:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	f000 8089 	beq.w	80050a8 <vTaskPriorityDisinheritAfterTimeout+0x12c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8004f96:	69bb      	ldr	r3, [r7, #24]
 8004f98:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d10d      	bne.n	8004fba <vTaskPriorityDisinheritAfterTimeout+0x3e>
	__asm volatile
 8004f9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fa2:	b672      	cpsid	i
 8004fa4:	f383 8811 	msr	BASEPRI, r3
 8004fa8:	f3bf 8f6f 	isb	sy
 8004fac:	f3bf 8f4f 	dsb	sy
 8004fb0:	b662      	cpsie	i
 8004fb2:	60fb      	str	r3, [r7, #12]
}
 8004fb4:	bf00      	nop
 8004fb6:	bf00      	nop
 8004fb8:	e7fd      	b.n	8004fb6 <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8004fba:	69bb      	ldr	r3, [r7, #24]
 8004fbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fbe:	683a      	ldr	r2, [r7, #0]
 8004fc0:	429a      	cmp	r2, r3
 8004fc2:	d902      	bls.n	8004fca <vTaskPriorityDisinheritAfterTimeout+0x4e>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	61fb      	str	r3, [r7, #28]
 8004fc8:	e002      	b.n	8004fd0 <vTaskPriorityDisinheritAfterTimeout+0x54>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8004fca:	69bb      	ldr	r3, [r7, #24]
 8004fcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fce:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8004fd0:	69bb      	ldr	r3, [r7, #24]
 8004fd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fd4:	69fa      	ldr	r2, [r7, #28]
 8004fd6:	429a      	cmp	r2, r3
 8004fd8:	d066      	beq.n	80050a8 <vTaskPriorityDisinheritAfterTimeout+0x12c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8004fda:	69bb      	ldr	r3, [r7, #24]
 8004fdc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004fde:	697a      	ldr	r2, [r7, #20]
 8004fe0:	429a      	cmp	r2, r3
 8004fe2:	d161      	bne.n	80050a8 <vTaskPriorityDisinheritAfterTimeout+0x12c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8004fe4:	4b32      	ldr	r3, [pc, #200]	@ (80050b0 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	69ba      	ldr	r2, [r7, #24]
 8004fea:	429a      	cmp	r2, r3
 8004fec:	d10d      	bne.n	800500a <vTaskPriorityDisinheritAfterTimeout+0x8e>
	__asm volatile
 8004fee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ff2:	b672      	cpsid	i
 8004ff4:	f383 8811 	msr	BASEPRI, r3
 8004ff8:	f3bf 8f6f 	isb	sy
 8004ffc:	f3bf 8f4f 	dsb	sy
 8005000:	b662      	cpsie	i
 8005002:	60bb      	str	r3, [r7, #8]
}
 8005004:	bf00      	nop
 8005006:	bf00      	nop
 8005008:	e7fd      	b.n	8005006 <vTaskPriorityDisinheritAfterTimeout+0x8a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800500a:	69bb      	ldr	r3, [r7, #24]
 800500c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800500e:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8005010:	69bb      	ldr	r3, [r7, #24]
 8005012:	69fa      	ldr	r2, [r7, #28]
 8005014:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005016:	69bb      	ldr	r3, [r7, #24]
 8005018:	699b      	ldr	r3, [r3, #24]
 800501a:	2b00      	cmp	r3, #0
 800501c:	db04      	blt.n	8005028 <vTaskPriorityDisinheritAfterTimeout+0xac>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800501e:	69fb      	ldr	r3, [r7, #28]
 8005020:	f1c3 0207 	rsb	r2, r3, #7
 8005024:	69bb      	ldr	r3, [r7, #24]
 8005026:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005028:	69bb      	ldr	r3, [r7, #24]
 800502a:	6959      	ldr	r1, [r3, #20]
 800502c:	693a      	ldr	r2, [r7, #16]
 800502e:	4613      	mov	r3, r2
 8005030:	009b      	lsls	r3, r3, #2
 8005032:	4413      	add	r3, r2
 8005034:	009b      	lsls	r3, r3, #2
 8005036:	4a1f      	ldr	r2, [pc, #124]	@ (80050b4 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8005038:	4413      	add	r3, r2
 800503a:	4299      	cmp	r1, r3
 800503c:	d134      	bne.n	80050a8 <vTaskPriorityDisinheritAfterTimeout+0x12c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800503e:	69bb      	ldr	r3, [r7, #24]
 8005040:	3304      	adds	r3, #4
 8005042:	4618      	mov	r0, r3
 8005044:	f7fe fc5d 	bl	8003902 <uxListRemove>
 8005048:	4603      	mov	r3, r0
 800504a:	2b00      	cmp	r3, #0
 800504c:	d115      	bne.n	800507a <vTaskPriorityDisinheritAfterTimeout+0xfe>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800504e:	69bb      	ldr	r3, [r7, #24]
 8005050:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005052:	4918      	ldr	r1, [pc, #96]	@ (80050b4 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8005054:	4613      	mov	r3, r2
 8005056:	009b      	lsls	r3, r3, #2
 8005058:	4413      	add	r3, r2
 800505a:	009b      	lsls	r3, r3, #2
 800505c:	440b      	add	r3, r1
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d10a      	bne.n	800507a <vTaskPriorityDisinheritAfterTimeout+0xfe>
 8005064:	69bb      	ldr	r3, [r7, #24]
 8005066:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005068:	2201      	movs	r2, #1
 800506a:	fa02 f303 	lsl.w	r3, r2, r3
 800506e:	43da      	mvns	r2, r3
 8005070:	4b11      	ldr	r3, [pc, #68]	@ (80050b8 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4013      	ands	r3, r2
 8005076:	4a10      	ldr	r2, [pc, #64]	@ (80050b8 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8005078:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800507a:	69bb      	ldr	r3, [r7, #24]
 800507c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800507e:	2201      	movs	r2, #1
 8005080:	409a      	lsls	r2, r3
 8005082:	4b0d      	ldr	r3, [pc, #52]	@ (80050b8 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4313      	orrs	r3, r2
 8005088:	4a0b      	ldr	r2, [pc, #44]	@ (80050b8 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800508a:	6013      	str	r3, [r2, #0]
 800508c:	69bb      	ldr	r3, [r7, #24]
 800508e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005090:	4613      	mov	r3, r2
 8005092:	009b      	lsls	r3, r3, #2
 8005094:	4413      	add	r3, r2
 8005096:	009b      	lsls	r3, r3, #2
 8005098:	4a06      	ldr	r2, [pc, #24]	@ (80050b4 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800509a:	441a      	add	r2, r3
 800509c:	69bb      	ldr	r3, [r7, #24]
 800509e:	3304      	adds	r3, #4
 80050a0:	4619      	mov	r1, r3
 80050a2:	4610      	mov	r0, r2
 80050a4:	f7fe fbd0 	bl	8003848 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80050a8:	bf00      	nop
 80050aa:	3720      	adds	r7, #32
 80050ac:	46bd      	mov	sp, r7
 80050ae:	bd80      	pop	{r7, pc}
 80050b0:	20000378 	.word	0x20000378
 80050b4:	2000037c 	.word	0x2000037c
 80050b8:	20000480 	.word	0x20000480

080050bc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80050bc:	b480      	push	{r7}
 80050be:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80050c0:	4b07      	ldr	r3, [pc, #28]	@ (80050e0 <pvTaskIncrementMutexHeldCount+0x24>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d004      	beq.n	80050d2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80050c8:	4b05      	ldr	r3, [pc, #20]	@ (80050e0 <pvTaskIncrementMutexHeldCount+0x24>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80050ce:	3201      	adds	r2, #1
 80050d0:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 80050d2:	4b03      	ldr	r3, [pc, #12]	@ (80050e0 <pvTaskIncrementMutexHeldCount+0x24>)
 80050d4:	681b      	ldr	r3, [r3, #0]
	}
 80050d6:	4618      	mov	r0, r3
 80050d8:	46bd      	mov	sp, r7
 80050da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050de:	4770      	bx	lr
 80050e0:	20000378 	.word	0x20000378

080050e4 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b084      	sub	sp, #16
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
 80050ec:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80050ee:	4b29      	ldr	r3, [pc, #164]	@ (8005194 <prvAddCurrentTaskToDelayedList+0xb0>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80050f4:	4b28      	ldr	r3, [pc, #160]	@ (8005198 <prvAddCurrentTaskToDelayedList+0xb4>)
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	3304      	adds	r3, #4
 80050fa:	4618      	mov	r0, r3
 80050fc:	f7fe fc01 	bl	8003902 <uxListRemove>
 8005100:	4603      	mov	r3, r0
 8005102:	2b00      	cmp	r3, #0
 8005104:	d10b      	bne.n	800511e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005106:	4b24      	ldr	r3, [pc, #144]	@ (8005198 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800510c:	2201      	movs	r2, #1
 800510e:	fa02 f303 	lsl.w	r3, r2, r3
 8005112:	43da      	mvns	r2, r3
 8005114:	4b21      	ldr	r3, [pc, #132]	@ (800519c <prvAddCurrentTaskToDelayedList+0xb8>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4013      	ands	r3, r2
 800511a:	4a20      	ldr	r2, [pc, #128]	@ (800519c <prvAddCurrentTaskToDelayedList+0xb8>)
 800511c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005124:	d10a      	bne.n	800513c <prvAddCurrentTaskToDelayedList+0x58>
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d007      	beq.n	800513c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800512c:	4b1a      	ldr	r3, [pc, #104]	@ (8005198 <prvAddCurrentTaskToDelayedList+0xb4>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	3304      	adds	r3, #4
 8005132:	4619      	mov	r1, r3
 8005134:	481a      	ldr	r0, [pc, #104]	@ (80051a0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8005136:	f7fe fb87 	bl	8003848 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800513a:	e026      	b.n	800518a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800513c:	68fa      	ldr	r2, [r7, #12]
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	4413      	add	r3, r2
 8005142:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005144:	4b14      	ldr	r3, [pc, #80]	@ (8005198 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	68ba      	ldr	r2, [r7, #8]
 800514a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800514c:	68ba      	ldr	r2, [r7, #8]
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	429a      	cmp	r2, r3
 8005152:	d209      	bcs.n	8005168 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005154:	4b13      	ldr	r3, [pc, #76]	@ (80051a4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005156:	681a      	ldr	r2, [r3, #0]
 8005158:	4b0f      	ldr	r3, [pc, #60]	@ (8005198 <prvAddCurrentTaskToDelayedList+0xb4>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	3304      	adds	r3, #4
 800515e:	4619      	mov	r1, r3
 8005160:	4610      	mov	r0, r2
 8005162:	f7fe fb95 	bl	8003890 <vListInsert>
}
 8005166:	e010      	b.n	800518a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005168:	4b0f      	ldr	r3, [pc, #60]	@ (80051a8 <prvAddCurrentTaskToDelayedList+0xc4>)
 800516a:	681a      	ldr	r2, [r3, #0]
 800516c:	4b0a      	ldr	r3, [pc, #40]	@ (8005198 <prvAddCurrentTaskToDelayedList+0xb4>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	3304      	adds	r3, #4
 8005172:	4619      	mov	r1, r3
 8005174:	4610      	mov	r0, r2
 8005176:	f7fe fb8b 	bl	8003890 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800517a:	4b0c      	ldr	r3, [pc, #48]	@ (80051ac <prvAddCurrentTaskToDelayedList+0xc8>)
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	68ba      	ldr	r2, [r7, #8]
 8005180:	429a      	cmp	r2, r3
 8005182:	d202      	bcs.n	800518a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005184:	4a09      	ldr	r2, [pc, #36]	@ (80051ac <prvAddCurrentTaskToDelayedList+0xc8>)
 8005186:	68bb      	ldr	r3, [r7, #8]
 8005188:	6013      	str	r3, [r2, #0]
}
 800518a:	bf00      	nop
 800518c:	3710      	adds	r7, #16
 800518e:	46bd      	mov	sp, r7
 8005190:	bd80      	pop	{r7, pc}
 8005192:	bf00      	nop
 8005194:	2000047c 	.word	0x2000047c
 8005198:	20000378 	.word	0x20000378
 800519c:	20000480 	.word	0x20000480
 80051a0:	20000464 	.word	0x20000464
 80051a4:	20000434 	.word	0x20000434
 80051a8:	20000430 	.word	0x20000430
 80051ac:	20000498 	.word	0x20000498

080051b0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80051b0:	b480      	push	{r7}
 80051b2:	b085      	sub	sp, #20
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	60f8      	str	r0, [r7, #12]
 80051b8:	60b9      	str	r1, [r7, #8]
 80051ba:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	3b04      	subs	r3, #4
 80051c0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80051c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	3b04      	subs	r3, #4
 80051ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80051d0:	68bb      	ldr	r3, [r7, #8]
 80051d2:	f023 0201 	bic.w	r2, r3, #1
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	3b04      	subs	r3, #4
 80051de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80051e0:	4a0c      	ldr	r2, [pc, #48]	@ (8005214 <pxPortInitialiseStack+0x64>)
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	3b14      	subs	r3, #20
 80051ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80051ec:	687a      	ldr	r2, [r7, #4]
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	3b04      	subs	r3, #4
 80051f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	f06f 0202 	mvn.w	r2, #2
 80051fe:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	3b20      	subs	r3, #32
 8005204:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005206:	68fb      	ldr	r3, [r7, #12]
}
 8005208:	4618      	mov	r0, r3
 800520a:	3714      	adds	r7, #20
 800520c:	46bd      	mov	sp, r7
 800520e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005212:	4770      	bx	lr
 8005214:	08005219 	.word	0x08005219

08005218 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005218:	b480      	push	{r7}
 800521a:	b085      	sub	sp, #20
 800521c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800521e:	2300      	movs	r3, #0
 8005220:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005222:	4b15      	ldr	r3, [pc, #84]	@ (8005278 <prvTaskExitError+0x60>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f1b3 3fff 	cmp.w	r3, #4294967295
 800522a:	d00d      	beq.n	8005248 <prvTaskExitError+0x30>
	__asm volatile
 800522c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005230:	b672      	cpsid	i
 8005232:	f383 8811 	msr	BASEPRI, r3
 8005236:	f3bf 8f6f 	isb	sy
 800523a:	f3bf 8f4f 	dsb	sy
 800523e:	b662      	cpsie	i
 8005240:	60fb      	str	r3, [r7, #12]
}
 8005242:	bf00      	nop
 8005244:	bf00      	nop
 8005246:	e7fd      	b.n	8005244 <prvTaskExitError+0x2c>
	__asm volatile
 8005248:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800524c:	b672      	cpsid	i
 800524e:	f383 8811 	msr	BASEPRI, r3
 8005252:	f3bf 8f6f 	isb	sy
 8005256:	f3bf 8f4f 	dsb	sy
 800525a:	b662      	cpsie	i
 800525c:	60bb      	str	r3, [r7, #8]
}
 800525e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005260:	bf00      	nop
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d0fc      	beq.n	8005262 <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005268:	bf00      	nop
 800526a:	bf00      	nop
 800526c:	3714      	adds	r7, #20
 800526e:	46bd      	mov	sp, r7
 8005270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005274:	4770      	bx	lr
 8005276:	bf00      	nop
 8005278:	20000010 	.word	0x20000010
 800527c:	00000000 	.word	0x00000000

08005280 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005280:	4b07      	ldr	r3, [pc, #28]	@ (80052a0 <pxCurrentTCBConst2>)
 8005282:	6819      	ldr	r1, [r3, #0]
 8005284:	6808      	ldr	r0, [r1, #0]
 8005286:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800528a:	f380 8809 	msr	PSP, r0
 800528e:	f3bf 8f6f 	isb	sy
 8005292:	f04f 0000 	mov.w	r0, #0
 8005296:	f380 8811 	msr	BASEPRI, r0
 800529a:	4770      	bx	lr
 800529c:	f3af 8000 	nop.w

080052a0 <pxCurrentTCBConst2>:
 80052a0:	20000378 	.word	0x20000378
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80052a4:	bf00      	nop
 80052a6:	bf00      	nop

080052a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80052a8:	4808      	ldr	r0, [pc, #32]	@ (80052cc <prvPortStartFirstTask+0x24>)
 80052aa:	6800      	ldr	r0, [r0, #0]
 80052ac:	6800      	ldr	r0, [r0, #0]
 80052ae:	f380 8808 	msr	MSP, r0
 80052b2:	f04f 0000 	mov.w	r0, #0
 80052b6:	f380 8814 	msr	CONTROL, r0
 80052ba:	b662      	cpsie	i
 80052bc:	b661      	cpsie	f
 80052be:	f3bf 8f4f 	dsb	sy
 80052c2:	f3bf 8f6f 	isb	sy
 80052c6:	df00      	svc	0
 80052c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80052ca:	bf00      	nop
 80052cc:	e000ed08 	.word	0xe000ed08

080052d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b084      	sub	sp, #16
 80052d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80052d6:	4b37      	ldr	r3, [pc, #220]	@ (80053b4 <xPortStartScheduler+0xe4>)
 80052d8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	781b      	ldrb	r3, [r3, #0]
 80052de:	b2db      	uxtb	r3, r3
 80052e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	22ff      	movs	r2, #255	@ 0xff
 80052e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	781b      	ldrb	r3, [r3, #0]
 80052ec:	b2db      	uxtb	r3, r3
 80052ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80052f0:	78fb      	ldrb	r3, [r7, #3]
 80052f2:	b2db      	uxtb	r3, r3
 80052f4:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80052f8:	b2da      	uxtb	r2, r3
 80052fa:	4b2f      	ldr	r3, [pc, #188]	@ (80053b8 <xPortStartScheduler+0xe8>)
 80052fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80052fe:	4b2f      	ldr	r3, [pc, #188]	@ (80053bc <xPortStartScheduler+0xec>)
 8005300:	2207      	movs	r2, #7
 8005302:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005304:	e009      	b.n	800531a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8005306:	4b2d      	ldr	r3, [pc, #180]	@ (80053bc <xPortStartScheduler+0xec>)
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	3b01      	subs	r3, #1
 800530c:	4a2b      	ldr	r2, [pc, #172]	@ (80053bc <xPortStartScheduler+0xec>)
 800530e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005310:	78fb      	ldrb	r3, [r7, #3]
 8005312:	b2db      	uxtb	r3, r3
 8005314:	005b      	lsls	r3, r3, #1
 8005316:	b2db      	uxtb	r3, r3
 8005318:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800531a:	78fb      	ldrb	r3, [r7, #3]
 800531c:	b2db      	uxtb	r3, r3
 800531e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005322:	2b80      	cmp	r3, #128	@ 0x80
 8005324:	d0ef      	beq.n	8005306 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005326:	4b25      	ldr	r3, [pc, #148]	@ (80053bc <xPortStartScheduler+0xec>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f1c3 0307 	rsb	r3, r3, #7
 800532e:	2b04      	cmp	r3, #4
 8005330:	d00d      	beq.n	800534e <xPortStartScheduler+0x7e>
	__asm volatile
 8005332:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005336:	b672      	cpsid	i
 8005338:	f383 8811 	msr	BASEPRI, r3
 800533c:	f3bf 8f6f 	isb	sy
 8005340:	f3bf 8f4f 	dsb	sy
 8005344:	b662      	cpsie	i
 8005346:	60bb      	str	r3, [r7, #8]
}
 8005348:	bf00      	nop
 800534a:	bf00      	nop
 800534c:	e7fd      	b.n	800534a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800534e:	4b1b      	ldr	r3, [pc, #108]	@ (80053bc <xPortStartScheduler+0xec>)
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	021b      	lsls	r3, r3, #8
 8005354:	4a19      	ldr	r2, [pc, #100]	@ (80053bc <xPortStartScheduler+0xec>)
 8005356:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005358:	4b18      	ldr	r3, [pc, #96]	@ (80053bc <xPortStartScheduler+0xec>)
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005360:	4a16      	ldr	r2, [pc, #88]	@ (80053bc <xPortStartScheduler+0xec>)
 8005362:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	b2da      	uxtb	r2, r3
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800536c:	4b14      	ldr	r3, [pc, #80]	@ (80053c0 <xPortStartScheduler+0xf0>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4a13      	ldr	r2, [pc, #76]	@ (80053c0 <xPortStartScheduler+0xf0>)
 8005372:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005376:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005378:	4b11      	ldr	r3, [pc, #68]	@ (80053c0 <xPortStartScheduler+0xf0>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4a10      	ldr	r2, [pc, #64]	@ (80053c0 <xPortStartScheduler+0xf0>)
 800537e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005382:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005384:	f000 f8dc 	bl	8005540 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005388:	4b0e      	ldr	r3, [pc, #56]	@ (80053c4 <xPortStartScheduler+0xf4>)
 800538a:	2200      	movs	r2, #0
 800538c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800538e:	f000 f8fb 	bl	8005588 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005392:	4b0d      	ldr	r3, [pc, #52]	@ (80053c8 <xPortStartScheduler+0xf8>)
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	4a0c      	ldr	r2, [pc, #48]	@ (80053c8 <xPortStartScheduler+0xf8>)
 8005398:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800539c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800539e:	f7ff ff83 	bl	80052a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80053a2:	f7ff fa73 	bl	800488c <vTaskSwitchContext>
	prvTaskExitError();
 80053a6:	f7ff ff37 	bl	8005218 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80053aa:	2300      	movs	r3, #0
}
 80053ac:	4618      	mov	r0, r3
 80053ae:	3710      	adds	r7, #16
 80053b0:	46bd      	mov	sp, r7
 80053b2:	bd80      	pop	{r7, pc}
 80053b4:	e000e400 	.word	0xe000e400
 80053b8:	200004a4 	.word	0x200004a4
 80053bc:	200004a8 	.word	0x200004a8
 80053c0:	e000ed20 	.word	0xe000ed20
 80053c4:	20000010 	.word	0x20000010
 80053c8:	e000ef34 	.word	0xe000ef34

080053cc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80053cc:	b480      	push	{r7}
 80053ce:	b083      	sub	sp, #12
 80053d0:	af00      	add	r7, sp, #0
	__asm volatile
 80053d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053d6:	b672      	cpsid	i
 80053d8:	f383 8811 	msr	BASEPRI, r3
 80053dc:	f3bf 8f6f 	isb	sy
 80053e0:	f3bf 8f4f 	dsb	sy
 80053e4:	b662      	cpsie	i
 80053e6:	607b      	str	r3, [r7, #4]
}
 80053e8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80053ea:	4b11      	ldr	r3, [pc, #68]	@ (8005430 <vPortEnterCritical+0x64>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	3301      	adds	r3, #1
 80053f0:	4a0f      	ldr	r2, [pc, #60]	@ (8005430 <vPortEnterCritical+0x64>)
 80053f2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80053f4:	4b0e      	ldr	r3, [pc, #56]	@ (8005430 <vPortEnterCritical+0x64>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	2b01      	cmp	r3, #1
 80053fa:	d112      	bne.n	8005422 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80053fc:	4b0d      	ldr	r3, [pc, #52]	@ (8005434 <vPortEnterCritical+0x68>)
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	b2db      	uxtb	r3, r3
 8005402:	2b00      	cmp	r3, #0
 8005404:	d00d      	beq.n	8005422 <vPortEnterCritical+0x56>
	__asm volatile
 8005406:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800540a:	b672      	cpsid	i
 800540c:	f383 8811 	msr	BASEPRI, r3
 8005410:	f3bf 8f6f 	isb	sy
 8005414:	f3bf 8f4f 	dsb	sy
 8005418:	b662      	cpsie	i
 800541a:	603b      	str	r3, [r7, #0]
}
 800541c:	bf00      	nop
 800541e:	bf00      	nop
 8005420:	e7fd      	b.n	800541e <vPortEnterCritical+0x52>
	}
}
 8005422:	bf00      	nop
 8005424:	370c      	adds	r7, #12
 8005426:	46bd      	mov	sp, r7
 8005428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542c:	4770      	bx	lr
 800542e:	bf00      	nop
 8005430:	20000010 	.word	0x20000010
 8005434:	e000ed04 	.word	0xe000ed04

08005438 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005438:	b480      	push	{r7}
 800543a:	b083      	sub	sp, #12
 800543c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800543e:	4b13      	ldr	r3, [pc, #76]	@ (800548c <vPortExitCritical+0x54>)
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d10d      	bne.n	8005462 <vPortExitCritical+0x2a>
	__asm volatile
 8005446:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800544a:	b672      	cpsid	i
 800544c:	f383 8811 	msr	BASEPRI, r3
 8005450:	f3bf 8f6f 	isb	sy
 8005454:	f3bf 8f4f 	dsb	sy
 8005458:	b662      	cpsie	i
 800545a:	607b      	str	r3, [r7, #4]
}
 800545c:	bf00      	nop
 800545e:	bf00      	nop
 8005460:	e7fd      	b.n	800545e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8005462:	4b0a      	ldr	r3, [pc, #40]	@ (800548c <vPortExitCritical+0x54>)
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	3b01      	subs	r3, #1
 8005468:	4a08      	ldr	r2, [pc, #32]	@ (800548c <vPortExitCritical+0x54>)
 800546a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800546c:	4b07      	ldr	r3, [pc, #28]	@ (800548c <vPortExitCritical+0x54>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d105      	bne.n	8005480 <vPortExitCritical+0x48>
 8005474:	2300      	movs	r3, #0
 8005476:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800547e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005480:	bf00      	nop
 8005482:	370c      	adds	r7, #12
 8005484:	46bd      	mov	sp, r7
 8005486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548a:	4770      	bx	lr
 800548c:	20000010 	.word	0x20000010

08005490 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005490:	f3ef 8009 	mrs	r0, PSP
 8005494:	f3bf 8f6f 	isb	sy
 8005498:	4b15      	ldr	r3, [pc, #84]	@ (80054f0 <pxCurrentTCBConst>)
 800549a:	681a      	ldr	r2, [r3, #0]
 800549c:	f01e 0f10 	tst.w	lr, #16
 80054a0:	bf08      	it	eq
 80054a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80054a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054aa:	6010      	str	r0, [r2, #0]
 80054ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80054b0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80054b4:	b672      	cpsid	i
 80054b6:	f380 8811 	msr	BASEPRI, r0
 80054ba:	f3bf 8f4f 	dsb	sy
 80054be:	f3bf 8f6f 	isb	sy
 80054c2:	b662      	cpsie	i
 80054c4:	f7ff f9e2 	bl	800488c <vTaskSwitchContext>
 80054c8:	f04f 0000 	mov.w	r0, #0
 80054cc:	f380 8811 	msr	BASEPRI, r0
 80054d0:	bc09      	pop	{r0, r3}
 80054d2:	6819      	ldr	r1, [r3, #0]
 80054d4:	6808      	ldr	r0, [r1, #0]
 80054d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054da:	f01e 0f10 	tst.w	lr, #16
 80054de:	bf08      	it	eq
 80054e0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80054e4:	f380 8809 	msr	PSP, r0
 80054e8:	f3bf 8f6f 	isb	sy
 80054ec:	4770      	bx	lr
 80054ee:	bf00      	nop

080054f0 <pxCurrentTCBConst>:
 80054f0:	20000378 	.word	0x20000378
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80054f4:	bf00      	nop
 80054f6:	bf00      	nop

080054f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b082      	sub	sp, #8
 80054fc:	af00      	add	r7, sp, #0
	__asm volatile
 80054fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005502:	b672      	cpsid	i
 8005504:	f383 8811 	msr	BASEPRI, r3
 8005508:	f3bf 8f6f 	isb	sy
 800550c:	f3bf 8f4f 	dsb	sy
 8005510:	b662      	cpsie	i
 8005512:	607b      	str	r3, [r7, #4]
}
 8005514:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005516:	f7ff f8fd 	bl	8004714 <xTaskIncrementTick>
 800551a:	4603      	mov	r3, r0
 800551c:	2b00      	cmp	r3, #0
 800551e:	d003      	beq.n	8005528 <xPortSysTickHandler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005520:	4b06      	ldr	r3, [pc, #24]	@ (800553c <xPortSysTickHandler+0x44>)
 8005522:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005526:	601a      	str	r2, [r3, #0]
 8005528:	2300      	movs	r3, #0
 800552a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	f383 8811 	msr	BASEPRI, r3
}
 8005532:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005534:	bf00      	nop
 8005536:	3708      	adds	r7, #8
 8005538:	46bd      	mov	sp, r7
 800553a:	bd80      	pop	{r7, pc}
 800553c:	e000ed04 	.word	0xe000ed04

08005540 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005540:	b480      	push	{r7}
 8005542:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005544:	4b0b      	ldr	r3, [pc, #44]	@ (8005574 <vPortSetupTimerInterrupt+0x34>)
 8005546:	2200      	movs	r2, #0
 8005548:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800554a:	4b0b      	ldr	r3, [pc, #44]	@ (8005578 <vPortSetupTimerInterrupt+0x38>)
 800554c:	2200      	movs	r2, #0
 800554e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005550:	4b0a      	ldr	r3, [pc, #40]	@ (800557c <vPortSetupTimerInterrupt+0x3c>)
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	4a0a      	ldr	r2, [pc, #40]	@ (8005580 <vPortSetupTimerInterrupt+0x40>)
 8005556:	fba2 2303 	umull	r2, r3, r2, r3
 800555a:	099b      	lsrs	r3, r3, #6
 800555c:	4a09      	ldr	r2, [pc, #36]	@ (8005584 <vPortSetupTimerInterrupt+0x44>)
 800555e:	3b01      	subs	r3, #1
 8005560:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005562:	4b04      	ldr	r3, [pc, #16]	@ (8005574 <vPortSetupTimerInterrupt+0x34>)
 8005564:	2207      	movs	r2, #7
 8005566:	601a      	str	r2, [r3, #0]
}
 8005568:	bf00      	nop
 800556a:	46bd      	mov	sp, r7
 800556c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005570:	4770      	bx	lr
 8005572:	bf00      	nop
 8005574:	e000e010 	.word	0xe000e010
 8005578:	e000e018 	.word	0xe000e018
 800557c:	20000004 	.word	0x20000004
 8005580:	10624dd3 	.word	0x10624dd3
 8005584:	e000e014 	.word	0xe000e014

08005588 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005588:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8005598 <vPortEnableVFP+0x10>
 800558c:	6801      	ldr	r1, [r0, #0]
 800558e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8005592:	6001      	str	r1, [r0, #0]
 8005594:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005596:	bf00      	nop
 8005598:	e000ed88 	.word	0xe000ed88

0800559c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b08a      	sub	sp, #40	@ 0x28
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80055a4:	2300      	movs	r3, #0
 80055a6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80055a8:	f7ff f806 	bl	80045b8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80055ac:	4b5d      	ldr	r3, [pc, #372]	@ (8005724 <pvPortMalloc+0x188>)
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d101      	bne.n	80055b8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80055b4:	f000 f920 	bl	80057f8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80055b8:	4b5b      	ldr	r3, [pc, #364]	@ (8005728 <pvPortMalloc+0x18c>)
 80055ba:	681a      	ldr	r2, [r3, #0]
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	4013      	ands	r3, r2
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	f040 8094 	bne.w	80056ee <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d020      	beq.n	800560e <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 80055cc:	2208      	movs	r2, #8
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	4413      	add	r3, r2
 80055d2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	f003 0307 	and.w	r3, r3, #7
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d017      	beq.n	800560e <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	f023 0307 	bic.w	r3, r3, #7
 80055e4:	3308      	adds	r3, #8
 80055e6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	f003 0307 	and.w	r3, r3, #7
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d00d      	beq.n	800560e <pvPortMalloc+0x72>
	__asm volatile
 80055f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055f6:	b672      	cpsid	i
 80055f8:	f383 8811 	msr	BASEPRI, r3
 80055fc:	f3bf 8f6f 	isb	sy
 8005600:	f3bf 8f4f 	dsb	sy
 8005604:	b662      	cpsie	i
 8005606:	617b      	str	r3, [r7, #20]
}
 8005608:	bf00      	nop
 800560a:	bf00      	nop
 800560c:	e7fd      	b.n	800560a <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d06c      	beq.n	80056ee <pvPortMalloc+0x152>
 8005614:	4b45      	ldr	r3, [pc, #276]	@ (800572c <pvPortMalloc+0x190>)
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	687a      	ldr	r2, [r7, #4]
 800561a:	429a      	cmp	r2, r3
 800561c:	d867      	bhi.n	80056ee <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800561e:	4b44      	ldr	r3, [pc, #272]	@ (8005730 <pvPortMalloc+0x194>)
 8005620:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005622:	4b43      	ldr	r3, [pc, #268]	@ (8005730 <pvPortMalloc+0x194>)
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005628:	e004      	b.n	8005634 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 800562a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800562c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800562e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005634:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005636:	685b      	ldr	r3, [r3, #4]
 8005638:	687a      	ldr	r2, [r7, #4]
 800563a:	429a      	cmp	r2, r3
 800563c:	d903      	bls.n	8005646 <pvPortMalloc+0xaa>
 800563e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d1f1      	bne.n	800562a <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005646:	4b37      	ldr	r3, [pc, #220]	@ (8005724 <pvPortMalloc+0x188>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800564c:	429a      	cmp	r2, r3
 800564e:	d04e      	beq.n	80056ee <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005650:	6a3b      	ldr	r3, [r7, #32]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	2208      	movs	r2, #8
 8005656:	4413      	add	r3, r2
 8005658:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800565a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800565c:	681a      	ldr	r2, [r3, #0]
 800565e:	6a3b      	ldr	r3, [r7, #32]
 8005660:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005664:	685a      	ldr	r2, [r3, #4]
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	1ad2      	subs	r2, r2, r3
 800566a:	2308      	movs	r3, #8
 800566c:	005b      	lsls	r3, r3, #1
 800566e:	429a      	cmp	r2, r3
 8005670:	d922      	bls.n	80056b8 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005672:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	4413      	add	r3, r2
 8005678:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800567a:	69bb      	ldr	r3, [r7, #24]
 800567c:	f003 0307 	and.w	r3, r3, #7
 8005680:	2b00      	cmp	r3, #0
 8005682:	d00d      	beq.n	80056a0 <pvPortMalloc+0x104>
	__asm volatile
 8005684:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005688:	b672      	cpsid	i
 800568a:	f383 8811 	msr	BASEPRI, r3
 800568e:	f3bf 8f6f 	isb	sy
 8005692:	f3bf 8f4f 	dsb	sy
 8005696:	b662      	cpsie	i
 8005698:	613b      	str	r3, [r7, #16]
}
 800569a:	bf00      	nop
 800569c:	bf00      	nop
 800569e:	e7fd      	b.n	800569c <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80056a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056a2:	685a      	ldr	r2, [r3, #4]
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	1ad2      	subs	r2, r2, r3
 80056a8:	69bb      	ldr	r3, [r7, #24]
 80056aa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80056ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056ae:	687a      	ldr	r2, [r7, #4]
 80056b0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80056b2:	69b8      	ldr	r0, [r7, #24]
 80056b4:	f000 f902 	bl	80058bc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80056b8:	4b1c      	ldr	r3, [pc, #112]	@ (800572c <pvPortMalloc+0x190>)
 80056ba:	681a      	ldr	r2, [r3, #0]
 80056bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056be:	685b      	ldr	r3, [r3, #4]
 80056c0:	1ad3      	subs	r3, r2, r3
 80056c2:	4a1a      	ldr	r2, [pc, #104]	@ (800572c <pvPortMalloc+0x190>)
 80056c4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80056c6:	4b19      	ldr	r3, [pc, #100]	@ (800572c <pvPortMalloc+0x190>)
 80056c8:	681a      	ldr	r2, [r3, #0]
 80056ca:	4b1a      	ldr	r3, [pc, #104]	@ (8005734 <pvPortMalloc+0x198>)
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	429a      	cmp	r2, r3
 80056d0:	d203      	bcs.n	80056da <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80056d2:	4b16      	ldr	r3, [pc, #88]	@ (800572c <pvPortMalloc+0x190>)
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	4a17      	ldr	r2, [pc, #92]	@ (8005734 <pvPortMalloc+0x198>)
 80056d8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80056da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056dc:	685a      	ldr	r2, [r3, #4]
 80056de:	4b12      	ldr	r3, [pc, #72]	@ (8005728 <pvPortMalloc+0x18c>)
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	431a      	orrs	r2, r3
 80056e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056e6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80056e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056ea:	2200      	movs	r2, #0
 80056ec:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80056ee:	f7fe ff71 	bl	80045d4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80056f2:	69fb      	ldr	r3, [r7, #28]
 80056f4:	f003 0307 	and.w	r3, r3, #7
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d00d      	beq.n	8005718 <pvPortMalloc+0x17c>
	__asm volatile
 80056fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005700:	b672      	cpsid	i
 8005702:	f383 8811 	msr	BASEPRI, r3
 8005706:	f3bf 8f6f 	isb	sy
 800570a:	f3bf 8f4f 	dsb	sy
 800570e:	b662      	cpsie	i
 8005710:	60fb      	str	r3, [r7, #12]
}
 8005712:	bf00      	nop
 8005714:	bf00      	nop
 8005716:	e7fd      	b.n	8005714 <pvPortMalloc+0x178>
	return pvReturn;
 8005718:	69fb      	ldr	r3, [r7, #28]
}
 800571a:	4618      	mov	r0, r3
 800571c:	3728      	adds	r7, #40	@ 0x28
 800571e:	46bd      	mov	sp, r7
 8005720:	bd80      	pop	{r7, pc}
 8005722:	bf00      	nop
 8005724:	200040b4 	.word	0x200040b4
 8005728:	200040c0 	.word	0x200040c0
 800572c:	200040b8 	.word	0x200040b8
 8005730:	200040ac 	.word	0x200040ac
 8005734:	200040bc 	.word	0x200040bc

08005738 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b086      	sub	sp, #24
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d04e      	beq.n	80057e8 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800574a:	2308      	movs	r3, #8
 800574c:	425b      	negs	r3, r3
 800574e:	697a      	ldr	r2, [r7, #20]
 8005750:	4413      	add	r3, r2
 8005752:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005754:	697b      	ldr	r3, [r7, #20]
 8005756:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005758:	693b      	ldr	r3, [r7, #16]
 800575a:	685a      	ldr	r2, [r3, #4]
 800575c:	4b24      	ldr	r3, [pc, #144]	@ (80057f0 <vPortFree+0xb8>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	4013      	ands	r3, r2
 8005762:	2b00      	cmp	r3, #0
 8005764:	d10d      	bne.n	8005782 <vPortFree+0x4a>
	__asm volatile
 8005766:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800576a:	b672      	cpsid	i
 800576c:	f383 8811 	msr	BASEPRI, r3
 8005770:	f3bf 8f6f 	isb	sy
 8005774:	f3bf 8f4f 	dsb	sy
 8005778:	b662      	cpsie	i
 800577a:	60fb      	str	r3, [r7, #12]
}
 800577c:	bf00      	nop
 800577e:	bf00      	nop
 8005780:	e7fd      	b.n	800577e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005782:	693b      	ldr	r3, [r7, #16]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d00d      	beq.n	80057a6 <vPortFree+0x6e>
	__asm volatile
 800578a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800578e:	b672      	cpsid	i
 8005790:	f383 8811 	msr	BASEPRI, r3
 8005794:	f3bf 8f6f 	isb	sy
 8005798:	f3bf 8f4f 	dsb	sy
 800579c:	b662      	cpsie	i
 800579e:	60bb      	str	r3, [r7, #8]
}
 80057a0:	bf00      	nop
 80057a2:	bf00      	nop
 80057a4:	e7fd      	b.n	80057a2 <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80057a6:	693b      	ldr	r3, [r7, #16]
 80057a8:	685a      	ldr	r2, [r3, #4]
 80057aa:	4b11      	ldr	r3, [pc, #68]	@ (80057f0 <vPortFree+0xb8>)
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	4013      	ands	r3, r2
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d019      	beq.n	80057e8 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80057b4:	693b      	ldr	r3, [r7, #16]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d115      	bne.n	80057e8 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80057bc:	693b      	ldr	r3, [r7, #16]
 80057be:	685a      	ldr	r2, [r3, #4]
 80057c0:	4b0b      	ldr	r3, [pc, #44]	@ (80057f0 <vPortFree+0xb8>)
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	43db      	mvns	r3, r3
 80057c6:	401a      	ands	r2, r3
 80057c8:	693b      	ldr	r3, [r7, #16]
 80057ca:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80057cc:	f7fe fef4 	bl	80045b8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80057d0:	693b      	ldr	r3, [r7, #16]
 80057d2:	685a      	ldr	r2, [r3, #4]
 80057d4:	4b07      	ldr	r3, [pc, #28]	@ (80057f4 <vPortFree+0xbc>)
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	4413      	add	r3, r2
 80057da:	4a06      	ldr	r2, [pc, #24]	@ (80057f4 <vPortFree+0xbc>)
 80057dc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80057de:	6938      	ldr	r0, [r7, #16]
 80057e0:	f000 f86c 	bl	80058bc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80057e4:	f7fe fef6 	bl	80045d4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80057e8:	bf00      	nop
 80057ea:	3718      	adds	r7, #24
 80057ec:	46bd      	mov	sp, r7
 80057ee:	bd80      	pop	{r7, pc}
 80057f0:	200040c0 	.word	0x200040c0
 80057f4:	200040b8 	.word	0x200040b8

080057f8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80057f8:	b480      	push	{r7}
 80057fa:	b085      	sub	sp, #20
 80057fc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80057fe:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8005802:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005804:	4b27      	ldr	r3, [pc, #156]	@ (80058a4 <prvHeapInit+0xac>)
 8005806:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	f003 0307 	and.w	r3, r3, #7
 800580e:	2b00      	cmp	r3, #0
 8005810:	d00c      	beq.n	800582c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	3307      	adds	r3, #7
 8005816:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	f023 0307 	bic.w	r3, r3, #7
 800581e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005820:	68ba      	ldr	r2, [r7, #8]
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	1ad3      	subs	r3, r2, r3
 8005826:	4a1f      	ldr	r2, [pc, #124]	@ (80058a4 <prvHeapInit+0xac>)
 8005828:	4413      	add	r3, r2
 800582a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005830:	4a1d      	ldr	r2, [pc, #116]	@ (80058a8 <prvHeapInit+0xb0>)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005836:	4b1c      	ldr	r3, [pc, #112]	@ (80058a8 <prvHeapInit+0xb0>)
 8005838:	2200      	movs	r2, #0
 800583a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	68ba      	ldr	r2, [r7, #8]
 8005840:	4413      	add	r3, r2
 8005842:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005844:	2208      	movs	r2, #8
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	1a9b      	subs	r3, r3, r2
 800584a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	f023 0307 	bic.w	r3, r3, #7
 8005852:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	4a15      	ldr	r2, [pc, #84]	@ (80058ac <prvHeapInit+0xb4>)
 8005858:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800585a:	4b14      	ldr	r3, [pc, #80]	@ (80058ac <prvHeapInit+0xb4>)
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	2200      	movs	r2, #0
 8005860:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005862:	4b12      	ldr	r3, [pc, #72]	@ (80058ac <prvHeapInit+0xb4>)
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	2200      	movs	r2, #0
 8005868:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	68fa      	ldr	r2, [r7, #12]
 8005872:	1ad2      	subs	r2, r2, r3
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005878:	4b0c      	ldr	r3, [pc, #48]	@ (80058ac <prvHeapInit+0xb4>)
 800587a:	681a      	ldr	r2, [r3, #0]
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	685b      	ldr	r3, [r3, #4]
 8005884:	4a0a      	ldr	r2, [pc, #40]	@ (80058b0 <prvHeapInit+0xb8>)
 8005886:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	685b      	ldr	r3, [r3, #4]
 800588c:	4a09      	ldr	r2, [pc, #36]	@ (80058b4 <prvHeapInit+0xbc>)
 800588e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005890:	4b09      	ldr	r3, [pc, #36]	@ (80058b8 <prvHeapInit+0xc0>)
 8005892:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8005896:	601a      	str	r2, [r3, #0]
}
 8005898:	bf00      	nop
 800589a:	3714      	adds	r7, #20
 800589c:	46bd      	mov	sp, r7
 800589e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a2:	4770      	bx	lr
 80058a4:	200004ac 	.word	0x200004ac
 80058a8:	200040ac 	.word	0x200040ac
 80058ac:	200040b4 	.word	0x200040b4
 80058b0:	200040bc 	.word	0x200040bc
 80058b4:	200040b8 	.word	0x200040b8
 80058b8:	200040c0 	.word	0x200040c0

080058bc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80058bc:	b480      	push	{r7}
 80058be:	b085      	sub	sp, #20
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80058c4:	4b28      	ldr	r3, [pc, #160]	@ (8005968 <prvInsertBlockIntoFreeList+0xac>)
 80058c6:	60fb      	str	r3, [r7, #12]
 80058c8:	e002      	b.n	80058d0 <prvInsertBlockIntoFreeList+0x14>
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	60fb      	str	r3, [r7, #12]
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	687a      	ldr	r2, [r7, #4]
 80058d6:	429a      	cmp	r2, r3
 80058d8:	d8f7      	bhi.n	80058ca <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	685b      	ldr	r3, [r3, #4]
 80058e2:	68ba      	ldr	r2, [r7, #8]
 80058e4:	4413      	add	r3, r2
 80058e6:	687a      	ldr	r2, [r7, #4]
 80058e8:	429a      	cmp	r2, r3
 80058ea:	d108      	bne.n	80058fe <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	685a      	ldr	r2, [r3, #4]
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	685b      	ldr	r3, [r3, #4]
 80058f4:	441a      	add	r2, r3
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	685b      	ldr	r3, [r3, #4]
 8005906:	68ba      	ldr	r2, [r7, #8]
 8005908:	441a      	add	r2, r3
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	429a      	cmp	r2, r3
 8005910:	d118      	bne.n	8005944 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681a      	ldr	r2, [r3, #0]
 8005916:	4b15      	ldr	r3, [pc, #84]	@ (800596c <prvInsertBlockIntoFreeList+0xb0>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	429a      	cmp	r2, r3
 800591c:	d00d      	beq.n	800593a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	685a      	ldr	r2, [r3, #4]
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	685b      	ldr	r3, [r3, #4]
 8005928:	441a      	add	r2, r3
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	681a      	ldr	r2, [r3, #0]
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	601a      	str	r2, [r3, #0]
 8005938:	e008      	b.n	800594c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800593a:	4b0c      	ldr	r3, [pc, #48]	@ (800596c <prvInsertBlockIntoFreeList+0xb0>)
 800593c:	681a      	ldr	r2, [r3, #0]
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	601a      	str	r2, [r3, #0]
 8005942:	e003      	b.n	800594c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681a      	ldr	r2, [r3, #0]
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800594c:	68fa      	ldr	r2, [r7, #12]
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	429a      	cmp	r2, r3
 8005952:	d002      	beq.n	800595a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	687a      	ldr	r2, [r7, #4]
 8005958:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800595a:	bf00      	nop
 800595c:	3714      	adds	r7, #20
 800595e:	46bd      	mov	sp, r7
 8005960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005964:	4770      	bx	lr
 8005966:	bf00      	nop
 8005968:	200040ac 	.word	0x200040ac
 800596c:	200040b4 	.word	0x200040b4

08005970 <std>:
 8005970:	2300      	movs	r3, #0
 8005972:	b510      	push	{r4, lr}
 8005974:	4604      	mov	r4, r0
 8005976:	e9c0 3300 	strd	r3, r3, [r0]
 800597a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800597e:	6083      	str	r3, [r0, #8]
 8005980:	8181      	strh	r1, [r0, #12]
 8005982:	6643      	str	r3, [r0, #100]	@ 0x64
 8005984:	81c2      	strh	r2, [r0, #14]
 8005986:	6183      	str	r3, [r0, #24]
 8005988:	4619      	mov	r1, r3
 800598a:	2208      	movs	r2, #8
 800598c:	305c      	adds	r0, #92	@ 0x5c
 800598e:	f000 f9e7 	bl	8005d60 <memset>
 8005992:	4b0d      	ldr	r3, [pc, #52]	@ (80059c8 <std+0x58>)
 8005994:	6263      	str	r3, [r4, #36]	@ 0x24
 8005996:	4b0d      	ldr	r3, [pc, #52]	@ (80059cc <std+0x5c>)
 8005998:	62a3      	str	r3, [r4, #40]	@ 0x28
 800599a:	4b0d      	ldr	r3, [pc, #52]	@ (80059d0 <std+0x60>)
 800599c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800599e:	4b0d      	ldr	r3, [pc, #52]	@ (80059d4 <std+0x64>)
 80059a0:	6323      	str	r3, [r4, #48]	@ 0x30
 80059a2:	4b0d      	ldr	r3, [pc, #52]	@ (80059d8 <std+0x68>)
 80059a4:	6224      	str	r4, [r4, #32]
 80059a6:	429c      	cmp	r4, r3
 80059a8:	d006      	beq.n	80059b8 <std+0x48>
 80059aa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80059ae:	4294      	cmp	r4, r2
 80059b0:	d002      	beq.n	80059b8 <std+0x48>
 80059b2:	33d0      	adds	r3, #208	@ 0xd0
 80059b4:	429c      	cmp	r4, r3
 80059b6:	d105      	bne.n	80059c4 <std+0x54>
 80059b8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80059bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80059c0:	f000 ba46 	b.w	8005e50 <__retarget_lock_init_recursive>
 80059c4:	bd10      	pop	{r4, pc}
 80059c6:	bf00      	nop
 80059c8:	08005bb1 	.word	0x08005bb1
 80059cc:	08005bd3 	.word	0x08005bd3
 80059d0:	08005c0b 	.word	0x08005c0b
 80059d4:	08005c2f 	.word	0x08005c2f
 80059d8:	200040c4 	.word	0x200040c4

080059dc <stdio_exit_handler>:
 80059dc:	4a02      	ldr	r2, [pc, #8]	@ (80059e8 <stdio_exit_handler+0xc>)
 80059de:	4903      	ldr	r1, [pc, #12]	@ (80059ec <stdio_exit_handler+0x10>)
 80059e0:	4803      	ldr	r0, [pc, #12]	@ (80059f0 <stdio_exit_handler+0x14>)
 80059e2:	f000 b869 	b.w	8005ab8 <_fwalk_sglue>
 80059e6:	bf00      	nop
 80059e8:	20000014 	.word	0x20000014
 80059ec:	0800616d 	.word	0x0800616d
 80059f0:	20000024 	.word	0x20000024

080059f4 <cleanup_stdio>:
 80059f4:	6841      	ldr	r1, [r0, #4]
 80059f6:	4b0c      	ldr	r3, [pc, #48]	@ (8005a28 <cleanup_stdio+0x34>)
 80059f8:	4299      	cmp	r1, r3
 80059fa:	b510      	push	{r4, lr}
 80059fc:	4604      	mov	r4, r0
 80059fe:	d001      	beq.n	8005a04 <cleanup_stdio+0x10>
 8005a00:	f000 fbb4 	bl	800616c <_fflush_r>
 8005a04:	68a1      	ldr	r1, [r4, #8]
 8005a06:	4b09      	ldr	r3, [pc, #36]	@ (8005a2c <cleanup_stdio+0x38>)
 8005a08:	4299      	cmp	r1, r3
 8005a0a:	d002      	beq.n	8005a12 <cleanup_stdio+0x1e>
 8005a0c:	4620      	mov	r0, r4
 8005a0e:	f000 fbad 	bl	800616c <_fflush_r>
 8005a12:	68e1      	ldr	r1, [r4, #12]
 8005a14:	4b06      	ldr	r3, [pc, #24]	@ (8005a30 <cleanup_stdio+0x3c>)
 8005a16:	4299      	cmp	r1, r3
 8005a18:	d004      	beq.n	8005a24 <cleanup_stdio+0x30>
 8005a1a:	4620      	mov	r0, r4
 8005a1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a20:	f000 bba4 	b.w	800616c <_fflush_r>
 8005a24:	bd10      	pop	{r4, pc}
 8005a26:	bf00      	nop
 8005a28:	200040c4 	.word	0x200040c4
 8005a2c:	2000412c 	.word	0x2000412c
 8005a30:	20004194 	.word	0x20004194

08005a34 <global_stdio_init.part.0>:
 8005a34:	b510      	push	{r4, lr}
 8005a36:	4b0b      	ldr	r3, [pc, #44]	@ (8005a64 <global_stdio_init.part.0+0x30>)
 8005a38:	4c0b      	ldr	r4, [pc, #44]	@ (8005a68 <global_stdio_init.part.0+0x34>)
 8005a3a:	4a0c      	ldr	r2, [pc, #48]	@ (8005a6c <global_stdio_init.part.0+0x38>)
 8005a3c:	601a      	str	r2, [r3, #0]
 8005a3e:	4620      	mov	r0, r4
 8005a40:	2200      	movs	r2, #0
 8005a42:	2104      	movs	r1, #4
 8005a44:	f7ff ff94 	bl	8005970 <std>
 8005a48:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005a4c:	2201      	movs	r2, #1
 8005a4e:	2109      	movs	r1, #9
 8005a50:	f7ff ff8e 	bl	8005970 <std>
 8005a54:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005a58:	2202      	movs	r2, #2
 8005a5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a5e:	2112      	movs	r1, #18
 8005a60:	f7ff bf86 	b.w	8005970 <std>
 8005a64:	200041fc 	.word	0x200041fc
 8005a68:	200040c4 	.word	0x200040c4
 8005a6c:	080059dd 	.word	0x080059dd

08005a70 <__sfp_lock_acquire>:
 8005a70:	4801      	ldr	r0, [pc, #4]	@ (8005a78 <__sfp_lock_acquire+0x8>)
 8005a72:	f000 b9ee 	b.w	8005e52 <__retarget_lock_acquire_recursive>
 8005a76:	bf00      	nop
 8005a78:	20004205 	.word	0x20004205

08005a7c <__sfp_lock_release>:
 8005a7c:	4801      	ldr	r0, [pc, #4]	@ (8005a84 <__sfp_lock_release+0x8>)
 8005a7e:	f000 b9e9 	b.w	8005e54 <__retarget_lock_release_recursive>
 8005a82:	bf00      	nop
 8005a84:	20004205 	.word	0x20004205

08005a88 <__sinit>:
 8005a88:	b510      	push	{r4, lr}
 8005a8a:	4604      	mov	r4, r0
 8005a8c:	f7ff fff0 	bl	8005a70 <__sfp_lock_acquire>
 8005a90:	6a23      	ldr	r3, [r4, #32]
 8005a92:	b11b      	cbz	r3, 8005a9c <__sinit+0x14>
 8005a94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a98:	f7ff bff0 	b.w	8005a7c <__sfp_lock_release>
 8005a9c:	4b04      	ldr	r3, [pc, #16]	@ (8005ab0 <__sinit+0x28>)
 8005a9e:	6223      	str	r3, [r4, #32]
 8005aa0:	4b04      	ldr	r3, [pc, #16]	@ (8005ab4 <__sinit+0x2c>)
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d1f5      	bne.n	8005a94 <__sinit+0xc>
 8005aa8:	f7ff ffc4 	bl	8005a34 <global_stdio_init.part.0>
 8005aac:	e7f2      	b.n	8005a94 <__sinit+0xc>
 8005aae:	bf00      	nop
 8005ab0:	080059f5 	.word	0x080059f5
 8005ab4:	200041fc 	.word	0x200041fc

08005ab8 <_fwalk_sglue>:
 8005ab8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005abc:	4607      	mov	r7, r0
 8005abe:	4688      	mov	r8, r1
 8005ac0:	4614      	mov	r4, r2
 8005ac2:	2600      	movs	r6, #0
 8005ac4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005ac8:	f1b9 0901 	subs.w	r9, r9, #1
 8005acc:	d505      	bpl.n	8005ada <_fwalk_sglue+0x22>
 8005ace:	6824      	ldr	r4, [r4, #0]
 8005ad0:	2c00      	cmp	r4, #0
 8005ad2:	d1f7      	bne.n	8005ac4 <_fwalk_sglue+0xc>
 8005ad4:	4630      	mov	r0, r6
 8005ad6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005ada:	89ab      	ldrh	r3, [r5, #12]
 8005adc:	2b01      	cmp	r3, #1
 8005ade:	d907      	bls.n	8005af0 <_fwalk_sglue+0x38>
 8005ae0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005ae4:	3301      	adds	r3, #1
 8005ae6:	d003      	beq.n	8005af0 <_fwalk_sglue+0x38>
 8005ae8:	4629      	mov	r1, r5
 8005aea:	4638      	mov	r0, r7
 8005aec:	47c0      	blx	r8
 8005aee:	4306      	orrs	r6, r0
 8005af0:	3568      	adds	r5, #104	@ 0x68
 8005af2:	e7e9      	b.n	8005ac8 <_fwalk_sglue+0x10>

08005af4 <_puts_r>:
 8005af4:	6a03      	ldr	r3, [r0, #32]
 8005af6:	b570      	push	{r4, r5, r6, lr}
 8005af8:	6884      	ldr	r4, [r0, #8]
 8005afa:	4605      	mov	r5, r0
 8005afc:	460e      	mov	r6, r1
 8005afe:	b90b      	cbnz	r3, 8005b04 <_puts_r+0x10>
 8005b00:	f7ff ffc2 	bl	8005a88 <__sinit>
 8005b04:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005b06:	07db      	lsls	r3, r3, #31
 8005b08:	d405      	bmi.n	8005b16 <_puts_r+0x22>
 8005b0a:	89a3      	ldrh	r3, [r4, #12]
 8005b0c:	0598      	lsls	r0, r3, #22
 8005b0e:	d402      	bmi.n	8005b16 <_puts_r+0x22>
 8005b10:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005b12:	f000 f99e 	bl	8005e52 <__retarget_lock_acquire_recursive>
 8005b16:	89a3      	ldrh	r3, [r4, #12]
 8005b18:	0719      	lsls	r1, r3, #28
 8005b1a:	d502      	bpl.n	8005b22 <_puts_r+0x2e>
 8005b1c:	6923      	ldr	r3, [r4, #16]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d135      	bne.n	8005b8e <_puts_r+0x9a>
 8005b22:	4621      	mov	r1, r4
 8005b24:	4628      	mov	r0, r5
 8005b26:	f000 f8c5 	bl	8005cb4 <__swsetup_r>
 8005b2a:	b380      	cbz	r0, 8005b8e <_puts_r+0x9a>
 8005b2c:	f04f 35ff 	mov.w	r5, #4294967295
 8005b30:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005b32:	07da      	lsls	r2, r3, #31
 8005b34:	d405      	bmi.n	8005b42 <_puts_r+0x4e>
 8005b36:	89a3      	ldrh	r3, [r4, #12]
 8005b38:	059b      	lsls	r3, r3, #22
 8005b3a:	d402      	bmi.n	8005b42 <_puts_r+0x4e>
 8005b3c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005b3e:	f000 f989 	bl	8005e54 <__retarget_lock_release_recursive>
 8005b42:	4628      	mov	r0, r5
 8005b44:	bd70      	pop	{r4, r5, r6, pc}
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	da04      	bge.n	8005b54 <_puts_r+0x60>
 8005b4a:	69a2      	ldr	r2, [r4, #24]
 8005b4c:	429a      	cmp	r2, r3
 8005b4e:	dc17      	bgt.n	8005b80 <_puts_r+0x8c>
 8005b50:	290a      	cmp	r1, #10
 8005b52:	d015      	beq.n	8005b80 <_puts_r+0x8c>
 8005b54:	6823      	ldr	r3, [r4, #0]
 8005b56:	1c5a      	adds	r2, r3, #1
 8005b58:	6022      	str	r2, [r4, #0]
 8005b5a:	7019      	strb	r1, [r3, #0]
 8005b5c:	68a3      	ldr	r3, [r4, #8]
 8005b5e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005b62:	3b01      	subs	r3, #1
 8005b64:	60a3      	str	r3, [r4, #8]
 8005b66:	2900      	cmp	r1, #0
 8005b68:	d1ed      	bne.n	8005b46 <_puts_r+0x52>
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	da11      	bge.n	8005b92 <_puts_r+0x9e>
 8005b6e:	4622      	mov	r2, r4
 8005b70:	210a      	movs	r1, #10
 8005b72:	4628      	mov	r0, r5
 8005b74:	f000 f85f 	bl	8005c36 <__swbuf_r>
 8005b78:	3001      	adds	r0, #1
 8005b7a:	d0d7      	beq.n	8005b2c <_puts_r+0x38>
 8005b7c:	250a      	movs	r5, #10
 8005b7e:	e7d7      	b.n	8005b30 <_puts_r+0x3c>
 8005b80:	4622      	mov	r2, r4
 8005b82:	4628      	mov	r0, r5
 8005b84:	f000 f857 	bl	8005c36 <__swbuf_r>
 8005b88:	3001      	adds	r0, #1
 8005b8a:	d1e7      	bne.n	8005b5c <_puts_r+0x68>
 8005b8c:	e7ce      	b.n	8005b2c <_puts_r+0x38>
 8005b8e:	3e01      	subs	r6, #1
 8005b90:	e7e4      	b.n	8005b5c <_puts_r+0x68>
 8005b92:	6823      	ldr	r3, [r4, #0]
 8005b94:	1c5a      	adds	r2, r3, #1
 8005b96:	6022      	str	r2, [r4, #0]
 8005b98:	220a      	movs	r2, #10
 8005b9a:	701a      	strb	r2, [r3, #0]
 8005b9c:	e7ee      	b.n	8005b7c <_puts_r+0x88>
	...

08005ba0 <puts>:
 8005ba0:	4b02      	ldr	r3, [pc, #8]	@ (8005bac <puts+0xc>)
 8005ba2:	4601      	mov	r1, r0
 8005ba4:	6818      	ldr	r0, [r3, #0]
 8005ba6:	f7ff bfa5 	b.w	8005af4 <_puts_r>
 8005baa:	bf00      	nop
 8005bac:	20000020 	.word	0x20000020

08005bb0 <__sread>:
 8005bb0:	b510      	push	{r4, lr}
 8005bb2:	460c      	mov	r4, r1
 8005bb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005bb8:	f000 f8fc 	bl	8005db4 <_read_r>
 8005bbc:	2800      	cmp	r0, #0
 8005bbe:	bfab      	itete	ge
 8005bc0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005bc2:	89a3      	ldrhlt	r3, [r4, #12]
 8005bc4:	181b      	addge	r3, r3, r0
 8005bc6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005bca:	bfac      	ite	ge
 8005bcc:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005bce:	81a3      	strhlt	r3, [r4, #12]
 8005bd0:	bd10      	pop	{r4, pc}

08005bd2 <__swrite>:
 8005bd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005bd6:	461f      	mov	r7, r3
 8005bd8:	898b      	ldrh	r3, [r1, #12]
 8005bda:	05db      	lsls	r3, r3, #23
 8005bdc:	4605      	mov	r5, r0
 8005bde:	460c      	mov	r4, r1
 8005be0:	4616      	mov	r6, r2
 8005be2:	d505      	bpl.n	8005bf0 <__swrite+0x1e>
 8005be4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005be8:	2302      	movs	r3, #2
 8005bea:	2200      	movs	r2, #0
 8005bec:	f000 f8d0 	bl	8005d90 <_lseek_r>
 8005bf0:	89a3      	ldrh	r3, [r4, #12]
 8005bf2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005bf6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005bfa:	81a3      	strh	r3, [r4, #12]
 8005bfc:	4632      	mov	r2, r6
 8005bfe:	463b      	mov	r3, r7
 8005c00:	4628      	mov	r0, r5
 8005c02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005c06:	f000 b8e7 	b.w	8005dd8 <_write_r>

08005c0a <__sseek>:
 8005c0a:	b510      	push	{r4, lr}
 8005c0c:	460c      	mov	r4, r1
 8005c0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c12:	f000 f8bd 	bl	8005d90 <_lseek_r>
 8005c16:	1c43      	adds	r3, r0, #1
 8005c18:	89a3      	ldrh	r3, [r4, #12]
 8005c1a:	bf15      	itete	ne
 8005c1c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005c1e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005c22:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005c26:	81a3      	strheq	r3, [r4, #12]
 8005c28:	bf18      	it	ne
 8005c2a:	81a3      	strhne	r3, [r4, #12]
 8005c2c:	bd10      	pop	{r4, pc}

08005c2e <__sclose>:
 8005c2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c32:	f000 b89d 	b.w	8005d70 <_close_r>

08005c36 <__swbuf_r>:
 8005c36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c38:	460e      	mov	r6, r1
 8005c3a:	4614      	mov	r4, r2
 8005c3c:	4605      	mov	r5, r0
 8005c3e:	b118      	cbz	r0, 8005c48 <__swbuf_r+0x12>
 8005c40:	6a03      	ldr	r3, [r0, #32]
 8005c42:	b90b      	cbnz	r3, 8005c48 <__swbuf_r+0x12>
 8005c44:	f7ff ff20 	bl	8005a88 <__sinit>
 8005c48:	69a3      	ldr	r3, [r4, #24]
 8005c4a:	60a3      	str	r3, [r4, #8]
 8005c4c:	89a3      	ldrh	r3, [r4, #12]
 8005c4e:	071a      	lsls	r2, r3, #28
 8005c50:	d501      	bpl.n	8005c56 <__swbuf_r+0x20>
 8005c52:	6923      	ldr	r3, [r4, #16]
 8005c54:	b943      	cbnz	r3, 8005c68 <__swbuf_r+0x32>
 8005c56:	4621      	mov	r1, r4
 8005c58:	4628      	mov	r0, r5
 8005c5a:	f000 f82b 	bl	8005cb4 <__swsetup_r>
 8005c5e:	b118      	cbz	r0, 8005c68 <__swbuf_r+0x32>
 8005c60:	f04f 37ff 	mov.w	r7, #4294967295
 8005c64:	4638      	mov	r0, r7
 8005c66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005c68:	6823      	ldr	r3, [r4, #0]
 8005c6a:	6922      	ldr	r2, [r4, #16]
 8005c6c:	1a98      	subs	r0, r3, r2
 8005c6e:	6963      	ldr	r3, [r4, #20]
 8005c70:	b2f6      	uxtb	r6, r6
 8005c72:	4283      	cmp	r3, r0
 8005c74:	4637      	mov	r7, r6
 8005c76:	dc05      	bgt.n	8005c84 <__swbuf_r+0x4e>
 8005c78:	4621      	mov	r1, r4
 8005c7a:	4628      	mov	r0, r5
 8005c7c:	f000 fa76 	bl	800616c <_fflush_r>
 8005c80:	2800      	cmp	r0, #0
 8005c82:	d1ed      	bne.n	8005c60 <__swbuf_r+0x2a>
 8005c84:	68a3      	ldr	r3, [r4, #8]
 8005c86:	3b01      	subs	r3, #1
 8005c88:	60a3      	str	r3, [r4, #8]
 8005c8a:	6823      	ldr	r3, [r4, #0]
 8005c8c:	1c5a      	adds	r2, r3, #1
 8005c8e:	6022      	str	r2, [r4, #0]
 8005c90:	701e      	strb	r6, [r3, #0]
 8005c92:	6962      	ldr	r2, [r4, #20]
 8005c94:	1c43      	adds	r3, r0, #1
 8005c96:	429a      	cmp	r2, r3
 8005c98:	d004      	beq.n	8005ca4 <__swbuf_r+0x6e>
 8005c9a:	89a3      	ldrh	r3, [r4, #12]
 8005c9c:	07db      	lsls	r3, r3, #31
 8005c9e:	d5e1      	bpl.n	8005c64 <__swbuf_r+0x2e>
 8005ca0:	2e0a      	cmp	r6, #10
 8005ca2:	d1df      	bne.n	8005c64 <__swbuf_r+0x2e>
 8005ca4:	4621      	mov	r1, r4
 8005ca6:	4628      	mov	r0, r5
 8005ca8:	f000 fa60 	bl	800616c <_fflush_r>
 8005cac:	2800      	cmp	r0, #0
 8005cae:	d0d9      	beq.n	8005c64 <__swbuf_r+0x2e>
 8005cb0:	e7d6      	b.n	8005c60 <__swbuf_r+0x2a>
	...

08005cb4 <__swsetup_r>:
 8005cb4:	b538      	push	{r3, r4, r5, lr}
 8005cb6:	4b29      	ldr	r3, [pc, #164]	@ (8005d5c <__swsetup_r+0xa8>)
 8005cb8:	4605      	mov	r5, r0
 8005cba:	6818      	ldr	r0, [r3, #0]
 8005cbc:	460c      	mov	r4, r1
 8005cbe:	b118      	cbz	r0, 8005cc8 <__swsetup_r+0x14>
 8005cc0:	6a03      	ldr	r3, [r0, #32]
 8005cc2:	b90b      	cbnz	r3, 8005cc8 <__swsetup_r+0x14>
 8005cc4:	f7ff fee0 	bl	8005a88 <__sinit>
 8005cc8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005ccc:	0719      	lsls	r1, r3, #28
 8005cce:	d422      	bmi.n	8005d16 <__swsetup_r+0x62>
 8005cd0:	06da      	lsls	r2, r3, #27
 8005cd2:	d407      	bmi.n	8005ce4 <__swsetup_r+0x30>
 8005cd4:	2209      	movs	r2, #9
 8005cd6:	602a      	str	r2, [r5, #0]
 8005cd8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005cdc:	81a3      	strh	r3, [r4, #12]
 8005cde:	f04f 30ff 	mov.w	r0, #4294967295
 8005ce2:	e033      	b.n	8005d4c <__swsetup_r+0x98>
 8005ce4:	0758      	lsls	r0, r3, #29
 8005ce6:	d512      	bpl.n	8005d0e <__swsetup_r+0x5a>
 8005ce8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005cea:	b141      	cbz	r1, 8005cfe <__swsetup_r+0x4a>
 8005cec:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005cf0:	4299      	cmp	r1, r3
 8005cf2:	d002      	beq.n	8005cfa <__swsetup_r+0x46>
 8005cf4:	4628      	mov	r0, r5
 8005cf6:	f000 f8bd 	bl	8005e74 <_free_r>
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	6363      	str	r3, [r4, #52]	@ 0x34
 8005cfe:	89a3      	ldrh	r3, [r4, #12]
 8005d00:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005d04:	81a3      	strh	r3, [r4, #12]
 8005d06:	2300      	movs	r3, #0
 8005d08:	6063      	str	r3, [r4, #4]
 8005d0a:	6923      	ldr	r3, [r4, #16]
 8005d0c:	6023      	str	r3, [r4, #0]
 8005d0e:	89a3      	ldrh	r3, [r4, #12]
 8005d10:	f043 0308 	orr.w	r3, r3, #8
 8005d14:	81a3      	strh	r3, [r4, #12]
 8005d16:	6923      	ldr	r3, [r4, #16]
 8005d18:	b94b      	cbnz	r3, 8005d2e <__swsetup_r+0x7a>
 8005d1a:	89a3      	ldrh	r3, [r4, #12]
 8005d1c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005d20:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005d24:	d003      	beq.n	8005d2e <__swsetup_r+0x7a>
 8005d26:	4621      	mov	r1, r4
 8005d28:	4628      	mov	r0, r5
 8005d2a:	f000 fa6d 	bl	8006208 <__smakebuf_r>
 8005d2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d32:	f013 0201 	ands.w	r2, r3, #1
 8005d36:	d00a      	beq.n	8005d4e <__swsetup_r+0x9a>
 8005d38:	2200      	movs	r2, #0
 8005d3a:	60a2      	str	r2, [r4, #8]
 8005d3c:	6962      	ldr	r2, [r4, #20]
 8005d3e:	4252      	negs	r2, r2
 8005d40:	61a2      	str	r2, [r4, #24]
 8005d42:	6922      	ldr	r2, [r4, #16]
 8005d44:	b942      	cbnz	r2, 8005d58 <__swsetup_r+0xa4>
 8005d46:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005d4a:	d1c5      	bne.n	8005cd8 <__swsetup_r+0x24>
 8005d4c:	bd38      	pop	{r3, r4, r5, pc}
 8005d4e:	0799      	lsls	r1, r3, #30
 8005d50:	bf58      	it	pl
 8005d52:	6962      	ldrpl	r2, [r4, #20]
 8005d54:	60a2      	str	r2, [r4, #8]
 8005d56:	e7f4      	b.n	8005d42 <__swsetup_r+0x8e>
 8005d58:	2000      	movs	r0, #0
 8005d5a:	e7f7      	b.n	8005d4c <__swsetup_r+0x98>
 8005d5c:	20000020 	.word	0x20000020

08005d60 <memset>:
 8005d60:	4402      	add	r2, r0
 8005d62:	4603      	mov	r3, r0
 8005d64:	4293      	cmp	r3, r2
 8005d66:	d100      	bne.n	8005d6a <memset+0xa>
 8005d68:	4770      	bx	lr
 8005d6a:	f803 1b01 	strb.w	r1, [r3], #1
 8005d6e:	e7f9      	b.n	8005d64 <memset+0x4>

08005d70 <_close_r>:
 8005d70:	b538      	push	{r3, r4, r5, lr}
 8005d72:	4d06      	ldr	r5, [pc, #24]	@ (8005d8c <_close_r+0x1c>)
 8005d74:	2300      	movs	r3, #0
 8005d76:	4604      	mov	r4, r0
 8005d78:	4608      	mov	r0, r1
 8005d7a:	602b      	str	r3, [r5, #0]
 8005d7c:	f7fb fa5f 	bl	800123e <_close>
 8005d80:	1c43      	adds	r3, r0, #1
 8005d82:	d102      	bne.n	8005d8a <_close_r+0x1a>
 8005d84:	682b      	ldr	r3, [r5, #0]
 8005d86:	b103      	cbz	r3, 8005d8a <_close_r+0x1a>
 8005d88:	6023      	str	r3, [r4, #0]
 8005d8a:	bd38      	pop	{r3, r4, r5, pc}
 8005d8c:	20004200 	.word	0x20004200

08005d90 <_lseek_r>:
 8005d90:	b538      	push	{r3, r4, r5, lr}
 8005d92:	4d07      	ldr	r5, [pc, #28]	@ (8005db0 <_lseek_r+0x20>)
 8005d94:	4604      	mov	r4, r0
 8005d96:	4608      	mov	r0, r1
 8005d98:	4611      	mov	r1, r2
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	602a      	str	r2, [r5, #0]
 8005d9e:	461a      	mov	r2, r3
 8005da0:	f7fb fa74 	bl	800128c <_lseek>
 8005da4:	1c43      	adds	r3, r0, #1
 8005da6:	d102      	bne.n	8005dae <_lseek_r+0x1e>
 8005da8:	682b      	ldr	r3, [r5, #0]
 8005daa:	b103      	cbz	r3, 8005dae <_lseek_r+0x1e>
 8005dac:	6023      	str	r3, [r4, #0]
 8005dae:	bd38      	pop	{r3, r4, r5, pc}
 8005db0:	20004200 	.word	0x20004200

08005db4 <_read_r>:
 8005db4:	b538      	push	{r3, r4, r5, lr}
 8005db6:	4d07      	ldr	r5, [pc, #28]	@ (8005dd4 <_read_r+0x20>)
 8005db8:	4604      	mov	r4, r0
 8005dba:	4608      	mov	r0, r1
 8005dbc:	4611      	mov	r1, r2
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	602a      	str	r2, [r5, #0]
 8005dc2:	461a      	mov	r2, r3
 8005dc4:	f7fb fa02 	bl	80011cc <_read>
 8005dc8:	1c43      	adds	r3, r0, #1
 8005dca:	d102      	bne.n	8005dd2 <_read_r+0x1e>
 8005dcc:	682b      	ldr	r3, [r5, #0]
 8005dce:	b103      	cbz	r3, 8005dd2 <_read_r+0x1e>
 8005dd0:	6023      	str	r3, [r4, #0]
 8005dd2:	bd38      	pop	{r3, r4, r5, pc}
 8005dd4:	20004200 	.word	0x20004200

08005dd8 <_write_r>:
 8005dd8:	b538      	push	{r3, r4, r5, lr}
 8005dda:	4d07      	ldr	r5, [pc, #28]	@ (8005df8 <_write_r+0x20>)
 8005ddc:	4604      	mov	r4, r0
 8005dde:	4608      	mov	r0, r1
 8005de0:	4611      	mov	r1, r2
 8005de2:	2200      	movs	r2, #0
 8005de4:	602a      	str	r2, [r5, #0]
 8005de6:	461a      	mov	r2, r3
 8005de8:	f7fb fa0d 	bl	8001206 <_write>
 8005dec:	1c43      	adds	r3, r0, #1
 8005dee:	d102      	bne.n	8005df6 <_write_r+0x1e>
 8005df0:	682b      	ldr	r3, [r5, #0]
 8005df2:	b103      	cbz	r3, 8005df6 <_write_r+0x1e>
 8005df4:	6023      	str	r3, [r4, #0]
 8005df6:	bd38      	pop	{r3, r4, r5, pc}
 8005df8:	20004200 	.word	0x20004200

08005dfc <__errno>:
 8005dfc:	4b01      	ldr	r3, [pc, #4]	@ (8005e04 <__errno+0x8>)
 8005dfe:	6818      	ldr	r0, [r3, #0]
 8005e00:	4770      	bx	lr
 8005e02:	bf00      	nop
 8005e04:	20000020 	.word	0x20000020

08005e08 <__libc_init_array>:
 8005e08:	b570      	push	{r4, r5, r6, lr}
 8005e0a:	4d0d      	ldr	r5, [pc, #52]	@ (8005e40 <__libc_init_array+0x38>)
 8005e0c:	4c0d      	ldr	r4, [pc, #52]	@ (8005e44 <__libc_init_array+0x3c>)
 8005e0e:	1b64      	subs	r4, r4, r5
 8005e10:	10a4      	asrs	r4, r4, #2
 8005e12:	2600      	movs	r6, #0
 8005e14:	42a6      	cmp	r6, r4
 8005e16:	d109      	bne.n	8005e2c <__libc_init_array+0x24>
 8005e18:	4d0b      	ldr	r5, [pc, #44]	@ (8005e48 <__libc_init_array+0x40>)
 8005e1a:	4c0c      	ldr	r4, [pc, #48]	@ (8005e4c <__libc_init_array+0x44>)
 8005e1c:	f000 fa62 	bl	80062e4 <_init>
 8005e20:	1b64      	subs	r4, r4, r5
 8005e22:	10a4      	asrs	r4, r4, #2
 8005e24:	2600      	movs	r6, #0
 8005e26:	42a6      	cmp	r6, r4
 8005e28:	d105      	bne.n	8005e36 <__libc_init_array+0x2e>
 8005e2a:	bd70      	pop	{r4, r5, r6, pc}
 8005e2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e30:	4798      	blx	r3
 8005e32:	3601      	adds	r6, #1
 8005e34:	e7ee      	b.n	8005e14 <__libc_init_array+0xc>
 8005e36:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e3a:	4798      	blx	r3
 8005e3c:	3601      	adds	r6, #1
 8005e3e:	e7f2      	b.n	8005e26 <__libc_init_array+0x1e>
 8005e40:	0800643c 	.word	0x0800643c
 8005e44:	0800643c 	.word	0x0800643c
 8005e48:	0800643c 	.word	0x0800643c
 8005e4c:	08006440 	.word	0x08006440

08005e50 <__retarget_lock_init_recursive>:
 8005e50:	4770      	bx	lr

08005e52 <__retarget_lock_acquire_recursive>:
 8005e52:	4770      	bx	lr

08005e54 <__retarget_lock_release_recursive>:
 8005e54:	4770      	bx	lr

08005e56 <memcpy>:
 8005e56:	440a      	add	r2, r1
 8005e58:	4291      	cmp	r1, r2
 8005e5a:	f100 33ff 	add.w	r3, r0, #4294967295
 8005e5e:	d100      	bne.n	8005e62 <memcpy+0xc>
 8005e60:	4770      	bx	lr
 8005e62:	b510      	push	{r4, lr}
 8005e64:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005e68:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005e6c:	4291      	cmp	r1, r2
 8005e6e:	d1f9      	bne.n	8005e64 <memcpy+0xe>
 8005e70:	bd10      	pop	{r4, pc}
	...

08005e74 <_free_r>:
 8005e74:	b538      	push	{r3, r4, r5, lr}
 8005e76:	4605      	mov	r5, r0
 8005e78:	2900      	cmp	r1, #0
 8005e7a:	d041      	beq.n	8005f00 <_free_r+0x8c>
 8005e7c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e80:	1f0c      	subs	r4, r1, #4
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	bfb8      	it	lt
 8005e86:	18e4      	addlt	r4, r4, r3
 8005e88:	f000 f8e0 	bl	800604c <__malloc_lock>
 8005e8c:	4a1d      	ldr	r2, [pc, #116]	@ (8005f04 <_free_r+0x90>)
 8005e8e:	6813      	ldr	r3, [r2, #0]
 8005e90:	b933      	cbnz	r3, 8005ea0 <_free_r+0x2c>
 8005e92:	6063      	str	r3, [r4, #4]
 8005e94:	6014      	str	r4, [r2, #0]
 8005e96:	4628      	mov	r0, r5
 8005e98:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005e9c:	f000 b8dc 	b.w	8006058 <__malloc_unlock>
 8005ea0:	42a3      	cmp	r3, r4
 8005ea2:	d908      	bls.n	8005eb6 <_free_r+0x42>
 8005ea4:	6820      	ldr	r0, [r4, #0]
 8005ea6:	1821      	adds	r1, r4, r0
 8005ea8:	428b      	cmp	r3, r1
 8005eaa:	bf01      	itttt	eq
 8005eac:	6819      	ldreq	r1, [r3, #0]
 8005eae:	685b      	ldreq	r3, [r3, #4]
 8005eb0:	1809      	addeq	r1, r1, r0
 8005eb2:	6021      	streq	r1, [r4, #0]
 8005eb4:	e7ed      	b.n	8005e92 <_free_r+0x1e>
 8005eb6:	461a      	mov	r2, r3
 8005eb8:	685b      	ldr	r3, [r3, #4]
 8005eba:	b10b      	cbz	r3, 8005ec0 <_free_r+0x4c>
 8005ebc:	42a3      	cmp	r3, r4
 8005ebe:	d9fa      	bls.n	8005eb6 <_free_r+0x42>
 8005ec0:	6811      	ldr	r1, [r2, #0]
 8005ec2:	1850      	adds	r0, r2, r1
 8005ec4:	42a0      	cmp	r0, r4
 8005ec6:	d10b      	bne.n	8005ee0 <_free_r+0x6c>
 8005ec8:	6820      	ldr	r0, [r4, #0]
 8005eca:	4401      	add	r1, r0
 8005ecc:	1850      	adds	r0, r2, r1
 8005ece:	4283      	cmp	r3, r0
 8005ed0:	6011      	str	r1, [r2, #0]
 8005ed2:	d1e0      	bne.n	8005e96 <_free_r+0x22>
 8005ed4:	6818      	ldr	r0, [r3, #0]
 8005ed6:	685b      	ldr	r3, [r3, #4]
 8005ed8:	6053      	str	r3, [r2, #4]
 8005eda:	4408      	add	r0, r1
 8005edc:	6010      	str	r0, [r2, #0]
 8005ede:	e7da      	b.n	8005e96 <_free_r+0x22>
 8005ee0:	d902      	bls.n	8005ee8 <_free_r+0x74>
 8005ee2:	230c      	movs	r3, #12
 8005ee4:	602b      	str	r3, [r5, #0]
 8005ee6:	e7d6      	b.n	8005e96 <_free_r+0x22>
 8005ee8:	6820      	ldr	r0, [r4, #0]
 8005eea:	1821      	adds	r1, r4, r0
 8005eec:	428b      	cmp	r3, r1
 8005eee:	bf04      	itt	eq
 8005ef0:	6819      	ldreq	r1, [r3, #0]
 8005ef2:	685b      	ldreq	r3, [r3, #4]
 8005ef4:	6063      	str	r3, [r4, #4]
 8005ef6:	bf04      	itt	eq
 8005ef8:	1809      	addeq	r1, r1, r0
 8005efa:	6021      	streq	r1, [r4, #0]
 8005efc:	6054      	str	r4, [r2, #4]
 8005efe:	e7ca      	b.n	8005e96 <_free_r+0x22>
 8005f00:	bd38      	pop	{r3, r4, r5, pc}
 8005f02:	bf00      	nop
 8005f04:	2000420c 	.word	0x2000420c

08005f08 <sbrk_aligned>:
 8005f08:	b570      	push	{r4, r5, r6, lr}
 8005f0a:	4e0f      	ldr	r6, [pc, #60]	@ (8005f48 <sbrk_aligned+0x40>)
 8005f0c:	460c      	mov	r4, r1
 8005f0e:	6831      	ldr	r1, [r6, #0]
 8005f10:	4605      	mov	r5, r0
 8005f12:	b911      	cbnz	r1, 8005f1a <sbrk_aligned+0x12>
 8005f14:	f000 f9d6 	bl	80062c4 <_sbrk_r>
 8005f18:	6030      	str	r0, [r6, #0]
 8005f1a:	4621      	mov	r1, r4
 8005f1c:	4628      	mov	r0, r5
 8005f1e:	f000 f9d1 	bl	80062c4 <_sbrk_r>
 8005f22:	1c43      	adds	r3, r0, #1
 8005f24:	d103      	bne.n	8005f2e <sbrk_aligned+0x26>
 8005f26:	f04f 34ff 	mov.w	r4, #4294967295
 8005f2a:	4620      	mov	r0, r4
 8005f2c:	bd70      	pop	{r4, r5, r6, pc}
 8005f2e:	1cc4      	adds	r4, r0, #3
 8005f30:	f024 0403 	bic.w	r4, r4, #3
 8005f34:	42a0      	cmp	r0, r4
 8005f36:	d0f8      	beq.n	8005f2a <sbrk_aligned+0x22>
 8005f38:	1a21      	subs	r1, r4, r0
 8005f3a:	4628      	mov	r0, r5
 8005f3c:	f000 f9c2 	bl	80062c4 <_sbrk_r>
 8005f40:	3001      	adds	r0, #1
 8005f42:	d1f2      	bne.n	8005f2a <sbrk_aligned+0x22>
 8005f44:	e7ef      	b.n	8005f26 <sbrk_aligned+0x1e>
 8005f46:	bf00      	nop
 8005f48:	20004208 	.word	0x20004208

08005f4c <_malloc_r>:
 8005f4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005f50:	1ccd      	adds	r5, r1, #3
 8005f52:	f025 0503 	bic.w	r5, r5, #3
 8005f56:	3508      	adds	r5, #8
 8005f58:	2d0c      	cmp	r5, #12
 8005f5a:	bf38      	it	cc
 8005f5c:	250c      	movcc	r5, #12
 8005f5e:	2d00      	cmp	r5, #0
 8005f60:	4606      	mov	r6, r0
 8005f62:	db01      	blt.n	8005f68 <_malloc_r+0x1c>
 8005f64:	42a9      	cmp	r1, r5
 8005f66:	d904      	bls.n	8005f72 <_malloc_r+0x26>
 8005f68:	230c      	movs	r3, #12
 8005f6a:	6033      	str	r3, [r6, #0]
 8005f6c:	2000      	movs	r0, #0
 8005f6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005f72:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006048 <_malloc_r+0xfc>
 8005f76:	f000 f869 	bl	800604c <__malloc_lock>
 8005f7a:	f8d8 3000 	ldr.w	r3, [r8]
 8005f7e:	461c      	mov	r4, r3
 8005f80:	bb44      	cbnz	r4, 8005fd4 <_malloc_r+0x88>
 8005f82:	4629      	mov	r1, r5
 8005f84:	4630      	mov	r0, r6
 8005f86:	f7ff ffbf 	bl	8005f08 <sbrk_aligned>
 8005f8a:	1c43      	adds	r3, r0, #1
 8005f8c:	4604      	mov	r4, r0
 8005f8e:	d158      	bne.n	8006042 <_malloc_r+0xf6>
 8005f90:	f8d8 4000 	ldr.w	r4, [r8]
 8005f94:	4627      	mov	r7, r4
 8005f96:	2f00      	cmp	r7, #0
 8005f98:	d143      	bne.n	8006022 <_malloc_r+0xd6>
 8005f9a:	2c00      	cmp	r4, #0
 8005f9c:	d04b      	beq.n	8006036 <_malloc_r+0xea>
 8005f9e:	6823      	ldr	r3, [r4, #0]
 8005fa0:	4639      	mov	r1, r7
 8005fa2:	4630      	mov	r0, r6
 8005fa4:	eb04 0903 	add.w	r9, r4, r3
 8005fa8:	f000 f98c 	bl	80062c4 <_sbrk_r>
 8005fac:	4581      	cmp	r9, r0
 8005fae:	d142      	bne.n	8006036 <_malloc_r+0xea>
 8005fb0:	6821      	ldr	r1, [r4, #0]
 8005fb2:	1a6d      	subs	r5, r5, r1
 8005fb4:	4629      	mov	r1, r5
 8005fb6:	4630      	mov	r0, r6
 8005fb8:	f7ff ffa6 	bl	8005f08 <sbrk_aligned>
 8005fbc:	3001      	adds	r0, #1
 8005fbe:	d03a      	beq.n	8006036 <_malloc_r+0xea>
 8005fc0:	6823      	ldr	r3, [r4, #0]
 8005fc2:	442b      	add	r3, r5
 8005fc4:	6023      	str	r3, [r4, #0]
 8005fc6:	f8d8 3000 	ldr.w	r3, [r8]
 8005fca:	685a      	ldr	r2, [r3, #4]
 8005fcc:	bb62      	cbnz	r2, 8006028 <_malloc_r+0xdc>
 8005fce:	f8c8 7000 	str.w	r7, [r8]
 8005fd2:	e00f      	b.n	8005ff4 <_malloc_r+0xa8>
 8005fd4:	6822      	ldr	r2, [r4, #0]
 8005fd6:	1b52      	subs	r2, r2, r5
 8005fd8:	d420      	bmi.n	800601c <_malloc_r+0xd0>
 8005fda:	2a0b      	cmp	r2, #11
 8005fdc:	d917      	bls.n	800600e <_malloc_r+0xc2>
 8005fde:	1961      	adds	r1, r4, r5
 8005fe0:	42a3      	cmp	r3, r4
 8005fe2:	6025      	str	r5, [r4, #0]
 8005fe4:	bf18      	it	ne
 8005fe6:	6059      	strne	r1, [r3, #4]
 8005fe8:	6863      	ldr	r3, [r4, #4]
 8005fea:	bf08      	it	eq
 8005fec:	f8c8 1000 	streq.w	r1, [r8]
 8005ff0:	5162      	str	r2, [r4, r5]
 8005ff2:	604b      	str	r3, [r1, #4]
 8005ff4:	4630      	mov	r0, r6
 8005ff6:	f000 f82f 	bl	8006058 <__malloc_unlock>
 8005ffa:	f104 000b 	add.w	r0, r4, #11
 8005ffe:	1d23      	adds	r3, r4, #4
 8006000:	f020 0007 	bic.w	r0, r0, #7
 8006004:	1ac2      	subs	r2, r0, r3
 8006006:	bf1c      	itt	ne
 8006008:	1a1b      	subne	r3, r3, r0
 800600a:	50a3      	strne	r3, [r4, r2]
 800600c:	e7af      	b.n	8005f6e <_malloc_r+0x22>
 800600e:	6862      	ldr	r2, [r4, #4]
 8006010:	42a3      	cmp	r3, r4
 8006012:	bf0c      	ite	eq
 8006014:	f8c8 2000 	streq.w	r2, [r8]
 8006018:	605a      	strne	r2, [r3, #4]
 800601a:	e7eb      	b.n	8005ff4 <_malloc_r+0xa8>
 800601c:	4623      	mov	r3, r4
 800601e:	6864      	ldr	r4, [r4, #4]
 8006020:	e7ae      	b.n	8005f80 <_malloc_r+0x34>
 8006022:	463c      	mov	r4, r7
 8006024:	687f      	ldr	r7, [r7, #4]
 8006026:	e7b6      	b.n	8005f96 <_malloc_r+0x4a>
 8006028:	461a      	mov	r2, r3
 800602a:	685b      	ldr	r3, [r3, #4]
 800602c:	42a3      	cmp	r3, r4
 800602e:	d1fb      	bne.n	8006028 <_malloc_r+0xdc>
 8006030:	2300      	movs	r3, #0
 8006032:	6053      	str	r3, [r2, #4]
 8006034:	e7de      	b.n	8005ff4 <_malloc_r+0xa8>
 8006036:	230c      	movs	r3, #12
 8006038:	6033      	str	r3, [r6, #0]
 800603a:	4630      	mov	r0, r6
 800603c:	f000 f80c 	bl	8006058 <__malloc_unlock>
 8006040:	e794      	b.n	8005f6c <_malloc_r+0x20>
 8006042:	6005      	str	r5, [r0, #0]
 8006044:	e7d6      	b.n	8005ff4 <_malloc_r+0xa8>
 8006046:	bf00      	nop
 8006048:	2000420c 	.word	0x2000420c

0800604c <__malloc_lock>:
 800604c:	4801      	ldr	r0, [pc, #4]	@ (8006054 <__malloc_lock+0x8>)
 800604e:	f7ff bf00 	b.w	8005e52 <__retarget_lock_acquire_recursive>
 8006052:	bf00      	nop
 8006054:	20004204 	.word	0x20004204

08006058 <__malloc_unlock>:
 8006058:	4801      	ldr	r0, [pc, #4]	@ (8006060 <__malloc_unlock+0x8>)
 800605a:	f7ff befb 	b.w	8005e54 <__retarget_lock_release_recursive>
 800605e:	bf00      	nop
 8006060:	20004204 	.word	0x20004204

08006064 <__sflush_r>:
 8006064:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006068:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800606c:	0716      	lsls	r6, r2, #28
 800606e:	4605      	mov	r5, r0
 8006070:	460c      	mov	r4, r1
 8006072:	d454      	bmi.n	800611e <__sflush_r+0xba>
 8006074:	684b      	ldr	r3, [r1, #4]
 8006076:	2b00      	cmp	r3, #0
 8006078:	dc02      	bgt.n	8006080 <__sflush_r+0x1c>
 800607a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800607c:	2b00      	cmp	r3, #0
 800607e:	dd48      	ble.n	8006112 <__sflush_r+0xae>
 8006080:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006082:	2e00      	cmp	r6, #0
 8006084:	d045      	beq.n	8006112 <__sflush_r+0xae>
 8006086:	2300      	movs	r3, #0
 8006088:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800608c:	682f      	ldr	r7, [r5, #0]
 800608e:	6a21      	ldr	r1, [r4, #32]
 8006090:	602b      	str	r3, [r5, #0]
 8006092:	d030      	beq.n	80060f6 <__sflush_r+0x92>
 8006094:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006096:	89a3      	ldrh	r3, [r4, #12]
 8006098:	0759      	lsls	r1, r3, #29
 800609a:	d505      	bpl.n	80060a8 <__sflush_r+0x44>
 800609c:	6863      	ldr	r3, [r4, #4]
 800609e:	1ad2      	subs	r2, r2, r3
 80060a0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80060a2:	b10b      	cbz	r3, 80060a8 <__sflush_r+0x44>
 80060a4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80060a6:	1ad2      	subs	r2, r2, r3
 80060a8:	2300      	movs	r3, #0
 80060aa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80060ac:	6a21      	ldr	r1, [r4, #32]
 80060ae:	4628      	mov	r0, r5
 80060b0:	47b0      	blx	r6
 80060b2:	1c43      	adds	r3, r0, #1
 80060b4:	89a3      	ldrh	r3, [r4, #12]
 80060b6:	d106      	bne.n	80060c6 <__sflush_r+0x62>
 80060b8:	6829      	ldr	r1, [r5, #0]
 80060ba:	291d      	cmp	r1, #29
 80060bc:	d82b      	bhi.n	8006116 <__sflush_r+0xb2>
 80060be:	4a2a      	ldr	r2, [pc, #168]	@ (8006168 <__sflush_r+0x104>)
 80060c0:	40ca      	lsrs	r2, r1
 80060c2:	07d6      	lsls	r6, r2, #31
 80060c4:	d527      	bpl.n	8006116 <__sflush_r+0xb2>
 80060c6:	2200      	movs	r2, #0
 80060c8:	6062      	str	r2, [r4, #4]
 80060ca:	04d9      	lsls	r1, r3, #19
 80060cc:	6922      	ldr	r2, [r4, #16]
 80060ce:	6022      	str	r2, [r4, #0]
 80060d0:	d504      	bpl.n	80060dc <__sflush_r+0x78>
 80060d2:	1c42      	adds	r2, r0, #1
 80060d4:	d101      	bne.n	80060da <__sflush_r+0x76>
 80060d6:	682b      	ldr	r3, [r5, #0]
 80060d8:	b903      	cbnz	r3, 80060dc <__sflush_r+0x78>
 80060da:	6560      	str	r0, [r4, #84]	@ 0x54
 80060dc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80060de:	602f      	str	r7, [r5, #0]
 80060e0:	b1b9      	cbz	r1, 8006112 <__sflush_r+0xae>
 80060e2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80060e6:	4299      	cmp	r1, r3
 80060e8:	d002      	beq.n	80060f0 <__sflush_r+0x8c>
 80060ea:	4628      	mov	r0, r5
 80060ec:	f7ff fec2 	bl	8005e74 <_free_r>
 80060f0:	2300      	movs	r3, #0
 80060f2:	6363      	str	r3, [r4, #52]	@ 0x34
 80060f4:	e00d      	b.n	8006112 <__sflush_r+0xae>
 80060f6:	2301      	movs	r3, #1
 80060f8:	4628      	mov	r0, r5
 80060fa:	47b0      	blx	r6
 80060fc:	4602      	mov	r2, r0
 80060fe:	1c50      	adds	r0, r2, #1
 8006100:	d1c9      	bne.n	8006096 <__sflush_r+0x32>
 8006102:	682b      	ldr	r3, [r5, #0]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d0c6      	beq.n	8006096 <__sflush_r+0x32>
 8006108:	2b1d      	cmp	r3, #29
 800610a:	d001      	beq.n	8006110 <__sflush_r+0xac>
 800610c:	2b16      	cmp	r3, #22
 800610e:	d11e      	bne.n	800614e <__sflush_r+0xea>
 8006110:	602f      	str	r7, [r5, #0]
 8006112:	2000      	movs	r0, #0
 8006114:	e022      	b.n	800615c <__sflush_r+0xf8>
 8006116:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800611a:	b21b      	sxth	r3, r3
 800611c:	e01b      	b.n	8006156 <__sflush_r+0xf2>
 800611e:	690f      	ldr	r7, [r1, #16]
 8006120:	2f00      	cmp	r7, #0
 8006122:	d0f6      	beq.n	8006112 <__sflush_r+0xae>
 8006124:	0793      	lsls	r3, r2, #30
 8006126:	680e      	ldr	r6, [r1, #0]
 8006128:	bf08      	it	eq
 800612a:	694b      	ldreq	r3, [r1, #20]
 800612c:	600f      	str	r7, [r1, #0]
 800612e:	bf18      	it	ne
 8006130:	2300      	movne	r3, #0
 8006132:	eba6 0807 	sub.w	r8, r6, r7
 8006136:	608b      	str	r3, [r1, #8]
 8006138:	f1b8 0f00 	cmp.w	r8, #0
 800613c:	dde9      	ble.n	8006112 <__sflush_r+0xae>
 800613e:	6a21      	ldr	r1, [r4, #32]
 8006140:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006142:	4643      	mov	r3, r8
 8006144:	463a      	mov	r2, r7
 8006146:	4628      	mov	r0, r5
 8006148:	47b0      	blx	r6
 800614a:	2800      	cmp	r0, #0
 800614c:	dc08      	bgt.n	8006160 <__sflush_r+0xfc>
 800614e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006152:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006156:	81a3      	strh	r3, [r4, #12]
 8006158:	f04f 30ff 	mov.w	r0, #4294967295
 800615c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006160:	4407      	add	r7, r0
 8006162:	eba8 0800 	sub.w	r8, r8, r0
 8006166:	e7e7      	b.n	8006138 <__sflush_r+0xd4>
 8006168:	20400001 	.word	0x20400001

0800616c <_fflush_r>:
 800616c:	b538      	push	{r3, r4, r5, lr}
 800616e:	690b      	ldr	r3, [r1, #16]
 8006170:	4605      	mov	r5, r0
 8006172:	460c      	mov	r4, r1
 8006174:	b913      	cbnz	r3, 800617c <_fflush_r+0x10>
 8006176:	2500      	movs	r5, #0
 8006178:	4628      	mov	r0, r5
 800617a:	bd38      	pop	{r3, r4, r5, pc}
 800617c:	b118      	cbz	r0, 8006186 <_fflush_r+0x1a>
 800617e:	6a03      	ldr	r3, [r0, #32]
 8006180:	b90b      	cbnz	r3, 8006186 <_fflush_r+0x1a>
 8006182:	f7ff fc81 	bl	8005a88 <__sinit>
 8006186:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d0f3      	beq.n	8006176 <_fflush_r+0xa>
 800618e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006190:	07d0      	lsls	r0, r2, #31
 8006192:	d404      	bmi.n	800619e <_fflush_r+0x32>
 8006194:	0599      	lsls	r1, r3, #22
 8006196:	d402      	bmi.n	800619e <_fflush_r+0x32>
 8006198:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800619a:	f7ff fe5a 	bl	8005e52 <__retarget_lock_acquire_recursive>
 800619e:	4628      	mov	r0, r5
 80061a0:	4621      	mov	r1, r4
 80061a2:	f7ff ff5f 	bl	8006064 <__sflush_r>
 80061a6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80061a8:	07da      	lsls	r2, r3, #31
 80061aa:	4605      	mov	r5, r0
 80061ac:	d4e4      	bmi.n	8006178 <_fflush_r+0xc>
 80061ae:	89a3      	ldrh	r3, [r4, #12]
 80061b0:	059b      	lsls	r3, r3, #22
 80061b2:	d4e1      	bmi.n	8006178 <_fflush_r+0xc>
 80061b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80061b6:	f7ff fe4d 	bl	8005e54 <__retarget_lock_release_recursive>
 80061ba:	e7dd      	b.n	8006178 <_fflush_r+0xc>

080061bc <__swhatbuf_r>:
 80061bc:	b570      	push	{r4, r5, r6, lr}
 80061be:	460c      	mov	r4, r1
 80061c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061c4:	2900      	cmp	r1, #0
 80061c6:	b096      	sub	sp, #88	@ 0x58
 80061c8:	4615      	mov	r5, r2
 80061ca:	461e      	mov	r6, r3
 80061cc:	da0d      	bge.n	80061ea <__swhatbuf_r+0x2e>
 80061ce:	89a3      	ldrh	r3, [r4, #12]
 80061d0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80061d4:	f04f 0100 	mov.w	r1, #0
 80061d8:	bf14      	ite	ne
 80061da:	2340      	movne	r3, #64	@ 0x40
 80061dc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80061e0:	2000      	movs	r0, #0
 80061e2:	6031      	str	r1, [r6, #0]
 80061e4:	602b      	str	r3, [r5, #0]
 80061e6:	b016      	add	sp, #88	@ 0x58
 80061e8:	bd70      	pop	{r4, r5, r6, pc}
 80061ea:	466a      	mov	r2, sp
 80061ec:	f000 f848 	bl	8006280 <_fstat_r>
 80061f0:	2800      	cmp	r0, #0
 80061f2:	dbec      	blt.n	80061ce <__swhatbuf_r+0x12>
 80061f4:	9901      	ldr	r1, [sp, #4]
 80061f6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80061fa:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80061fe:	4259      	negs	r1, r3
 8006200:	4159      	adcs	r1, r3
 8006202:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006206:	e7eb      	b.n	80061e0 <__swhatbuf_r+0x24>

08006208 <__smakebuf_r>:
 8006208:	898b      	ldrh	r3, [r1, #12]
 800620a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800620c:	079d      	lsls	r5, r3, #30
 800620e:	4606      	mov	r6, r0
 8006210:	460c      	mov	r4, r1
 8006212:	d507      	bpl.n	8006224 <__smakebuf_r+0x1c>
 8006214:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006218:	6023      	str	r3, [r4, #0]
 800621a:	6123      	str	r3, [r4, #16]
 800621c:	2301      	movs	r3, #1
 800621e:	6163      	str	r3, [r4, #20]
 8006220:	b003      	add	sp, #12
 8006222:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006224:	ab01      	add	r3, sp, #4
 8006226:	466a      	mov	r2, sp
 8006228:	f7ff ffc8 	bl	80061bc <__swhatbuf_r>
 800622c:	9f00      	ldr	r7, [sp, #0]
 800622e:	4605      	mov	r5, r0
 8006230:	4639      	mov	r1, r7
 8006232:	4630      	mov	r0, r6
 8006234:	f7ff fe8a 	bl	8005f4c <_malloc_r>
 8006238:	b948      	cbnz	r0, 800624e <__smakebuf_r+0x46>
 800623a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800623e:	059a      	lsls	r2, r3, #22
 8006240:	d4ee      	bmi.n	8006220 <__smakebuf_r+0x18>
 8006242:	f023 0303 	bic.w	r3, r3, #3
 8006246:	f043 0302 	orr.w	r3, r3, #2
 800624a:	81a3      	strh	r3, [r4, #12]
 800624c:	e7e2      	b.n	8006214 <__smakebuf_r+0xc>
 800624e:	89a3      	ldrh	r3, [r4, #12]
 8006250:	6020      	str	r0, [r4, #0]
 8006252:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006256:	81a3      	strh	r3, [r4, #12]
 8006258:	9b01      	ldr	r3, [sp, #4]
 800625a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800625e:	b15b      	cbz	r3, 8006278 <__smakebuf_r+0x70>
 8006260:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006264:	4630      	mov	r0, r6
 8006266:	f000 f81d 	bl	80062a4 <_isatty_r>
 800626a:	b128      	cbz	r0, 8006278 <__smakebuf_r+0x70>
 800626c:	89a3      	ldrh	r3, [r4, #12]
 800626e:	f023 0303 	bic.w	r3, r3, #3
 8006272:	f043 0301 	orr.w	r3, r3, #1
 8006276:	81a3      	strh	r3, [r4, #12]
 8006278:	89a3      	ldrh	r3, [r4, #12]
 800627a:	431d      	orrs	r5, r3
 800627c:	81a5      	strh	r5, [r4, #12]
 800627e:	e7cf      	b.n	8006220 <__smakebuf_r+0x18>

08006280 <_fstat_r>:
 8006280:	b538      	push	{r3, r4, r5, lr}
 8006282:	4d07      	ldr	r5, [pc, #28]	@ (80062a0 <_fstat_r+0x20>)
 8006284:	2300      	movs	r3, #0
 8006286:	4604      	mov	r4, r0
 8006288:	4608      	mov	r0, r1
 800628a:	4611      	mov	r1, r2
 800628c:	602b      	str	r3, [r5, #0]
 800628e:	f7fa ffe2 	bl	8001256 <_fstat>
 8006292:	1c43      	adds	r3, r0, #1
 8006294:	d102      	bne.n	800629c <_fstat_r+0x1c>
 8006296:	682b      	ldr	r3, [r5, #0]
 8006298:	b103      	cbz	r3, 800629c <_fstat_r+0x1c>
 800629a:	6023      	str	r3, [r4, #0]
 800629c:	bd38      	pop	{r3, r4, r5, pc}
 800629e:	bf00      	nop
 80062a0:	20004200 	.word	0x20004200

080062a4 <_isatty_r>:
 80062a4:	b538      	push	{r3, r4, r5, lr}
 80062a6:	4d06      	ldr	r5, [pc, #24]	@ (80062c0 <_isatty_r+0x1c>)
 80062a8:	2300      	movs	r3, #0
 80062aa:	4604      	mov	r4, r0
 80062ac:	4608      	mov	r0, r1
 80062ae:	602b      	str	r3, [r5, #0]
 80062b0:	f7fa ffe1 	bl	8001276 <_isatty>
 80062b4:	1c43      	adds	r3, r0, #1
 80062b6:	d102      	bne.n	80062be <_isatty_r+0x1a>
 80062b8:	682b      	ldr	r3, [r5, #0]
 80062ba:	b103      	cbz	r3, 80062be <_isatty_r+0x1a>
 80062bc:	6023      	str	r3, [r4, #0]
 80062be:	bd38      	pop	{r3, r4, r5, pc}
 80062c0:	20004200 	.word	0x20004200

080062c4 <_sbrk_r>:
 80062c4:	b538      	push	{r3, r4, r5, lr}
 80062c6:	4d06      	ldr	r5, [pc, #24]	@ (80062e0 <_sbrk_r+0x1c>)
 80062c8:	2300      	movs	r3, #0
 80062ca:	4604      	mov	r4, r0
 80062cc:	4608      	mov	r0, r1
 80062ce:	602b      	str	r3, [r5, #0]
 80062d0:	f7fa ffea 	bl	80012a8 <_sbrk>
 80062d4:	1c43      	adds	r3, r0, #1
 80062d6:	d102      	bne.n	80062de <_sbrk_r+0x1a>
 80062d8:	682b      	ldr	r3, [r5, #0]
 80062da:	b103      	cbz	r3, 80062de <_sbrk_r+0x1a>
 80062dc:	6023      	str	r3, [r4, #0]
 80062de:	bd38      	pop	{r3, r4, r5, pc}
 80062e0:	20004200 	.word	0x20004200

080062e4 <_init>:
 80062e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062e6:	bf00      	nop
 80062e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062ea:	bc08      	pop	{r3}
 80062ec:	469e      	mov	lr, r3
 80062ee:	4770      	bx	lr

080062f0 <_fini>:
 80062f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062f2:	bf00      	nop
 80062f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062f6:	bc08      	pop	{r3}
 80062f8:	469e      	mov	lr, r3
 80062fa:	4770      	bx	lr
