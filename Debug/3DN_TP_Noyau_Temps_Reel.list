
3DN_TP_Noyau_Temps_Reel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007bb0  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000054c  08007d80  08007d80  00008d80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080082cc  080082cc  0000a16c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080082cc  080082cc  000092cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080082d4  080082d4  0000a16c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080082d4  080082d4  000092d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080082d8  080082d8  000092d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000016c  20000000  080082dc  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004710  2000016c  08008448  0000a16c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000487c  08008448  0000a87c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a16c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012be0  00000000  00000000  0000a19c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000033eb  00000000  00000000  0001cd7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fe0  00000000  00000000  00020168  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c08  00000000  00000000  00021148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028e36  00000000  00000000  00021d50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013f16  00000000  00000000  0004ab86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f315e  00000000  00000000  0005ea9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00151bfa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000048a0  00000000  00000000  00151c40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007e  00000000  00000000  001564e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000016c 	.word	0x2000016c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007d68 	.word	0x08007d68

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000170 	.word	0x20000170
 800020c:	08007d68 	.word	0x08007d68

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b988 	b.w	80005d8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	468e      	mov	lr, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	4688      	mov	r8, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d962      	bls.n	80003bc <__udivmoddi4+0xdc>
 80002f6:	fab2 f682 	clz	r6, r2
 80002fa:	b14e      	cbz	r6, 8000310 <__udivmoddi4+0x30>
 80002fc:	f1c6 0320 	rsb	r3, r6, #32
 8000300:	fa01 f806 	lsl.w	r8, r1, r6
 8000304:	fa20 f303 	lsr.w	r3, r0, r3
 8000308:	40b7      	lsls	r7, r6
 800030a:	ea43 0808 	orr.w	r8, r3, r8
 800030e:	40b4      	lsls	r4, r6
 8000310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000314:	fa1f fc87 	uxth.w	ip, r7
 8000318:	fbb8 f1fe 	udiv	r1, r8, lr
 800031c:	0c23      	lsrs	r3, r4, #16
 800031e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000322:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000326:	fb01 f20c 	mul.w	r2, r1, ip
 800032a:	429a      	cmp	r2, r3
 800032c:	d909      	bls.n	8000342 <__udivmoddi4+0x62>
 800032e:	18fb      	adds	r3, r7, r3
 8000330:	f101 30ff 	add.w	r0, r1, #4294967295
 8000334:	f080 80ea 	bcs.w	800050c <__udivmoddi4+0x22c>
 8000338:	429a      	cmp	r2, r3
 800033a:	f240 80e7 	bls.w	800050c <__udivmoddi4+0x22c>
 800033e:	3902      	subs	r1, #2
 8000340:	443b      	add	r3, r7
 8000342:	1a9a      	subs	r2, r3, r2
 8000344:	b2a3      	uxth	r3, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000352:	fb00 fc0c 	mul.w	ip, r0, ip
 8000356:	459c      	cmp	ip, r3
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x8e>
 800035a:	18fb      	adds	r3, r7, r3
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000360:	f080 80d6 	bcs.w	8000510 <__udivmoddi4+0x230>
 8000364:	459c      	cmp	ip, r3
 8000366:	f240 80d3 	bls.w	8000510 <__udivmoddi4+0x230>
 800036a:	443b      	add	r3, r7
 800036c:	3802      	subs	r0, #2
 800036e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000372:	eba3 030c 	sub.w	r3, r3, ip
 8000376:	2100      	movs	r1, #0
 8000378:	b11d      	cbz	r5, 8000382 <__udivmoddi4+0xa2>
 800037a:	40f3      	lsrs	r3, r6
 800037c:	2200      	movs	r2, #0
 800037e:	e9c5 3200 	strd	r3, r2, [r5]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d905      	bls.n	8000396 <__udivmoddi4+0xb6>
 800038a:	b10d      	cbz	r5, 8000390 <__udivmoddi4+0xb0>
 800038c:	e9c5 0100 	strd	r0, r1, [r5]
 8000390:	2100      	movs	r1, #0
 8000392:	4608      	mov	r0, r1
 8000394:	e7f5      	b.n	8000382 <__udivmoddi4+0xa2>
 8000396:	fab3 f183 	clz	r1, r3
 800039a:	2900      	cmp	r1, #0
 800039c:	d146      	bne.n	800042c <__udivmoddi4+0x14c>
 800039e:	4573      	cmp	r3, lr
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0xc8>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 8105 	bhi.w	80005b2 <__udivmoddi4+0x2d2>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb6e 0203 	sbc.w	r2, lr, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	4690      	mov	r8, r2
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0e5      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003b6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ba:	e7e2      	b.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f000 8090 	beq.w	80004e2 <__udivmoddi4+0x202>
 80003c2:	fab2 f682 	clz	r6, r2
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	f040 80a4 	bne.w	8000514 <__udivmoddi4+0x234>
 80003cc:	1a8a      	subs	r2, r1, r2
 80003ce:	0c03      	lsrs	r3, r0, #16
 80003d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d4:	b280      	uxth	r0, r0
 80003d6:	b2bc      	uxth	r4, r7
 80003d8:	2101      	movs	r1, #1
 80003da:	fbb2 fcfe 	udiv	ip, r2, lr
 80003de:	fb0e 221c 	mls	r2, lr, ip, r2
 80003e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003e6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ea:	429a      	cmp	r2, r3
 80003ec:	d907      	bls.n	80003fe <__udivmoddi4+0x11e>
 80003ee:	18fb      	adds	r3, r7, r3
 80003f0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x11c>
 80003f6:	429a      	cmp	r2, r3
 80003f8:	f200 80e0 	bhi.w	80005bc <__udivmoddi4+0x2dc>
 80003fc:	46c4      	mov	ip, r8
 80003fe:	1a9b      	subs	r3, r3, r2
 8000400:	fbb3 f2fe 	udiv	r2, r3, lr
 8000404:	fb0e 3312 	mls	r3, lr, r2, r3
 8000408:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800040c:	fb02 f404 	mul.w	r4, r2, r4
 8000410:	429c      	cmp	r4, r3
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0x144>
 8000414:	18fb      	adds	r3, r7, r3
 8000416:	f102 30ff 	add.w	r0, r2, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x142>
 800041c:	429c      	cmp	r4, r3
 800041e:	f200 80ca 	bhi.w	80005b6 <__udivmoddi4+0x2d6>
 8000422:	4602      	mov	r2, r0
 8000424:	1b1b      	subs	r3, r3, r4
 8000426:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800042a:	e7a5      	b.n	8000378 <__udivmoddi4+0x98>
 800042c:	f1c1 0620 	rsb	r6, r1, #32
 8000430:	408b      	lsls	r3, r1
 8000432:	fa22 f706 	lsr.w	r7, r2, r6
 8000436:	431f      	orrs	r7, r3
 8000438:	fa0e f401 	lsl.w	r4, lr, r1
 800043c:	fa20 f306 	lsr.w	r3, r0, r6
 8000440:	fa2e fe06 	lsr.w	lr, lr, r6
 8000444:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000448:	4323      	orrs	r3, r4
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	fa1f fc87 	uxth.w	ip, r7
 8000452:	fbbe f0f9 	udiv	r0, lr, r9
 8000456:	0c1c      	lsrs	r4, r3, #16
 8000458:	fb09 ee10 	mls	lr, r9, r0, lr
 800045c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000460:	fb00 fe0c 	mul.w	lr, r0, ip
 8000464:	45a6      	cmp	lr, r4
 8000466:	fa02 f201 	lsl.w	r2, r2, r1
 800046a:	d909      	bls.n	8000480 <__udivmoddi4+0x1a0>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000472:	f080 809c 	bcs.w	80005ae <__udivmoddi4+0x2ce>
 8000476:	45a6      	cmp	lr, r4
 8000478:	f240 8099 	bls.w	80005ae <__udivmoddi4+0x2ce>
 800047c:	3802      	subs	r0, #2
 800047e:	443c      	add	r4, r7
 8000480:	eba4 040e 	sub.w	r4, r4, lr
 8000484:	fa1f fe83 	uxth.w	lr, r3
 8000488:	fbb4 f3f9 	udiv	r3, r4, r9
 800048c:	fb09 4413 	mls	r4, r9, r3, r4
 8000490:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000494:	fb03 fc0c 	mul.w	ip, r3, ip
 8000498:	45a4      	cmp	ip, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x1ce>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f103 3eff 	add.w	lr, r3, #4294967295
 80004a2:	f080 8082 	bcs.w	80005aa <__udivmoddi4+0x2ca>
 80004a6:	45a4      	cmp	ip, r4
 80004a8:	d97f      	bls.n	80005aa <__udivmoddi4+0x2ca>
 80004aa:	3b02      	subs	r3, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004b2:	eba4 040c 	sub.w	r4, r4, ip
 80004b6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ba:	4564      	cmp	r4, ip
 80004bc:	4673      	mov	r3, lr
 80004be:	46e1      	mov	r9, ip
 80004c0:	d362      	bcc.n	8000588 <__udivmoddi4+0x2a8>
 80004c2:	d05f      	beq.n	8000584 <__udivmoddi4+0x2a4>
 80004c4:	b15d      	cbz	r5, 80004de <__udivmoddi4+0x1fe>
 80004c6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ca:	eb64 0409 	sbc.w	r4, r4, r9
 80004ce:	fa04 f606 	lsl.w	r6, r4, r6
 80004d2:	fa22 f301 	lsr.w	r3, r2, r1
 80004d6:	431e      	orrs	r6, r3
 80004d8:	40cc      	lsrs	r4, r1
 80004da:	e9c5 6400 	strd	r6, r4, [r5]
 80004de:	2100      	movs	r1, #0
 80004e0:	e74f      	b.n	8000382 <__udivmoddi4+0xa2>
 80004e2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004e6:	0c01      	lsrs	r1, r0, #16
 80004e8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ec:	b280      	uxth	r0, r0
 80004ee:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004f2:	463b      	mov	r3, r7
 80004f4:	4638      	mov	r0, r7
 80004f6:	463c      	mov	r4, r7
 80004f8:	46b8      	mov	r8, r7
 80004fa:	46be      	mov	lr, r7
 80004fc:	2620      	movs	r6, #32
 80004fe:	fbb1 f1f7 	udiv	r1, r1, r7
 8000502:	eba2 0208 	sub.w	r2, r2, r8
 8000506:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800050a:	e766      	b.n	80003da <__udivmoddi4+0xfa>
 800050c:	4601      	mov	r1, r0
 800050e:	e718      	b.n	8000342 <__udivmoddi4+0x62>
 8000510:	4610      	mov	r0, r2
 8000512:	e72c      	b.n	800036e <__udivmoddi4+0x8e>
 8000514:	f1c6 0220 	rsb	r2, r6, #32
 8000518:	fa2e f302 	lsr.w	r3, lr, r2
 800051c:	40b7      	lsls	r7, r6
 800051e:	40b1      	lsls	r1, r6
 8000520:	fa20 f202 	lsr.w	r2, r0, r2
 8000524:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000528:	430a      	orrs	r2, r1
 800052a:	fbb3 f8fe 	udiv	r8, r3, lr
 800052e:	b2bc      	uxth	r4, r7
 8000530:	fb0e 3318 	mls	r3, lr, r8, r3
 8000534:	0c11      	lsrs	r1, r2, #16
 8000536:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800053a:	fb08 f904 	mul.w	r9, r8, r4
 800053e:	40b0      	lsls	r0, r6
 8000540:	4589      	cmp	r9, r1
 8000542:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000546:	b280      	uxth	r0, r0
 8000548:	d93e      	bls.n	80005c8 <__udivmoddi4+0x2e8>
 800054a:	1879      	adds	r1, r7, r1
 800054c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000550:	d201      	bcs.n	8000556 <__udivmoddi4+0x276>
 8000552:	4589      	cmp	r9, r1
 8000554:	d81f      	bhi.n	8000596 <__udivmoddi4+0x2b6>
 8000556:	eba1 0109 	sub.w	r1, r1, r9
 800055a:	fbb1 f9fe 	udiv	r9, r1, lr
 800055e:	fb09 f804 	mul.w	r8, r9, r4
 8000562:	fb0e 1119 	mls	r1, lr, r9, r1
 8000566:	b292      	uxth	r2, r2
 8000568:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800056c:	4542      	cmp	r2, r8
 800056e:	d229      	bcs.n	80005c4 <__udivmoddi4+0x2e4>
 8000570:	18ba      	adds	r2, r7, r2
 8000572:	f109 31ff 	add.w	r1, r9, #4294967295
 8000576:	d2c4      	bcs.n	8000502 <__udivmoddi4+0x222>
 8000578:	4542      	cmp	r2, r8
 800057a:	d2c2      	bcs.n	8000502 <__udivmoddi4+0x222>
 800057c:	f1a9 0102 	sub.w	r1, r9, #2
 8000580:	443a      	add	r2, r7
 8000582:	e7be      	b.n	8000502 <__udivmoddi4+0x222>
 8000584:	45f0      	cmp	r8, lr
 8000586:	d29d      	bcs.n	80004c4 <__udivmoddi4+0x1e4>
 8000588:	ebbe 0302 	subs.w	r3, lr, r2
 800058c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000590:	3801      	subs	r0, #1
 8000592:	46e1      	mov	r9, ip
 8000594:	e796      	b.n	80004c4 <__udivmoddi4+0x1e4>
 8000596:	eba7 0909 	sub.w	r9, r7, r9
 800059a:	4449      	add	r1, r9
 800059c:	f1a8 0c02 	sub.w	ip, r8, #2
 80005a0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a4:	fb09 f804 	mul.w	r8, r9, r4
 80005a8:	e7db      	b.n	8000562 <__udivmoddi4+0x282>
 80005aa:	4673      	mov	r3, lr
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1ce>
 80005ae:	4650      	mov	r0, sl
 80005b0:	e766      	b.n	8000480 <__udivmoddi4+0x1a0>
 80005b2:	4608      	mov	r0, r1
 80005b4:	e6fd      	b.n	80003b2 <__udivmoddi4+0xd2>
 80005b6:	443b      	add	r3, r7
 80005b8:	3a02      	subs	r2, #2
 80005ba:	e733      	b.n	8000424 <__udivmoddi4+0x144>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	443b      	add	r3, r7
 80005c2:	e71c      	b.n	80003fe <__udivmoddi4+0x11e>
 80005c4:	4649      	mov	r1, r9
 80005c6:	e79c      	b.n	8000502 <__udivmoddi4+0x222>
 80005c8:	eba1 0109 	sub.w	r1, r1, r9
 80005cc:	46c4      	mov	ip, r8
 80005ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d2:	fb09 f804 	mul.w	r8, r9, r4
 80005d6:	e7c4      	b.n	8000562 <__udivmoddi4+0x282>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005dc:	b480      	push	{r7}
 80005de:	b085      	sub	sp, #20
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	60f8      	str	r0, [r7, #12]
 80005e4:	60b9      	str	r1, [r7, #8]
 80005e6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	4a07      	ldr	r2, [pc, #28]	@ (8000608 <vApplicationGetIdleTaskMemory+0x2c>)
 80005ec:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005ee:	68bb      	ldr	r3, [r7, #8]
 80005f0:	4a06      	ldr	r2, [pc, #24]	@ (800060c <vApplicationGetIdleTaskMemory+0x30>)
 80005f2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	2280      	movs	r2, #128	@ 0x80
 80005f8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005fa:	bf00      	nop
 80005fc:	3714      	adds	r7, #20
 80005fe:	46bd      	mov	sp, r7
 8000600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop
 8000608:	2000018c 	.word	0x2000018c
 800060c:	200001ec 	.word	0x200001ec

08000610 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000610:	b5b0      	push	{r4, r5, r7, lr}
 8000612:	b088      	sub	sp, #32
 8000614:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000616:	4b0a      	ldr	r3, [pc, #40]	@ (8000640 <MX_FREERTOS_Init+0x30>)
 8000618:	1d3c      	adds	r4, r7, #4
 800061a:	461d      	mov	r5, r3
 800061c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800061e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000620:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000624:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000628:	1d3b      	adds	r3, r7, #4
 800062a:	2100      	movs	r1, #0
 800062c:	4618      	mov	r0, r3
 800062e:	f003 fc32 	bl	8003e96 <osThreadCreate>
 8000632:	4603      	mov	r3, r0
 8000634:	4a03      	ldr	r2, [pc, #12]	@ (8000644 <MX_FREERTOS_Init+0x34>)
 8000636:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000638:	bf00      	nop
 800063a:	3720      	adds	r7, #32
 800063c:	46bd      	mov	sp, r7
 800063e:	bdb0      	pop	{r4, r5, r7, pc}
 8000640:	08007d8c 	.word	0x08007d8c
 8000644:	20000188 	.word	0x20000188

08000648 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000650:	2001      	movs	r0, #1
 8000652:	f003 fc6c 	bl	8003f2e <osDelay>
 8000656:	e7fb      	b.n	8000650 <StartDefaultTask+0x8>

08000658 <MX_GPIO_Init>:
     PB11   ------> USB_OTG_HS_ULPI_D4
     PB14   ------> SPI2_MISO
     PB15   ------> SPI2_MOSI
*/
void MX_GPIO_Init(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b090      	sub	sp, #64	@ 0x40
 800065c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800065e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000662:	2200      	movs	r2, #0
 8000664:	601a      	str	r2, [r3, #0]
 8000666:	605a      	str	r2, [r3, #4]
 8000668:	609a      	str	r2, [r3, #8]
 800066a:	60da      	str	r2, [r3, #12]
 800066c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800066e:	4bad      	ldr	r3, [pc, #692]	@ (8000924 <MX_GPIO_Init+0x2cc>)
 8000670:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000672:	4aac      	ldr	r2, [pc, #688]	@ (8000924 <MX_GPIO_Init+0x2cc>)
 8000674:	f043 0310 	orr.w	r3, r3, #16
 8000678:	6313      	str	r3, [r2, #48]	@ 0x30
 800067a:	4baa      	ldr	r3, [pc, #680]	@ (8000924 <MX_GPIO_Init+0x2cc>)
 800067c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800067e:	f003 0310 	and.w	r3, r3, #16
 8000682:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000684:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000686:	4ba7      	ldr	r3, [pc, #668]	@ (8000924 <MX_GPIO_Init+0x2cc>)
 8000688:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800068a:	4aa6      	ldr	r2, [pc, #664]	@ (8000924 <MX_GPIO_Init+0x2cc>)
 800068c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000690:	6313      	str	r3, [r2, #48]	@ 0x30
 8000692:	4ba4      	ldr	r3, [pc, #656]	@ (8000924 <MX_GPIO_Init+0x2cc>)
 8000694:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000696:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800069a:	627b      	str	r3, [r7, #36]	@ 0x24
 800069c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800069e:	4ba1      	ldr	r3, [pc, #644]	@ (8000924 <MX_GPIO_Init+0x2cc>)
 80006a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006a2:	4aa0      	ldr	r2, [pc, #640]	@ (8000924 <MX_GPIO_Init+0x2cc>)
 80006a4:	f043 0302 	orr.w	r3, r3, #2
 80006a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80006aa:	4b9e      	ldr	r3, [pc, #632]	@ (8000924 <MX_GPIO_Init+0x2cc>)
 80006ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ae:	f003 0302 	and.w	r3, r3, #2
 80006b2:	623b      	str	r3, [r7, #32]
 80006b4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006b6:	4b9b      	ldr	r3, [pc, #620]	@ (8000924 <MX_GPIO_Init+0x2cc>)
 80006b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ba:	4a9a      	ldr	r2, [pc, #616]	@ (8000924 <MX_GPIO_Init+0x2cc>)
 80006bc:	f043 0308 	orr.w	r3, r3, #8
 80006c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80006c2:	4b98      	ldr	r3, [pc, #608]	@ (8000924 <MX_GPIO_Init+0x2cc>)
 80006c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006c6:	f003 0308 	and.w	r3, r3, #8
 80006ca:	61fb      	str	r3, [r7, #28]
 80006cc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006ce:	4b95      	ldr	r3, [pc, #596]	@ (8000924 <MX_GPIO_Init+0x2cc>)
 80006d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006d2:	4a94      	ldr	r2, [pc, #592]	@ (8000924 <MX_GPIO_Init+0x2cc>)
 80006d4:	f043 0304 	orr.w	r3, r3, #4
 80006d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80006da:	4b92      	ldr	r3, [pc, #584]	@ (8000924 <MX_GPIO_Init+0x2cc>)
 80006dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006de:	f003 0304 	and.w	r3, r3, #4
 80006e2:	61bb      	str	r3, [r7, #24]
 80006e4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006e6:	4b8f      	ldr	r3, [pc, #572]	@ (8000924 <MX_GPIO_Init+0x2cc>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ea:	4a8e      	ldr	r2, [pc, #568]	@ (8000924 <MX_GPIO_Init+0x2cc>)
 80006ec:	f043 0301 	orr.w	r3, r3, #1
 80006f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80006f2:	4b8c      	ldr	r3, [pc, #560]	@ (8000924 <MX_GPIO_Init+0x2cc>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006f6:	f003 0301 	and.w	r3, r3, #1
 80006fa:	617b      	str	r3, [r7, #20]
 80006fc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80006fe:	4b89      	ldr	r3, [pc, #548]	@ (8000924 <MX_GPIO_Init+0x2cc>)
 8000700:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000702:	4a88      	ldr	r2, [pc, #544]	@ (8000924 <MX_GPIO_Init+0x2cc>)
 8000704:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000708:	6313      	str	r3, [r2, #48]	@ 0x30
 800070a:	4b86      	ldr	r3, [pc, #536]	@ (8000924 <MX_GPIO_Init+0x2cc>)
 800070c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800070e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000712:	613b      	str	r3, [r7, #16]
 8000714:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000716:	4b83      	ldr	r3, [pc, #524]	@ (8000924 <MX_GPIO_Init+0x2cc>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800071a:	4a82      	ldr	r2, [pc, #520]	@ (8000924 <MX_GPIO_Init+0x2cc>)
 800071c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000720:	6313      	str	r3, [r2, #48]	@ 0x30
 8000722:	4b80      	ldr	r3, [pc, #512]	@ (8000924 <MX_GPIO_Init+0x2cc>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000726:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800072a:	60fb      	str	r3, [r7, #12]
 800072c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800072e:	4b7d      	ldr	r3, [pc, #500]	@ (8000924 <MX_GPIO_Init+0x2cc>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000732:	4a7c      	ldr	r2, [pc, #496]	@ (8000924 <MX_GPIO_Init+0x2cc>)
 8000734:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000738:	6313      	str	r3, [r2, #48]	@ 0x30
 800073a:	4b7a      	ldr	r3, [pc, #488]	@ (8000924 <MX_GPIO_Init+0x2cc>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800073e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000742:	60bb      	str	r3, [r7, #8]
 8000744:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000746:	4b77      	ldr	r3, [pc, #476]	@ (8000924 <MX_GPIO_Init+0x2cc>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800074a:	4a76      	ldr	r2, [pc, #472]	@ (8000924 <MX_GPIO_Init+0x2cc>)
 800074c:	f043 0320 	orr.w	r3, r3, #32
 8000750:	6313      	str	r3, [r2, #48]	@ 0x30
 8000752:	4b74      	ldr	r3, [pc, #464]	@ (8000924 <MX_GPIO_Init+0x2cc>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000756:	f003 0320 	and.w	r3, r3, #32
 800075a:	607b      	str	r3, [r7, #4]
 800075c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800075e:	4b71      	ldr	r3, [pc, #452]	@ (8000924 <MX_GPIO_Init+0x2cc>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000762:	4a70      	ldr	r2, [pc, #448]	@ (8000924 <MX_GPIO_Init+0x2cc>)
 8000764:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000768:	6313      	str	r3, [r2, #48]	@ 0x30
 800076a:	4b6e      	ldr	r3, [pc, #440]	@ (8000924 <MX_GPIO_Init+0x2cc>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800076e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000772:	603b      	str	r3, [r7, #0]
 8000774:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000776:	2201      	movs	r2, #1
 8000778:	2120      	movs	r1, #32
 800077a:	486b      	ldr	r0, [pc, #428]	@ (8000928 <MX_GPIO_Init+0x2d0>)
 800077c:	f001 fc90 	bl	80020a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin|LED_Pin|LCD_DISP_Pin, GPIO_PIN_RESET);
 8000780:	2200      	movs	r2, #0
 8000782:	f241 010e 	movw	r1, #4110	@ 0x100e
 8000786:	4869      	ldr	r0, [pc, #420]	@ (800092c <MX_GPIO_Init+0x2d4>)
 8000788:	f001 fc8a 	bl	80020a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 800078c:	2200      	movs	r2, #0
 800078e:	2108      	movs	r1, #8
 8000790:	4867      	ldr	r0, [pc, #412]	@ (8000930 <MX_GPIO_Init+0x2d8>)
 8000792:	f001 fc85 	bl	80020a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8000796:	2200      	movs	r2, #0
 8000798:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800079c:	4865      	ldr	r0, [pc, #404]	@ (8000934 <MX_GPIO_Init+0x2dc>)
 800079e:	f001 fc7f 	bl	80020a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 80007a2:	2200      	movs	r2, #0
 80007a4:	21c8      	movs	r1, #200	@ 0xc8
 80007a6:	4864      	ldr	r0, [pc, #400]	@ (8000938 <MX_GPIO_Init+0x2e0>)
 80007a8:	f001 fc7a 	bl	80020a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LCD_B0_Pin */
  GPIO_InitStruct.Pin = LCD_B0_Pin;
 80007ac:	2310      	movs	r3, #16
 80007ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007b0:	2302      	movs	r3, #2
 80007b2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b4:	2300      	movs	r3, #0
 80007b6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b8:	2300      	movs	r3, #0
 80007ba:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80007bc:	230e      	movs	r3, #14
 80007be:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 80007c0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80007c4:	4619      	mov	r1, r3
 80007c6:	485d      	ldr	r0, [pc, #372]	@ (800093c <MX_GPIO_Init+0x2e4>)
 80007c8:	f001 faa6 	bl	8001d18 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 80007cc:	2308      	movs	r3, #8
 80007ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007d0:	2300      	movs	r3, #0
 80007d2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d4:	2300      	movs	r3, #0
 80007d6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80007d8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80007dc:	4619      	mov	r1, r3
 80007de:	4857      	ldr	r0, [pc, #348]	@ (800093c <MX_GPIO_Init+0x2e4>)
 80007e0:	f001 fa9a 	bl	8001d18 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_D2_Pin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 80007e4:	2304      	movs	r3, #4
 80007e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007e8:	2302      	movs	r3, #2
 80007ea:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ec:	2300      	movs	r3, #0
 80007ee:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007f0:	2303      	movs	r3, #3
 80007f2:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80007f4:	2309      	movs	r3, #9
 80007f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 80007f8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80007fc:	4619      	mov	r1, r3
 80007fe:	484f      	ldr	r0, [pc, #316]	@ (800093c <MX_GPIO_Init+0x2e4>)
 8000800:	f001 fa8a 	bl	8001d18 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8000804:	f44f 43d0 	mov.w	r3, #26624	@ 0x6800
 8000808:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800080a:	2302      	movs	r3, #2
 800080c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080e:	2300      	movs	r3, #0
 8000810:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000812:	2303      	movs	r3, #3
 8000814:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000816:	230b      	movs	r3, #11
 8000818:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800081a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800081e:	4619      	mov	r1, r3
 8000820:	4845      	ldr	r0, [pc, #276]	@ (8000938 <MX_GPIO_Init+0x2e0>)
 8000822:	f001 fa79 	bl	8001d18 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_NBL1_Pin FMC_NBL0_Pin FMC_D5_Pin FMC_D6_Pin
                           FMC_D8_Pin FMC_D11_Pin FMC_D4_Pin FMC_D7_Pin
                           FMC_D9_Pin FMC_D12_Pin FMC_D10_Pin */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8000826:	f64f 7383 	movw	r3, #65411	@ 0xff83
 800082a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800082c:	2302      	movs	r3, #2
 800082e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000830:	2300      	movs	r3, #0
 8000832:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000834:	2303      	movs	r3, #3
 8000836:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000838:	230c      	movs	r3, #12
 800083a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800083c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000840:	4619      	mov	r1, r3
 8000842:	483e      	ldr	r0, [pc, #248]	@ (800093c <MX_GPIO_Init+0x2e4>)
 8000844:	f001 fa68 	bl	8001d18 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_SCL_D15_Pin ARDUINO_SDA_D14_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8000848:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800084c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800084e:	2312      	movs	r3, #18
 8000850:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000852:	2300      	movs	r3, #0
 8000854:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000856:	2300      	movs	r3, #0
 8000858:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800085a:	2304      	movs	r3, #4
 800085c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800085e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000862:	4619      	mov	r1, r3
 8000864:	4836      	ldr	r0, [pc, #216]	@ (8000940 <MX_GPIO_Init+0x2e8>)
 8000866:	f001 fa57 	bl	8001d18 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 800086a:	f643 4323 	movw	r3, #15395	@ 0x3c23
 800086e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000870:	2302      	movs	r3, #2
 8000872:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000874:	2300      	movs	r3, #0
 8000876:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000878:	2303      	movs	r3, #3
 800087a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800087c:	230a      	movs	r3, #10
 800087e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000880:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000884:	4619      	mov	r1, r3
 8000886:	482e      	ldr	r0, [pc, #184]	@ (8000940 <MX_GPIO_Init+0x2e8>)
 8000888:	f001 fa46 	bl	8001d18 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 800088c:	2310      	movs	r3, #16
 800088e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000890:	2302      	movs	r3, #2
 8000892:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000894:	2300      	movs	r3, #0
 8000896:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000898:	2300      	movs	r3, #0
 800089a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800089c:	2302      	movs	r3, #2
 800089e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 80008a0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80008a4:	4619      	mov	r1, r3
 80008a6:	4826      	ldr	r0, [pc, #152]	@ (8000940 <MX_GPIO_Init+0x2e8>)
 80008a8:	f001 fa36 	bl	8001d18 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPDIF_RX0_Pin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 80008ac:	2380      	movs	r3, #128	@ 0x80
 80008ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008b0:	2302      	movs	r3, #2
 80008b2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b4:	2300      	movs	r3, #0
 80008b6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b8:	2300      	movs	r3, #0
 80008ba:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 80008bc:	2308      	movs	r3, #8
 80008be:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 80008c0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80008c4:	4619      	mov	r1, r3
 80008c6:	4818      	ldr	r0, [pc, #96]	@ (8000928 <MX_GPIO_Init+0x2d0>)
 80008c8:	f001 fa26 	bl	8001d18 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDMMC_CK_Pin SDMMC_D3_Pin SDMMC_D2_Pin PC9
                           PC8 */
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 80008cc:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 80008d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d2:	2302      	movs	r3, #2
 80008d4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d6:	2300      	movs	r3, #0
 80008d8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008da:	2303      	movs	r3, #3
 80008dc:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80008de:	230c      	movs	r3, #12
 80008e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008e2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80008e6:	4619      	mov	r1, r3
 80008e8:	4816      	ldr	r0, [pc, #88]	@ (8000944 <MX_GPIO_Init+0x2ec>)
 80008ea:	f001 fa15 	bl	8001d18 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D9_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 80008ee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80008f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008f4:	2302      	movs	r3, #2
 80008f6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f8:	2300      	movs	r3, #0
 80008fa:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fc:	2300      	movs	r3, #0
 80008fe:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000900:	2301      	movs	r3, #1
 8000902:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8000904:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000908:	4619      	mov	r1, r3
 800090a:	480f      	ldr	r0, [pc, #60]	@ (8000948 <MX_GPIO_Init+0x2f0>)
 800090c:	f001 fa04 	bl	8001d18 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D6_Pin DCMI_D7_Pin */
  GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8000910:	2360      	movs	r3, #96	@ 0x60
 8000912:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000914:	2302      	movs	r3, #2
 8000916:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000918:	2300      	movs	r3, #0
 800091a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800091c:	2300      	movs	r3, #0
 800091e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000920:	230d      	movs	r3, #13
 8000922:	e013      	b.n	800094c <MX_GPIO_Init+0x2f4>
 8000924:	40023800 	.word	0x40023800
 8000928:	40020c00 	.word	0x40020c00
 800092c:	40022000 	.word	0x40022000
 8000930:	40022800 	.word	0x40022800
 8000934:	40021c00 	.word	0x40021c00
 8000938:	40021800 	.word	0x40021800
 800093c:	40021000 	.word	0x40021000
 8000940:	40020400 	.word	0x40020400
 8000944:	40020800 	.word	0x40020800
 8000948:	40020000 	.word	0x40020000
 800094c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800094e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000952:	4619      	mov	r1, r3
 8000954:	48bc      	ldr	r0, [pc, #752]	@ (8000c48 <MX_GPIO_Init+0x5f0>)
 8000956:	f001 f9df 	bl	8001d18 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_NCS_Pin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 800095a:	2340      	movs	r3, #64	@ 0x40
 800095c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800095e:	2302      	movs	r3, #2
 8000960:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000962:	2300      	movs	r3, #0
 8000964:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000966:	2303      	movs	r3, #3
 8000968:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800096a:	230a      	movs	r3, #10
 800096c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 800096e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000972:	4619      	mov	r1, r3
 8000974:	48b5      	ldr	r0, [pc, #724]	@ (8000c4c <MX_GPIO_Init+0x5f4>)
 8000976:	f001 f9cf 	bl	8001d18 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNCAS_Pin FMC_SDCLK_Pin FMC_A11_Pin FMC_A10_Pin
                           FMC_BA1_Pin FMC_BA0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 800097a:	f248 1333 	movw	r3, #33075	@ 0x8133
 800097e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000980:	2302      	movs	r3, #2
 8000982:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000984:	2300      	movs	r3, #0
 8000986:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000988:	2303      	movs	r3, #3
 800098a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800098c:	230c      	movs	r3, #12
 800098e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000990:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000994:	4619      	mov	r1, r3
 8000996:	48ae      	ldr	r0, [pc, #696]	@ (8000c50 <MX_GPIO_Init+0x5f8>)
 8000998:	f001 f9be 	bl	8001d18 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_B1_Pin LCD_B2_Pin LCD_B3_Pin LCD_G4_Pin
                           LCD_G1_Pin LCD_G3_Pin LCD_G0_Pin LCD_G2_Pin
                           LCD_R7_Pin LCD_R5_Pin LCD_R6_Pin LCD_R4_Pin
                           LCD_R3_Pin LCD_R1_Pin LCD_R2_Pin */
  GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 800099c:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 80009a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a2:	2302      	movs	r3, #2
 80009a4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a6:	2300      	movs	r3, #0
 80009a8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009aa:	2300      	movs	r3, #0
 80009ac:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80009ae:	230e      	movs	r3, #14
 80009b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80009b2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80009b6:	4619      	mov	r1, r3
 80009b8:	48a6      	ldr	r0, [pc, #664]	@ (8000c54 <MX_GPIO_Init+0x5fc>)
 80009ba:	f001 f9ad 	bl	8001d18 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 80009be:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009c4:	2300      	movs	r3, #0
 80009c6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c8:	2300      	movs	r3, #0
 80009ca:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80009cc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80009d0:	4619      	mov	r1, r3
 80009d2:	48a0      	ldr	r0, [pc, #640]	@ (8000c54 <MX_GPIO_Init+0x5fc>)
 80009d4:	f001 f9a0 	bl	8001d18 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 80009d8:	2340      	movs	r3, #64	@ 0x40
 80009da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009dc:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80009e0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e2:	2300      	movs	r3, #0
 80009e4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 80009e6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80009ea:	4619      	mov	r1, r3
 80009ec:	489a      	ldr	r0, [pc, #616]	@ (8000c58 <MX_GPIO_Init+0x600>)
 80009ee:	f001 f993 	bl	8001d18 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_D2_Pin FMC_D3_Pin FMC_D1_Pin FMC_D15_Pin
                           FMC_D0_Pin FMC_D14_Pin FMC_D13_Pin */
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 80009f2:	f24c 7303 	movw	r3, #50947	@ 0xc703
 80009f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f8:	2302      	movs	r3, #2
 80009fa:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fc:	2300      	movs	r3, #0
 80009fe:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a00:	2303      	movs	r3, #3
 8000a02:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000a04:	230c      	movs	r3, #12
 8000a06:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a08:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	4892      	ldr	r0, [pc, #584]	@ (8000c58 <MX_GPIO_Init+0x600>)
 8000a10:	f001 f982 	bl	8001d18 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 8000a14:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000a18:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a1a:	2302      	movs	r3, #2
 8000a1c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a22:	2303      	movs	r3, #3
 8000a24:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000a26:	230a      	movs	r3, #10
 8000a28:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a2a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a2e:	4619      	mov	r1, r3
 8000a30:	488a      	ldr	r0, [pc, #552]	@ (8000c5c <MX_GPIO_Init+0x604>)
 8000a32:	f001 f971 	bl	8001d18 <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI2_MCLKA_Pin SAI2_SCKA_Pin SAI2_FSA_Pin SAI2_SDA_Pin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8000a36:	23f0      	movs	r3, #240	@ 0xf0
 8000a38:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a3a:	2302      	movs	r3, #2
 8000a3c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a42:	2300      	movs	r3, #0
 8000a44:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8000a46:	230a      	movs	r3, #10
 8000a48:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000a4a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a4e:	4619      	mov	r1, r3
 8000a50:	4883      	ldr	r0, [pc, #524]	@ (8000c60 <MX_GPIO_Init+0x608>)
 8000a52:	f001 f961 	bl	8001d18 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_DE_Pin LCD_B7_Pin LCD_B6_Pin LCD_B5_Pin
                           LCD_G6_Pin LCD_G7_Pin LCD_G5_Pin */
  GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8000a56:	23f7      	movs	r3, #247	@ 0xf7
 8000a58:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a5a:	2302      	movs	r3, #2
 8000a5c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a62:	2300      	movs	r3, #0
 8000a64:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000a66:	230e      	movs	r3, #14
 8000a68:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8000a6a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a6e:	4619      	mov	r1, r3
 8000a70:	487c      	ldr	r0, [pc, #496]	@ (8000c64 <MX_GPIO_Init+0x60c>)
 8000a72:	f001 f951 	bl	8001d18 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_B4_Pin */
  GPIO_InitStruct.Pin = LCD_B4_Pin;
 8000a76:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a7c:	2302      	movs	r3, #2
 8000a7e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a80:	2300      	movs	r3, #0
 8000a82:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a84:	2300      	movs	r3, #0
 8000a86:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000a88:	2309      	movs	r3, #9
 8000a8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8000a8c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a90:	4619      	mov	r1, r3
 8000a92:	486f      	ldr	r0, [pc, #444]	@ (8000c50 <MX_GPIO_Init+0x5f8>)
 8000a94:	f001 f940 	bl	8001d18 <HAL_GPIO_Init>

  /*Configure GPIO pin : SAI2_SDB_Pin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8000a98:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a9e:	2302      	movs	r3, #2
 8000aa0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8000aaa:	230a      	movs	r3, #10
 8000aac:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8000aae:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	4866      	ldr	r0, [pc, #408]	@ (8000c50 <MX_GPIO_Init+0x5f8>)
 8000ab6:	f001 f92f 	bl	8001d18 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000aba:	2320      	movs	r3, #32
 8000abc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000abe:	2301      	movs	r3, #1
 8000ac0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000aca:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ace:	4619      	mov	r1, r3
 8000ad0:	4861      	ldr	r0, [pc, #388]	@ (8000c58 <MX_GPIO_Init+0x600>)
 8000ad2:	f001 f921 	bl	8001d18 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_D5_Pin */
  GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8000ad6:	2308      	movs	r3, #8
 8000ad8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ada:	2302      	movs	r3, #2
 8000adc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000ae6:	230d      	movs	r3, #13
 8000ae8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8000aea:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000aee:	4619      	mov	r1, r3
 8000af0:	4859      	ldr	r0, [pc, #356]	@ (8000c58 <MX_GPIO_Init+0x600>)
 8000af2:	f001 f911 	bl	8001d18 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LED_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LED_Pin|LCD_DISP_Pin;
 8000af6:	f241 030e 	movw	r3, #4110	@ 0x100e
 8000afa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000afc:	2301      	movs	r3, #1
 8000afe:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b00:	2300      	movs	r3, #0
 8000b02:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b04:	2300      	movs	r3, #0
 8000b06:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000b08:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	4854      	ldr	r0, [pc, #336]	@ (8000c60 <MX_GPIO_Init+0x608>)
 8000b10:	f001 f902 	bl	8001d18 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8000b14:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b18:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8000b22:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b26:	4619      	mov	r1, r3
 8000b28:	484f      	ldr	r0, [pc, #316]	@ (8000c68 <MX_GPIO_Init+0x610>)
 8000b2a:	f001 f8f5 	bl	8001d18 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_A0_Pin FMC_A1_Pin FMC_A2_Pin FMC_A3_Pin
                           FMC_A4_Pin FMC_A5_Pin FMC_A6_Pin FMC_A9_Pin
                           FMC_A7_Pin FMC_A8_Pin FMC_SDNRAS_Pin */
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8000b2e:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8000b32:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b34:	2302      	movs	r3, #2
 8000b36:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b3c:	2303      	movs	r3, #3
 8000b3e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000b40:	230c      	movs	r3, #12
 8000b42:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000b44:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b48:	4619      	mov	r1, r3
 8000b4a:	4848      	ldr	r0, [pc, #288]	@ (8000c6c <MX_GPIO_Init+0x614>)
 8000b4c:	f001 f8e4 	bl	8001d18 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_HSYNC_Pin LCD_VSYNC_Pin LCD_R0_Pin LCD_CLK_Pin */
  GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8000b50:	f44f 4346 	mov.w	r3, #50688	@ 0xc600
 8000b54:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b56:	2302      	movs	r3, #2
 8000b58:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000b62:	230e      	movs	r3, #14
 8000b64:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000b66:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	483c      	ldr	r0, [pc, #240]	@ (8000c60 <MX_GPIO_Init+0x608>)
 8000b6e:	f001 f8d3 	bl	8001d18 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8000b72:	2308      	movs	r3, #8
 8000b74:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b76:	2301      	movs	r3, #1
 8000b78:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8000b82:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b86:	4619      	mov	r1, r3
 8000b88:	4836      	ldr	r0, [pc, #216]	@ (8000c64 <MX_GPIO_Init+0x60c>)
 8000b8a:	f001 f8c5 	bl	8001d18 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_VSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8000b8e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000b92:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b94:	2302      	movs	r3, #2
 8000b96:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000ba0:	230d      	movs	r3, #13
 8000ba2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8000ba4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ba8:	4619      	mov	r1, r3
 8000baa:	4829      	ldr	r0, [pc, #164]	@ (8000c50 <MX_GPIO_Init+0x5f8>)
 8000bac:	f001 f8b4 	bl	8001d18 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000bb0:	2310      	movs	r3, #16
 8000bb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000bbc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	4825      	ldr	r0, [pc, #148]	@ (8000c58 <MX_GPIO_Init+0x600>)
 8000bc4:	f001 f8a8 	bl	8001d18 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDMMC_D0_Pin */
  GPIO_InitStruct.Pin = SDMMC_D0_Pin;
 8000bc8:	2304      	movs	r3, #4
 8000bca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bcc:	2302      	movs	r3, #2
 8000bce:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bd4:	2303      	movs	r3, #3
 8000bd6:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000bd8:	230c      	movs	r3, #12
 8000bda:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SDMMC_D0_GPIO_Port, &GPIO_InitStruct);
 8000bdc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000be0:	4619      	mov	r1, r3
 8000be2:	481d      	ldr	r0, [pc, #116]	@ (8000c58 <MX_GPIO_Init+0x600>)
 8000be4:	f001 f898 	bl	8001d18 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8000be8:	f248 0304 	movw	r3, #32772	@ 0x8004
 8000bec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000bf6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	481c      	ldr	r0, [pc, #112]	@ (8000c70 <MX_GPIO_Init+0x618>)
 8000bfe:	f001 f88b 	bl	8001d18 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8000c02:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c06:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c08:	2301      	movs	r3, #1
 8000c0a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c10:	2300      	movs	r3, #0
 8000c12:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000c14:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c18:	4619      	mov	r1, r3
 8000c1a:	4815      	ldr	r0, [pc, #84]	@ (8000c70 <MX_GPIO_Init+0x618>)
 8000c1c:	f001 f87c 	bl	8001d18 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D4_Pin DCMI_D3_Pin DCMI_D0_Pin DCMI_D2_Pin
                           DCMI_D1_Pin */
  GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8000c20:	f44f 43bc 	mov.w	r3, #24064	@ 0x5e00
 8000c24:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |DCMI_D1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c26:	2302      	movs	r3, #2
 8000c28:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000c32:	230d      	movs	r3, #13
 8000c34:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000c36:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	480c      	ldr	r0, [pc, #48]	@ (8000c70 <MX_GPIO_Init+0x618>)
 8000c3e:	f001 f86b 	bl	8001d18 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_CS_D5_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 8000c42:	2301      	movs	r3, #1
 8000c44:	e016      	b.n	8000c74 <MX_GPIO_Init+0x61c>
 8000c46:	bf00      	nop
 8000c48:	40021000 	.word	0x40021000
 8000c4c:	40020400 	.word	0x40020400
 8000c50:	40021800 	.word	0x40021800
 8000c54:	40022400 	.word	0x40022400
 8000c58:	40020c00 	.word	0x40020c00
 8000c5c:	40020000 	.word	0x40020000
 8000c60:	40022000 	.word	0x40022000
 8000c64:	40022800 	.word	0x40022800
 8000c68:	40020800 	.word	0x40020800
 8000c6c:	40021400 	.word	0x40021400
 8000c70:	40021c00 	.word	0x40021c00
 8000c74:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c76:	2302      	movs	r3, #2
 8000c78:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8000c82:	2302      	movs	r3, #2
 8000c84:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 8000c86:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	48a4      	ldr	r0, [pc, #656]	@ (8000f20 <MX_GPIO_Init+0x8c8>)
 8000c8e:	f001 f843 	bl	8001d18 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8000c92:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000c96:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000ca0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	489e      	ldr	r0, [pc, #632]	@ (8000f20 <MX_GPIO_Init+0x8c8>)
 8000ca8:	f001 f836 	bl	8001d18 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D10_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8000cac:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000cb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb2:	2302      	movs	r3, #2
 8000cb4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8000cc2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	4896      	ldr	r0, [pc, #600]	@ (8000f24 <MX_GPIO_Init+0x8cc>)
 8000cca:	f001 f825 	bl	8001d18 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8000cce:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000cd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000cd4:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000cd8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8000cde:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	488e      	ldr	r0, [pc, #568]	@ (8000f20 <MX_GPIO_Init+0x8c8>)
 8000ce6:	f001 f817 	bl	8001d18 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_RX_D0_Pin ARDUINO_TX_D1_Pin */
  GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8000cea:	23c0      	movs	r3, #192	@ 0xc0
 8000cec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cee:	2302      	movs	r3, #2
 8000cf0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cf6:	2303      	movs	r3, #3
 8000cf8:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000cfa:	2308      	movs	r3, #8
 8000cfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cfe:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d02:	4619      	mov	r1, r3
 8000d04:	4888      	ldr	r0, [pc, #544]	@ (8000f28 <MX_GPIO_Init+0x8d0>)
 8000d06:	f001 f807 	bl	8001d18 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8000d0a:	2310      	movs	r3, #16
 8000d0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d0e:	2302      	movs	r3, #2
 8000d10:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d12:	2300      	movs	r3, #0
 8000d14:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d16:	2303      	movs	r3, #3
 8000d18:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000d1a:	230a      	movs	r3, #10
 8000d1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8000d1e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d22:	4619      	mov	r1, r3
 8000d24:	4881      	ldr	r0, [pc, #516]	@ (8000f2c <MX_GPIO_Init+0x8d4>)
 8000d26:	f000 fff7 	bl	8001d18 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNME_Pin FMC_SDNE0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8000d2a:	2328      	movs	r3, #40	@ 0x28
 8000d2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d2e:	2302      	movs	r3, #2
 8000d30:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d32:	2300      	movs	r3, #0
 8000d34:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d36:	2303      	movs	r3, #3
 8000d38:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000d3a:	230c      	movs	r3, #12
 8000d3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000d3e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d42:	4619      	mov	r1, r3
 8000d44:	4879      	ldr	r0, [pc, #484]	@ (8000f2c <MX_GPIO_Init+0x8d4>)
 8000d46:	f000 ffe7 	bl	8001d18 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8000d4a:	23c8      	movs	r3, #200	@ 0xc8
 8000d4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d4e:	2301      	movs	r3, #1
 8000d50:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d52:	2300      	movs	r3, #0
 8000d54:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d56:	2300      	movs	r3, #0
 8000d58:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d5a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d5e:	4619      	mov	r1, r3
 8000d60:	4873      	ldr	r0, [pc, #460]	@ (8000f30 <MX_GPIO_Init+0x8d8>)
 8000d62:	f000 ffd9 	bl	8001d18 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_A4_Pin ARDUINO_A5_Pin ARDUINO_A1_Pin ARDUINO_A2_Pin
                           ARDUINO_A3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 8000d66:	f44f 63f8 	mov.w	r3, #1984	@ 0x7c0
 8000d6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |ARDUINO_A3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d6c:	2303      	movs	r3, #3
 8000d6e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d70:	2300      	movs	r3, #0
 8000d72:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000d74:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d78:	4619      	mov	r1, r3
 8000d7a:	486e      	ldr	r0, [pc, #440]	@ (8000f34 <MX_GPIO_Init+0x8dc>)
 8000d7c:	f000 ffcc 	bl	8001d18 <HAL_GPIO_Init>

  /*Configure GPIO pin : FMC_SDCKE0_Pin */
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8000d80:	2308      	movs	r3, #8
 8000d82:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d84:	2302      	movs	r3, #2
 8000d86:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d8c:	2303      	movs	r3, #3
 8000d8e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000d90:	230c      	movs	r3, #12
 8000d92:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8000d94:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d98:	4619      	mov	r1, r3
 8000d9a:	4863      	ldr	r0, [pc, #396]	@ (8000f28 <MX_GPIO_Init+0x8d0>)
 8000d9c:	f000 ffbc 	bl	8001d18 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8000da0:	2305      	movs	r3, #5
 8000da2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da4:	2302      	movs	r3, #2
 8000da6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da8:	2300      	movs	r3, #0
 8000daa:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dac:	2303      	movs	r3, #3
 8000dae:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000db0:	230a      	movs	r3, #10
 8000db2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000db4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000db8:	4619      	mov	r1, r3
 8000dba:	485b      	ldr	r0, [pc, #364]	@ (8000f28 <MX_GPIO_Init+0x8d0>)
 8000dbc:	f000 ffac 	bl	8001d18 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000dc0:	2332      	movs	r3, #50	@ 0x32
 8000dc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc4:	2302      	movs	r3, #2
 8000dc6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dcc:	2303      	movs	r3, #3
 8000dce:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000dd0:	230b      	movs	r3, #11
 8000dd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dd4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000dd8:	4619      	mov	r1, r3
 8000dda:	4853      	ldr	r0, [pc, #332]	@ (8000f28 <MX_GPIO_Init+0x8d0>)
 8000ddc:	f000 ff9c 	bl	8001d18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000de0:	2304      	movs	r3, #4
 8000de2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de4:	2302      	movs	r3, #2
 8000de6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de8:	2300      	movs	r3, #0
 8000dea:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dec:	2303      	movs	r3, #3
 8000dee:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000df0:	2309      	movs	r3, #9
 8000df2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000df4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000df8:	4619      	mov	r1, r3
 8000dfa:	484f      	ldr	r0, [pc, #316]	@ (8000f38 <MX_GPIO_Init+0x8e0>)
 8000dfc:	f000 ff8c 	bl	8001d18 <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_D1_Pin QSPI_D3_Pin QSPI_D0_Pin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8000e00:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8000e04:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e06:	2302      	movs	r3, #2
 8000e08:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e0e:	2303      	movs	r3, #3
 8000e10:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000e12:	2309      	movs	r3, #9
 8000e14:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e16:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	4847      	ldr	r0, [pc, #284]	@ (8000f3c <MX_GPIO_Init+0x8e4>)
 8000e1e:	f000 ff7b 	bl	8001d18 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8000e22:	2304      	movs	r3, #4
 8000e24:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e26:	2300      	movs	r3, #0
 8000e28:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8000e2e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e32:	4619      	mov	r1, r3
 8000e34:	483e      	ldr	r0, [pc, #248]	@ (8000f30 <MX_GPIO_Init+0x8d8>)
 8000e36:	f000 ff6f 	bl	8001d18 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000e3a:	2386      	movs	r3, #134	@ 0x86
 8000e3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e3e:	2302      	movs	r3, #2
 8000e40:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e42:	2300      	movs	r3, #0
 8000e44:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e46:	2303      	movs	r3, #3
 8000e48:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e4a:	230b      	movs	r3, #11
 8000e4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e4e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e52:	4619      	mov	r1, r3
 8000e54:	4833      	ldr	r0, [pc, #204]	@ (8000f24 <MX_GPIO_Init+0x8cc>)
 8000e56:	f000 ff5f 	bl	8001d18 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_A0_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e5e:	2303      	movs	r3, #3
 8000e60:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e62:	2300      	movs	r3, #0
 8000e64:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8000e66:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	482d      	ldr	r0, [pc, #180]	@ (8000f24 <MX_GPIO_Init+0x8cc>)
 8000e6e:	f000 ff53 	bl	8001d18 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_HSYNC_Pin PA6 */
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8000e72:	2350      	movs	r3, #80	@ 0x50
 8000e74:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e76:	2302      	movs	r3, #2
 8000e78:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000e82:	230d      	movs	r3, #13
 8000e84:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e86:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	4825      	ldr	r0, [pc, #148]	@ (8000f24 <MX_GPIO_Init+0x8cc>)
 8000e8e:	f000 ff43 	bl	8001d18 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_SCL_Pin LCD_SDA_Pin */
  GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8000e92:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000e96:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e98:	2312      	movs	r3, #18
 8000e9a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ea0:	2303      	movs	r3, #3
 8000ea2:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000ea4:	2304      	movs	r3, #4
 8000ea6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000ea8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000eac:	4619      	mov	r1, r3
 8000eae:	481f      	ldr	r0, [pc, #124]	@ (8000f2c <MX_GPIO_Init+0x8d4>)
 8000eb0:	f000 ff32 	bl	8001d18 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8000eb4:	2328      	movs	r3, #40	@ 0x28
 8000eb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb8:	2302      	movs	r3, #2
 8000eba:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ec0:	2303      	movs	r3, #3
 8000ec2:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000ec4:	230a      	movs	r3, #10
 8000ec6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ec8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ecc:	4619      	mov	r1, r3
 8000ece:	4815      	ldr	r0, [pc, #84]	@ (8000f24 <MX_GPIO_Init+0x8cc>)
 8000ed0:	f000 ff22 	bl	8001d18 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D6_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8000ed4:	2340      	movs	r3, #64	@ 0x40
 8000ed6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed8:	2302      	movs	r3, #2
 8000eda:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000edc:	2300      	movs	r3, #0
 8000ede:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8000ee4:	2309      	movs	r3, #9
 8000ee6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8000ee8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000eec:	4619      	mov	r1, r3
 8000eee:	480f      	ldr	r0, [pc, #60]	@ (8000f2c <MX_GPIO_Init+0x8d4>)
 8000ef0:	f000 ff12 	bl	8001d18 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8000ef4:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000ef8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000efa:	2302      	movs	r3, #2
 8000efc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efe:	2300      	movs	r3, #0
 8000f00:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f02:	2300      	movs	r3, #0
 8000f04:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000f06:	2305      	movs	r3, #5
 8000f08:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f0a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f0e:	4619      	mov	r1, r3
 8000f10:	4809      	ldr	r0, [pc, #36]	@ (8000f38 <MX_GPIO_Init+0x8e0>)
 8000f12:	f000 ff01 	bl	8001d18 <HAL_GPIO_Init>

}
 8000f16:	bf00      	nop
 8000f18:	3740      	adds	r7, #64	@ 0x40
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	40022000 	.word	0x40022000
 8000f24:	40020000 	.word	0x40020000
 8000f28:	40020800 	.word	0x40020800
 8000f2c:	40021c00 	.word	0x40021c00
 8000f30:	40021800 	.word	0x40021800
 8000f34:	40021400 	.word	0x40021400
 8000f38:	40020400 	.word	0x40020400
 8000f3c:	40020c00 	.word	0x40020c00

08000f40 <__io_putchar>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
void MX_FREERTOS_Init(void);
/* USER CODE BEGIN PFP */
int __io_putchar(int chr)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)&chr, 1, HAL_MAX_DELAY);
 8000f48:	1d39      	adds	r1, r7, #4
 8000f4a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f4e:	2201      	movs	r2, #1
 8000f50:	4803      	ldr	r0, [pc, #12]	@ (8000f60 <__io_putchar+0x20>)
 8000f52:	f002 fa01 	bl	8003358 <HAL_UART_Transmit>
	return chr;
 8000f56:	687b      	ldr	r3, [r7, #4]
}
 8000f58:	4618      	mov	r0, r3
 8000f5a:	3708      	adds	r7, #8
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	20000910 	.word	0x20000910

08000f64 <LedTask>:

void LedTask(void *pvParameters)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
	while (1)
	{
		if (led_period_ms == 0)
 8000f6c:	4b0f      	ldr	r3, [pc, #60]	@ (8000fac <LedTask+0x48>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d108      	bne.n	8000f86 <LedTask+0x22>
		{
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000f74:	2200      	movs	r2, #0
 8000f76:	2102      	movs	r1, #2
 8000f78:	480d      	ldr	r0, [pc, #52]	@ (8000fb0 <LedTask+0x4c>)
 8000f7a:	f001 f891 	bl	80020a0 <HAL_GPIO_WritePin>
			vTaskSuspend(NULL);
 8000f7e:	2000      	movs	r0, #0
 8000f80:	f003 ff0e 	bl	8004da0 <vTaskSuspend>
 8000f84:	e7f2      	b.n	8000f6c <LedTask+0x8>
		}
		else
		{
			HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000f86:	2102      	movs	r1, #2
 8000f88:	4809      	ldr	r0, [pc, #36]	@ (8000fb0 <LedTask+0x4c>)
 8000f8a:	f001 f8a2 	bl	80020d2 <HAL_GPIO_TogglePin>
			vTaskDelay(pdMS_TO_TICKS(led_period_ms / 2));
 8000f8e:	4b07      	ldr	r3, [pc, #28]	@ (8000fac <LedTask+0x48>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	085b      	lsrs	r3, r3, #1
 8000f94:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000f98:	fb02 f303 	mul.w	r3, r2, r3
 8000f9c:	4a05      	ldr	r2, [pc, #20]	@ (8000fb4 <LedTask+0x50>)
 8000f9e:	fba2 2303 	umull	r2, r3, r2, r3
 8000fa2:	099b      	lsrs	r3, r3, #6
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f003 fe59 	bl	8004c5c <vTaskDelay>
		if (led_period_ms == 0)
 8000faa:	e7df      	b.n	8000f6c <LedTask+0x8>
 8000fac:	200008fc 	.word	0x200008fc
 8000fb0:	40022000 	.word	0x40022000
 8000fb4:	10624dd3 	.word	0x10624dd3

08000fb8 <ma_fonction_test>:
		vTaskDelay(delay);
	}
}*/

int ma_fonction_test(h_shell_t * h_shell, int argc, char ** argv)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b088      	sub	sp, #32
 8000fbc:	af02      	add	r7, sp, #8
 8000fbe:	60f8      	str	r0, [r7, #12]
 8000fc0:	60b9      	str	r1, [r7, #8]
 8000fc2:	607a      	str	r2, [r7, #4]
	int size;
	size = snprintf(h_shell->print_buffer, BUFFER_SIZE, "Fonction test appelee avec %d argument(s)\r\n", argc);
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	f503 7041 	add.w	r0, r3, #772	@ 0x304
 8000fca:	68bb      	ldr	r3, [r7, #8]
 8000fcc:	4a1c      	ldr	r2, [pc, #112]	@ (8001040 <ma_fonction_test+0x88>)
 8000fce:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000fd2:	f005 fe6f 	bl	8006cb4 <sniprintf>
 8000fd6:	6138      	str	r0, [r7, #16]
	h_shell->drv.transmit(h_shell->print_buffer, size);
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	f8d3 3504 	ldr.w	r3, [r3, #1284]	@ 0x504
 8000fde:	68fa      	ldr	r2, [r7, #12]
 8000fe0:	f502 7241 	add.w	r2, r2, #772	@ 0x304
 8000fe4:	6939      	ldr	r1, [r7, #16]
 8000fe6:	b289      	uxth	r1, r1
 8000fe8:	4610      	mov	r0, r2
 8000fea:	4798      	blx	r3

	for(int i = 0; i < argc; i++) {
 8000fec:	2300      	movs	r3, #0
 8000fee:	617b      	str	r3, [r7, #20]
 8000ff0:	e01c      	b.n	800102c <ma_fonction_test+0x74>
		size = snprintf(h_shell->print_buffer, BUFFER_SIZE, "argv[%d] = %s\r\n", i, argv[i]);
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	f503 7041 	add.w	r0, r3, #772	@ 0x304
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	009b      	lsls	r3, r3, #2
 8000ffc:	687a      	ldr	r2, [r7, #4]
 8000ffe:	4413      	add	r3, r2
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	9300      	str	r3, [sp, #0]
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	4a0f      	ldr	r2, [pc, #60]	@ (8001044 <ma_fonction_test+0x8c>)
 8001008:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800100c:	f005 fe52 	bl	8006cb4 <sniprintf>
 8001010:	6138      	str	r0, [r7, #16]
		h_shell->drv.transmit(h_shell->print_buffer, size);
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	f8d3 3504 	ldr.w	r3, [r3, #1284]	@ 0x504
 8001018:	68fa      	ldr	r2, [r7, #12]
 800101a:	f502 7241 	add.w	r2, r2, #772	@ 0x304
 800101e:	6939      	ldr	r1, [r7, #16]
 8001020:	b289      	uxth	r1, r1
 8001022:	4610      	mov	r0, r2
 8001024:	4798      	blx	r3
	for(int i = 0; i < argc; i++) {
 8001026:	697b      	ldr	r3, [r7, #20]
 8001028:	3301      	adds	r3, #1
 800102a:	617b      	str	r3, [r7, #20]
 800102c:	697a      	ldr	r2, [r7, #20]
 800102e:	68bb      	ldr	r3, [r7, #8]
 8001030:	429a      	cmp	r2, r3
 8001032:	dbde      	blt.n	8000ff2 <ma_fonction_test+0x3a>
	}

	return 0;
 8001034:	2300      	movs	r3, #0
}
 8001036:	4618      	mov	r0, r3
 8001038:	3718      	adds	r7, #24
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	08007da8 	.word	0x08007da8
 8001044:	08007dd4 	.word	0x08007dd4

08001048 <shellTask>:

void shellTask(void * pvParameters)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
	shell_run(&mon_shell);
 8001050:	4803      	ldr	r0, [pc, #12]	@ (8001060 <shellTask+0x18>)
 8001052:	f005 fbe9 	bl	8006828 <shell_run>
}
 8001056:	bf00      	nop
 8001058:	3708      	adds	r7, #8
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	200003ec 	.word	0x200003ec

08001064 <led_shell_func>:

int led_shell_func(h_shell_t * h_shell, int argc, char ** argv)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b088      	sub	sp, #32
 8001068:	af02      	add	r7, sp, #8
 800106a:	60f8      	str	r0, [r7, #12]
 800106c:	60b9      	str	r1, [r7, #8]
 800106e:	607a      	str	r2, [r7, #4]
	if (argc < 2)
 8001070:	68bb      	ldr	r3, [r7, #8]
 8001072:	2b01      	cmp	r3, #1
 8001074:	dc16      	bgt.n	80010a4 <led_shell_func+0x40>
	{
		int len = snprintf(h_shell->print_buffer, BUFFER_SIZE, "Usage: l <periode_ms>\r\n");
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	f503 7341 	add.w	r3, r3, #772	@ 0x304
 800107c:	4a28      	ldr	r2, [pc, #160]	@ (8001120 <led_shell_func+0xbc>)
 800107e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001082:	4618      	mov	r0, r3
 8001084:	f005 fe16 	bl	8006cb4 <sniprintf>
 8001088:	6138      	str	r0, [r7, #16]
		h_shell->drv.transmit(h_shell->print_buffer, len);
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	f8d3 3504 	ldr.w	r3, [r3, #1284]	@ 0x504
 8001090:	68fa      	ldr	r2, [r7, #12]
 8001092:	f502 7241 	add.w	r2, r2, #772	@ 0x304
 8001096:	6939      	ldr	r1, [r7, #16]
 8001098:	b289      	uxth	r1, r1
 800109a:	4610      	mov	r0, r2
 800109c:	4798      	blx	r3
		return -1;
 800109e:	f04f 33ff 	mov.w	r3, #4294967295
 80010a2:	e039      	b.n	8001118 <led_shell_func+0xb4>
	}

	led_period_ms = atoi(argv[1]);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	3304      	adds	r3, #4
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	4618      	mov	r0, r3
 80010ac:	f005 fc48 	bl	8006940 <atoi>
 80010b0:	4603      	mov	r3, r0
 80010b2:	461a      	mov	r2, r3
 80010b4:	4b1b      	ldr	r3, [pc, #108]	@ (8001124 <led_shell_func+0xc0>)
 80010b6:	601a      	str	r2, [r3, #0]

	if (led_period_ms > 0)
 80010b8:	4b1a      	ldr	r3, [pc, #104]	@ (8001124 <led_shell_func+0xc0>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d00c      	beq.n	80010da <led_shell_func+0x76>
	{
		if (eTaskGetState(ledTaskHandle) == eSuspended)
 80010c0:	4b19      	ldr	r3, [pc, #100]	@ (8001128 <led_shell_func+0xc4>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4618      	mov	r0, r3
 80010c6:	f003 fe01 	bl	8004ccc <eTaskGetState>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b03      	cmp	r3, #3
 80010ce:	d104      	bne.n	80010da <led_shell_func+0x76>
		{
			vTaskResume(ledTaskHandle);
 80010d0:	4b15      	ldr	r3, [pc, #84]	@ (8001128 <led_shell_func+0xc4>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4618      	mov	r0, r3
 80010d6:	f003 ff2d 	bl	8004f34 <vTaskResume>
		}
	}

	int len = snprintf(h_shell->print_buffer, BUFFER_SIZE,
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	f503 7041 	add.w	r0, r3, #772	@ 0x304
			"Clignotement LED %s (periode = %lu ms)\r\n",
			led_period_ms == 0 ? "désactivé" : "activé", led_period_ms);
 80010e0:	4b10      	ldr	r3, [pc, #64]	@ (8001124 <led_shell_func+0xc0>)
 80010e2:	681b      	ldr	r3, [r3, #0]
	int len = snprintf(h_shell->print_buffer, BUFFER_SIZE,
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d101      	bne.n	80010ec <led_shell_func+0x88>
 80010e8:	4a10      	ldr	r2, [pc, #64]	@ (800112c <led_shell_func+0xc8>)
 80010ea:	e000      	b.n	80010ee <led_shell_func+0x8a>
 80010ec:	4a10      	ldr	r2, [pc, #64]	@ (8001130 <led_shell_func+0xcc>)
 80010ee:	4b0d      	ldr	r3, [pc, #52]	@ (8001124 <led_shell_func+0xc0>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	9300      	str	r3, [sp, #0]
 80010f4:	4613      	mov	r3, r2
 80010f6:	4a0f      	ldr	r2, [pc, #60]	@ (8001134 <led_shell_func+0xd0>)
 80010f8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80010fc:	f005 fdda 	bl	8006cb4 <sniprintf>
 8001100:	6178      	str	r0, [r7, #20]
	h_shell->drv.transmit(h_shell->print_buffer, len);
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	f8d3 3504 	ldr.w	r3, [r3, #1284]	@ 0x504
 8001108:	68fa      	ldr	r2, [r7, #12]
 800110a:	f502 7241 	add.w	r2, r2, #772	@ 0x304
 800110e:	6979      	ldr	r1, [r7, #20]
 8001110:	b289      	uxth	r1, r1
 8001112:	4610      	mov	r0, r2
 8001114:	4798      	blx	r3

	return 0;
 8001116:	2300      	movs	r3, #0
}
 8001118:	4618      	mov	r0, r3
 800111a:	3718      	adds	r7, #24
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}
 8001120:	08007de4 	.word	0x08007de4
 8001124:	200008fc 	.word	0x200008fc
 8001128:	200008f8 	.word	0x200008f8
 800112c:	08007dfc 	.word	0x08007dfc
 8001130:	08007e08 	.word	0x08007e08
 8001134:	08007e10 	.word	0x08007e10

08001138 <spamTask>:

void spamTask(void *pvParameters)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
	while (1)
	{
		if (spam_count > 0)
 8001140:	4b08      	ldr	r3, [pc, #32]	@ (8001164 <spamTask+0x2c>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d008      	beq.n	800115a <spamTask+0x22>
		{
			printf("%s\r\n", spam_msg);
 8001148:	4907      	ldr	r1, [pc, #28]	@ (8001168 <spamTask+0x30>)
 800114a:	4808      	ldr	r0, [pc, #32]	@ (800116c <spamTask+0x34>)
 800114c:	f005 fd42 	bl	8006bd4 <iprintf>
			spam_count--;
 8001150:	4b04      	ldr	r3, [pc, #16]	@ (8001164 <spamTask+0x2c>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	3b01      	subs	r3, #1
 8001156:	4a03      	ldr	r2, [pc, #12]	@ (8001164 <spamTask+0x2c>)
 8001158:	6013      	str	r3, [r2, #0]
		}
		vTaskDelay(pdMS_TO_TICKS(200));
 800115a:	20c8      	movs	r0, #200	@ 0xc8
 800115c:	f003 fd7e 	bl	8004c5c <vTaskDelay>
		if (spam_count > 0)
 8001160:	e7ee      	b.n	8001140 <spamTask+0x8>
 8001162:	bf00      	nop
 8001164:	20000900 	.word	0x20000900
 8001168:	20000000 	.word	0x20000000
 800116c:	08007e3c 	.word	0x08007e3c

08001170 <spam_shell_func>:
	}
}

int spam_shell_func(h_shell_t * h_shell, int argc, char ** argv)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b088      	sub	sp, #32
 8001174:	af02      	add	r7, sp, #8
 8001176:	60f8      	str	r0, [r7, #12]
 8001178:	60b9      	str	r1, [r7, #8]
 800117a:	607a      	str	r2, [r7, #4]
	if (argc < 3)
 800117c:	68bb      	ldr	r3, [r7, #8]
 800117e:	2b02      	cmp	r3, #2
 8001180:	dc16      	bgt.n	80011b0 <spam_shell_func+0x40>
	{
		int len = snprintf(h_shell->print_buffer, BUFFER_SIZE,
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	f503 7341 	add.w	r3, r3, #772	@ 0x304
 8001188:	4a22      	ldr	r2, [pc, #136]	@ (8001214 <spam_shell_func+0xa4>)
 800118a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800118e:	4618      	mov	r0, r3
 8001190:	f005 fd90 	bl	8006cb4 <sniprintf>
 8001194:	6138      	str	r0, [r7, #16]
				"Usage: s <message> <nombre>\r\n");
		h_shell->drv.transmit(h_shell->print_buffer, len);
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	f8d3 3504 	ldr.w	r3, [r3, #1284]	@ 0x504
 800119c:	68fa      	ldr	r2, [r7, #12]
 800119e:	f502 7241 	add.w	r2, r2, #772	@ 0x304
 80011a2:	6939      	ldr	r1, [r7, #16]
 80011a4:	b289      	uxth	r1, r1
 80011a6:	4610      	mov	r0, r2
 80011a8:	4798      	blx	r3
		return -1;
 80011aa:	f04f 33ff 	mov.w	r3, #4294967295
 80011ae:	e02d      	b.n	800120c <spam_shell_func+0x9c>
	}

	strncpy(spam_msg, argv[1], BUFFER_SIZE - 1);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	3304      	adds	r3, #4
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	22ff      	movs	r2, #255	@ 0xff
 80011b8:	4619      	mov	r1, r3
 80011ba:	4817      	ldr	r0, [pc, #92]	@ (8001218 <spam_shell_func+0xa8>)
 80011bc:	f005 fe90 	bl	8006ee0 <strncpy>
	spam_msg[BUFFER_SIZE - 1] = '\0';
 80011c0:	4b15      	ldr	r3, [pc, #84]	@ (8001218 <spam_shell_func+0xa8>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	f883 20ff 	strb.w	r2, [r3, #255]	@ 0xff
	spam_count = atoi(argv[2]);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	3308      	adds	r3, #8
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	4618      	mov	r0, r3
 80011d0:	f005 fbb6 	bl	8006940 <atoi>
 80011d4:	4603      	mov	r3, r0
 80011d6:	461a      	mov	r2, r3
 80011d8:	4b10      	ldr	r3, [pc, #64]	@ (800121c <spam_shell_func+0xac>)
 80011da:	601a      	str	r2, [r3, #0]

	int len = snprintf(h_shell->print_buffer, BUFFER_SIZE,
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	f503 7041 	add.w	r0, r3, #772	@ 0x304
 80011e2:	4b0e      	ldr	r3, [pc, #56]	@ (800121c <spam_shell_func+0xac>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	9300      	str	r3, [sp, #0]
 80011e8:	4b0b      	ldr	r3, [pc, #44]	@ (8001218 <spam_shell_func+0xa8>)
 80011ea:	4a0d      	ldr	r2, [pc, #52]	@ (8001220 <spam_shell_func+0xb0>)
 80011ec:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80011f0:	f005 fd60 	bl	8006cb4 <sniprintf>
 80011f4:	6178      	str	r0, [r7, #20]
			"Spam lancé : %s x %lu\r\n", spam_msg, spam_count);
	h_shell->drv.transmit(h_shell->print_buffer, len);
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	f8d3 3504 	ldr.w	r3, [r3, #1284]	@ 0x504
 80011fc:	68fa      	ldr	r2, [r7, #12]
 80011fe:	f502 7241 	add.w	r2, r2, #772	@ 0x304
 8001202:	6979      	ldr	r1, [r7, #20]
 8001204:	b289      	uxth	r1, r1
 8001206:	4610      	mov	r0, r2
 8001208:	4798      	blx	r3

	return 0;
 800120a:	2300      	movs	r3, #0
}
 800120c:	4618      	mov	r0, r3
 800120e:	3718      	adds	r7, #24
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	08007e44 	.word	0x08007e44
 8001218:	20000000 	.word	0x20000000
 800121c:	20000900 	.word	0x20000900
 8001220:	08007e64 	.word	0x08007e64

08001224 <vApplicationStackOverflowHook>:
        vTaskDelay(pdMS_TO_TICKS(1000));
    }
}*/

void vApplicationStackOverflowHook(TaskHandle_t xTask, char *pcTaskName)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b09e      	sub	sp, #120	@ 0x78
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
 800122c:	6039      	str	r1, [r7, #0]
    char msg[100];
    int size = snprintf(msg, sizeof(msg),
 800122e:	f107 0010 	add.w	r0, r7, #16
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	4a11      	ldr	r2, [pc, #68]	@ (800127c <vApplicationStackOverflowHook+0x58>)
 8001236:	2164      	movs	r1, #100	@ 0x64
 8001238:	f005 fd3c 	bl	8006cb4 <sniprintf>
 800123c:	6778      	str	r0, [r7, #116]	@ 0x74
        "\r\n[ERROR] Stack overflow detecté dans la tâche : %s\r\n", pcTaskName);
    HAL_UART_Transmit(&huart1, (uint8_t *)msg, size, HAL_MAX_DELAY);
 800123e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001240:	b29a      	uxth	r2, r3
 8001242:	f107 0110 	add.w	r1, r7, #16
 8001246:	f04f 33ff 	mov.w	r3, #4294967295
 800124a:	480d      	ldr	r0, [pc, #52]	@ (8001280 <vApplicationStackOverflowHook+0x5c>)
 800124c:	f002 f884 	bl	8003358 <HAL_UART_Transmit>

    HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8001250:	2201      	movs	r2, #1
 8001252:	2102      	movs	r1, #2
 8001254:	480b      	ldr	r0, [pc, #44]	@ (8001284 <vApplicationStackOverflowHook+0x60>)
 8001256:	f000 ff23 	bl	80020a0 <HAL_GPIO_WritePin>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800125a:	b672      	cpsid	i
}
 800125c:	bf00      	nop

    __disable_irq();

    while (1)
    {
        HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800125e:	2102      	movs	r1, #2
 8001260:	4808      	ldr	r0, [pc, #32]	@ (8001284 <vApplicationStackOverflowHook+0x60>)
 8001262:	f000 ff36 	bl	80020d2 <HAL_GPIO_TogglePin>
        for (volatile uint32_t i = 0; i < 1000000; i++);
 8001266:	2300      	movs	r3, #0
 8001268:	60fb      	str	r3, [r7, #12]
 800126a:	e002      	b.n	8001272 <vApplicationStackOverflowHook+0x4e>
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	3301      	adds	r3, #1
 8001270:	60fb      	str	r3, [r7, #12]
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	4a04      	ldr	r2, [pc, #16]	@ (8001288 <vApplicationStackOverflowHook+0x64>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d9f8      	bls.n	800126c <vApplicationStackOverflowHook+0x48>
        HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800127a:	e7f0      	b.n	800125e <vApplicationStackOverflowHook+0x3a>
 800127c:	08007e80 	.word	0x08007e80
 8001280:	20000910 	.word	0x20000910
 8001284:	40022000 	.word	0x40022000
 8001288:	000f423f 	.word	0x000f423f

0800128c <dummyTask>:
    (void)buffer;
    recursive_overflow();
}

void dummyTask(void *pvParameters)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	f5ad 6d7b 	sub.w	sp, sp, #4016	@ 0xfb0
 8001292:	af00      	add	r7, sp, #0
 8001294:	f507 637b 	add.w	r3, r7, #4016	@ 0xfb0
 8001298:	f6a3 73ac 	subw	r3, r3, #4012	@ 0xfac
 800129c:	6018      	str	r0, [r3, #0]
    volatile uint32_t dummy[1000];

    // Forcer l'utilisation réelle de la pile
    for (int i = 0; i < 1000; i++) {
 800129e:	2300      	movs	r3, #0
 80012a0:	f8c7 3fac 	str.w	r3, [r7, #4012]	@ 0xfac
 80012a4:	e00d      	b.n	80012c2 <dummyTask+0x36>
        ((volatile uint32_t*)dummy)[i] = i;
 80012a6:	f8d7 3fac 	ldr.w	r3, [r7, #4012]	@ 0xfac
 80012aa:	009b      	lsls	r3, r3, #2
 80012ac:	f107 020c 	add.w	r2, r7, #12
 80012b0:	4413      	add	r3, r2
 80012b2:	f8d7 2fac 	ldr.w	r2, [r7, #4012]	@ 0xfac
 80012b6:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 1000; i++) {
 80012b8:	f8d7 3fac 	ldr.w	r3, [r7, #4012]	@ 0xfac
 80012bc:	3301      	adds	r3, #1
 80012be:	f8c7 3fac 	str.w	r3, [r7, #4012]	@ 0xfac
 80012c2:	f8d7 3fac 	ldr.w	r3, [r7, #4012]	@ 0xfac
 80012c6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80012ca:	dbec      	blt.n	80012a6 <dummyTask+0x1a>
    }

    while (1) {
        vTaskDelay(pdMS_TO_TICKS(1000));
 80012cc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80012d0:	f003 fcc4 	bl	8004c5c <vTaskDelay>
 80012d4:	e7fa      	b.n	80012cc <dummyTask+0x40>
	...

080012d8 <overflow_shell_func>:
    }
}

int overflow_shell_func(h_shell_t * h_shell, int argc, char ** argv)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b088      	sub	sp, #32
 80012dc:	af02      	add	r7, sp, #8
 80012de:	60f8      	str	r0, [r7, #12]
 80012e0:	60b9      	str	r1, [r7, #8]
 80012e2:	607a      	str	r2, [r7, #4]
    int len = snprintf(h_shell->print_buffer, BUFFER_SIZE,
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	f503 7341 	add.w	r3, r3, #772	@ 0x304
 80012ea:	4a1b      	ldr	r2, [pc, #108]	@ (8001358 <overflow_shell_func+0x80>)
 80012ec:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80012f0:	4618      	mov	r0, r3
 80012f2:	f005 fcdf 	bl	8006cb4 <sniprintf>
 80012f6:	6178      	str	r0, [r7, #20]
                       "Déclenchement du dépassement de pile...\r\n");
    h_shell->drv.transmit(h_shell->print_buffer, len);
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	f8d3 3504 	ldr.w	r3, [r3, #1284]	@ 0x504
 80012fe:	68fa      	ldr	r2, [r7, #12]
 8001300:	f502 7241 	add.w	r2, r2, #772	@ 0x304
 8001304:	6979      	ldr	r1, [r7, #20]
 8001306:	b289      	uxth	r1, r1
 8001308:	4610      	mov	r0, r2
 800130a:	4798      	blx	r3

    if (xTaskCreate(dummyTask, "OverflowTask", 64, NULL, 2, NULL) != pdPASS) {
 800130c:	2300      	movs	r3, #0
 800130e:	9301      	str	r3, [sp, #4]
 8001310:	2302      	movs	r3, #2
 8001312:	9300      	str	r3, [sp, #0]
 8001314:	2300      	movs	r3, #0
 8001316:	2240      	movs	r2, #64	@ 0x40
 8001318:	4910      	ldr	r1, [pc, #64]	@ (800135c <overflow_shell_func+0x84>)
 800131a:	4811      	ldr	r0, [pc, #68]	@ (8001360 <overflow_shell_func+0x88>)
 800131c:	f003 fb56 	bl	80049cc <xTaskCreate>
 8001320:	4603      	mov	r3, r0
 8001322:	2b01      	cmp	r3, #1
 8001324:	d013      	beq.n	800134e <overflow_shell_func+0x76>
        int len = snprintf(h_shell->print_buffer, BUFFER_SIZE, "Erreur création OverflowTask\r\n");
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	f503 7341 	add.w	r3, r3, #772	@ 0x304
 800132c:	4a0d      	ldr	r2, [pc, #52]	@ (8001364 <overflow_shell_func+0x8c>)
 800132e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001332:	4618      	mov	r0, r3
 8001334:	f005 fcbe 	bl	8006cb4 <sniprintf>
 8001338:	6138      	str	r0, [r7, #16]
        h_shell->drv.transmit(h_shell->print_buffer, len);
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	f8d3 3504 	ldr.w	r3, [r3, #1284]	@ 0x504
 8001340:	68fa      	ldr	r2, [r7, #12]
 8001342:	f502 7241 	add.w	r2, r2, #772	@ 0x304
 8001346:	6939      	ldr	r1, [r7, #16]
 8001348:	b289      	uxth	r1, r1
 800134a:	4610      	mov	r0, r2
 800134c:	4798      	blx	r3
    }

    return 0; // Jamais atteint
 800134e:	2300      	movs	r3, #0
}
 8001350:	4618      	mov	r0, r3
 8001352:	3718      	adds	r7, #24
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}
 8001358:	08007eb8 	.word	0x08007eb8
 800135c:	08007ee4 	.word	0x08007ee4
 8001360:	0800128d 	.word	0x0800128d
 8001364:	08007ef4 	.word	0x08007ef4

08001368 <configureTimerForRunTimeStats>:

void configureTimerForRunTimeStats(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
    // Utiliser SysTick comme timer de stats
    // Pas très précis mais OK pour test
}
 800136c:	bf00      	nop
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr

08001376 <getRunTimeCounterValue>:

unsigned long getRunTimeCounterValue(void)
{
 8001376:	b580      	push	{r7, lr}
 8001378:	af00      	add	r7, sp, #0
    return HAL_GetTick();  // Renvoie le nombre de ms écoulées
 800137a:	f000 fbdb 	bl	8001b34 <HAL_GetTick>
 800137e:	4603      	mov	r3, r0
}
 8001380:	4618      	mov	r0, r3
 8001382:	bd80      	pop	{r7, pc}

08001384 <producerTask>:

void producerTask(void *pvParameters)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b082      	sub	sp, #8
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
    for (;;)
    {
        xSemaphoreGive(mySemaphore);
 800138c:	4b06      	ldr	r3, [pc, #24]	@ (80013a8 <producerTask+0x24>)
 800138e:	6818      	ldr	r0, [r3, #0]
 8001390:	2300      	movs	r3, #0
 8001392:	2200      	movs	r2, #0
 8001394:	2100      	movs	r1, #0
 8001396:	f002 ff65 	bl	8004264 <xQueueGenericSend>
        vTaskDelay(pdMS_TO_TICKS(500));
 800139a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800139e:	f003 fc5d 	bl	8004c5c <vTaskDelay>
        xSemaphoreGive(mySemaphore);
 80013a2:	bf00      	nop
 80013a4:	e7f2      	b.n	800138c <producerTask+0x8>
 80013a6:	bf00      	nop
 80013a8:	20000908 	.word	0x20000908

080013ac <consumerTask>:
    }
}

void consumerTask(void *pvParameters)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b082      	sub	sp, #8
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
    for (;;)
    {
        if (xSemaphoreTake(mySemaphore, portMAX_DELAY)) {
 80013b4:	4b06      	ldr	r3, [pc, #24]	@ (80013d0 <consumerTask+0x24>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f04f 31ff 	mov.w	r1, #4294967295
 80013bc:	4618      	mov	r0, r3
 80013be:	f003 f85b 	bl	8004478 <xQueueSemaphoreTake>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d0f5      	beq.n	80013b4 <consumerTask+0x8>
            printf("Sémaphore pris !\r\n");
 80013c8:	4802      	ldr	r0, [pc, #8]	@ (80013d4 <consumerTask+0x28>)
 80013ca:	f005 fc6b 	bl	8006ca4 <puts>
        if (xSemaphoreTake(mySemaphore, portMAX_DELAY)) {
 80013ce:	e7f1      	b.n	80013b4 <consumerTask+0x8>
 80013d0:	20000908 	.word	0x20000908
 80013d4:	08007f14 	.word	0x08007f14

080013d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013de:	f000 fb58 	bl	8001a92 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013e2:	f000 f8ff 	bl	80015e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013e6:	f7ff f937 	bl	8000658 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80013ea:	f000 fa77 	bl	80018dc <MX_USART1_UART_Init>
	configASSERT(pdPASS == ret);
	ret = xTaskCreate(task_bug, "Tache 2", STACK_SIZE, \
			(void *) TASK2_DELAY, TASK2_PRIORITY, NULL);
	configASSERT(pdPASS == ret);*/

	mon_shell.drv.receive = drv_uart1_receive;
 80013ee:	4b5d      	ldr	r3, [pc, #372]	@ (8001564 <main+0x18c>)
 80013f0:	4a5d      	ldr	r2, [pc, #372]	@ (8001568 <main+0x190>)
 80013f2:	f8c3 2508 	str.w	r2, [r3, #1288]	@ 0x508
	mon_shell.drv.transmit = drv_uart1_transmit;
 80013f6:	4b5b      	ldr	r3, [pc, #364]	@ (8001564 <main+0x18c>)
 80013f8:	4a5c      	ldr	r2, [pc, #368]	@ (800156c <main+0x194>)
 80013fa:	f8c3 2504 	str.w	r2, [r3, #1284]	@ 0x504

	shell_init(&mon_shell);
 80013fe:	4859      	ldr	r0, [pc, #356]	@ (8001564 <main+0x18c>)
 8001400:	f005 f922 	bl	8006648 <shell_init>
	if (shell_add(&mon_shell, 't', ma_fonction_test, "Fonction test utilisateur") != 0) {
 8001404:	4b5a      	ldr	r3, [pc, #360]	@ (8001570 <main+0x198>)
 8001406:	4a5b      	ldr	r2, [pc, #364]	@ (8001574 <main+0x19c>)
 8001408:	2174      	movs	r1, #116	@ 0x74
 800140a:	4856      	ldr	r0, [pc, #344]	@ (8001564 <main+0x18c>)
 800140c:	f005 f960 	bl	80066d0 <shell_add>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d004      	beq.n	8001420 <main+0x48>
	    printf("Erreur ajout commande shell t\r\n");
 8001416:	4858      	ldr	r0, [pc, #352]	@ (8001578 <main+0x1a0>)
 8001418:	f005 fc44 	bl	8006ca4 <puts>
	    Error_Handler();
 800141c:	f000 f952 	bl	80016c4 <Error_Handler>
	}
	if (xTaskCreate(shellTask, "Shell", 512, NULL, 1, NULL) != pdPASS) {
 8001420:	2300      	movs	r3, #0
 8001422:	9301      	str	r3, [sp, #4]
 8001424:	2301      	movs	r3, #1
 8001426:	9300      	str	r3, [sp, #0]
 8001428:	2300      	movs	r3, #0
 800142a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800142e:	4953      	ldr	r1, [pc, #332]	@ (800157c <main+0x1a4>)
 8001430:	4853      	ldr	r0, [pc, #332]	@ (8001580 <main+0x1a8>)
 8001432:	f003 facb 	bl	80049cc <xTaskCreate>
 8001436:	4603      	mov	r3, r0
 8001438:	2b01      	cmp	r3, #1
 800143a:	d004      	beq.n	8001446 <main+0x6e>
	    	printf("Erreur création tâche Shell\r\n");
 800143c:	4851      	ldr	r0, [pc, #324]	@ (8001584 <main+0x1ac>)
 800143e:	f005 fc31 	bl	8006ca4 <puts>
	    	Error_Handler();
 8001442:	f000 f93f 	bl	80016c4 <Error_Handler>
		}
	if (xTaskCreate(LedTask, "LED Task", 128, NULL, 1, &ledTaskHandle) != pdPASS) {
 8001446:	4b50      	ldr	r3, [pc, #320]	@ (8001588 <main+0x1b0>)
 8001448:	9301      	str	r3, [sp, #4]
 800144a:	2301      	movs	r3, #1
 800144c:	9300      	str	r3, [sp, #0]
 800144e:	2300      	movs	r3, #0
 8001450:	2280      	movs	r2, #128	@ 0x80
 8001452:	494e      	ldr	r1, [pc, #312]	@ (800158c <main+0x1b4>)
 8001454:	484e      	ldr	r0, [pc, #312]	@ (8001590 <main+0x1b8>)
 8001456:	f003 fab9 	bl	80049cc <xTaskCreate>
 800145a:	4603      	mov	r3, r0
 800145c:	2b01      	cmp	r3, #1
 800145e:	d004      	beq.n	800146a <main+0x92>
	    	printf("Erreur création tâche LED Task\r\n");
 8001460:	484c      	ldr	r0, [pc, #304]	@ (8001594 <main+0x1bc>)
 8001462:	f005 fc1f 	bl	8006ca4 <puts>
	    	Error_Handler();
 8001466:	f000 f92d 	bl	80016c4 <Error_Handler>
		}
	if (shell_add(&mon_shell, 'l', led_shell_func, "Contrôle de la LED") != 0) {
 800146a:	4b4b      	ldr	r3, [pc, #300]	@ (8001598 <main+0x1c0>)
 800146c:	4a4b      	ldr	r2, [pc, #300]	@ (800159c <main+0x1c4>)
 800146e:	216c      	movs	r1, #108	@ 0x6c
 8001470:	483c      	ldr	r0, [pc, #240]	@ (8001564 <main+0x18c>)
 8001472:	f005 f92d 	bl	80066d0 <shell_add>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d004      	beq.n	8001486 <main+0xae>
	    printf("Erreur ajout commande shell t\r\n");
 800147c:	483e      	ldr	r0, [pc, #248]	@ (8001578 <main+0x1a0>)
 800147e:	f005 fc11 	bl	8006ca4 <puts>
	    Error_Handler();
 8001482:	f000 f91f 	bl	80016c4 <Error_Handler>
	}

	if (xTaskCreate(spamTask, "Spam", 256, NULL, 1, &spamTaskHandle) != pdPASS) {
 8001486:	4b46      	ldr	r3, [pc, #280]	@ (80015a0 <main+0x1c8>)
 8001488:	9301      	str	r3, [sp, #4]
 800148a:	2301      	movs	r3, #1
 800148c:	9300      	str	r3, [sp, #0]
 800148e:	2300      	movs	r3, #0
 8001490:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001494:	4943      	ldr	r1, [pc, #268]	@ (80015a4 <main+0x1cc>)
 8001496:	4844      	ldr	r0, [pc, #272]	@ (80015a8 <main+0x1d0>)
 8001498:	f003 fa98 	bl	80049cc <xTaskCreate>
 800149c:	4603      	mov	r3, r0
 800149e:	2b01      	cmp	r3, #1
 80014a0:	d004      	beq.n	80014ac <main+0xd4>
	    	printf("Erreur création tâche Spam\r\n");
 80014a2:	4842      	ldr	r0, [pc, #264]	@ (80015ac <main+0x1d4>)
 80014a4:	f005 fbfe 	bl	8006ca4 <puts>
	    	Error_Handler();
 80014a8:	f000 f90c 	bl	80016c4 <Error_Handler>
		}
	if (shell_add(&mon_shell, 's', spam_shell_func, "Affiche un message plusieurs fois") != 0) {
 80014ac:	4b40      	ldr	r3, [pc, #256]	@ (80015b0 <main+0x1d8>)
 80014ae:	4a41      	ldr	r2, [pc, #260]	@ (80015b4 <main+0x1dc>)
 80014b0:	2173      	movs	r1, #115	@ 0x73
 80014b2:	482c      	ldr	r0, [pc, #176]	@ (8001564 <main+0x18c>)
 80014b4:	f005 f90c 	bl	80066d0 <shell_add>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d004      	beq.n	80014c8 <main+0xf0>
	    printf("Erreur ajout commande shell t\r\n");
 80014be:	482e      	ldr	r0, [pc, #184]	@ (8001578 <main+0x1a0>)
 80014c0:	f005 fbf0 	bl	8006ca4 <puts>
	    Error_Handler();
 80014c4:	f000 f8fe 	bl	80016c4 <Error_Handler>
	        printf("Erreur creation tache dummy %d\r\n", i);
	        Error_Handler();
	    }
	}*/

	if (shell_add(&mon_shell, 'o', overflow_shell_func, "Déclenche un overflow") != 0) {
 80014c8:	4b3b      	ldr	r3, [pc, #236]	@ (80015b8 <main+0x1e0>)
 80014ca:	4a3c      	ldr	r2, [pc, #240]	@ (80015bc <main+0x1e4>)
 80014cc:	216f      	movs	r1, #111	@ 0x6f
 80014ce:	4825      	ldr	r0, [pc, #148]	@ (8001564 <main+0x18c>)
 80014d0:	f005 f8fe 	bl	80066d0 <shell_add>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d004      	beq.n	80014e4 <main+0x10c>
	    printf("Erreur ajout commande shell o\r\n");
 80014da:	4839      	ldr	r0, [pc, #228]	@ (80015c0 <main+0x1e8>)
 80014dc:	f005 fbe2 	bl	8006ca4 <puts>
	    Error_Handler();
 80014e0:	f000 f8f0 	bl	80016c4 <Error_Handler>
	}

	mySemaphore = xSemaphoreCreateBinary();
 80014e4:	2203      	movs	r2, #3
 80014e6:	2100      	movs	r1, #0
 80014e8:	2001      	movs	r0, #1
 80014ea:	f002 fe55 	bl	8004198 <xQueueGenericCreate>
 80014ee:	4603      	mov	r3, r0
 80014f0:	4a34      	ldr	r2, [pc, #208]	@ (80015c4 <main+0x1ec>)
 80014f2:	6013      	str	r3, [r2, #0]
	xTaskCreate(producerTask, "Producer", 128, NULL, 1, NULL);
 80014f4:	2300      	movs	r3, #0
 80014f6:	9301      	str	r3, [sp, #4]
 80014f8:	2301      	movs	r3, #1
 80014fa:	9300      	str	r3, [sp, #0]
 80014fc:	2300      	movs	r3, #0
 80014fe:	2280      	movs	r2, #128	@ 0x80
 8001500:	4931      	ldr	r1, [pc, #196]	@ (80015c8 <main+0x1f0>)
 8001502:	4832      	ldr	r0, [pc, #200]	@ (80015cc <main+0x1f4>)
 8001504:	f003 fa62 	bl	80049cc <xTaskCreate>
	xTaskCreate(consumerTask, "Consumer", 128, NULL, 1, NULL);
 8001508:	2300      	movs	r3, #0
 800150a:	9301      	str	r3, [sp, #4]
 800150c:	2301      	movs	r3, #1
 800150e:	9300      	str	r3, [sp, #0]
 8001510:	2300      	movs	r3, #0
 8001512:	2280      	movs	r2, #128	@ 0x80
 8001514:	492e      	ldr	r1, [pc, #184]	@ (80015d0 <main+0x1f8>)
 8001516:	482f      	ldr	r0, [pc, #188]	@ (80015d4 <main+0x1fc>)
 8001518:	f003 fa58 	bl	80049cc <xTaskCreate>

	vQueueAddToRegistry(mySemaphore, "MySemaphore");
 800151c:	4b29      	ldr	r3, [pc, #164]	@ (80015c4 <main+0x1ec>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	492d      	ldr	r1, [pc, #180]	@ (80015d8 <main+0x200>)
 8001522:	4618      	mov	r0, r3
 8001524:	f003 f9c2 	bl	80048ac <vQueueAddToRegistry>

	vTaskStartScheduler();
 8001528:	f003 fd64 	bl	8004ff4 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 800152c:	f7ff f870 	bl	8000610 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001530:	f002 fcaa 	bl	8003e88 <osKernelStart>
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		//HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
		//HAL_Delay(100);
		if (HAL_GPIO_ReadPin(BUTTON_GPIO_Port, BUTTON_Pin) == GPIO_PIN_SET) {
 8001534:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001538:	4828      	ldr	r0, [pc, #160]	@ (80015dc <main+0x204>)
 800153a:	f000 fd99 	bl	8002070 <HAL_GPIO_ReadPin>
 800153e:	4603      	mov	r3, r0
 8001540:	2b01      	cmp	r3, #1
 8001542:	d105      	bne.n	8001550 <main+0x178>
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);  // Allume la LED
 8001544:	2201      	movs	r2, #1
 8001546:	2102      	movs	r1, #2
 8001548:	4824      	ldr	r0, [pc, #144]	@ (80015dc <main+0x204>)
 800154a:	f000 fda9 	bl	80020a0 <HAL_GPIO_WritePin>
 800154e:	e004      	b.n	800155a <main+0x182>
		} else {
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);  // Éteint la LED
 8001550:	2200      	movs	r2, #0
 8001552:	2102      	movs	r1, #2
 8001554:	4821      	ldr	r0, [pc, #132]	@ (80015dc <main+0x204>)
 8001556:	f000 fda3 	bl	80020a0 <HAL_GPIO_WritePin>
		}
		printf("Test printf bien\r\n");
 800155a:	4821      	ldr	r0, [pc, #132]	@ (80015e0 <main+0x208>)
 800155c:	f005 fba2 	bl	8006ca4 <puts>
		if (HAL_GPIO_ReadPin(BUTTON_GPIO_Port, BUTTON_Pin) == GPIO_PIN_SET) {
 8001560:	e7e8      	b.n	8001534 <main+0x15c>
 8001562:	bf00      	nop
 8001564:	200003ec 	.word	0x200003ec
 8001568:	08006501 	.word	0x08006501
 800156c:	08006529 	.word	0x08006529
 8001570:	08007f28 	.word	0x08007f28
 8001574:	08000fb9 	.word	0x08000fb9
 8001578:	08007f44 	.word	0x08007f44
 800157c:	08007f64 	.word	0x08007f64
 8001580:	08001049 	.word	0x08001049
 8001584:	08007f6c 	.word	0x08007f6c
 8001588:	200008f8 	.word	0x200008f8
 800158c:	08007f8c 	.word	0x08007f8c
 8001590:	08000f65 	.word	0x08000f65
 8001594:	08007f98 	.word	0x08007f98
 8001598:	08007fbc 	.word	0x08007fbc
 800159c:	08001065 	.word	0x08001065
 80015a0:	20000904 	.word	0x20000904
 80015a4:	08007fd0 	.word	0x08007fd0
 80015a8:	08001139 	.word	0x08001139
 80015ac:	08007fd8 	.word	0x08007fd8
 80015b0:	08007ff8 	.word	0x08007ff8
 80015b4:	08001171 	.word	0x08001171
 80015b8:	0800801c 	.word	0x0800801c
 80015bc:	080012d9 	.word	0x080012d9
 80015c0:	08008034 	.word	0x08008034
 80015c4:	20000908 	.word	0x20000908
 80015c8:	08008054 	.word	0x08008054
 80015cc:	08001385 	.word	0x08001385
 80015d0:	08008060 	.word	0x08008060
 80015d4:	080013ad 	.word	0x080013ad
 80015d8:	0800806c 	.word	0x0800806c
 80015dc:	40022000 	.word	0x40022000
 80015e0:	08008078 	.word	0x08008078

080015e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b094      	sub	sp, #80	@ 0x50
 80015e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015ea:	f107 0320 	add.w	r3, r7, #32
 80015ee:	2230      	movs	r2, #48	@ 0x30
 80015f0:	2100      	movs	r1, #0
 80015f2:	4618      	mov	r0, r3
 80015f4:	f005 fc6c 	bl	8006ed0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015f8:	f107 030c 	add.w	r3, r7, #12
 80015fc:	2200      	movs	r2, #0
 80015fe:	601a      	str	r2, [r3, #0]
 8001600:	605a      	str	r2, [r3, #4]
 8001602:	609a      	str	r2, [r3, #8]
 8001604:	60da      	str	r2, [r3, #12]
 8001606:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001608:	f000 fd7e 	bl	8002108 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800160c:	4b2b      	ldr	r3, [pc, #172]	@ (80016bc <SystemClock_Config+0xd8>)
 800160e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001610:	4a2a      	ldr	r2, [pc, #168]	@ (80016bc <SystemClock_Config+0xd8>)
 8001612:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001616:	6413      	str	r3, [r2, #64]	@ 0x40
 8001618:	4b28      	ldr	r3, [pc, #160]	@ (80016bc <SystemClock_Config+0xd8>)
 800161a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800161c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001620:	60bb      	str	r3, [r7, #8]
 8001622:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001624:	4b26      	ldr	r3, [pc, #152]	@ (80016c0 <SystemClock_Config+0xdc>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a25      	ldr	r2, [pc, #148]	@ (80016c0 <SystemClock_Config+0xdc>)
 800162a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800162e:	6013      	str	r3, [r2, #0]
 8001630:	4b23      	ldr	r3, [pc, #140]	@ (80016c0 <SystemClock_Config+0xdc>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001638:	607b      	str	r3, [r7, #4]
 800163a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800163c:	2301      	movs	r3, #1
 800163e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001640:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001644:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001646:	2302      	movs	r3, #2
 8001648:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800164a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800164e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001650:	2319      	movs	r3, #25
 8001652:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 432;
 8001654:	f44f 73d8 	mov.w	r3, #432	@ 0x1b0
 8001658:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800165a:	2302      	movs	r3, #2
 800165c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800165e:	2302      	movs	r3, #2
 8001660:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001662:	f107 0320 	add.w	r3, r7, #32
 8001666:	4618      	mov	r0, r3
 8001668:	f000 fdae 	bl	80021c8 <HAL_RCC_OscConfig>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d001      	beq.n	8001676 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001672:	f000 f827 	bl	80016c4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001676:	f000 fd57 	bl	8002128 <HAL_PWREx_EnableOverDrive>
 800167a:	4603      	mov	r3, r0
 800167c:	2b00      	cmp	r3, #0
 800167e:	d001      	beq.n	8001684 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8001680:	f000 f820 	bl	80016c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001684:	230f      	movs	r3, #15
 8001686:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001688:	2302      	movs	r3, #2
 800168a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800168c:	2300      	movs	r3, #0
 800168e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001690:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001694:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001696:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800169a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800169c:	f107 030c 	add.w	r3, r7, #12
 80016a0:	2107      	movs	r1, #7
 80016a2:	4618      	mov	r0, r3
 80016a4:	f001 f834 	bl	8002710 <HAL_RCC_ClockConfig>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d001      	beq.n	80016b2 <SystemClock_Config+0xce>
  {
    Error_Handler();
 80016ae:	f000 f809 	bl	80016c4 <Error_Handler>
  }
}
 80016b2:	bf00      	nop
 80016b4:	3750      	adds	r7, #80	@ 0x50
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	40023800 	.word	0x40023800
 80016c0:	40007000 	.word	0x40007000

080016c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80016c8:	b672      	cpsid	i
}
 80016ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80016cc:	bf00      	nop
 80016ce:	e7fd      	b.n	80016cc <Error_Handler+0x8>

080016d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b082      	sub	sp, #8
 80016d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80016d6:	4b11      	ldr	r3, [pc, #68]	@ (800171c <HAL_MspInit+0x4c>)
 80016d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016da:	4a10      	ldr	r2, [pc, #64]	@ (800171c <HAL_MspInit+0x4c>)
 80016dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80016e2:	4b0e      	ldr	r3, [pc, #56]	@ (800171c <HAL_MspInit+0x4c>)
 80016e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016ea:	607b      	str	r3, [r7, #4]
 80016ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016ee:	4b0b      	ldr	r3, [pc, #44]	@ (800171c <HAL_MspInit+0x4c>)
 80016f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016f2:	4a0a      	ldr	r2, [pc, #40]	@ (800171c <HAL_MspInit+0x4c>)
 80016f4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80016f8:	6453      	str	r3, [r2, #68]	@ 0x44
 80016fa:	4b08      	ldr	r3, [pc, #32]	@ (800171c <HAL_MspInit+0x4c>)
 80016fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001702:	603b      	str	r3, [r7, #0]
 8001704:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001706:	2200      	movs	r2, #0
 8001708:	210f      	movs	r1, #15
 800170a:	f06f 0001 	mvn.w	r0, #1
 800170e:	f000 fada 	bl	8001cc6 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001712:	bf00      	nop
 8001714:	3708      	adds	r7, #8
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	40023800 	.word	0x40023800

08001720 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001724:	bf00      	nop
 8001726:	e7fd      	b.n	8001724 <NMI_Handler+0x4>

08001728 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800172c:	bf00      	nop
 800172e:	e7fd      	b.n	800172c <HardFault_Handler+0x4>

08001730 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001734:	bf00      	nop
 8001736:	e7fd      	b.n	8001734 <MemManage_Handler+0x4>

08001738 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800173c:	bf00      	nop
 800173e:	e7fd      	b.n	800173c <BusFault_Handler+0x4>

08001740 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001744:	bf00      	nop
 8001746:	e7fd      	b.n	8001744 <UsageFault_Handler+0x4>

08001748 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800174c:	bf00      	nop
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr

08001756 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001756:	b580      	push	{r7, lr}
 8001758:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800175a:	f000 f9d7 	bl	8001b0c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800175e:	f004 f8ab 	bl	80058b8 <xTaskGetSchedulerState>
 8001762:	4603      	mov	r3, r0
 8001764:	2b01      	cmp	r3, #1
 8001766:	d001      	beq.n	800176c <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001768:	f004 fc8e 	bl	8006088 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800176c:	bf00      	nop
 800176e:	bd80      	pop	{r7, pc}

08001770 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b086      	sub	sp, #24
 8001774:	af00      	add	r7, sp, #0
 8001776:	60f8      	str	r0, [r7, #12]
 8001778:	60b9      	str	r1, [r7, #8]
 800177a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800177c:	2300      	movs	r3, #0
 800177e:	617b      	str	r3, [r7, #20]
 8001780:	e00a      	b.n	8001798 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001782:	f3af 8000 	nop.w
 8001786:	4601      	mov	r1, r0
 8001788:	68bb      	ldr	r3, [r7, #8]
 800178a:	1c5a      	adds	r2, r3, #1
 800178c:	60ba      	str	r2, [r7, #8]
 800178e:	b2ca      	uxtb	r2, r1
 8001790:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001792:	697b      	ldr	r3, [r7, #20]
 8001794:	3301      	adds	r3, #1
 8001796:	617b      	str	r3, [r7, #20]
 8001798:	697a      	ldr	r2, [r7, #20]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	429a      	cmp	r2, r3
 800179e:	dbf0      	blt.n	8001782 <_read+0x12>
  }

  return len;
 80017a0:	687b      	ldr	r3, [r7, #4]
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	3718      	adds	r7, #24
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}

080017aa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80017aa:	b580      	push	{r7, lr}
 80017ac:	b086      	sub	sp, #24
 80017ae:	af00      	add	r7, sp, #0
 80017b0:	60f8      	str	r0, [r7, #12]
 80017b2:	60b9      	str	r1, [r7, #8]
 80017b4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017b6:	2300      	movs	r3, #0
 80017b8:	617b      	str	r3, [r7, #20]
 80017ba:	e009      	b.n	80017d0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80017bc:	68bb      	ldr	r3, [r7, #8]
 80017be:	1c5a      	adds	r2, r3, #1
 80017c0:	60ba      	str	r2, [r7, #8]
 80017c2:	781b      	ldrb	r3, [r3, #0]
 80017c4:	4618      	mov	r0, r3
 80017c6:	f7ff fbbb 	bl	8000f40 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017ca:	697b      	ldr	r3, [r7, #20]
 80017cc:	3301      	adds	r3, #1
 80017ce:	617b      	str	r3, [r7, #20]
 80017d0:	697a      	ldr	r2, [r7, #20]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	429a      	cmp	r2, r3
 80017d6:	dbf1      	blt.n	80017bc <_write+0x12>
  }
  return len;
 80017d8:	687b      	ldr	r3, [r7, #4]
}
 80017da:	4618      	mov	r0, r3
 80017dc:	3718      	adds	r7, #24
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}

080017e2 <_close>:

int _close(int file)
{
 80017e2:	b480      	push	{r7}
 80017e4:	b083      	sub	sp, #12
 80017e6:	af00      	add	r7, sp, #0
 80017e8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80017ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	370c      	adds	r7, #12
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr

080017fa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80017fa:	b480      	push	{r7}
 80017fc:	b083      	sub	sp, #12
 80017fe:	af00      	add	r7, sp, #0
 8001800:	6078      	str	r0, [r7, #4]
 8001802:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800180a:	605a      	str	r2, [r3, #4]
  return 0;
 800180c:	2300      	movs	r3, #0
}
 800180e:	4618      	mov	r0, r3
 8001810:	370c      	adds	r7, #12
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr

0800181a <_isatty>:

int _isatty(int file)
{
 800181a:	b480      	push	{r7}
 800181c:	b083      	sub	sp, #12
 800181e:	af00      	add	r7, sp, #0
 8001820:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001822:	2301      	movs	r3, #1
}
 8001824:	4618      	mov	r0, r3
 8001826:	370c      	adds	r7, #12
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr

08001830 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001830:	b480      	push	{r7}
 8001832:	b085      	sub	sp, #20
 8001834:	af00      	add	r7, sp, #0
 8001836:	60f8      	str	r0, [r7, #12]
 8001838:	60b9      	str	r1, [r7, #8]
 800183a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800183c:	2300      	movs	r3, #0
}
 800183e:	4618      	mov	r0, r3
 8001840:	3714      	adds	r7, #20
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr
	...

0800184c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b086      	sub	sp, #24
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001854:	4a14      	ldr	r2, [pc, #80]	@ (80018a8 <_sbrk+0x5c>)
 8001856:	4b15      	ldr	r3, [pc, #84]	@ (80018ac <_sbrk+0x60>)
 8001858:	1ad3      	subs	r3, r2, r3
 800185a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001860:	4b13      	ldr	r3, [pc, #76]	@ (80018b0 <_sbrk+0x64>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d102      	bne.n	800186e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001868:	4b11      	ldr	r3, [pc, #68]	@ (80018b0 <_sbrk+0x64>)
 800186a:	4a12      	ldr	r2, [pc, #72]	@ (80018b4 <_sbrk+0x68>)
 800186c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800186e:	4b10      	ldr	r3, [pc, #64]	@ (80018b0 <_sbrk+0x64>)
 8001870:	681a      	ldr	r2, [r3, #0]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	4413      	add	r3, r2
 8001876:	693a      	ldr	r2, [r7, #16]
 8001878:	429a      	cmp	r2, r3
 800187a:	d207      	bcs.n	800188c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800187c:	f005 fb8a 	bl	8006f94 <__errno>
 8001880:	4603      	mov	r3, r0
 8001882:	220c      	movs	r2, #12
 8001884:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001886:	f04f 33ff 	mov.w	r3, #4294967295
 800188a:	e009      	b.n	80018a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800188c:	4b08      	ldr	r3, [pc, #32]	@ (80018b0 <_sbrk+0x64>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001892:	4b07      	ldr	r3, [pc, #28]	@ (80018b0 <_sbrk+0x64>)
 8001894:	681a      	ldr	r2, [r3, #0]
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	4413      	add	r3, r2
 800189a:	4a05      	ldr	r2, [pc, #20]	@ (80018b0 <_sbrk+0x64>)
 800189c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800189e:	68fb      	ldr	r3, [r7, #12]
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	3718      	adds	r7, #24
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	20050000 	.word	0x20050000
 80018ac:	00000400 	.word	0x00000400
 80018b0:	2000090c 	.word	0x2000090c
 80018b4:	20004880 	.word	0x20004880

080018b8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018bc:	4b06      	ldr	r3, [pc, #24]	@ (80018d8 <SystemInit+0x20>)
 80018be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80018c2:	4a05      	ldr	r2, [pc, #20]	@ (80018d8 <SystemInit+0x20>)
 80018c4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80018c8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018cc:	bf00      	nop
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr
 80018d6:	bf00      	nop
 80018d8:	e000ed00 	.word	0xe000ed00

080018dc <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80018e0:	4b14      	ldr	r3, [pc, #80]	@ (8001934 <MX_USART1_UART_Init+0x58>)
 80018e2:	4a15      	ldr	r2, [pc, #84]	@ (8001938 <MX_USART1_UART_Init+0x5c>)
 80018e4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80018e6:	4b13      	ldr	r3, [pc, #76]	@ (8001934 <MX_USART1_UART_Init+0x58>)
 80018e8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80018ec:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80018ee:	4b11      	ldr	r3, [pc, #68]	@ (8001934 <MX_USART1_UART_Init+0x58>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80018f4:	4b0f      	ldr	r3, [pc, #60]	@ (8001934 <MX_USART1_UART_Init+0x58>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80018fa:	4b0e      	ldr	r3, [pc, #56]	@ (8001934 <MX_USART1_UART_Init+0x58>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001900:	4b0c      	ldr	r3, [pc, #48]	@ (8001934 <MX_USART1_UART_Init+0x58>)
 8001902:	220c      	movs	r2, #12
 8001904:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001906:	4b0b      	ldr	r3, [pc, #44]	@ (8001934 <MX_USART1_UART_Init+0x58>)
 8001908:	2200      	movs	r2, #0
 800190a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800190c:	4b09      	ldr	r3, [pc, #36]	@ (8001934 <MX_USART1_UART_Init+0x58>)
 800190e:	2200      	movs	r2, #0
 8001910:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001912:	4b08      	ldr	r3, [pc, #32]	@ (8001934 <MX_USART1_UART_Init+0x58>)
 8001914:	2200      	movs	r2, #0
 8001916:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001918:	4b06      	ldr	r3, [pc, #24]	@ (8001934 <MX_USART1_UART_Init+0x58>)
 800191a:	2200      	movs	r2, #0
 800191c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800191e:	4805      	ldr	r0, [pc, #20]	@ (8001934 <MX_USART1_UART_Init+0x58>)
 8001920:	f001 fccc 	bl	80032bc <HAL_UART_Init>
 8001924:	4603      	mov	r3, r0
 8001926:	2b00      	cmp	r3, #0
 8001928:	d001      	beq.n	800192e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800192a:	f7ff fecb 	bl	80016c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800192e:	bf00      	nop
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	20000910 	.word	0x20000910
 8001938:	40011000 	.word	0x40011000

0800193c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b0ac      	sub	sp, #176	@ 0xb0
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001944:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001948:	2200      	movs	r2, #0
 800194a:	601a      	str	r2, [r3, #0]
 800194c:	605a      	str	r2, [r3, #4]
 800194e:	609a      	str	r2, [r3, #8]
 8001950:	60da      	str	r2, [r3, #12]
 8001952:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001954:	f107 0318 	add.w	r3, r7, #24
 8001958:	2284      	movs	r2, #132	@ 0x84
 800195a:	2100      	movs	r1, #0
 800195c:	4618      	mov	r0, r3
 800195e:	f005 fab7 	bl	8006ed0 <memset>
  if(uartHandle->Instance==USART1)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4a32      	ldr	r2, [pc, #200]	@ (8001a30 <HAL_UART_MspInit+0xf4>)
 8001968:	4293      	cmp	r3, r2
 800196a:	d15c      	bne.n	8001a26 <HAL_UART_MspInit+0xea>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800196c:	2340      	movs	r3, #64	@ 0x40
 800196e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001970:	2300      	movs	r3, #0
 8001972:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001974:	f107 0318 	add.w	r3, r7, #24
 8001978:	4618      	mov	r0, r3
 800197a:	f001 f8af 	bl	8002adc <HAL_RCCEx_PeriphCLKConfig>
 800197e:	4603      	mov	r3, r0
 8001980:	2b00      	cmp	r3, #0
 8001982:	d001      	beq.n	8001988 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001984:	f7ff fe9e 	bl	80016c4 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001988:	4b2a      	ldr	r3, [pc, #168]	@ (8001a34 <HAL_UART_MspInit+0xf8>)
 800198a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800198c:	4a29      	ldr	r2, [pc, #164]	@ (8001a34 <HAL_UART_MspInit+0xf8>)
 800198e:	f043 0310 	orr.w	r3, r3, #16
 8001992:	6453      	str	r3, [r2, #68]	@ 0x44
 8001994:	4b27      	ldr	r3, [pc, #156]	@ (8001a34 <HAL_UART_MspInit+0xf8>)
 8001996:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001998:	f003 0310 	and.w	r3, r3, #16
 800199c:	617b      	str	r3, [r7, #20]
 800199e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019a0:	4b24      	ldr	r3, [pc, #144]	@ (8001a34 <HAL_UART_MspInit+0xf8>)
 80019a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019a4:	4a23      	ldr	r2, [pc, #140]	@ (8001a34 <HAL_UART_MspInit+0xf8>)
 80019a6:	f043 0302 	orr.w	r3, r3, #2
 80019aa:	6313      	str	r3, [r2, #48]	@ 0x30
 80019ac:	4b21      	ldr	r3, [pc, #132]	@ (8001a34 <HAL_UART_MspInit+0xf8>)
 80019ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019b0:	f003 0302 	and.w	r3, r3, #2
 80019b4:	613b      	str	r3, [r7, #16]
 80019b6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019b8:	4b1e      	ldr	r3, [pc, #120]	@ (8001a34 <HAL_UART_MspInit+0xf8>)
 80019ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019bc:	4a1d      	ldr	r2, [pc, #116]	@ (8001a34 <HAL_UART_MspInit+0xf8>)
 80019be:	f043 0301 	orr.w	r3, r3, #1
 80019c2:	6313      	str	r3, [r2, #48]	@ 0x30
 80019c4:	4b1b      	ldr	r3, [pc, #108]	@ (8001a34 <HAL_UART_MspInit+0xf8>)
 80019c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019c8:	f003 0301 	and.w	r3, r3, #1
 80019cc:	60fb      	str	r3, [r7, #12]
 80019ce:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80019d0:	2380      	movs	r3, #128	@ 0x80
 80019d2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019d6:	2302      	movs	r3, #2
 80019d8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019dc:	2300      	movs	r3, #0
 80019de:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019e2:	2300      	movs	r3, #0
 80019e4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80019e8:	2307      	movs	r3, #7
 80019ea:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80019ee:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80019f2:	4619      	mov	r1, r3
 80019f4:	4810      	ldr	r0, [pc, #64]	@ (8001a38 <HAL_UART_MspInit+0xfc>)
 80019f6:	f000 f98f 	bl	8001d18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80019fa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80019fe:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a02:	2302      	movs	r3, #2
 8001a04:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001a14:	2307      	movs	r3, #7
 8001a16:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8001a1a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001a1e:	4619      	mov	r1, r3
 8001a20:	4806      	ldr	r0, [pc, #24]	@ (8001a3c <HAL_UART_MspInit+0x100>)
 8001a22:	f000 f979 	bl	8001d18 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001a26:	bf00      	nop
 8001a28:	37b0      	adds	r7, #176	@ 0xb0
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	40011000 	.word	0x40011000
 8001a34:	40023800 	.word	0x40023800
 8001a38:	40020400 	.word	0x40020400
 8001a3c:	40020000 	.word	0x40020000

08001a40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001a40:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001a78 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001a44:	f7ff ff38 	bl	80018b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a48:	480c      	ldr	r0, [pc, #48]	@ (8001a7c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001a4a:	490d      	ldr	r1, [pc, #52]	@ (8001a80 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001a4c:	4a0d      	ldr	r2, [pc, #52]	@ (8001a84 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001a4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a50:	e002      	b.n	8001a58 <LoopCopyDataInit>

08001a52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a56:	3304      	adds	r3, #4

08001a58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a5c:	d3f9      	bcc.n	8001a52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a5e:	4a0a      	ldr	r2, [pc, #40]	@ (8001a88 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001a60:	4c0a      	ldr	r4, [pc, #40]	@ (8001a8c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001a62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a64:	e001      	b.n	8001a6a <LoopFillZerobss>

08001a66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a68:	3204      	adds	r2, #4

08001a6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a6c:	d3fb      	bcc.n	8001a66 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001a6e:	f005 fa97 	bl	8006fa0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a72:	f7ff fcb1 	bl	80013d8 <main>
  bx  lr    
 8001a76:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001a78:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001a7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a80:	2000016c 	.word	0x2000016c
  ldr r2, =_sidata
 8001a84:	080082dc 	.word	0x080082dc
  ldr r2, =_sbss
 8001a88:	2000016c 	.word	0x2000016c
  ldr r4, =_ebss
 8001a8c:	2000487c 	.word	0x2000487c

08001a90 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a90:	e7fe      	b.n	8001a90 <ADC_IRQHandler>

08001a92 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a92:	b580      	push	{r7, lr}
 8001a94:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a96:	2003      	movs	r0, #3
 8001a98:	f000 f90a 	bl	8001cb0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a9c:	200f      	movs	r0, #15
 8001a9e:	f000 f805 	bl	8001aac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001aa2:	f7ff fe15 	bl	80016d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001aa6:	2300      	movs	r3, #0
}
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	bd80      	pop	{r7, pc}

08001aac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b082      	sub	sp, #8
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ab4:	4b12      	ldr	r3, [pc, #72]	@ (8001b00 <HAL_InitTick+0x54>)
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	4b12      	ldr	r3, [pc, #72]	@ (8001b04 <HAL_InitTick+0x58>)
 8001aba:	781b      	ldrb	r3, [r3, #0]
 8001abc:	4619      	mov	r1, r3
 8001abe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ac2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ac6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aca:	4618      	mov	r0, r3
 8001acc:	f000 f917 	bl	8001cfe <HAL_SYSTICK_Config>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d001      	beq.n	8001ada <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e00e      	b.n	8001af8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2b0f      	cmp	r3, #15
 8001ade:	d80a      	bhi.n	8001af6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	6879      	ldr	r1, [r7, #4]
 8001ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ae8:	f000 f8ed 	bl	8001cc6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001aec:	4a06      	ldr	r2, [pc, #24]	@ (8001b08 <HAL_InitTick+0x5c>)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001af2:	2300      	movs	r3, #0
 8001af4:	e000      	b.n	8001af8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001af6:	2301      	movs	r3, #1
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	3708      	adds	r7, #8
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}
 8001b00:	20000100 	.word	0x20000100
 8001b04:	20000108 	.word	0x20000108
 8001b08:	20000104 	.word	0x20000104

08001b0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b10:	4b06      	ldr	r3, [pc, #24]	@ (8001b2c <HAL_IncTick+0x20>)
 8001b12:	781b      	ldrb	r3, [r3, #0]
 8001b14:	461a      	mov	r2, r3
 8001b16:	4b06      	ldr	r3, [pc, #24]	@ (8001b30 <HAL_IncTick+0x24>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4413      	add	r3, r2
 8001b1c:	4a04      	ldr	r2, [pc, #16]	@ (8001b30 <HAL_IncTick+0x24>)
 8001b1e:	6013      	str	r3, [r2, #0]
}
 8001b20:	bf00      	nop
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr
 8001b2a:	bf00      	nop
 8001b2c:	20000108 	.word	0x20000108
 8001b30:	20000998 	.word	0x20000998

08001b34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b34:	b480      	push	{r7}
 8001b36:	af00      	add	r7, sp, #0
  return uwTick;
 8001b38:	4b03      	ldr	r3, [pc, #12]	@ (8001b48 <HAL_GetTick+0x14>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b44:	4770      	bx	lr
 8001b46:	bf00      	nop
 8001b48:	20000998 	.word	0x20000998

08001b4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b085      	sub	sp, #20
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	f003 0307 	and.w	r3, r3, #7
 8001b5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b5c:	4b0b      	ldr	r3, [pc, #44]	@ (8001b8c <__NVIC_SetPriorityGrouping+0x40>)
 8001b5e:	68db      	ldr	r3, [r3, #12]
 8001b60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b62:	68ba      	ldr	r2, [r7, #8]
 8001b64:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b68:	4013      	ands	r3, r2
 8001b6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b70:	68bb      	ldr	r3, [r7, #8]
 8001b72:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001b74:	4b06      	ldr	r3, [pc, #24]	@ (8001b90 <__NVIC_SetPriorityGrouping+0x44>)
 8001b76:	4313      	orrs	r3, r2
 8001b78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b7a:	4a04      	ldr	r2, [pc, #16]	@ (8001b8c <__NVIC_SetPriorityGrouping+0x40>)
 8001b7c:	68bb      	ldr	r3, [r7, #8]
 8001b7e:	60d3      	str	r3, [r2, #12]
}
 8001b80:	bf00      	nop
 8001b82:	3714      	adds	r7, #20
 8001b84:	46bd      	mov	sp, r7
 8001b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8a:	4770      	bx	lr
 8001b8c:	e000ed00 	.word	0xe000ed00
 8001b90:	05fa0000 	.word	0x05fa0000

08001b94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b94:	b480      	push	{r7}
 8001b96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b98:	4b04      	ldr	r3, [pc, #16]	@ (8001bac <__NVIC_GetPriorityGrouping+0x18>)
 8001b9a:	68db      	ldr	r3, [r3, #12]
 8001b9c:	0a1b      	lsrs	r3, r3, #8
 8001b9e:	f003 0307 	and.w	r3, r3, #7
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001baa:	4770      	bx	lr
 8001bac:	e000ed00 	.word	0xe000ed00

08001bb0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b083      	sub	sp, #12
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	6039      	str	r1, [r7, #0]
 8001bba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	db0a      	blt.n	8001bda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	b2da      	uxtb	r2, r3
 8001bc8:	490c      	ldr	r1, [pc, #48]	@ (8001bfc <__NVIC_SetPriority+0x4c>)
 8001bca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bce:	0112      	lsls	r2, r2, #4
 8001bd0:	b2d2      	uxtb	r2, r2
 8001bd2:	440b      	add	r3, r1
 8001bd4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bd8:	e00a      	b.n	8001bf0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	b2da      	uxtb	r2, r3
 8001bde:	4908      	ldr	r1, [pc, #32]	@ (8001c00 <__NVIC_SetPriority+0x50>)
 8001be0:	79fb      	ldrb	r3, [r7, #7]
 8001be2:	f003 030f 	and.w	r3, r3, #15
 8001be6:	3b04      	subs	r3, #4
 8001be8:	0112      	lsls	r2, r2, #4
 8001bea:	b2d2      	uxtb	r2, r2
 8001bec:	440b      	add	r3, r1
 8001bee:	761a      	strb	r2, [r3, #24]
}
 8001bf0:	bf00      	nop
 8001bf2:	370c      	adds	r7, #12
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfa:	4770      	bx	lr
 8001bfc:	e000e100 	.word	0xe000e100
 8001c00:	e000ed00 	.word	0xe000ed00

08001c04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b089      	sub	sp, #36	@ 0x24
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	60f8      	str	r0, [r7, #12]
 8001c0c:	60b9      	str	r1, [r7, #8]
 8001c0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	f003 0307 	and.w	r3, r3, #7
 8001c16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c18:	69fb      	ldr	r3, [r7, #28]
 8001c1a:	f1c3 0307 	rsb	r3, r3, #7
 8001c1e:	2b04      	cmp	r3, #4
 8001c20:	bf28      	it	cs
 8001c22:	2304      	movcs	r3, #4
 8001c24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c26:	69fb      	ldr	r3, [r7, #28]
 8001c28:	3304      	adds	r3, #4
 8001c2a:	2b06      	cmp	r3, #6
 8001c2c:	d902      	bls.n	8001c34 <NVIC_EncodePriority+0x30>
 8001c2e:	69fb      	ldr	r3, [r7, #28]
 8001c30:	3b03      	subs	r3, #3
 8001c32:	e000      	b.n	8001c36 <NVIC_EncodePriority+0x32>
 8001c34:	2300      	movs	r3, #0
 8001c36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c38:	f04f 32ff 	mov.w	r2, #4294967295
 8001c3c:	69bb      	ldr	r3, [r7, #24]
 8001c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c42:	43da      	mvns	r2, r3
 8001c44:	68bb      	ldr	r3, [r7, #8]
 8001c46:	401a      	ands	r2, r3
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c4c:	f04f 31ff 	mov.w	r1, #4294967295
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	fa01 f303 	lsl.w	r3, r1, r3
 8001c56:	43d9      	mvns	r1, r3
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c5c:	4313      	orrs	r3, r2
         );
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	3724      	adds	r7, #36	@ 0x24
 8001c62:	46bd      	mov	sp, r7
 8001c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c68:	4770      	bx	lr
	...

08001c6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b082      	sub	sp, #8
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	3b01      	subs	r3, #1
 8001c78:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001c7c:	d301      	bcc.n	8001c82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e00f      	b.n	8001ca2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c82:	4a0a      	ldr	r2, [pc, #40]	@ (8001cac <SysTick_Config+0x40>)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	3b01      	subs	r3, #1
 8001c88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c8a:	210f      	movs	r1, #15
 8001c8c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c90:	f7ff ff8e 	bl	8001bb0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c94:	4b05      	ldr	r3, [pc, #20]	@ (8001cac <SysTick_Config+0x40>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c9a:	4b04      	ldr	r3, [pc, #16]	@ (8001cac <SysTick_Config+0x40>)
 8001c9c:	2207      	movs	r2, #7
 8001c9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ca0:	2300      	movs	r3, #0
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	3708      	adds	r7, #8
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	e000e010 	.word	0xe000e010

08001cb0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b082      	sub	sp, #8
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cb8:	6878      	ldr	r0, [r7, #4]
 8001cba:	f7ff ff47 	bl	8001b4c <__NVIC_SetPriorityGrouping>
}
 8001cbe:	bf00      	nop
 8001cc0:	3708      	adds	r7, #8
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}

08001cc6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cc6:	b580      	push	{r7, lr}
 8001cc8:	b086      	sub	sp, #24
 8001cca:	af00      	add	r7, sp, #0
 8001ccc:	4603      	mov	r3, r0
 8001cce:	60b9      	str	r1, [r7, #8]
 8001cd0:	607a      	str	r2, [r7, #4]
 8001cd2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cd8:	f7ff ff5c 	bl	8001b94 <__NVIC_GetPriorityGrouping>
 8001cdc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cde:	687a      	ldr	r2, [r7, #4]
 8001ce0:	68b9      	ldr	r1, [r7, #8]
 8001ce2:	6978      	ldr	r0, [r7, #20]
 8001ce4:	f7ff ff8e 	bl	8001c04 <NVIC_EncodePriority>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cee:	4611      	mov	r1, r2
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f7ff ff5d 	bl	8001bb0 <__NVIC_SetPriority>
}
 8001cf6:	bf00      	nop
 8001cf8:	3718      	adds	r7, #24
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}

08001cfe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cfe:	b580      	push	{r7, lr}
 8001d00:	b082      	sub	sp, #8
 8001d02:	af00      	add	r7, sp, #0
 8001d04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d06:	6878      	ldr	r0, [r7, #4]
 8001d08:	f7ff ffb0 	bl	8001c6c <SysTick_Config>
 8001d0c:	4603      	mov	r3, r0
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	3708      	adds	r7, #8
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
	...

08001d18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b089      	sub	sp, #36	@ 0x24
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
 8001d20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001d22:	2300      	movs	r3, #0
 8001d24:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001d26:	2300      	movs	r3, #0
 8001d28:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8001d32:	2300      	movs	r3, #0
 8001d34:	61fb      	str	r3, [r7, #28]
 8001d36:	e175      	b.n	8002024 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001d38:	2201      	movs	r2, #1
 8001d3a:	69fb      	ldr	r3, [r7, #28]
 8001d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d40:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	697a      	ldr	r2, [r7, #20]
 8001d48:	4013      	ands	r3, r2
 8001d4a:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8001d4c:	693a      	ldr	r2, [r7, #16]
 8001d4e:	697b      	ldr	r3, [r7, #20]
 8001d50:	429a      	cmp	r2, r3
 8001d52:	f040 8164 	bne.w	800201e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	f003 0303 	and.w	r3, r3, #3
 8001d5e:	2b01      	cmp	r3, #1
 8001d60:	d005      	beq.n	8001d6e <HAL_GPIO_Init+0x56>
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	f003 0303 	and.w	r3, r3, #3
 8001d6a:	2b02      	cmp	r3, #2
 8001d6c:	d130      	bne.n	8001dd0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	689b      	ldr	r3, [r3, #8]
 8001d72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001d74:	69fb      	ldr	r3, [r7, #28]
 8001d76:	005b      	lsls	r3, r3, #1
 8001d78:	2203      	movs	r2, #3
 8001d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7e:	43db      	mvns	r3, r3
 8001d80:	69ba      	ldr	r2, [r7, #24]
 8001d82:	4013      	ands	r3, r2
 8001d84:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	68da      	ldr	r2, [r3, #12]
 8001d8a:	69fb      	ldr	r3, [r7, #28]
 8001d8c:	005b      	lsls	r3, r3, #1
 8001d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d92:	69ba      	ldr	r2, [r7, #24]
 8001d94:	4313      	orrs	r3, r2
 8001d96:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	69ba      	ldr	r2, [r7, #24]
 8001d9c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001da4:	2201      	movs	r2, #1
 8001da6:	69fb      	ldr	r3, [r7, #28]
 8001da8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dac:	43db      	mvns	r3, r3
 8001dae:	69ba      	ldr	r2, [r7, #24]
 8001db0:	4013      	ands	r3, r2
 8001db2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	091b      	lsrs	r3, r3, #4
 8001dba:	f003 0201 	and.w	r2, r3, #1
 8001dbe:	69fb      	ldr	r3, [r7, #28]
 8001dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc4:	69ba      	ldr	r2, [r7, #24]
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	69ba      	ldr	r2, [r7, #24]
 8001dce:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	f003 0303 	and.w	r3, r3, #3
 8001dd8:	2b03      	cmp	r3, #3
 8001dda:	d017      	beq.n	8001e0c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	68db      	ldr	r3, [r3, #12]
 8001de0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001de2:	69fb      	ldr	r3, [r7, #28]
 8001de4:	005b      	lsls	r3, r3, #1
 8001de6:	2203      	movs	r2, #3
 8001de8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dec:	43db      	mvns	r3, r3
 8001dee:	69ba      	ldr	r2, [r7, #24]
 8001df0:	4013      	ands	r3, r2
 8001df2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	689a      	ldr	r2, [r3, #8]
 8001df8:	69fb      	ldr	r3, [r7, #28]
 8001dfa:	005b      	lsls	r3, r3, #1
 8001dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001e00:	69ba      	ldr	r2, [r7, #24]
 8001e02:	4313      	orrs	r3, r2
 8001e04:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	69ba      	ldr	r2, [r7, #24]
 8001e0a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	f003 0303 	and.w	r3, r3, #3
 8001e14:	2b02      	cmp	r3, #2
 8001e16:	d123      	bne.n	8001e60 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001e18:	69fb      	ldr	r3, [r7, #28]
 8001e1a:	08da      	lsrs	r2, r3, #3
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	3208      	adds	r2, #8
 8001e20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001e26:	69fb      	ldr	r3, [r7, #28]
 8001e28:	f003 0307 	and.w	r3, r3, #7
 8001e2c:	009b      	lsls	r3, r3, #2
 8001e2e:	220f      	movs	r2, #15
 8001e30:	fa02 f303 	lsl.w	r3, r2, r3
 8001e34:	43db      	mvns	r3, r3
 8001e36:	69ba      	ldr	r2, [r7, #24]
 8001e38:	4013      	ands	r3, r2
 8001e3a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	691a      	ldr	r2, [r3, #16]
 8001e40:	69fb      	ldr	r3, [r7, #28]
 8001e42:	f003 0307 	and.w	r3, r3, #7
 8001e46:	009b      	lsls	r3, r3, #2
 8001e48:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4c:	69ba      	ldr	r2, [r7, #24]
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001e52:	69fb      	ldr	r3, [r7, #28]
 8001e54:	08da      	lsrs	r2, r3, #3
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	3208      	adds	r2, #8
 8001e5a:	69b9      	ldr	r1, [r7, #24]
 8001e5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001e66:	69fb      	ldr	r3, [r7, #28]
 8001e68:	005b      	lsls	r3, r3, #1
 8001e6a:	2203      	movs	r2, #3
 8001e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e70:	43db      	mvns	r3, r3
 8001e72:	69ba      	ldr	r2, [r7, #24]
 8001e74:	4013      	ands	r3, r2
 8001e76:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	f003 0203 	and.w	r2, r3, #3
 8001e80:	69fb      	ldr	r3, [r7, #28]
 8001e82:	005b      	lsls	r3, r3, #1
 8001e84:	fa02 f303 	lsl.w	r3, r2, r3
 8001e88:	69ba      	ldr	r2, [r7, #24]
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	69ba      	ldr	r2, [r7, #24]
 8001e92:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	f000 80be 	beq.w	800201e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ea2:	4b66      	ldr	r3, [pc, #408]	@ (800203c <HAL_GPIO_Init+0x324>)
 8001ea4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ea6:	4a65      	ldr	r2, [pc, #404]	@ (800203c <HAL_GPIO_Init+0x324>)
 8001ea8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001eac:	6453      	str	r3, [r2, #68]	@ 0x44
 8001eae:	4b63      	ldr	r3, [pc, #396]	@ (800203c <HAL_GPIO_Init+0x324>)
 8001eb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eb2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001eb6:	60fb      	str	r3, [r7, #12]
 8001eb8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001eba:	4a61      	ldr	r2, [pc, #388]	@ (8002040 <HAL_GPIO_Init+0x328>)
 8001ebc:	69fb      	ldr	r3, [r7, #28]
 8001ebe:	089b      	lsrs	r3, r3, #2
 8001ec0:	3302      	adds	r3, #2
 8001ec2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ec6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001ec8:	69fb      	ldr	r3, [r7, #28]
 8001eca:	f003 0303 	and.w	r3, r3, #3
 8001ece:	009b      	lsls	r3, r3, #2
 8001ed0:	220f      	movs	r2, #15
 8001ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed6:	43db      	mvns	r3, r3
 8001ed8:	69ba      	ldr	r2, [r7, #24]
 8001eda:	4013      	ands	r3, r2
 8001edc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	4a58      	ldr	r2, [pc, #352]	@ (8002044 <HAL_GPIO_Init+0x32c>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d037      	beq.n	8001f56 <HAL_GPIO_Init+0x23e>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	4a57      	ldr	r2, [pc, #348]	@ (8002048 <HAL_GPIO_Init+0x330>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d031      	beq.n	8001f52 <HAL_GPIO_Init+0x23a>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	4a56      	ldr	r2, [pc, #344]	@ (800204c <HAL_GPIO_Init+0x334>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d02b      	beq.n	8001f4e <HAL_GPIO_Init+0x236>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	4a55      	ldr	r2, [pc, #340]	@ (8002050 <HAL_GPIO_Init+0x338>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d025      	beq.n	8001f4a <HAL_GPIO_Init+0x232>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	4a54      	ldr	r2, [pc, #336]	@ (8002054 <HAL_GPIO_Init+0x33c>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d01f      	beq.n	8001f46 <HAL_GPIO_Init+0x22e>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	4a53      	ldr	r2, [pc, #332]	@ (8002058 <HAL_GPIO_Init+0x340>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d019      	beq.n	8001f42 <HAL_GPIO_Init+0x22a>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	4a52      	ldr	r2, [pc, #328]	@ (800205c <HAL_GPIO_Init+0x344>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d013      	beq.n	8001f3e <HAL_GPIO_Init+0x226>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	4a51      	ldr	r2, [pc, #324]	@ (8002060 <HAL_GPIO_Init+0x348>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d00d      	beq.n	8001f3a <HAL_GPIO_Init+0x222>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	4a50      	ldr	r2, [pc, #320]	@ (8002064 <HAL_GPIO_Init+0x34c>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d007      	beq.n	8001f36 <HAL_GPIO_Init+0x21e>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	4a4f      	ldr	r2, [pc, #316]	@ (8002068 <HAL_GPIO_Init+0x350>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d101      	bne.n	8001f32 <HAL_GPIO_Init+0x21a>
 8001f2e:	2309      	movs	r3, #9
 8001f30:	e012      	b.n	8001f58 <HAL_GPIO_Init+0x240>
 8001f32:	230a      	movs	r3, #10
 8001f34:	e010      	b.n	8001f58 <HAL_GPIO_Init+0x240>
 8001f36:	2308      	movs	r3, #8
 8001f38:	e00e      	b.n	8001f58 <HAL_GPIO_Init+0x240>
 8001f3a:	2307      	movs	r3, #7
 8001f3c:	e00c      	b.n	8001f58 <HAL_GPIO_Init+0x240>
 8001f3e:	2306      	movs	r3, #6
 8001f40:	e00a      	b.n	8001f58 <HAL_GPIO_Init+0x240>
 8001f42:	2305      	movs	r3, #5
 8001f44:	e008      	b.n	8001f58 <HAL_GPIO_Init+0x240>
 8001f46:	2304      	movs	r3, #4
 8001f48:	e006      	b.n	8001f58 <HAL_GPIO_Init+0x240>
 8001f4a:	2303      	movs	r3, #3
 8001f4c:	e004      	b.n	8001f58 <HAL_GPIO_Init+0x240>
 8001f4e:	2302      	movs	r3, #2
 8001f50:	e002      	b.n	8001f58 <HAL_GPIO_Init+0x240>
 8001f52:	2301      	movs	r3, #1
 8001f54:	e000      	b.n	8001f58 <HAL_GPIO_Init+0x240>
 8001f56:	2300      	movs	r3, #0
 8001f58:	69fa      	ldr	r2, [r7, #28]
 8001f5a:	f002 0203 	and.w	r2, r2, #3
 8001f5e:	0092      	lsls	r2, r2, #2
 8001f60:	4093      	lsls	r3, r2
 8001f62:	69ba      	ldr	r2, [r7, #24]
 8001f64:	4313      	orrs	r3, r2
 8001f66:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001f68:	4935      	ldr	r1, [pc, #212]	@ (8002040 <HAL_GPIO_Init+0x328>)
 8001f6a:	69fb      	ldr	r3, [r7, #28]
 8001f6c:	089b      	lsrs	r3, r3, #2
 8001f6e:	3302      	adds	r3, #2
 8001f70:	69ba      	ldr	r2, [r7, #24]
 8001f72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f76:	4b3d      	ldr	r3, [pc, #244]	@ (800206c <HAL_GPIO_Init+0x354>)
 8001f78:	689b      	ldr	r3, [r3, #8]
 8001f7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	43db      	mvns	r3, r3
 8001f80:	69ba      	ldr	r2, [r7, #24]
 8001f82:	4013      	ands	r3, r2
 8001f84:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d003      	beq.n	8001f9a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001f92:	69ba      	ldr	r2, [r7, #24]
 8001f94:	693b      	ldr	r3, [r7, #16]
 8001f96:	4313      	orrs	r3, r2
 8001f98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f9a:	4a34      	ldr	r2, [pc, #208]	@ (800206c <HAL_GPIO_Init+0x354>)
 8001f9c:	69bb      	ldr	r3, [r7, #24]
 8001f9e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001fa0:	4b32      	ldr	r3, [pc, #200]	@ (800206c <HAL_GPIO_Init+0x354>)
 8001fa2:	68db      	ldr	r3, [r3, #12]
 8001fa4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	43db      	mvns	r3, r3
 8001faa:	69ba      	ldr	r2, [r7, #24]
 8001fac:	4013      	ands	r3, r2
 8001fae:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d003      	beq.n	8001fc4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001fbc:	69ba      	ldr	r2, [r7, #24]
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001fc4:	4a29      	ldr	r2, [pc, #164]	@ (800206c <HAL_GPIO_Init+0x354>)
 8001fc6:	69bb      	ldr	r3, [r7, #24]
 8001fc8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001fca:	4b28      	ldr	r3, [pc, #160]	@ (800206c <HAL_GPIO_Init+0x354>)
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	43db      	mvns	r3, r3
 8001fd4:	69ba      	ldr	r2, [r7, #24]
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d003      	beq.n	8001fee <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001fe6:	69ba      	ldr	r2, [r7, #24]
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	4313      	orrs	r3, r2
 8001fec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001fee:	4a1f      	ldr	r2, [pc, #124]	@ (800206c <HAL_GPIO_Init+0x354>)
 8001ff0:	69bb      	ldr	r3, [r7, #24]
 8001ff2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ff4:	4b1d      	ldr	r3, [pc, #116]	@ (800206c <HAL_GPIO_Init+0x354>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	43db      	mvns	r3, r3
 8001ffe:	69ba      	ldr	r2, [r7, #24]
 8002000:	4013      	ands	r3, r2
 8002002:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800200c:	2b00      	cmp	r3, #0
 800200e:	d003      	beq.n	8002018 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002010:	69ba      	ldr	r2, [r7, #24]
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	4313      	orrs	r3, r2
 8002016:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002018:	4a14      	ldr	r2, [pc, #80]	@ (800206c <HAL_GPIO_Init+0x354>)
 800201a:	69bb      	ldr	r3, [r7, #24]
 800201c:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 800201e:	69fb      	ldr	r3, [r7, #28]
 8002020:	3301      	adds	r3, #1
 8002022:	61fb      	str	r3, [r7, #28]
 8002024:	69fb      	ldr	r3, [r7, #28]
 8002026:	2b0f      	cmp	r3, #15
 8002028:	f67f ae86 	bls.w	8001d38 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800202c:	bf00      	nop
 800202e:	bf00      	nop
 8002030:	3724      	adds	r7, #36	@ 0x24
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr
 800203a:	bf00      	nop
 800203c:	40023800 	.word	0x40023800
 8002040:	40013800 	.word	0x40013800
 8002044:	40020000 	.word	0x40020000
 8002048:	40020400 	.word	0x40020400
 800204c:	40020800 	.word	0x40020800
 8002050:	40020c00 	.word	0x40020c00
 8002054:	40021000 	.word	0x40021000
 8002058:	40021400 	.word	0x40021400
 800205c:	40021800 	.word	0x40021800
 8002060:	40021c00 	.word	0x40021c00
 8002064:	40022000 	.word	0x40022000
 8002068:	40022400 	.word	0x40022400
 800206c:	40013c00 	.word	0x40013c00

08002070 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002070:	b480      	push	{r7}
 8002072:	b085      	sub	sp, #20
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
 8002078:	460b      	mov	r3, r1
 800207a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	691a      	ldr	r2, [r3, #16]
 8002080:	887b      	ldrh	r3, [r7, #2]
 8002082:	4013      	ands	r3, r2
 8002084:	2b00      	cmp	r3, #0
 8002086:	d002      	beq.n	800208e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002088:	2301      	movs	r3, #1
 800208a:	73fb      	strb	r3, [r7, #15]
 800208c:	e001      	b.n	8002092 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800208e:	2300      	movs	r3, #0
 8002090:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002092:	7bfb      	ldrb	r3, [r7, #15]
}
 8002094:	4618      	mov	r0, r3
 8002096:	3714      	adds	r7, #20
 8002098:	46bd      	mov	sp, r7
 800209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209e:	4770      	bx	lr

080020a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b083      	sub	sp, #12
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
 80020a8:	460b      	mov	r3, r1
 80020aa:	807b      	strh	r3, [r7, #2]
 80020ac:	4613      	mov	r3, r2
 80020ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80020b0:	787b      	ldrb	r3, [r7, #1]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d003      	beq.n	80020be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020b6:	887a      	ldrh	r2, [r7, #2]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80020bc:	e003      	b.n	80020c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80020be:	887b      	ldrh	r3, [r7, #2]
 80020c0:	041a      	lsls	r2, r3, #16
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	619a      	str	r2, [r3, #24]
}
 80020c6:	bf00      	nop
 80020c8:	370c      	adds	r7, #12
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr

080020d2 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80020d2:	b480      	push	{r7}
 80020d4:	b085      	sub	sp, #20
 80020d6:	af00      	add	r7, sp, #0
 80020d8:	6078      	str	r0, [r7, #4]
 80020da:	460b      	mov	r3, r1
 80020dc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	695b      	ldr	r3, [r3, #20]
 80020e2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80020e4:	887a      	ldrh	r2, [r7, #2]
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	4013      	ands	r3, r2
 80020ea:	041a      	lsls	r2, r3, #16
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	43d9      	mvns	r1, r3
 80020f0:	887b      	ldrh	r3, [r7, #2]
 80020f2:	400b      	ands	r3, r1
 80020f4:	431a      	orrs	r2, r3
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	619a      	str	r2, [r3, #24]
}
 80020fa:	bf00      	nop
 80020fc:	3714      	adds	r7, #20
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr
	...

08002108 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002108:	b480      	push	{r7}
 800210a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800210c:	4b05      	ldr	r3, [pc, #20]	@ (8002124 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a04      	ldr	r2, [pc, #16]	@ (8002124 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002112:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002116:	6013      	str	r3, [r2, #0]
}
 8002118:	bf00      	nop
 800211a:	46bd      	mov	sp, r7
 800211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002120:	4770      	bx	lr
 8002122:	bf00      	nop
 8002124:	40007000 	.word	0x40007000

08002128 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b082      	sub	sp, #8
 800212c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800212e:	2300      	movs	r3, #0
 8002130:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002132:	4b23      	ldr	r3, [pc, #140]	@ (80021c0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002134:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002136:	4a22      	ldr	r2, [pc, #136]	@ (80021c0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002138:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800213c:	6413      	str	r3, [r2, #64]	@ 0x40
 800213e:	4b20      	ldr	r3, [pc, #128]	@ (80021c0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002140:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002142:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002146:	603b      	str	r3, [r7, #0]
 8002148:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800214a:	4b1e      	ldr	r3, [pc, #120]	@ (80021c4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4a1d      	ldr	r2, [pc, #116]	@ (80021c4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002150:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002154:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002156:	f7ff fced 	bl	8001b34 <HAL_GetTick>
 800215a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800215c:	e009      	b.n	8002172 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800215e:	f7ff fce9 	bl	8001b34 <HAL_GetTick>
 8002162:	4602      	mov	r2, r0
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	1ad3      	subs	r3, r2, r3
 8002168:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800216c:	d901      	bls.n	8002172 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800216e:	2303      	movs	r3, #3
 8002170:	e022      	b.n	80021b8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002172:	4b14      	ldr	r3, [pc, #80]	@ (80021c4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800217a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800217e:	d1ee      	bne.n	800215e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002180:	4b10      	ldr	r3, [pc, #64]	@ (80021c4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a0f      	ldr	r2, [pc, #60]	@ (80021c4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002186:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800218a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800218c:	f7ff fcd2 	bl	8001b34 <HAL_GetTick>
 8002190:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002192:	e009      	b.n	80021a8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002194:	f7ff fcce 	bl	8001b34 <HAL_GetTick>
 8002198:	4602      	mov	r2, r0
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	1ad3      	subs	r3, r2, r3
 800219e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80021a2:	d901      	bls.n	80021a8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80021a4:	2303      	movs	r3, #3
 80021a6:	e007      	b.n	80021b8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80021a8:	4b06      	ldr	r3, [pc, #24]	@ (80021c4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021b0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80021b4:	d1ee      	bne.n	8002194 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80021b6:	2300      	movs	r3, #0
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	3708      	adds	r7, #8
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}
 80021c0:	40023800 	.word	0x40023800
 80021c4:	40007000 	.word	0x40007000

080021c8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b086      	sub	sp, #24
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80021d0:	2300      	movs	r3, #0
 80021d2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d101      	bne.n	80021de <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	e291      	b.n	8002702 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 0301 	and.w	r3, r3, #1
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	f000 8087 	beq.w	80022fa <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80021ec:	4b96      	ldr	r3, [pc, #600]	@ (8002448 <HAL_RCC_OscConfig+0x280>)
 80021ee:	689b      	ldr	r3, [r3, #8]
 80021f0:	f003 030c 	and.w	r3, r3, #12
 80021f4:	2b04      	cmp	r3, #4
 80021f6:	d00c      	beq.n	8002212 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80021f8:	4b93      	ldr	r3, [pc, #588]	@ (8002448 <HAL_RCC_OscConfig+0x280>)
 80021fa:	689b      	ldr	r3, [r3, #8]
 80021fc:	f003 030c 	and.w	r3, r3, #12
 8002200:	2b08      	cmp	r3, #8
 8002202:	d112      	bne.n	800222a <HAL_RCC_OscConfig+0x62>
 8002204:	4b90      	ldr	r3, [pc, #576]	@ (8002448 <HAL_RCC_OscConfig+0x280>)
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800220c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002210:	d10b      	bne.n	800222a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002212:	4b8d      	ldr	r3, [pc, #564]	@ (8002448 <HAL_RCC_OscConfig+0x280>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800221a:	2b00      	cmp	r3, #0
 800221c:	d06c      	beq.n	80022f8 <HAL_RCC_OscConfig+0x130>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d168      	bne.n	80022f8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002226:	2301      	movs	r3, #1
 8002228:	e26b      	b.n	8002702 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002232:	d106      	bne.n	8002242 <HAL_RCC_OscConfig+0x7a>
 8002234:	4b84      	ldr	r3, [pc, #528]	@ (8002448 <HAL_RCC_OscConfig+0x280>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a83      	ldr	r2, [pc, #524]	@ (8002448 <HAL_RCC_OscConfig+0x280>)
 800223a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800223e:	6013      	str	r3, [r2, #0]
 8002240:	e02e      	b.n	80022a0 <HAL_RCC_OscConfig+0xd8>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d10c      	bne.n	8002264 <HAL_RCC_OscConfig+0x9c>
 800224a:	4b7f      	ldr	r3, [pc, #508]	@ (8002448 <HAL_RCC_OscConfig+0x280>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a7e      	ldr	r2, [pc, #504]	@ (8002448 <HAL_RCC_OscConfig+0x280>)
 8002250:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002254:	6013      	str	r3, [r2, #0]
 8002256:	4b7c      	ldr	r3, [pc, #496]	@ (8002448 <HAL_RCC_OscConfig+0x280>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a7b      	ldr	r2, [pc, #492]	@ (8002448 <HAL_RCC_OscConfig+0x280>)
 800225c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002260:	6013      	str	r3, [r2, #0]
 8002262:	e01d      	b.n	80022a0 <HAL_RCC_OscConfig+0xd8>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800226c:	d10c      	bne.n	8002288 <HAL_RCC_OscConfig+0xc0>
 800226e:	4b76      	ldr	r3, [pc, #472]	@ (8002448 <HAL_RCC_OscConfig+0x280>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4a75      	ldr	r2, [pc, #468]	@ (8002448 <HAL_RCC_OscConfig+0x280>)
 8002274:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002278:	6013      	str	r3, [r2, #0]
 800227a:	4b73      	ldr	r3, [pc, #460]	@ (8002448 <HAL_RCC_OscConfig+0x280>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4a72      	ldr	r2, [pc, #456]	@ (8002448 <HAL_RCC_OscConfig+0x280>)
 8002280:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002284:	6013      	str	r3, [r2, #0]
 8002286:	e00b      	b.n	80022a0 <HAL_RCC_OscConfig+0xd8>
 8002288:	4b6f      	ldr	r3, [pc, #444]	@ (8002448 <HAL_RCC_OscConfig+0x280>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a6e      	ldr	r2, [pc, #440]	@ (8002448 <HAL_RCC_OscConfig+0x280>)
 800228e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002292:	6013      	str	r3, [r2, #0]
 8002294:	4b6c      	ldr	r3, [pc, #432]	@ (8002448 <HAL_RCC_OscConfig+0x280>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a6b      	ldr	r2, [pc, #428]	@ (8002448 <HAL_RCC_OscConfig+0x280>)
 800229a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800229e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d013      	beq.n	80022d0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022a8:	f7ff fc44 	bl	8001b34 <HAL_GetTick>
 80022ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022ae:	e008      	b.n	80022c2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022b0:	f7ff fc40 	bl	8001b34 <HAL_GetTick>
 80022b4:	4602      	mov	r2, r0
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	1ad3      	subs	r3, r2, r3
 80022ba:	2b64      	cmp	r3, #100	@ 0x64
 80022bc:	d901      	bls.n	80022c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80022be:	2303      	movs	r3, #3
 80022c0:	e21f      	b.n	8002702 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022c2:	4b61      	ldr	r3, [pc, #388]	@ (8002448 <HAL_RCC_OscConfig+0x280>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d0f0      	beq.n	80022b0 <HAL_RCC_OscConfig+0xe8>
 80022ce:	e014      	b.n	80022fa <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022d0:	f7ff fc30 	bl	8001b34 <HAL_GetTick>
 80022d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022d6:	e008      	b.n	80022ea <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022d8:	f7ff fc2c 	bl	8001b34 <HAL_GetTick>
 80022dc:	4602      	mov	r2, r0
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	1ad3      	subs	r3, r2, r3
 80022e2:	2b64      	cmp	r3, #100	@ 0x64
 80022e4:	d901      	bls.n	80022ea <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80022e6:	2303      	movs	r3, #3
 80022e8:	e20b      	b.n	8002702 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022ea:	4b57      	ldr	r3, [pc, #348]	@ (8002448 <HAL_RCC_OscConfig+0x280>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d1f0      	bne.n	80022d8 <HAL_RCC_OscConfig+0x110>
 80022f6:	e000      	b.n	80022fa <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f003 0302 	and.w	r3, r3, #2
 8002302:	2b00      	cmp	r3, #0
 8002304:	d069      	beq.n	80023da <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002306:	4b50      	ldr	r3, [pc, #320]	@ (8002448 <HAL_RCC_OscConfig+0x280>)
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	f003 030c 	and.w	r3, r3, #12
 800230e:	2b00      	cmp	r3, #0
 8002310:	d00b      	beq.n	800232a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002312:	4b4d      	ldr	r3, [pc, #308]	@ (8002448 <HAL_RCC_OscConfig+0x280>)
 8002314:	689b      	ldr	r3, [r3, #8]
 8002316:	f003 030c 	and.w	r3, r3, #12
 800231a:	2b08      	cmp	r3, #8
 800231c:	d11c      	bne.n	8002358 <HAL_RCC_OscConfig+0x190>
 800231e:	4b4a      	ldr	r3, [pc, #296]	@ (8002448 <HAL_RCC_OscConfig+0x280>)
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002326:	2b00      	cmp	r3, #0
 8002328:	d116      	bne.n	8002358 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800232a:	4b47      	ldr	r3, [pc, #284]	@ (8002448 <HAL_RCC_OscConfig+0x280>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f003 0302 	and.w	r3, r3, #2
 8002332:	2b00      	cmp	r3, #0
 8002334:	d005      	beq.n	8002342 <HAL_RCC_OscConfig+0x17a>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	68db      	ldr	r3, [r3, #12]
 800233a:	2b01      	cmp	r3, #1
 800233c:	d001      	beq.n	8002342 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	e1df      	b.n	8002702 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002342:	4b41      	ldr	r3, [pc, #260]	@ (8002448 <HAL_RCC_OscConfig+0x280>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	691b      	ldr	r3, [r3, #16]
 800234e:	00db      	lsls	r3, r3, #3
 8002350:	493d      	ldr	r1, [pc, #244]	@ (8002448 <HAL_RCC_OscConfig+0x280>)
 8002352:	4313      	orrs	r3, r2
 8002354:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002356:	e040      	b.n	80023da <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	68db      	ldr	r3, [r3, #12]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d023      	beq.n	80023a8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002360:	4b39      	ldr	r3, [pc, #228]	@ (8002448 <HAL_RCC_OscConfig+0x280>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a38      	ldr	r2, [pc, #224]	@ (8002448 <HAL_RCC_OscConfig+0x280>)
 8002366:	f043 0301 	orr.w	r3, r3, #1
 800236a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800236c:	f7ff fbe2 	bl	8001b34 <HAL_GetTick>
 8002370:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002372:	e008      	b.n	8002386 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002374:	f7ff fbde 	bl	8001b34 <HAL_GetTick>
 8002378:	4602      	mov	r2, r0
 800237a:	693b      	ldr	r3, [r7, #16]
 800237c:	1ad3      	subs	r3, r2, r3
 800237e:	2b02      	cmp	r3, #2
 8002380:	d901      	bls.n	8002386 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002382:	2303      	movs	r3, #3
 8002384:	e1bd      	b.n	8002702 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002386:	4b30      	ldr	r3, [pc, #192]	@ (8002448 <HAL_RCC_OscConfig+0x280>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f003 0302 	and.w	r3, r3, #2
 800238e:	2b00      	cmp	r3, #0
 8002390:	d0f0      	beq.n	8002374 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002392:	4b2d      	ldr	r3, [pc, #180]	@ (8002448 <HAL_RCC_OscConfig+0x280>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	691b      	ldr	r3, [r3, #16]
 800239e:	00db      	lsls	r3, r3, #3
 80023a0:	4929      	ldr	r1, [pc, #164]	@ (8002448 <HAL_RCC_OscConfig+0x280>)
 80023a2:	4313      	orrs	r3, r2
 80023a4:	600b      	str	r3, [r1, #0]
 80023a6:	e018      	b.n	80023da <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023a8:	4b27      	ldr	r3, [pc, #156]	@ (8002448 <HAL_RCC_OscConfig+0x280>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a26      	ldr	r2, [pc, #152]	@ (8002448 <HAL_RCC_OscConfig+0x280>)
 80023ae:	f023 0301 	bic.w	r3, r3, #1
 80023b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023b4:	f7ff fbbe 	bl	8001b34 <HAL_GetTick>
 80023b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023ba:	e008      	b.n	80023ce <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023bc:	f7ff fbba 	bl	8001b34 <HAL_GetTick>
 80023c0:	4602      	mov	r2, r0
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	1ad3      	subs	r3, r2, r3
 80023c6:	2b02      	cmp	r3, #2
 80023c8:	d901      	bls.n	80023ce <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80023ca:	2303      	movs	r3, #3
 80023cc:	e199      	b.n	8002702 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023ce:	4b1e      	ldr	r3, [pc, #120]	@ (8002448 <HAL_RCC_OscConfig+0x280>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f003 0302 	and.w	r3, r3, #2
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d1f0      	bne.n	80023bc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 0308 	and.w	r3, r3, #8
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d038      	beq.n	8002458 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	695b      	ldr	r3, [r3, #20]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d019      	beq.n	8002422 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023ee:	4b16      	ldr	r3, [pc, #88]	@ (8002448 <HAL_RCC_OscConfig+0x280>)
 80023f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80023f2:	4a15      	ldr	r2, [pc, #84]	@ (8002448 <HAL_RCC_OscConfig+0x280>)
 80023f4:	f043 0301 	orr.w	r3, r3, #1
 80023f8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023fa:	f7ff fb9b 	bl	8001b34 <HAL_GetTick>
 80023fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002400:	e008      	b.n	8002414 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002402:	f7ff fb97 	bl	8001b34 <HAL_GetTick>
 8002406:	4602      	mov	r2, r0
 8002408:	693b      	ldr	r3, [r7, #16]
 800240a:	1ad3      	subs	r3, r2, r3
 800240c:	2b02      	cmp	r3, #2
 800240e:	d901      	bls.n	8002414 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002410:	2303      	movs	r3, #3
 8002412:	e176      	b.n	8002702 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002414:	4b0c      	ldr	r3, [pc, #48]	@ (8002448 <HAL_RCC_OscConfig+0x280>)
 8002416:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002418:	f003 0302 	and.w	r3, r3, #2
 800241c:	2b00      	cmp	r3, #0
 800241e:	d0f0      	beq.n	8002402 <HAL_RCC_OscConfig+0x23a>
 8002420:	e01a      	b.n	8002458 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002422:	4b09      	ldr	r3, [pc, #36]	@ (8002448 <HAL_RCC_OscConfig+0x280>)
 8002424:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002426:	4a08      	ldr	r2, [pc, #32]	@ (8002448 <HAL_RCC_OscConfig+0x280>)
 8002428:	f023 0301 	bic.w	r3, r3, #1
 800242c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800242e:	f7ff fb81 	bl	8001b34 <HAL_GetTick>
 8002432:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002434:	e00a      	b.n	800244c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002436:	f7ff fb7d 	bl	8001b34 <HAL_GetTick>
 800243a:	4602      	mov	r2, r0
 800243c:	693b      	ldr	r3, [r7, #16]
 800243e:	1ad3      	subs	r3, r2, r3
 8002440:	2b02      	cmp	r3, #2
 8002442:	d903      	bls.n	800244c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002444:	2303      	movs	r3, #3
 8002446:	e15c      	b.n	8002702 <HAL_RCC_OscConfig+0x53a>
 8002448:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800244c:	4b91      	ldr	r3, [pc, #580]	@ (8002694 <HAL_RCC_OscConfig+0x4cc>)
 800244e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002450:	f003 0302 	and.w	r3, r3, #2
 8002454:	2b00      	cmp	r3, #0
 8002456:	d1ee      	bne.n	8002436 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f003 0304 	and.w	r3, r3, #4
 8002460:	2b00      	cmp	r3, #0
 8002462:	f000 80a4 	beq.w	80025ae <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002466:	4b8b      	ldr	r3, [pc, #556]	@ (8002694 <HAL_RCC_OscConfig+0x4cc>)
 8002468:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800246a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800246e:	2b00      	cmp	r3, #0
 8002470:	d10d      	bne.n	800248e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002472:	4b88      	ldr	r3, [pc, #544]	@ (8002694 <HAL_RCC_OscConfig+0x4cc>)
 8002474:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002476:	4a87      	ldr	r2, [pc, #540]	@ (8002694 <HAL_RCC_OscConfig+0x4cc>)
 8002478:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800247c:	6413      	str	r3, [r2, #64]	@ 0x40
 800247e:	4b85      	ldr	r3, [pc, #532]	@ (8002694 <HAL_RCC_OscConfig+0x4cc>)
 8002480:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002482:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002486:	60bb      	str	r3, [r7, #8]
 8002488:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800248a:	2301      	movs	r3, #1
 800248c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800248e:	4b82      	ldr	r3, [pc, #520]	@ (8002698 <HAL_RCC_OscConfig+0x4d0>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002496:	2b00      	cmp	r3, #0
 8002498:	d118      	bne.n	80024cc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800249a:	4b7f      	ldr	r3, [pc, #508]	@ (8002698 <HAL_RCC_OscConfig+0x4d0>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a7e      	ldr	r2, [pc, #504]	@ (8002698 <HAL_RCC_OscConfig+0x4d0>)
 80024a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024a6:	f7ff fb45 	bl	8001b34 <HAL_GetTick>
 80024aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024ac:	e008      	b.n	80024c0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024ae:	f7ff fb41 	bl	8001b34 <HAL_GetTick>
 80024b2:	4602      	mov	r2, r0
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	1ad3      	subs	r3, r2, r3
 80024b8:	2b64      	cmp	r3, #100	@ 0x64
 80024ba:	d901      	bls.n	80024c0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80024bc:	2303      	movs	r3, #3
 80024be:	e120      	b.n	8002702 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024c0:	4b75      	ldr	r3, [pc, #468]	@ (8002698 <HAL_RCC_OscConfig+0x4d0>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d0f0      	beq.n	80024ae <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	689b      	ldr	r3, [r3, #8]
 80024d0:	2b01      	cmp	r3, #1
 80024d2:	d106      	bne.n	80024e2 <HAL_RCC_OscConfig+0x31a>
 80024d4:	4b6f      	ldr	r3, [pc, #444]	@ (8002694 <HAL_RCC_OscConfig+0x4cc>)
 80024d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024d8:	4a6e      	ldr	r2, [pc, #440]	@ (8002694 <HAL_RCC_OscConfig+0x4cc>)
 80024da:	f043 0301 	orr.w	r3, r3, #1
 80024de:	6713      	str	r3, [r2, #112]	@ 0x70
 80024e0:	e02d      	b.n	800253e <HAL_RCC_OscConfig+0x376>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	689b      	ldr	r3, [r3, #8]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d10c      	bne.n	8002504 <HAL_RCC_OscConfig+0x33c>
 80024ea:	4b6a      	ldr	r3, [pc, #424]	@ (8002694 <HAL_RCC_OscConfig+0x4cc>)
 80024ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024ee:	4a69      	ldr	r2, [pc, #420]	@ (8002694 <HAL_RCC_OscConfig+0x4cc>)
 80024f0:	f023 0301 	bic.w	r3, r3, #1
 80024f4:	6713      	str	r3, [r2, #112]	@ 0x70
 80024f6:	4b67      	ldr	r3, [pc, #412]	@ (8002694 <HAL_RCC_OscConfig+0x4cc>)
 80024f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024fa:	4a66      	ldr	r2, [pc, #408]	@ (8002694 <HAL_RCC_OscConfig+0x4cc>)
 80024fc:	f023 0304 	bic.w	r3, r3, #4
 8002500:	6713      	str	r3, [r2, #112]	@ 0x70
 8002502:	e01c      	b.n	800253e <HAL_RCC_OscConfig+0x376>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	2b05      	cmp	r3, #5
 800250a:	d10c      	bne.n	8002526 <HAL_RCC_OscConfig+0x35e>
 800250c:	4b61      	ldr	r3, [pc, #388]	@ (8002694 <HAL_RCC_OscConfig+0x4cc>)
 800250e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002510:	4a60      	ldr	r2, [pc, #384]	@ (8002694 <HAL_RCC_OscConfig+0x4cc>)
 8002512:	f043 0304 	orr.w	r3, r3, #4
 8002516:	6713      	str	r3, [r2, #112]	@ 0x70
 8002518:	4b5e      	ldr	r3, [pc, #376]	@ (8002694 <HAL_RCC_OscConfig+0x4cc>)
 800251a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800251c:	4a5d      	ldr	r2, [pc, #372]	@ (8002694 <HAL_RCC_OscConfig+0x4cc>)
 800251e:	f043 0301 	orr.w	r3, r3, #1
 8002522:	6713      	str	r3, [r2, #112]	@ 0x70
 8002524:	e00b      	b.n	800253e <HAL_RCC_OscConfig+0x376>
 8002526:	4b5b      	ldr	r3, [pc, #364]	@ (8002694 <HAL_RCC_OscConfig+0x4cc>)
 8002528:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800252a:	4a5a      	ldr	r2, [pc, #360]	@ (8002694 <HAL_RCC_OscConfig+0x4cc>)
 800252c:	f023 0301 	bic.w	r3, r3, #1
 8002530:	6713      	str	r3, [r2, #112]	@ 0x70
 8002532:	4b58      	ldr	r3, [pc, #352]	@ (8002694 <HAL_RCC_OscConfig+0x4cc>)
 8002534:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002536:	4a57      	ldr	r2, [pc, #348]	@ (8002694 <HAL_RCC_OscConfig+0x4cc>)
 8002538:	f023 0304 	bic.w	r3, r3, #4
 800253c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d015      	beq.n	8002572 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002546:	f7ff faf5 	bl	8001b34 <HAL_GetTick>
 800254a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800254c:	e00a      	b.n	8002564 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800254e:	f7ff faf1 	bl	8001b34 <HAL_GetTick>
 8002552:	4602      	mov	r2, r0
 8002554:	693b      	ldr	r3, [r7, #16]
 8002556:	1ad3      	subs	r3, r2, r3
 8002558:	f241 3288 	movw	r2, #5000	@ 0x1388
 800255c:	4293      	cmp	r3, r2
 800255e:	d901      	bls.n	8002564 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002560:	2303      	movs	r3, #3
 8002562:	e0ce      	b.n	8002702 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002564:	4b4b      	ldr	r3, [pc, #300]	@ (8002694 <HAL_RCC_OscConfig+0x4cc>)
 8002566:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002568:	f003 0302 	and.w	r3, r3, #2
 800256c:	2b00      	cmp	r3, #0
 800256e:	d0ee      	beq.n	800254e <HAL_RCC_OscConfig+0x386>
 8002570:	e014      	b.n	800259c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002572:	f7ff fadf 	bl	8001b34 <HAL_GetTick>
 8002576:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002578:	e00a      	b.n	8002590 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800257a:	f7ff fadb 	bl	8001b34 <HAL_GetTick>
 800257e:	4602      	mov	r2, r0
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	1ad3      	subs	r3, r2, r3
 8002584:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002588:	4293      	cmp	r3, r2
 800258a:	d901      	bls.n	8002590 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800258c:	2303      	movs	r3, #3
 800258e:	e0b8      	b.n	8002702 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002590:	4b40      	ldr	r3, [pc, #256]	@ (8002694 <HAL_RCC_OscConfig+0x4cc>)
 8002592:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002594:	f003 0302 	and.w	r3, r3, #2
 8002598:	2b00      	cmp	r3, #0
 800259a:	d1ee      	bne.n	800257a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800259c:	7dfb      	ldrb	r3, [r7, #23]
 800259e:	2b01      	cmp	r3, #1
 80025a0:	d105      	bne.n	80025ae <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025a2:	4b3c      	ldr	r3, [pc, #240]	@ (8002694 <HAL_RCC_OscConfig+0x4cc>)
 80025a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025a6:	4a3b      	ldr	r2, [pc, #236]	@ (8002694 <HAL_RCC_OscConfig+0x4cc>)
 80025a8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80025ac:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	699b      	ldr	r3, [r3, #24]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	f000 80a4 	beq.w	8002700 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025b8:	4b36      	ldr	r3, [pc, #216]	@ (8002694 <HAL_RCC_OscConfig+0x4cc>)
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	f003 030c 	and.w	r3, r3, #12
 80025c0:	2b08      	cmp	r3, #8
 80025c2:	d06b      	beq.n	800269c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	699b      	ldr	r3, [r3, #24]
 80025c8:	2b02      	cmp	r3, #2
 80025ca:	d149      	bne.n	8002660 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025cc:	4b31      	ldr	r3, [pc, #196]	@ (8002694 <HAL_RCC_OscConfig+0x4cc>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a30      	ldr	r2, [pc, #192]	@ (8002694 <HAL_RCC_OscConfig+0x4cc>)
 80025d2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80025d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025d8:	f7ff faac 	bl	8001b34 <HAL_GetTick>
 80025dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025de:	e008      	b.n	80025f2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025e0:	f7ff faa8 	bl	8001b34 <HAL_GetTick>
 80025e4:	4602      	mov	r2, r0
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	1ad3      	subs	r3, r2, r3
 80025ea:	2b02      	cmp	r3, #2
 80025ec:	d901      	bls.n	80025f2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80025ee:	2303      	movs	r3, #3
 80025f0:	e087      	b.n	8002702 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025f2:	4b28      	ldr	r3, [pc, #160]	@ (8002694 <HAL_RCC_OscConfig+0x4cc>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d1f0      	bne.n	80025e0 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	69da      	ldr	r2, [r3, #28]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6a1b      	ldr	r3, [r3, #32]
 8002606:	431a      	orrs	r2, r3
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800260c:	019b      	lsls	r3, r3, #6
 800260e:	431a      	orrs	r2, r3
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002614:	085b      	lsrs	r3, r3, #1
 8002616:	3b01      	subs	r3, #1
 8002618:	041b      	lsls	r3, r3, #16
 800261a:	431a      	orrs	r2, r3
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002620:	061b      	lsls	r3, r3, #24
 8002622:	4313      	orrs	r3, r2
 8002624:	4a1b      	ldr	r2, [pc, #108]	@ (8002694 <HAL_RCC_OscConfig+0x4cc>)
 8002626:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800262a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800262c:	4b19      	ldr	r3, [pc, #100]	@ (8002694 <HAL_RCC_OscConfig+0x4cc>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a18      	ldr	r2, [pc, #96]	@ (8002694 <HAL_RCC_OscConfig+0x4cc>)
 8002632:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002636:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002638:	f7ff fa7c 	bl	8001b34 <HAL_GetTick>
 800263c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800263e:	e008      	b.n	8002652 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002640:	f7ff fa78 	bl	8001b34 <HAL_GetTick>
 8002644:	4602      	mov	r2, r0
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	1ad3      	subs	r3, r2, r3
 800264a:	2b02      	cmp	r3, #2
 800264c:	d901      	bls.n	8002652 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800264e:	2303      	movs	r3, #3
 8002650:	e057      	b.n	8002702 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002652:	4b10      	ldr	r3, [pc, #64]	@ (8002694 <HAL_RCC_OscConfig+0x4cc>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800265a:	2b00      	cmp	r3, #0
 800265c:	d0f0      	beq.n	8002640 <HAL_RCC_OscConfig+0x478>
 800265e:	e04f      	b.n	8002700 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002660:	4b0c      	ldr	r3, [pc, #48]	@ (8002694 <HAL_RCC_OscConfig+0x4cc>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a0b      	ldr	r2, [pc, #44]	@ (8002694 <HAL_RCC_OscConfig+0x4cc>)
 8002666:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800266a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800266c:	f7ff fa62 	bl	8001b34 <HAL_GetTick>
 8002670:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002672:	e008      	b.n	8002686 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002674:	f7ff fa5e 	bl	8001b34 <HAL_GetTick>
 8002678:	4602      	mov	r2, r0
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	1ad3      	subs	r3, r2, r3
 800267e:	2b02      	cmp	r3, #2
 8002680:	d901      	bls.n	8002686 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8002682:	2303      	movs	r3, #3
 8002684:	e03d      	b.n	8002702 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002686:	4b03      	ldr	r3, [pc, #12]	@ (8002694 <HAL_RCC_OscConfig+0x4cc>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800268e:	2b00      	cmp	r3, #0
 8002690:	d1f0      	bne.n	8002674 <HAL_RCC_OscConfig+0x4ac>
 8002692:	e035      	b.n	8002700 <HAL_RCC_OscConfig+0x538>
 8002694:	40023800 	.word	0x40023800
 8002698:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800269c:	4b1b      	ldr	r3, [pc, #108]	@ (800270c <HAL_RCC_OscConfig+0x544>)
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	699b      	ldr	r3, [r3, #24]
 80026a6:	2b01      	cmp	r3, #1
 80026a8:	d028      	beq.n	80026fc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026b4:	429a      	cmp	r2, r3
 80026b6:	d121      	bne.n	80026fc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026c2:	429a      	cmp	r2, r3
 80026c4:	d11a      	bne.n	80026fc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80026c6:	68fa      	ldr	r2, [r7, #12]
 80026c8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80026cc:	4013      	ands	r3, r2
 80026ce:	687a      	ldr	r2, [r7, #4]
 80026d0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80026d2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d111      	bne.n	80026fc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026e2:	085b      	lsrs	r3, r3, #1
 80026e4:	3b01      	subs	r3, #1
 80026e6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80026e8:	429a      	cmp	r2, r3
 80026ea:	d107      	bne.n	80026fc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026f6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80026f8:	429a      	cmp	r2, r3
 80026fa:	d001      	beq.n	8002700 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80026fc:	2301      	movs	r3, #1
 80026fe:	e000      	b.n	8002702 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002700:	2300      	movs	r3, #0
}
 8002702:	4618      	mov	r0, r3
 8002704:	3718      	adds	r7, #24
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}
 800270a:	bf00      	nop
 800270c:	40023800 	.word	0x40023800

08002710 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b084      	sub	sp, #16
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
 8002718:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800271a:	2300      	movs	r3, #0
 800271c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d101      	bne.n	8002728 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002724:	2301      	movs	r3, #1
 8002726:	e0d0      	b.n	80028ca <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002728:	4b6a      	ldr	r3, [pc, #424]	@ (80028d4 <HAL_RCC_ClockConfig+0x1c4>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f003 030f 	and.w	r3, r3, #15
 8002730:	683a      	ldr	r2, [r7, #0]
 8002732:	429a      	cmp	r2, r3
 8002734:	d910      	bls.n	8002758 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002736:	4b67      	ldr	r3, [pc, #412]	@ (80028d4 <HAL_RCC_ClockConfig+0x1c4>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f023 020f 	bic.w	r2, r3, #15
 800273e:	4965      	ldr	r1, [pc, #404]	@ (80028d4 <HAL_RCC_ClockConfig+0x1c4>)
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	4313      	orrs	r3, r2
 8002744:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002746:	4b63      	ldr	r3, [pc, #396]	@ (80028d4 <HAL_RCC_ClockConfig+0x1c4>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f003 030f 	and.w	r3, r3, #15
 800274e:	683a      	ldr	r2, [r7, #0]
 8002750:	429a      	cmp	r2, r3
 8002752:	d001      	beq.n	8002758 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002754:	2301      	movs	r3, #1
 8002756:	e0b8      	b.n	80028ca <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f003 0302 	and.w	r3, r3, #2
 8002760:	2b00      	cmp	r3, #0
 8002762:	d020      	beq.n	80027a6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f003 0304 	and.w	r3, r3, #4
 800276c:	2b00      	cmp	r3, #0
 800276e:	d005      	beq.n	800277c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002770:	4b59      	ldr	r3, [pc, #356]	@ (80028d8 <HAL_RCC_ClockConfig+0x1c8>)
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	4a58      	ldr	r2, [pc, #352]	@ (80028d8 <HAL_RCC_ClockConfig+0x1c8>)
 8002776:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800277a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f003 0308 	and.w	r3, r3, #8
 8002784:	2b00      	cmp	r3, #0
 8002786:	d005      	beq.n	8002794 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002788:	4b53      	ldr	r3, [pc, #332]	@ (80028d8 <HAL_RCC_ClockConfig+0x1c8>)
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	4a52      	ldr	r2, [pc, #328]	@ (80028d8 <HAL_RCC_ClockConfig+0x1c8>)
 800278e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002792:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002794:	4b50      	ldr	r3, [pc, #320]	@ (80028d8 <HAL_RCC_ClockConfig+0x1c8>)
 8002796:	689b      	ldr	r3, [r3, #8]
 8002798:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	494d      	ldr	r1, [pc, #308]	@ (80028d8 <HAL_RCC_ClockConfig+0x1c8>)
 80027a2:	4313      	orrs	r3, r2
 80027a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f003 0301 	and.w	r3, r3, #1
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d040      	beq.n	8002834 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	2b01      	cmp	r3, #1
 80027b8:	d107      	bne.n	80027ca <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027ba:	4b47      	ldr	r3, [pc, #284]	@ (80028d8 <HAL_RCC_ClockConfig+0x1c8>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d115      	bne.n	80027f2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	e07f      	b.n	80028ca <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	2b02      	cmp	r3, #2
 80027d0:	d107      	bne.n	80027e2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027d2:	4b41      	ldr	r3, [pc, #260]	@ (80028d8 <HAL_RCC_ClockConfig+0x1c8>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d109      	bne.n	80027f2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	e073      	b.n	80028ca <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027e2:	4b3d      	ldr	r3, [pc, #244]	@ (80028d8 <HAL_RCC_ClockConfig+0x1c8>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f003 0302 	and.w	r3, r3, #2
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d101      	bne.n	80027f2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	e06b      	b.n	80028ca <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027f2:	4b39      	ldr	r3, [pc, #228]	@ (80028d8 <HAL_RCC_ClockConfig+0x1c8>)
 80027f4:	689b      	ldr	r3, [r3, #8]
 80027f6:	f023 0203 	bic.w	r2, r3, #3
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	4936      	ldr	r1, [pc, #216]	@ (80028d8 <HAL_RCC_ClockConfig+0x1c8>)
 8002800:	4313      	orrs	r3, r2
 8002802:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002804:	f7ff f996 	bl	8001b34 <HAL_GetTick>
 8002808:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800280a:	e00a      	b.n	8002822 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800280c:	f7ff f992 	bl	8001b34 <HAL_GetTick>
 8002810:	4602      	mov	r2, r0
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	1ad3      	subs	r3, r2, r3
 8002816:	f241 3288 	movw	r2, #5000	@ 0x1388
 800281a:	4293      	cmp	r3, r2
 800281c:	d901      	bls.n	8002822 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800281e:	2303      	movs	r3, #3
 8002820:	e053      	b.n	80028ca <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002822:	4b2d      	ldr	r3, [pc, #180]	@ (80028d8 <HAL_RCC_ClockConfig+0x1c8>)
 8002824:	689b      	ldr	r3, [r3, #8]
 8002826:	f003 020c 	and.w	r2, r3, #12
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	009b      	lsls	r3, r3, #2
 8002830:	429a      	cmp	r2, r3
 8002832:	d1eb      	bne.n	800280c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002834:	4b27      	ldr	r3, [pc, #156]	@ (80028d4 <HAL_RCC_ClockConfig+0x1c4>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f003 030f 	and.w	r3, r3, #15
 800283c:	683a      	ldr	r2, [r7, #0]
 800283e:	429a      	cmp	r2, r3
 8002840:	d210      	bcs.n	8002864 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002842:	4b24      	ldr	r3, [pc, #144]	@ (80028d4 <HAL_RCC_ClockConfig+0x1c4>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f023 020f 	bic.w	r2, r3, #15
 800284a:	4922      	ldr	r1, [pc, #136]	@ (80028d4 <HAL_RCC_ClockConfig+0x1c4>)
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	4313      	orrs	r3, r2
 8002850:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002852:	4b20      	ldr	r3, [pc, #128]	@ (80028d4 <HAL_RCC_ClockConfig+0x1c4>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f003 030f 	and.w	r3, r3, #15
 800285a:	683a      	ldr	r2, [r7, #0]
 800285c:	429a      	cmp	r2, r3
 800285e:	d001      	beq.n	8002864 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002860:	2301      	movs	r3, #1
 8002862:	e032      	b.n	80028ca <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 0304 	and.w	r3, r3, #4
 800286c:	2b00      	cmp	r3, #0
 800286e:	d008      	beq.n	8002882 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002870:	4b19      	ldr	r3, [pc, #100]	@ (80028d8 <HAL_RCC_ClockConfig+0x1c8>)
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	68db      	ldr	r3, [r3, #12]
 800287c:	4916      	ldr	r1, [pc, #88]	@ (80028d8 <HAL_RCC_ClockConfig+0x1c8>)
 800287e:	4313      	orrs	r3, r2
 8002880:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f003 0308 	and.w	r3, r3, #8
 800288a:	2b00      	cmp	r3, #0
 800288c:	d009      	beq.n	80028a2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800288e:	4b12      	ldr	r3, [pc, #72]	@ (80028d8 <HAL_RCC_ClockConfig+0x1c8>)
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	691b      	ldr	r3, [r3, #16]
 800289a:	00db      	lsls	r3, r3, #3
 800289c:	490e      	ldr	r1, [pc, #56]	@ (80028d8 <HAL_RCC_ClockConfig+0x1c8>)
 800289e:	4313      	orrs	r3, r2
 80028a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80028a2:	f000 f821 	bl	80028e8 <HAL_RCC_GetSysClockFreq>
 80028a6:	4602      	mov	r2, r0
 80028a8:	4b0b      	ldr	r3, [pc, #44]	@ (80028d8 <HAL_RCC_ClockConfig+0x1c8>)
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	091b      	lsrs	r3, r3, #4
 80028ae:	f003 030f 	and.w	r3, r3, #15
 80028b2:	490a      	ldr	r1, [pc, #40]	@ (80028dc <HAL_RCC_ClockConfig+0x1cc>)
 80028b4:	5ccb      	ldrb	r3, [r1, r3]
 80028b6:	fa22 f303 	lsr.w	r3, r2, r3
 80028ba:	4a09      	ldr	r2, [pc, #36]	@ (80028e0 <HAL_RCC_ClockConfig+0x1d0>)
 80028bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80028be:	4b09      	ldr	r3, [pc, #36]	@ (80028e4 <HAL_RCC_ClockConfig+0x1d4>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4618      	mov	r0, r3
 80028c4:	f7ff f8f2 	bl	8001aac <HAL_InitTick>

  return HAL_OK;
 80028c8:	2300      	movs	r3, #0
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	3710      	adds	r7, #16
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	bf00      	nop
 80028d4:	40023c00 	.word	0x40023c00
 80028d8:	40023800 	.word	0x40023800
 80028dc:	08008178 	.word	0x08008178
 80028e0:	20000100 	.word	0x20000100
 80028e4:	20000104 	.word	0x20000104

080028e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80028ec:	b090      	sub	sp, #64	@ 0x40
 80028ee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80028f0:	2300      	movs	r3, #0
 80028f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80028f4:	2300      	movs	r3, #0
 80028f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80028f8:	2300      	movs	r3, #0
 80028fa:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 80028fc:	2300      	movs	r3, #0
 80028fe:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002900:	4b59      	ldr	r3, [pc, #356]	@ (8002a68 <HAL_RCC_GetSysClockFreq+0x180>)
 8002902:	689b      	ldr	r3, [r3, #8]
 8002904:	f003 030c 	and.w	r3, r3, #12
 8002908:	2b08      	cmp	r3, #8
 800290a:	d00d      	beq.n	8002928 <HAL_RCC_GetSysClockFreq+0x40>
 800290c:	2b08      	cmp	r3, #8
 800290e:	f200 80a1 	bhi.w	8002a54 <HAL_RCC_GetSysClockFreq+0x16c>
 8002912:	2b00      	cmp	r3, #0
 8002914:	d002      	beq.n	800291c <HAL_RCC_GetSysClockFreq+0x34>
 8002916:	2b04      	cmp	r3, #4
 8002918:	d003      	beq.n	8002922 <HAL_RCC_GetSysClockFreq+0x3a>
 800291a:	e09b      	b.n	8002a54 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800291c:	4b53      	ldr	r3, [pc, #332]	@ (8002a6c <HAL_RCC_GetSysClockFreq+0x184>)
 800291e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002920:	e09b      	b.n	8002a5a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002922:	4b53      	ldr	r3, [pc, #332]	@ (8002a70 <HAL_RCC_GetSysClockFreq+0x188>)
 8002924:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002926:	e098      	b.n	8002a5a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002928:	4b4f      	ldr	r3, [pc, #316]	@ (8002a68 <HAL_RCC_GetSysClockFreq+0x180>)
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002930:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002932:	4b4d      	ldr	r3, [pc, #308]	@ (8002a68 <HAL_RCC_GetSysClockFreq+0x180>)
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800293a:	2b00      	cmp	r3, #0
 800293c:	d028      	beq.n	8002990 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800293e:	4b4a      	ldr	r3, [pc, #296]	@ (8002a68 <HAL_RCC_GetSysClockFreq+0x180>)
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	099b      	lsrs	r3, r3, #6
 8002944:	2200      	movs	r2, #0
 8002946:	623b      	str	r3, [r7, #32]
 8002948:	627a      	str	r2, [r7, #36]	@ 0x24
 800294a:	6a3b      	ldr	r3, [r7, #32]
 800294c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002950:	2100      	movs	r1, #0
 8002952:	4b47      	ldr	r3, [pc, #284]	@ (8002a70 <HAL_RCC_GetSysClockFreq+0x188>)
 8002954:	fb03 f201 	mul.w	r2, r3, r1
 8002958:	2300      	movs	r3, #0
 800295a:	fb00 f303 	mul.w	r3, r0, r3
 800295e:	4413      	add	r3, r2
 8002960:	4a43      	ldr	r2, [pc, #268]	@ (8002a70 <HAL_RCC_GetSysClockFreq+0x188>)
 8002962:	fba0 1202 	umull	r1, r2, r0, r2
 8002966:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002968:	460a      	mov	r2, r1
 800296a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800296c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800296e:	4413      	add	r3, r2
 8002970:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002972:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002974:	2200      	movs	r2, #0
 8002976:	61bb      	str	r3, [r7, #24]
 8002978:	61fa      	str	r2, [r7, #28]
 800297a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800297e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002982:	f7fd fc95 	bl	80002b0 <__aeabi_uldivmod>
 8002986:	4602      	mov	r2, r0
 8002988:	460b      	mov	r3, r1
 800298a:	4613      	mov	r3, r2
 800298c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800298e:	e053      	b.n	8002a38 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002990:	4b35      	ldr	r3, [pc, #212]	@ (8002a68 <HAL_RCC_GetSysClockFreq+0x180>)
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	099b      	lsrs	r3, r3, #6
 8002996:	2200      	movs	r2, #0
 8002998:	613b      	str	r3, [r7, #16]
 800299a:	617a      	str	r2, [r7, #20]
 800299c:	693b      	ldr	r3, [r7, #16]
 800299e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80029a2:	f04f 0b00 	mov.w	fp, #0
 80029a6:	4652      	mov	r2, sl
 80029a8:	465b      	mov	r3, fp
 80029aa:	f04f 0000 	mov.w	r0, #0
 80029ae:	f04f 0100 	mov.w	r1, #0
 80029b2:	0159      	lsls	r1, r3, #5
 80029b4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80029b8:	0150      	lsls	r0, r2, #5
 80029ba:	4602      	mov	r2, r0
 80029bc:	460b      	mov	r3, r1
 80029be:	ebb2 080a 	subs.w	r8, r2, sl
 80029c2:	eb63 090b 	sbc.w	r9, r3, fp
 80029c6:	f04f 0200 	mov.w	r2, #0
 80029ca:	f04f 0300 	mov.w	r3, #0
 80029ce:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80029d2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80029d6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80029da:	ebb2 0408 	subs.w	r4, r2, r8
 80029de:	eb63 0509 	sbc.w	r5, r3, r9
 80029e2:	f04f 0200 	mov.w	r2, #0
 80029e6:	f04f 0300 	mov.w	r3, #0
 80029ea:	00eb      	lsls	r3, r5, #3
 80029ec:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80029f0:	00e2      	lsls	r2, r4, #3
 80029f2:	4614      	mov	r4, r2
 80029f4:	461d      	mov	r5, r3
 80029f6:	eb14 030a 	adds.w	r3, r4, sl
 80029fa:	603b      	str	r3, [r7, #0]
 80029fc:	eb45 030b 	adc.w	r3, r5, fp
 8002a00:	607b      	str	r3, [r7, #4]
 8002a02:	f04f 0200 	mov.w	r2, #0
 8002a06:	f04f 0300 	mov.w	r3, #0
 8002a0a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002a0e:	4629      	mov	r1, r5
 8002a10:	028b      	lsls	r3, r1, #10
 8002a12:	4621      	mov	r1, r4
 8002a14:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002a18:	4621      	mov	r1, r4
 8002a1a:	028a      	lsls	r2, r1, #10
 8002a1c:	4610      	mov	r0, r2
 8002a1e:	4619      	mov	r1, r3
 8002a20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a22:	2200      	movs	r2, #0
 8002a24:	60bb      	str	r3, [r7, #8]
 8002a26:	60fa      	str	r2, [r7, #12]
 8002a28:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002a2c:	f7fd fc40 	bl	80002b0 <__aeabi_uldivmod>
 8002a30:	4602      	mov	r2, r0
 8002a32:	460b      	mov	r3, r1
 8002a34:	4613      	mov	r3, r2
 8002a36:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002a38:	4b0b      	ldr	r3, [pc, #44]	@ (8002a68 <HAL_RCC_GetSysClockFreq+0x180>)
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	0c1b      	lsrs	r3, r3, #16
 8002a3e:	f003 0303 	and.w	r3, r3, #3
 8002a42:	3301      	adds	r3, #1
 8002a44:	005b      	lsls	r3, r3, #1
 8002a46:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002a48:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002a4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a50:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002a52:	e002      	b.n	8002a5a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a54:	4b05      	ldr	r3, [pc, #20]	@ (8002a6c <HAL_RCC_GetSysClockFreq+0x184>)
 8002a56:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002a58:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	3740      	adds	r7, #64	@ 0x40
 8002a60:	46bd      	mov	sp, r7
 8002a62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a66:	bf00      	nop
 8002a68:	40023800 	.word	0x40023800
 8002a6c:	00f42400 	.word	0x00f42400
 8002a70:	017d7840 	.word	0x017d7840

08002a74 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a74:	b480      	push	{r7}
 8002a76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a78:	4b03      	ldr	r3, [pc, #12]	@ (8002a88 <HAL_RCC_GetHCLKFreq+0x14>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
}
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a84:	4770      	bx	lr
 8002a86:	bf00      	nop
 8002a88:	20000100 	.word	0x20000100

08002a8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002a90:	f7ff fff0 	bl	8002a74 <HAL_RCC_GetHCLKFreq>
 8002a94:	4602      	mov	r2, r0
 8002a96:	4b05      	ldr	r3, [pc, #20]	@ (8002aac <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	0a9b      	lsrs	r3, r3, #10
 8002a9c:	f003 0307 	and.w	r3, r3, #7
 8002aa0:	4903      	ldr	r1, [pc, #12]	@ (8002ab0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002aa2:	5ccb      	ldrb	r3, [r1, r3]
 8002aa4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	bd80      	pop	{r7, pc}
 8002aac:	40023800 	.word	0x40023800
 8002ab0:	08008188 	.word	0x08008188

08002ab4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002ab8:	f7ff ffdc 	bl	8002a74 <HAL_RCC_GetHCLKFreq>
 8002abc:	4602      	mov	r2, r0
 8002abe:	4b05      	ldr	r3, [pc, #20]	@ (8002ad4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	0b5b      	lsrs	r3, r3, #13
 8002ac4:	f003 0307 	and.w	r3, r3, #7
 8002ac8:	4903      	ldr	r1, [pc, #12]	@ (8002ad8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002aca:	5ccb      	ldrb	r3, [r1, r3]
 8002acc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	bd80      	pop	{r7, pc}
 8002ad4:	40023800 	.word	0x40023800
 8002ad8:	08008188 	.word	0x08008188

08002adc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b088      	sub	sp, #32
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002aec:	2300      	movs	r3, #0
 8002aee:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002af0:	2300      	movs	r3, #0
 8002af2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002af4:	2300      	movs	r3, #0
 8002af6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f003 0301 	and.w	r3, r3, #1
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d012      	beq.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002b04:	4b69      	ldr	r3, [pc, #420]	@ (8002cac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	4a68      	ldr	r2, [pc, #416]	@ (8002cac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b0a:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002b0e:	6093      	str	r3, [r2, #8]
 8002b10:	4b66      	ldr	r3, [pc, #408]	@ (8002cac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b12:	689a      	ldr	r2, [r3, #8]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b18:	4964      	ldr	r1, [pc, #400]	@ (8002cac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d101      	bne.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002b26:	2301      	movs	r3, #1
 8002b28:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d017      	beq.n	8002b66 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002b36:	4b5d      	ldr	r3, [pc, #372]	@ (8002cac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b38:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002b3c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b44:	4959      	ldr	r1, [pc, #356]	@ (8002cac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b46:	4313      	orrs	r3, r2
 8002b48:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b50:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002b54:	d101      	bne.n	8002b5a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002b56:	2301      	movs	r3, #1
 8002b58:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d101      	bne.n	8002b66 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002b62:	2301      	movs	r3, #1
 8002b64:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d017      	beq.n	8002ba2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002b72:	4b4e      	ldr	r3, [pc, #312]	@ (8002cac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b74:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002b78:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b80:	494a      	ldr	r1, [pc, #296]	@ (8002cac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b82:	4313      	orrs	r3, r2
 8002b84:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b8c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002b90:	d101      	bne.n	8002b96 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002b92:	2301      	movs	r3, #1
 8002b94:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d101      	bne.n	8002ba2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d001      	beq.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f003 0320 	and.w	r3, r3, #32
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	f000 808b 	beq.w	8002cd6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002bc0:	4b3a      	ldr	r3, [pc, #232]	@ (8002cac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bc4:	4a39      	ldr	r2, [pc, #228]	@ (8002cac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bc6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002bca:	6413      	str	r3, [r2, #64]	@ 0x40
 8002bcc:	4b37      	ldr	r3, [pc, #220]	@ (8002cac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bd0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bd4:	60bb      	str	r3, [r7, #8]
 8002bd6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002bd8:	4b35      	ldr	r3, [pc, #212]	@ (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a34      	ldr	r2, [pc, #208]	@ (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002bde:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002be2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002be4:	f7fe ffa6 	bl	8001b34 <HAL_GetTick>
 8002be8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002bea:	e008      	b.n	8002bfe <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bec:	f7fe ffa2 	bl	8001b34 <HAL_GetTick>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	1ad3      	subs	r3, r2, r3
 8002bf6:	2b64      	cmp	r3, #100	@ 0x64
 8002bf8:	d901      	bls.n	8002bfe <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002bfa:	2303      	movs	r3, #3
 8002bfc:	e357      	b.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002bfe:	4b2c      	ldr	r3, [pc, #176]	@ (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d0f0      	beq.n	8002bec <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002c0a:	4b28      	ldr	r3, [pc, #160]	@ (8002cac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c0e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002c12:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002c14:	693b      	ldr	r3, [r7, #16]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d035      	beq.n	8002c86 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c1e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002c22:	693a      	ldr	r2, [r7, #16]
 8002c24:	429a      	cmp	r2, r3
 8002c26:	d02e      	beq.n	8002c86 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002c28:	4b20      	ldr	r3, [pc, #128]	@ (8002cac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c2c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c30:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002c32:	4b1e      	ldr	r3, [pc, #120]	@ (8002cac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c36:	4a1d      	ldr	r2, [pc, #116]	@ (8002cac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c38:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c3c:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002c3e:	4b1b      	ldr	r3, [pc, #108]	@ (8002cac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c42:	4a1a      	ldr	r2, [pc, #104]	@ (8002cac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c44:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c48:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002c4a:	4a18      	ldr	r2, [pc, #96]	@ (8002cac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c4c:	693b      	ldr	r3, [r7, #16]
 8002c4e:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002c50:	4b16      	ldr	r3, [pc, #88]	@ (8002cac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c54:	f003 0301 	and.w	r3, r3, #1
 8002c58:	2b01      	cmp	r3, #1
 8002c5a:	d114      	bne.n	8002c86 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c5c:	f7fe ff6a 	bl	8001b34 <HAL_GetTick>
 8002c60:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c62:	e00a      	b.n	8002c7a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c64:	f7fe ff66 	bl	8001b34 <HAL_GetTick>
 8002c68:	4602      	mov	r2, r0
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	1ad3      	subs	r3, r2, r3
 8002c6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d901      	bls.n	8002c7a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002c76:	2303      	movs	r3, #3
 8002c78:	e319      	b.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c7a:	4b0c      	ldr	r3, [pc, #48]	@ (8002cac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c7e:	f003 0302 	and.w	r3, r3, #2
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d0ee      	beq.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c8a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002c8e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002c92:	d111      	bne.n	8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002c94:	4b05      	ldr	r3, [pc, #20]	@ (8002cac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c96:	689b      	ldr	r3, [r3, #8]
 8002c98:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002ca0:	4b04      	ldr	r3, [pc, #16]	@ (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002ca2:	400b      	ands	r3, r1
 8002ca4:	4901      	ldr	r1, [pc, #4]	@ (8002cac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	608b      	str	r3, [r1, #8]
 8002caa:	e00b      	b.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002cac:	40023800 	.word	0x40023800
 8002cb0:	40007000 	.word	0x40007000
 8002cb4:	0ffffcff 	.word	0x0ffffcff
 8002cb8:	4baa      	ldr	r3, [pc, #680]	@ (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002cba:	689b      	ldr	r3, [r3, #8]
 8002cbc:	4aa9      	ldr	r2, [pc, #676]	@ (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002cbe:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8002cc2:	6093      	str	r3, [r2, #8]
 8002cc4:	4ba7      	ldr	r3, [pc, #668]	@ (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002cc6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ccc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cd0:	49a4      	ldr	r1, [pc, #656]	@ (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f003 0310 	and.w	r3, r3, #16
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d010      	beq.n	8002d04 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002ce2:	4ba0      	ldr	r3, [pc, #640]	@ (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ce4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002ce8:	4a9e      	ldr	r2, [pc, #632]	@ (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002cea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002cee:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002cf2:	4b9c      	ldr	r3, [pc, #624]	@ (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002cf4:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cfc:	4999      	ldr	r1, [pc, #612]	@ (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d00a      	beq.n	8002d26 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002d10:	4b94      	ldr	r3, [pc, #592]	@ (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d16:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002d1e:	4991      	ldr	r1, [pc, #580]	@ (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d20:	4313      	orrs	r3, r2
 8002d22:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d00a      	beq.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002d32:	4b8c      	ldr	r3, [pc, #560]	@ (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d38:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002d40:	4988      	ldr	r1, [pc, #544]	@ (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d42:	4313      	orrs	r3, r2
 8002d44:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d00a      	beq.n	8002d6a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002d54:	4b83      	ldr	r3, [pc, #524]	@ (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d5a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002d62:	4980      	ldr	r1, [pc, #512]	@ (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d64:	4313      	orrs	r3, r2
 8002d66:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d00a      	beq.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002d76:	4b7b      	ldr	r3, [pc, #492]	@ (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d7c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d84:	4977      	ldr	r1, [pc, #476]	@ (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d86:	4313      	orrs	r3, r2
 8002d88:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d00a      	beq.n	8002dae <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002d98:	4b72      	ldr	r3, [pc, #456]	@ (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d9e:	f023 0203 	bic.w	r2, r3, #3
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002da6:	496f      	ldr	r1, [pc, #444]	@ (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002da8:	4313      	orrs	r3, r2
 8002daa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d00a      	beq.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002dba:	4b6a      	ldr	r3, [pc, #424]	@ (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002dbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002dc0:	f023 020c 	bic.w	r2, r3, #12
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002dc8:	4966      	ldr	r1, [pc, #408]	@ (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d00a      	beq.n	8002df2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002ddc:	4b61      	ldr	r3, [pc, #388]	@ (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002dde:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002de2:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002dea:	495e      	ldr	r1, [pc, #376]	@ (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002dec:	4313      	orrs	r3, r2
 8002dee:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d00a      	beq.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002dfe:	4b59      	ldr	r3, [pc, #356]	@ (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e00:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e04:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e0c:	4955      	ldr	r1, [pc, #340]	@ (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d00a      	beq.n	8002e36 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002e20:	4b50      	ldr	r3, [pc, #320]	@ (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e26:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e2e:	494d      	ldr	r1, [pc, #308]	@ (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e30:	4313      	orrs	r3, r2
 8002e32:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d00a      	beq.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002e42:	4b48      	ldr	r3, [pc, #288]	@ (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e48:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e50:	4944      	ldr	r1, [pc, #272]	@ (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e52:	4313      	orrs	r3, r2
 8002e54:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d00a      	beq.n	8002e7a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002e64:	4b3f      	ldr	r3, [pc, #252]	@ (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e6a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e72:	493c      	ldr	r1, [pc, #240]	@ (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e74:	4313      	orrs	r3, r2
 8002e76:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d00a      	beq.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002e86:	4b37      	ldr	r3, [pc, #220]	@ (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e8c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e94:	4933      	ldr	r1, [pc, #204]	@ (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e96:	4313      	orrs	r3, r2
 8002e98:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d00a      	beq.n	8002ebe <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002ea8:	4b2e      	ldr	r3, [pc, #184]	@ (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002eaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002eae:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002eb6:	492b      	ldr	r1, [pc, #172]	@ (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d011      	beq.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002eca:	4b26      	ldr	r3, [pc, #152]	@ (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ecc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ed0:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002ed8:	4922      	ldr	r1, [pc, #136]	@ (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002eda:	4313      	orrs	r3, r2
 8002edc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002ee4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002ee8:	d101      	bne.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002eea:	2301      	movs	r3, #1
 8002eec:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 0308 	and.w	r3, r3, #8
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d001      	beq.n	8002efe <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002efa:	2301      	movs	r3, #1
 8002efc:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d00a      	beq.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002f0a:	4b16      	ldr	r3, [pc, #88]	@ (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f10:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f18:	4912      	ldr	r1, [pc, #72]	@ (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d00b      	beq.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002f2c:	4b0d      	ldr	r3, [pc, #52]	@ (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f32:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002f3c:	4909      	ldr	r1, [pc, #36]	@ (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002f44:	69fb      	ldr	r3, [r7, #28]
 8002f46:	2b01      	cmp	r3, #1
 8002f48:	d006      	beq.n	8002f58 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	f000 80d9 	beq.w	800310a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002f58:	4b02      	ldr	r3, [pc, #8]	@ (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a01      	ldr	r2, [pc, #4]	@ (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f5e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002f62:	e001      	b.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8002f64:	40023800 	.word	0x40023800
 8002f68:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f6a:	f7fe fde3 	bl	8001b34 <HAL_GetTick>
 8002f6e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002f70:	e008      	b.n	8002f84 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002f72:	f7fe fddf 	bl	8001b34 <HAL_GetTick>
 8002f76:	4602      	mov	r2, r0
 8002f78:	697b      	ldr	r3, [r7, #20]
 8002f7a:	1ad3      	subs	r3, r2, r3
 8002f7c:	2b64      	cmp	r3, #100	@ 0x64
 8002f7e:	d901      	bls.n	8002f84 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002f80:	2303      	movs	r3, #3
 8002f82:	e194      	b.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002f84:	4b6c      	ldr	r3, [pc, #432]	@ (8003138 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d1f0      	bne.n	8002f72 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f003 0301 	and.w	r3, r3, #1
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d021      	beq.n	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d11d      	bne.n	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002fa4:	4b64      	ldr	r3, [pc, #400]	@ (8003138 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002fa6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002faa:	0c1b      	lsrs	r3, r3, #16
 8002fac:	f003 0303 	and.w	r3, r3, #3
 8002fb0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002fb2:	4b61      	ldr	r3, [pc, #388]	@ (8003138 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002fb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002fb8:	0e1b      	lsrs	r3, r3, #24
 8002fba:	f003 030f 	and.w	r3, r3, #15
 8002fbe:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	019a      	lsls	r2, r3, #6
 8002fc6:	693b      	ldr	r3, [r7, #16]
 8002fc8:	041b      	lsls	r3, r3, #16
 8002fca:	431a      	orrs	r2, r3
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	061b      	lsls	r3, r3, #24
 8002fd0:	431a      	orrs	r2, r3
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	689b      	ldr	r3, [r3, #8]
 8002fd6:	071b      	lsls	r3, r3, #28
 8002fd8:	4957      	ldr	r1, [pc, #348]	@ (8003138 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d004      	beq.n	8002ff6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ff0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002ff4:	d00a      	beq.n	800300c <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d02e      	beq.n	8003060 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003006:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800300a:	d129      	bne.n	8003060 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800300c:	4b4a      	ldr	r3, [pc, #296]	@ (8003138 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800300e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003012:	0c1b      	lsrs	r3, r3, #16
 8003014:	f003 0303 	and.w	r3, r3, #3
 8003018:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800301a:	4b47      	ldr	r3, [pc, #284]	@ (8003138 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800301c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003020:	0f1b      	lsrs	r3, r3, #28
 8003022:	f003 0307 	and.w	r3, r3, #7
 8003026:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	019a      	lsls	r2, r3, #6
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	041b      	lsls	r3, r3, #16
 8003032:	431a      	orrs	r2, r3
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	68db      	ldr	r3, [r3, #12]
 8003038:	061b      	lsls	r3, r3, #24
 800303a:	431a      	orrs	r2, r3
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	071b      	lsls	r3, r3, #28
 8003040:	493d      	ldr	r1, [pc, #244]	@ (8003138 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003042:	4313      	orrs	r3, r2
 8003044:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003048:	4b3b      	ldr	r3, [pc, #236]	@ (8003138 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800304a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800304e:	f023 021f 	bic.w	r2, r3, #31
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003056:	3b01      	subs	r3, #1
 8003058:	4937      	ldr	r1, [pc, #220]	@ (8003138 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800305a:	4313      	orrs	r3, r2
 800305c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003068:	2b00      	cmp	r3, #0
 800306a:	d01d      	beq.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800306c:	4b32      	ldr	r3, [pc, #200]	@ (8003138 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800306e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003072:	0e1b      	lsrs	r3, r3, #24
 8003074:	f003 030f 	and.w	r3, r3, #15
 8003078:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800307a:	4b2f      	ldr	r3, [pc, #188]	@ (8003138 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800307c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003080:	0f1b      	lsrs	r3, r3, #28
 8003082:	f003 0307 	and.w	r3, r3, #7
 8003086:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	019a      	lsls	r2, r3, #6
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	691b      	ldr	r3, [r3, #16]
 8003092:	041b      	lsls	r3, r3, #16
 8003094:	431a      	orrs	r2, r3
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	061b      	lsls	r3, r3, #24
 800309a:	431a      	orrs	r2, r3
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	071b      	lsls	r3, r3, #28
 80030a0:	4925      	ldr	r1, [pc, #148]	@ (8003138 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80030a2:	4313      	orrs	r3, r2
 80030a4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d011      	beq.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	019a      	lsls	r2, r3, #6
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	691b      	ldr	r3, [r3, #16]
 80030be:	041b      	lsls	r3, r3, #16
 80030c0:	431a      	orrs	r2, r3
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	68db      	ldr	r3, [r3, #12]
 80030c6:	061b      	lsls	r3, r3, #24
 80030c8:	431a      	orrs	r2, r3
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	689b      	ldr	r3, [r3, #8]
 80030ce:	071b      	lsls	r3, r3, #28
 80030d0:	4919      	ldr	r1, [pc, #100]	@ (8003138 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80030d2:	4313      	orrs	r3, r2
 80030d4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80030d8:	4b17      	ldr	r3, [pc, #92]	@ (8003138 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a16      	ldr	r2, [pc, #88]	@ (8003138 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80030de:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80030e2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030e4:	f7fe fd26 	bl	8001b34 <HAL_GetTick>
 80030e8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80030ea:	e008      	b.n	80030fe <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80030ec:	f7fe fd22 	bl	8001b34 <HAL_GetTick>
 80030f0:	4602      	mov	r2, r0
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	1ad3      	subs	r3, r2, r3
 80030f6:	2b64      	cmp	r3, #100	@ 0x64
 80030f8:	d901      	bls.n	80030fe <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80030fa:	2303      	movs	r3, #3
 80030fc:	e0d7      	b.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80030fe:	4b0e      	ldr	r3, [pc, #56]	@ (8003138 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003106:	2b00      	cmp	r3, #0
 8003108:	d0f0      	beq.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800310a:	69bb      	ldr	r3, [r7, #24]
 800310c:	2b01      	cmp	r3, #1
 800310e:	f040 80cd 	bne.w	80032ac <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003112:	4b09      	ldr	r3, [pc, #36]	@ (8003138 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a08      	ldr	r2, [pc, #32]	@ (8003138 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003118:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800311c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800311e:	f7fe fd09 	bl	8001b34 <HAL_GetTick>
 8003122:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003124:	e00a      	b.n	800313c <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003126:	f7fe fd05 	bl	8001b34 <HAL_GetTick>
 800312a:	4602      	mov	r2, r0
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	1ad3      	subs	r3, r2, r3
 8003130:	2b64      	cmp	r3, #100	@ 0x64
 8003132:	d903      	bls.n	800313c <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003134:	2303      	movs	r3, #3
 8003136:	e0ba      	b.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8003138:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800313c:	4b5e      	ldr	r3, [pc, #376]	@ (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003144:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003148:	d0ed      	beq.n	8003126 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003152:	2b00      	cmp	r3, #0
 8003154:	d003      	beq.n	800315e <HAL_RCCEx_PeriphCLKConfig+0x682>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800315a:	2b00      	cmp	r3, #0
 800315c:	d009      	beq.n	8003172 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003166:	2b00      	cmp	r3, #0
 8003168:	d02e      	beq.n	80031c8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800316e:	2b00      	cmp	r3, #0
 8003170:	d12a      	bne.n	80031c8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003172:	4b51      	ldr	r3, [pc, #324]	@ (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003174:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003178:	0c1b      	lsrs	r3, r3, #16
 800317a:	f003 0303 	and.w	r3, r3, #3
 800317e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003180:	4b4d      	ldr	r3, [pc, #308]	@ (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003182:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003186:	0f1b      	lsrs	r3, r3, #28
 8003188:	f003 0307 	and.w	r3, r3, #7
 800318c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	695b      	ldr	r3, [r3, #20]
 8003192:	019a      	lsls	r2, r3, #6
 8003194:	693b      	ldr	r3, [r7, #16]
 8003196:	041b      	lsls	r3, r3, #16
 8003198:	431a      	orrs	r2, r3
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	699b      	ldr	r3, [r3, #24]
 800319e:	061b      	lsls	r3, r3, #24
 80031a0:	431a      	orrs	r2, r3
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	071b      	lsls	r3, r3, #28
 80031a6:	4944      	ldr	r1, [pc, #272]	@ (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80031a8:	4313      	orrs	r3, r2
 80031aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80031ae:	4b42      	ldr	r3, [pc, #264]	@ (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80031b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80031b4:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031bc:	3b01      	subs	r3, #1
 80031be:	021b      	lsls	r3, r3, #8
 80031c0:	493d      	ldr	r1, [pc, #244]	@ (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80031c2:	4313      	orrs	r3, r2
 80031c4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d022      	beq.n	800321a <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80031d8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80031dc:	d11d      	bne.n	800321a <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80031de:	4b36      	ldr	r3, [pc, #216]	@ (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80031e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031e4:	0e1b      	lsrs	r3, r3, #24
 80031e6:	f003 030f 	and.w	r3, r3, #15
 80031ea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80031ec:	4b32      	ldr	r3, [pc, #200]	@ (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80031ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031f2:	0f1b      	lsrs	r3, r3, #28
 80031f4:	f003 0307 	and.w	r3, r3, #7
 80031f8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	695b      	ldr	r3, [r3, #20]
 80031fe:	019a      	lsls	r2, r3, #6
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6a1b      	ldr	r3, [r3, #32]
 8003204:	041b      	lsls	r3, r3, #16
 8003206:	431a      	orrs	r2, r3
 8003208:	693b      	ldr	r3, [r7, #16]
 800320a:	061b      	lsls	r3, r3, #24
 800320c:	431a      	orrs	r2, r3
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	071b      	lsls	r3, r3, #28
 8003212:	4929      	ldr	r1, [pc, #164]	@ (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003214:	4313      	orrs	r3, r2
 8003216:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f003 0308 	and.w	r3, r3, #8
 8003222:	2b00      	cmp	r3, #0
 8003224:	d028      	beq.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003226:	4b24      	ldr	r3, [pc, #144]	@ (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003228:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800322c:	0e1b      	lsrs	r3, r3, #24
 800322e:	f003 030f 	and.w	r3, r3, #15
 8003232:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003234:	4b20      	ldr	r3, [pc, #128]	@ (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003236:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800323a:	0c1b      	lsrs	r3, r3, #16
 800323c:	f003 0303 	and.w	r3, r3, #3
 8003240:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	695b      	ldr	r3, [r3, #20]
 8003246:	019a      	lsls	r2, r3, #6
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	041b      	lsls	r3, r3, #16
 800324c:	431a      	orrs	r2, r3
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	061b      	lsls	r3, r3, #24
 8003252:	431a      	orrs	r2, r3
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	69db      	ldr	r3, [r3, #28]
 8003258:	071b      	lsls	r3, r3, #28
 800325a:	4917      	ldr	r1, [pc, #92]	@ (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800325c:	4313      	orrs	r3, r2
 800325e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003262:	4b15      	ldr	r3, [pc, #84]	@ (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003264:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003268:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003270:	4911      	ldr	r1, [pc, #68]	@ (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003272:	4313      	orrs	r3, r2
 8003274:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003278:	4b0f      	ldr	r3, [pc, #60]	@ (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a0e      	ldr	r2, [pc, #56]	@ (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800327e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003282:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003284:	f7fe fc56 	bl	8001b34 <HAL_GetTick>
 8003288:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800328a:	e008      	b.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800328c:	f7fe fc52 	bl	8001b34 <HAL_GetTick>
 8003290:	4602      	mov	r2, r0
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	1ad3      	subs	r3, r2, r3
 8003296:	2b64      	cmp	r3, #100	@ 0x64
 8003298:	d901      	bls.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800329a:	2303      	movs	r3, #3
 800329c:	e007      	b.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800329e:	4b06      	ldr	r3, [pc, #24]	@ (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80032a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80032aa:	d1ef      	bne.n	800328c <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80032ac:	2300      	movs	r3, #0
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	3720      	adds	r7, #32
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}
 80032b6:	bf00      	nop
 80032b8:	40023800 	.word	0x40023800

080032bc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b082      	sub	sp, #8
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d101      	bne.n	80032ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	e040      	b.n	8003350 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d106      	bne.n	80032e4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2200      	movs	r2, #0
 80032da:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80032de:	6878      	ldr	r0, [r7, #4]
 80032e0:	f7fe fb2c 	bl	800193c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2224      	movs	r2, #36	@ 0x24
 80032e8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	681a      	ldr	r2, [r3, #0]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f022 0201 	bic.w	r2, r2, #1
 80032f8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d002      	beq.n	8003308 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003302:	6878      	ldr	r0, [r7, #4]
 8003304:	f000 fbde 	bl	8003ac4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003308:	6878      	ldr	r0, [r7, #4]
 800330a:	f000 f977 	bl	80035fc <UART_SetConfig>
 800330e:	4603      	mov	r3, r0
 8003310:	2b01      	cmp	r3, #1
 8003312:	d101      	bne.n	8003318 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003314:	2301      	movs	r3, #1
 8003316:	e01b      	b.n	8003350 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	685a      	ldr	r2, [r3, #4]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003326:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	689a      	ldr	r2, [r3, #8]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003336:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	681a      	ldr	r2, [r3, #0]
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f042 0201 	orr.w	r2, r2, #1
 8003346:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003348:	6878      	ldr	r0, [r7, #4]
 800334a:	f000 fc5d 	bl	8003c08 <UART_CheckIdleState>
 800334e:	4603      	mov	r3, r0
}
 8003350:	4618      	mov	r0, r3
 8003352:	3708      	adds	r7, #8
 8003354:	46bd      	mov	sp, r7
 8003356:	bd80      	pop	{r7, pc}

08003358 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b08a      	sub	sp, #40	@ 0x28
 800335c:	af02      	add	r7, sp, #8
 800335e:	60f8      	str	r0, [r7, #12]
 8003360:	60b9      	str	r1, [r7, #8]
 8003362:	603b      	str	r3, [r7, #0]
 8003364:	4613      	mov	r3, r2
 8003366:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800336c:	2b20      	cmp	r3, #32
 800336e:	d177      	bne.n	8003460 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d002      	beq.n	800337c <HAL_UART_Transmit+0x24>
 8003376:	88fb      	ldrh	r3, [r7, #6]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d101      	bne.n	8003380 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800337c:	2301      	movs	r3, #1
 800337e:	e070      	b.n	8003462 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	2200      	movs	r2, #0
 8003384:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	2221      	movs	r2, #33	@ 0x21
 800338c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800338e:	f7fe fbd1 	bl	8001b34 <HAL_GetTick>
 8003392:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	88fa      	ldrh	r2, [r7, #6]
 8003398:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	88fa      	ldrh	r2, [r7, #6]
 80033a0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80033ac:	d108      	bne.n	80033c0 <HAL_UART_Transmit+0x68>
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	691b      	ldr	r3, [r3, #16]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d104      	bne.n	80033c0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80033b6:	2300      	movs	r3, #0
 80033b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80033ba:	68bb      	ldr	r3, [r7, #8]
 80033bc:	61bb      	str	r3, [r7, #24]
 80033be:	e003      	b.n	80033c8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80033c4:	2300      	movs	r3, #0
 80033c6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80033c8:	e02f      	b.n	800342a <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	9300      	str	r3, [sp, #0]
 80033ce:	697b      	ldr	r3, [r7, #20]
 80033d0:	2200      	movs	r2, #0
 80033d2:	2180      	movs	r1, #128	@ 0x80
 80033d4:	68f8      	ldr	r0, [r7, #12]
 80033d6:	f000 fc6e 	bl	8003cb6 <UART_WaitOnFlagUntilTimeout>
 80033da:	4603      	mov	r3, r0
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d004      	beq.n	80033ea <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	2220      	movs	r2, #32
 80033e4:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80033e6:	2303      	movs	r3, #3
 80033e8:	e03b      	b.n	8003462 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80033ea:	69fb      	ldr	r3, [r7, #28]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d10b      	bne.n	8003408 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80033f0:	69bb      	ldr	r3, [r7, #24]
 80033f2:	881b      	ldrh	r3, [r3, #0]
 80033f4:	461a      	mov	r2, r3
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80033fe:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003400:	69bb      	ldr	r3, [r7, #24]
 8003402:	3302      	adds	r3, #2
 8003404:	61bb      	str	r3, [r7, #24]
 8003406:	e007      	b.n	8003418 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003408:	69fb      	ldr	r3, [r7, #28]
 800340a:	781a      	ldrb	r2, [r3, #0]
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003412:	69fb      	ldr	r3, [r7, #28]
 8003414:	3301      	adds	r3, #1
 8003416:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800341e:	b29b      	uxth	r3, r3
 8003420:	3b01      	subs	r3, #1
 8003422:	b29a      	uxth	r2, r3
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003430:	b29b      	uxth	r3, r3
 8003432:	2b00      	cmp	r3, #0
 8003434:	d1c9      	bne.n	80033ca <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	9300      	str	r3, [sp, #0]
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	2200      	movs	r2, #0
 800343e:	2140      	movs	r1, #64	@ 0x40
 8003440:	68f8      	ldr	r0, [r7, #12]
 8003442:	f000 fc38 	bl	8003cb6 <UART_WaitOnFlagUntilTimeout>
 8003446:	4603      	mov	r3, r0
 8003448:	2b00      	cmp	r3, #0
 800344a:	d004      	beq.n	8003456 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	2220      	movs	r2, #32
 8003450:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8003452:	2303      	movs	r3, #3
 8003454:	e005      	b.n	8003462 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	2220      	movs	r2, #32
 800345a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800345c:	2300      	movs	r3, #0
 800345e:	e000      	b.n	8003462 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003460:	2302      	movs	r3, #2
  }
}
 8003462:	4618      	mov	r0, r3
 8003464:	3720      	adds	r7, #32
 8003466:	46bd      	mov	sp, r7
 8003468:	bd80      	pop	{r7, pc}

0800346a <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800346a:	b580      	push	{r7, lr}
 800346c:	b08a      	sub	sp, #40	@ 0x28
 800346e:	af02      	add	r7, sp, #8
 8003470:	60f8      	str	r0, [r7, #12]
 8003472:	60b9      	str	r1, [r7, #8]
 8003474:	603b      	str	r3, [r7, #0]
 8003476:	4613      	mov	r3, r2
 8003478:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003480:	2b20      	cmp	r3, #32
 8003482:	f040 80b5 	bne.w	80035f0 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8003486:	68bb      	ldr	r3, [r7, #8]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d002      	beq.n	8003492 <HAL_UART_Receive+0x28>
 800348c:	88fb      	ldrh	r3, [r7, #6]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d101      	bne.n	8003496 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	e0ad      	b.n	80035f2 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	2200      	movs	r2, #0
 800349a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	2222      	movs	r2, #34	@ 0x22
 80034a2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	2200      	movs	r2, #0
 80034aa:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80034ac:	f7fe fb42 	bl	8001b34 <HAL_GetTick>
 80034b0:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	88fa      	ldrh	r2, [r7, #6]
 80034b6:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	88fa      	ldrh	r2, [r7, #6]
 80034be:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	689b      	ldr	r3, [r3, #8]
 80034c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80034ca:	d10e      	bne.n	80034ea <HAL_UART_Receive+0x80>
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	691b      	ldr	r3, [r3, #16]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d105      	bne.n	80034e0 <HAL_UART_Receive+0x76>
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80034da:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80034de:	e02d      	b.n	800353c <HAL_UART_Receive+0xd2>
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	22ff      	movs	r2, #255	@ 0xff
 80034e4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80034e8:	e028      	b.n	800353c <HAL_UART_Receive+0xd2>
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d10d      	bne.n	800350e <HAL_UART_Receive+0xa4>
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	691b      	ldr	r3, [r3, #16]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d104      	bne.n	8003504 <HAL_UART_Receive+0x9a>
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	22ff      	movs	r2, #255	@ 0xff
 80034fe:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003502:	e01b      	b.n	800353c <HAL_UART_Receive+0xd2>
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	227f      	movs	r2, #127	@ 0x7f
 8003508:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800350c:	e016      	b.n	800353c <HAL_UART_Receive+0xd2>
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	689b      	ldr	r3, [r3, #8]
 8003512:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003516:	d10d      	bne.n	8003534 <HAL_UART_Receive+0xca>
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	691b      	ldr	r3, [r3, #16]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d104      	bne.n	800352a <HAL_UART_Receive+0xc0>
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	227f      	movs	r2, #127	@ 0x7f
 8003524:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003528:	e008      	b.n	800353c <HAL_UART_Receive+0xd2>
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	223f      	movs	r2, #63	@ 0x3f
 800352e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003532:	e003      	b.n	800353c <HAL_UART_Receive+0xd2>
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	2200      	movs	r2, #0
 8003538:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8003542:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800354c:	d108      	bne.n	8003560 <HAL_UART_Receive+0xf6>
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	691b      	ldr	r3, [r3, #16]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d104      	bne.n	8003560 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8003556:	2300      	movs	r3, #0
 8003558:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800355a:	68bb      	ldr	r3, [r7, #8]
 800355c:	61bb      	str	r3, [r7, #24]
 800355e:	e003      	b.n	8003568 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8003560:	68bb      	ldr	r3, [r7, #8]
 8003562:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003564:	2300      	movs	r3, #0
 8003566:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8003568:	e036      	b.n	80035d8 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	9300      	str	r3, [sp, #0]
 800356e:	697b      	ldr	r3, [r7, #20]
 8003570:	2200      	movs	r2, #0
 8003572:	2120      	movs	r1, #32
 8003574:	68f8      	ldr	r0, [r7, #12]
 8003576:	f000 fb9e 	bl	8003cb6 <UART_WaitOnFlagUntilTimeout>
 800357a:	4603      	mov	r3, r0
 800357c:	2b00      	cmp	r3, #0
 800357e:	d005      	beq.n	800358c <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	2220      	movs	r2, #32
 8003584:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 8003588:	2303      	movs	r3, #3
 800358a:	e032      	b.n	80035f2 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 800358c:	69fb      	ldr	r3, [r7, #28]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d10c      	bne.n	80035ac <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003598:	b29a      	uxth	r2, r3
 800359a:	8a7b      	ldrh	r3, [r7, #18]
 800359c:	4013      	ands	r3, r2
 800359e:	b29a      	uxth	r2, r3
 80035a0:	69bb      	ldr	r3, [r7, #24]
 80035a2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80035a4:	69bb      	ldr	r3, [r7, #24]
 80035a6:	3302      	adds	r3, #2
 80035a8:	61bb      	str	r3, [r7, #24]
 80035aa:	e00c      	b.n	80035c6 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035b2:	b2da      	uxtb	r2, r3
 80035b4:	8a7b      	ldrh	r3, [r7, #18]
 80035b6:	b2db      	uxtb	r3, r3
 80035b8:	4013      	ands	r3, r2
 80035ba:	b2da      	uxtb	r2, r3
 80035bc:	69fb      	ldr	r3, [r7, #28]
 80035be:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80035c0:	69fb      	ldr	r3, [r7, #28]
 80035c2:	3301      	adds	r3, #1
 80035c4:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80035cc:	b29b      	uxth	r3, r3
 80035ce:	3b01      	subs	r3, #1
 80035d0:	b29a      	uxth	r2, r3
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80035de:	b29b      	uxth	r3, r3
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d1c2      	bne.n	800356a <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	2220      	movs	r2, #32
 80035e8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 80035ec:	2300      	movs	r3, #0
 80035ee:	e000      	b.n	80035f2 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 80035f0:	2302      	movs	r3, #2
  }
}
 80035f2:	4618      	mov	r0, r3
 80035f4:	3720      	adds	r7, #32
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}
	...

080035fc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b088      	sub	sp, #32
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003604:	2300      	movs	r3, #0
 8003606:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	689a      	ldr	r2, [r3, #8]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	691b      	ldr	r3, [r3, #16]
 8003610:	431a      	orrs	r2, r3
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	695b      	ldr	r3, [r3, #20]
 8003616:	431a      	orrs	r2, r3
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	69db      	ldr	r3, [r3, #28]
 800361c:	4313      	orrs	r3, r2
 800361e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	681a      	ldr	r2, [r3, #0]
 8003626:	4ba6      	ldr	r3, [pc, #664]	@ (80038c0 <UART_SetConfig+0x2c4>)
 8003628:	4013      	ands	r3, r2
 800362a:	687a      	ldr	r2, [r7, #4]
 800362c:	6812      	ldr	r2, [r2, #0]
 800362e:	6979      	ldr	r1, [r7, #20]
 8003630:	430b      	orrs	r3, r1
 8003632:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	68da      	ldr	r2, [r3, #12]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	430a      	orrs	r2, r1
 8003648:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	699b      	ldr	r3, [r3, #24]
 800364e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6a1b      	ldr	r3, [r3, #32]
 8003654:	697a      	ldr	r2, [r7, #20]
 8003656:	4313      	orrs	r3, r2
 8003658:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	689b      	ldr	r3, [r3, #8]
 8003660:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	697a      	ldr	r2, [r7, #20]
 800366a:	430a      	orrs	r2, r1
 800366c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a94      	ldr	r2, [pc, #592]	@ (80038c4 <UART_SetConfig+0x2c8>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d120      	bne.n	80036ba <UART_SetConfig+0xbe>
 8003678:	4b93      	ldr	r3, [pc, #588]	@ (80038c8 <UART_SetConfig+0x2cc>)
 800367a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800367e:	f003 0303 	and.w	r3, r3, #3
 8003682:	2b03      	cmp	r3, #3
 8003684:	d816      	bhi.n	80036b4 <UART_SetConfig+0xb8>
 8003686:	a201      	add	r2, pc, #4	@ (adr r2, 800368c <UART_SetConfig+0x90>)
 8003688:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800368c:	0800369d 	.word	0x0800369d
 8003690:	080036a9 	.word	0x080036a9
 8003694:	080036a3 	.word	0x080036a3
 8003698:	080036af 	.word	0x080036af
 800369c:	2301      	movs	r3, #1
 800369e:	77fb      	strb	r3, [r7, #31]
 80036a0:	e150      	b.n	8003944 <UART_SetConfig+0x348>
 80036a2:	2302      	movs	r3, #2
 80036a4:	77fb      	strb	r3, [r7, #31]
 80036a6:	e14d      	b.n	8003944 <UART_SetConfig+0x348>
 80036a8:	2304      	movs	r3, #4
 80036aa:	77fb      	strb	r3, [r7, #31]
 80036ac:	e14a      	b.n	8003944 <UART_SetConfig+0x348>
 80036ae:	2308      	movs	r3, #8
 80036b0:	77fb      	strb	r3, [r7, #31]
 80036b2:	e147      	b.n	8003944 <UART_SetConfig+0x348>
 80036b4:	2310      	movs	r3, #16
 80036b6:	77fb      	strb	r3, [r7, #31]
 80036b8:	e144      	b.n	8003944 <UART_SetConfig+0x348>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4a83      	ldr	r2, [pc, #524]	@ (80038cc <UART_SetConfig+0x2d0>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d132      	bne.n	800372a <UART_SetConfig+0x12e>
 80036c4:	4b80      	ldr	r3, [pc, #512]	@ (80038c8 <UART_SetConfig+0x2cc>)
 80036c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036ca:	f003 030c 	and.w	r3, r3, #12
 80036ce:	2b0c      	cmp	r3, #12
 80036d0:	d828      	bhi.n	8003724 <UART_SetConfig+0x128>
 80036d2:	a201      	add	r2, pc, #4	@ (adr r2, 80036d8 <UART_SetConfig+0xdc>)
 80036d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036d8:	0800370d 	.word	0x0800370d
 80036dc:	08003725 	.word	0x08003725
 80036e0:	08003725 	.word	0x08003725
 80036e4:	08003725 	.word	0x08003725
 80036e8:	08003719 	.word	0x08003719
 80036ec:	08003725 	.word	0x08003725
 80036f0:	08003725 	.word	0x08003725
 80036f4:	08003725 	.word	0x08003725
 80036f8:	08003713 	.word	0x08003713
 80036fc:	08003725 	.word	0x08003725
 8003700:	08003725 	.word	0x08003725
 8003704:	08003725 	.word	0x08003725
 8003708:	0800371f 	.word	0x0800371f
 800370c:	2300      	movs	r3, #0
 800370e:	77fb      	strb	r3, [r7, #31]
 8003710:	e118      	b.n	8003944 <UART_SetConfig+0x348>
 8003712:	2302      	movs	r3, #2
 8003714:	77fb      	strb	r3, [r7, #31]
 8003716:	e115      	b.n	8003944 <UART_SetConfig+0x348>
 8003718:	2304      	movs	r3, #4
 800371a:	77fb      	strb	r3, [r7, #31]
 800371c:	e112      	b.n	8003944 <UART_SetConfig+0x348>
 800371e:	2308      	movs	r3, #8
 8003720:	77fb      	strb	r3, [r7, #31]
 8003722:	e10f      	b.n	8003944 <UART_SetConfig+0x348>
 8003724:	2310      	movs	r3, #16
 8003726:	77fb      	strb	r3, [r7, #31]
 8003728:	e10c      	b.n	8003944 <UART_SetConfig+0x348>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a68      	ldr	r2, [pc, #416]	@ (80038d0 <UART_SetConfig+0x2d4>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d120      	bne.n	8003776 <UART_SetConfig+0x17a>
 8003734:	4b64      	ldr	r3, [pc, #400]	@ (80038c8 <UART_SetConfig+0x2cc>)
 8003736:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800373a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800373e:	2b30      	cmp	r3, #48	@ 0x30
 8003740:	d013      	beq.n	800376a <UART_SetConfig+0x16e>
 8003742:	2b30      	cmp	r3, #48	@ 0x30
 8003744:	d814      	bhi.n	8003770 <UART_SetConfig+0x174>
 8003746:	2b20      	cmp	r3, #32
 8003748:	d009      	beq.n	800375e <UART_SetConfig+0x162>
 800374a:	2b20      	cmp	r3, #32
 800374c:	d810      	bhi.n	8003770 <UART_SetConfig+0x174>
 800374e:	2b00      	cmp	r3, #0
 8003750:	d002      	beq.n	8003758 <UART_SetConfig+0x15c>
 8003752:	2b10      	cmp	r3, #16
 8003754:	d006      	beq.n	8003764 <UART_SetConfig+0x168>
 8003756:	e00b      	b.n	8003770 <UART_SetConfig+0x174>
 8003758:	2300      	movs	r3, #0
 800375a:	77fb      	strb	r3, [r7, #31]
 800375c:	e0f2      	b.n	8003944 <UART_SetConfig+0x348>
 800375e:	2302      	movs	r3, #2
 8003760:	77fb      	strb	r3, [r7, #31]
 8003762:	e0ef      	b.n	8003944 <UART_SetConfig+0x348>
 8003764:	2304      	movs	r3, #4
 8003766:	77fb      	strb	r3, [r7, #31]
 8003768:	e0ec      	b.n	8003944 <UART_SetConfig+0x348>
 800376a:	2308      	movs	r3, #8
 800376c:	77fb      	strb	r3, [r7, #31]
 800376e:	e0e9      	b.n	8003944 <UART_SetConfig+0x348>
 8003770:	2310      	movs	r3, #16
 8003772:	77fb      	strb	r3, [r7, #31]
 8003774:	e0e6      	b.n	8003944 <UART_SetConfig+0x348>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4a56      	ldr	r2, [pc, #344]	@ (80038d4 <UART_SetConfig+0x2d8>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d120      	bne.n	80037c2 <UART_SetConfig+0x1c6>
 8003780:	4b51      	ldr	r3, [pc, #324]	@ (80038c8 <UART_SetConfig+0x2cc>)
 8003782:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003786:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800378a:	2bc0      	cmp	r3, #192	@ 0xc0
 800378c:	d013      	beq.n	80037b6 <UART_SetConfig+0x1ba>
 800378e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003790:	d814      	bhi.n	80037bc <UART_SetConfig+0x1c0>
 8003792:	2b80      	cmp	r3, #128	@ 0x80
 8003794:	d009      	beq.n	80037aa <UART_SetConfig+0x1ae>
 8003796:	2b80      	cmp	r3, #128	@ 0x80
 8003798:	d810      	bhi.n	80037bc <UART_SetConfig+0x1c0>
 800379a:	2b00      	cmp	r3, #0
 800379c:	d002      	beq.n	80037a4 <UART_SetConfig+0x1a8>
 800379e:	2b40      	cmp	r3, #64	@ 0x40
 80037a0:	d006      	beq.n	80037b0 <UART_SetConfig+0x1b4>
 80037a2:	e00b      	b.n	80037bc <UART_SetConfig+0x1c0>
 80037a4:	2300      	movs	r3, #0
 80037a6:	77fb      	strb	r3, [r7, #31]
 80037a8:	e0cc      	b.n	8003944 <UART_SetConfig+0x348>
 80037aa:	2302      	movs	r3, #2
 80037ac:	77fb      	strb	r3, [r7, #31]
 80037ae:	e0c9      	b.n	8003944 <UART_SetConfig+0x348>
 80037b0:	2304      	movs	r3, #4
 80037b2:	77fb      	strb	r3, [r7, #31]
 80037b4:	e0c6      	b.n	8003944 <UART_SetConfig+0x348>
 80037b6:	2308      	movs	r3, #8
 80037b8:	77fb      	strb	r3, [r7, #31]
 80037ba:	e0c3      	b.n	8003944 <UART_SetConfig+0x348>
 80037bc:	2310      	movs	r3, #16
 80037be:	77fb      	strb	r3, [r7, #31]
 80037c0:	e0c0      	b.n	8003944 <UART_SetConfig+0x348>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a44      	ldr	r2, [pc, #272]	@ (80038d8 <UART_SetConfig+0x2dc>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d125      	bne.n	8003818 <UART_SetConfig+0x21c>
 80037cc:	4b3e      	ldr	r3, [pc, #248]	@ (80038c8 <UART_SetConfig+0x2cc>)
 80037ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80037d6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80037da:	d017      	beq.n	800380c <UART_SetConfig+0x210>
 80037dc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80037e0:	d817      	bhi.n	8003812 <UART_SetConfig+0x216>
 80037e2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80037e6:	d00b      	beq.n	8003800 <UART_SetConfig+0x204>
 80037e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80037ec:	d811      	bhi.n	8003812 <UART_SetConfig+0x216>
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d003      	beq.n	80037fa <UART_SetConfig+0x1fe>
 80037f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80037f6:	d006      	beq.n	8003806 <UART_SetConfig+0x20a>
 80037f8:	e00b      	b.n	8003812 <UART_SetConfig+0x216>
 80037fa:	2300      	movs	r3, #0
 80037fc:	77fb      	strb	r3, [r7, #31]
 80037fe:	e0a1      	b.n	8003944 <UART_SetConfig+0x348>
 8003800:	2302      	movs	r3, #2
 8003802:	77fb      	strb	r3, [r7, #31]
 8003804:	e09e      	b.n	8003944 <UART_SetConfig+0x348>
 8003806:	2304      	movs	r3, #4
 8003808:	77fb      	strb	r3, [r7, #31]
 800380a:	e09b      	b.n	8003944 <UART_SetConfig+0x348>
 800380c:	2308      	movs	r3, #8
 800380e:	77fb      	strb	r3, [r7, #31]
 8003810:	e098      	b.n	8003944 <UART_SetConfig+0x348>
 8003812:	2310      	movs	r3, #16
 8003814:	77fb      	strb	r3, [r7, #31]
 8003816:	e095      	b.n	8003944 <UART_SetConfig+0x348>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a2f      	ldr	r2, [pc, #188]	@ (80038dc <UART_SetConfig+0x2e0>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d125      	bne.n	800386e <UART_SetConfig+0x272>
 8003822:	4b29      	ldr	r3, [pc, #164]	@ (80038c8 <UART_SetConfig+0x2cc>)
 8003824:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003828:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800382c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003830:	d017      	beq.n	8003862 <UART_SetConfig+0x266>
 8003832:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003836:	d817      	bhi.n	8003868 <UART_SetConfig+0x26c>
 8003838:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800383c:	d00b      	beq.n	8003856 <UART_SetConfig+0x25a>
 800383e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003842:	d811      	bhi.n	8003868 <UART_SetConfig+0x26c>
 8003844:	2b00      	cmp	r3, #0
 8003846:	d003      	beq.n	8003850 <UART_SetConfig+0x254>
 8003848:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800384c:	d006      	beq.n	800385c <UART_SetConfig+0x260>
 800384e:	e00b      	b.n	8003868 <UART_SetConfig+0x26c>
 8003850:	2301      	movs	r3, #1
 8003852:	77fb      	strb	r3, [r7, #31]
 8003854:	e076      	b.n	8003944 <UART_SetConfig+0x348>
 8003856:	2302      	movs	r3, #2
 8003858:	77fb      	strb	r3, [r7, #31]
 800385a:	e073      	b.n	8003944 <UART_SetConfig+0x348>
 800385c:	2304      	movs	r3, #4
 800385e:	77fb      	strb	r3, [r7, #31]
 8003860:	e070      	b.n	8003944 <UART_SetConfig+0x348>
 8003862:	2308      	movs	r3, #8
 8003864:	77fb      	strb	r3, [r7, #31]
 8003866:	e06d      	b.n	8003944 <UART_SetConfig+0x348>
 8003868:	2310      	movs	r3, #16
 800386a:	77fb      	strb	r3, [r7, #31]
 800386c:	e06a      	b.n	8003944 <UART_SetConfig+0x348>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4a1b      	ldr	r2, [pc, #108]	@ (80038e0 <UART_SetConfig+0x2e4>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d138      	bne.n	80038ea <UART_SetConfig+0x2ee>
 8003878:	4b13      	ldr	r3, [pc, #76]	@ (80038c8 <UART_SetConfig+0x2cc>)
 800387a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800387e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8003882:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003886:	d017      	beq.n	80038b8 <UART_SetConfig+0x2bc>
 8003888:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800388c:	d82a      	bhi.n	80038e4 <UART_SetConfig+0x2e8>
 800388e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003892:	d00b      	beq.n	80038ac <UART_SetConfig+0x2b0>
 8003894:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003898:	d824      	bhi.n	80038e4 <UART_SetConfig+0x2e8>
 800389a:	2b00      	cmp	r3, #0
 800389c:	d003      	beq.n	80038a6 <UART_SetConfig+0x2aa>
 800389e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80038a2:	d006      	beq.n	80038b2 <UART_SetConfig+0x2b6>
 80038a4:	e01e      	b.n	80038e4 <UART_SetConfig+0x2e8>
 80038a6:	2300      	movs	r3, #0
 80038a8:	77fb      	strb	r3, [r7, #31]
 80038aa:	e04b      	b.n	8003944 <UART_SetConfig+0x348>
 80038ac:	2302      	movs	r3, #2
 80038ae:	77fb      	strb	r3, [r7, #31]
 80038b0:	e048      	b.n	8003944 <UART_SetConfig+0x348>
 80038b2:	2304      	movs	r3, #4
 80038b4:	77fb      	strb	r3, [r7, #31]
 80038b6:	e045      	b.n	8003944 <UART_SetConfig+0x348>
 80038b8:	2308      	movs	r3, #8
 80038ba:	77fb      	strb	r3, [r7, #31]
 80038bc:	e042      	b.n	8003944 <UART_SetConfig+0x348>
 80038be:	bf00      	nop
 80038c0:	efff69f3 	.word	0xefff69f3
 80038c4:	40011000 	.word	0x40011000
 80038c8:	40023800 	.word	0x40023800
 80038cc:	40004400 	.word	0x40004400
 80038d0:	40004800 	.word	0x40004800
 80038d4:	40004c00 	.word	0x40004c00
 80038d8:	40005000 	.word	0x40005000
 80038dc:	40011400 	.word	0x40011400
 80038e0:	40007800 	.word	0x40007800
 80038e4:	2310      	movs	r3, #16
 80038e6:	77fb      	strb	r3, [r7, #31]
 80038e8:	e02c      	b.n	8003944 <UART_SetConfig+0x348>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a72      	ldr	r2, [pc, #456]	@ (8003ab8 <UART_SetConfig+0x4bc>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d125      	bne.n	8003940 <UART_SetConfig+0x344>
 80038f4:	4b71      	ldr	r3, [pc, #452]	@ (8003abc <UART_SetConfig+0x4c0>)
 80038f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038fa:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80038fe:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003902:	d017      	beq.n	8003934 <UART_SetConfig+0x338>
 8003904:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003908:	d817      	bhi.n	800393a <UART_SetConfig+0x33e>
 800390a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800390e:	d00b      	beq.n	8003928 <UART_SetConfig+0x32c>
 8003910:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003914:	d811      	bhi.n	800393a <UART_SetConfig+0x33e>
 8003916:	2b00      	cmp	r3, #0
 8003918:	d003      	beq.n	8003922 <UART_SetConfig+0x326>
 800391a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800391e:	d006      	beq.n	800392e <UART_SetConfig+0x332>
 8003920:	e00b      	b.n	800393a <UART_SetConfig+0x33e>
 8003922:	2300      	movs	r3, #0
 8003924:	77fb      	strb	r3, [r7, #31]
 8003926:	e00d      	b.n	8003944 <UART_SetConfig+0x348>
 8003928:	2302      	movs	r3, #2
 800392a:	77fb      	strb	r3, [r7, #31]
 800392c:	e00a      	b.n	8003944 <UART_SetConfig+0x348>
 800392e:	2304      	movs	r3, #4
 8003930:	77fb      	strb	r3, [r7, #31]
 8003932:	e007      	b.n	8003944 <UART_SetConfig+0x348>
 8003934:	2308      	movs	r3, #8
 8003936:	77fb      	strb	r3, [r7, #31]
 8003938:	e004      	b.n	8003944 <UART_SetConfig+0x348>
 800393a:	2310      	movs	r3, #16
 800393c:	77fb      	strb	r3, [r7, #31]
 800393e:	e001      	b.n	8003944 <UART_SetConfig+0x348>
 8003940:	2310      	movs	r3, #16
 8003942:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	69db      	ldr	r3, [r3, #28]
 8003948:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800394c:	d15b      	bne.n	8003a06 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800394e:	7ffb      	ldrb	r3, [r7, #31]
 8003950:	2b08      	cmp	r3, #8
 8003952:	d828      	bhi.n	80039a6 <UART_SetConfig+0x3aa>
 8003954:	a201      	add	r2, pc, #4	@ (adr r2, 800395c <UART_SetConfig+0x360>)
 8003956:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800395a:	bf00      	nop
 800395c:	08003981 	.word	0x08003981
 8003960:	08003989 	.word	0x08003989
 8003964:	08003991 	.word	0x08003991
 8003968:	080039a7 	.word	0x080039a7
 800396c:	08003997 	.word	0x08003997
 8003970:	080039a7 	.word	0x080039a7
 8003974:	080039a7 	.word	0x080039a7
 8003978:	080039a7 	.word	0x080039a7
 800397c:	0800399f 	.word	0x0800399f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003980:	f7ff f884 	bl	8002a8c <HAL_RCC_GetPCLK1Freq>
 8003984:	61b8      	str	r0, [r7, #24]
        break;
 8003986:	e013      	b.n	80039b0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003988:	f7ff f894 	bl	8002ab4 <HAL_RCC_GetPCLK2Freq>
 800398c:	61b8      	str	r0, [r7, #24]
        break;
 800398e:	e00f      	b.n	80039b0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003990:	4b4b      	ldr	r3, [pc, #300]	@ (8003ac0 <UART_SetConfig+0x4c4>)
 8003992:	61bb      	str	r3, [r7, #24]
        break;
 8003994:	e00c      	b.n	80039b0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003996:	f7fe ffa7 	bl	80028e8 <HAL_RCC_GetSysClockFreq>
 800399a:	61b8      	str	r0, [r7, #24]
        break;
 800399c:	e008      	b.n	80039b0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800399e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80039a2:	61bb      	str	r3, [r7, #24]
        break;
 80039a4:	e004      	b.n	80039b0 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80039a6:	2300      	movs	r3, #0
 80039a8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80039aa:	2301      	movs	r3, #1
 80039ac:	77bb      	strb	r3, [r7, #30]
        break;
 80039ae:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80039b0:	69bb      	ldr	r3, [r7, #24]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d074      	beq.n	8003aa0 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80039b6:	69bb      	ldr	r3, [r7, #24]
 80039b8:	005a      	lsls	r2, r3, #1
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	085b      	lsrs	r3, r3, #1
 80039c0:	441a      	add	r2, r3
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80039ca:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80039cc:	693b      	ldr	r3, [r7, #16]
 80039ce:	2b0f      	cmp	r3, #15
 80039d0:	d916      	bls.n	8003a00 <UART_SetConfig+0x404>
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80039d8:	d212      	bcs.n	8003a00 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	b29b      	uxth	r3, r3
 80039de:	f023 030f 	bic.w	r3, r3, #15
 80039e2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80039e4:	693b      	ldr	r3, [r7, #16]
 80039e6:	085b      	lsrs	r3, r3, #1
 80039e8:	b29b      	uxth	r3, r3
 80039ea:	f003 0307 	and.w	r3, r3, #7
 80039ee:	b29a      	uxth	r2, r3
 80039f0:	89fb      	ldrh	r3, [r7, #14]
 80039f2:	4313      	orrs	r3, r2
 80039f4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	89fa      	ldrh	r2, [r7, #14]
 80039fc:	60da      	str	r2, [r3, #12]
 80039fe:	e04f      	b.n	8003aa0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003a00:	2301      	movs	r3, #1
 8003a02:	77bb      	strb	r3, [r7, #30]
 8003a04:	e04c      	b.n	8003aa0 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003a06:	7ffb      	ldrb	r3, [r7, #31]
 8003a08:	2b08      	cmp	r3, #8
 8003a0a:	d828      	bhi.n	8003a5e <UART_SetConfig+0x462>
 8003a0c:	a201      	add	r2, pc, #4	@ (adr r2, 8003a14 <UART_SetConfig+0x418>)
 8003a0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a12:	bf00      	nop
 8003a14:	08003a39 	.word	0x08003a39
 8003a18:	08003a41 	.word	0x08003a41
 8003a1c:	08003a49 	.word	0x08003a49
 8003a20:	08003a5f 	.word	0x08003a5f
 8003a24:	08003a4f 	.word	0x08003a4f
 8003a28:	08003a5f 	.word	0x08003a5f
 8003a2c:	08003a5f 	.word	0x08003a5f
 8003a30:	08003a5f 	.word	0x08003a5f
 8003a34:	08003a57 	.word	0x08003a57
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a38:	f7ff f828 	bl	8002a8c <HAL_RCC_GetPCLK1Freq>
 8003a3c:	61b8      	str	r0, [r7, #24]
        break;
 8003a3e:	e013      	b.n	8003a68 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003a40:	f7ff f838 	bl	8002ab4 <HAL_RCC_GetPCLK2Freq>
 8003a44:	61b8      	str	r0, [r7, #24]
        break;
 8003a46:	e00f      	b.n	8003a68 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a48:	4b1d      	ldr	r3, [pc, #116]	@ (8003ac0 <UART_SetConfig+0x4c4>)
 8003a4a:	61bb      	str	r3, [r7, #24]
        break;
 8003a4c:	e00c      	b.n	8003a68 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a4e:	f7fe ff4b 	bl	80028e8 <HAL_RCC_GetSysClockFreq>
 8003a52:	61b8      	str	r0, [r7, #24]
        break;
 8003a54:	e008      	b.n	8003a68 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a56:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003a5a:	61bb      	str	r3, [r7, #24]
        break;
 8003a5c:	e004      	b.n	8003a68 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8003a5e:	2300      	movs	r3, #0
 8003a60:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003a62:	2301      	movs	r3, #1
 8003a64:	77bb      	strb	r3, [r7, #30]
        break;
 8003a66:	bf00      	nop
    }

    if (pclk != 0U)
 8003a68:	69bb      	ldr	r3, [r7, #24]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d018      	beq.n	8003aa0 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	085a      	lsrs	r2, r3, #1
 8003a74:	69bb      	ldr	r3, [r7, #24]
 8003a76:	441a      	add	r2, r3
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a80:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a82:	693b      	ldr	r3, [r7, #16]
 8003a84:	2b0f      	cmp	r3, #15
 8003a86:	d909      	bls.n	8003a9c <UART_SetConfig+0x4a0>
 8003a88:	693b      	ldr	r3, [r7, #16]
 8003a8a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a8e:	d205      	bcs.n	8003a9c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003a90:	693b      	ldr	r3, [r7, #16]
 8003a92:	b29a      	uxth	r2, r3
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	60da      	str	r2, [r3, #12]
 8003a9a:	e001      	b.n	8003aa0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003aac:	7fbb      	ldrb	r3, [r7, #30]
}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	3720      	adds	r7, #32
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}
 8003ab6:	bf00      	nop
 8003ab8:	40007c00 	.word	0x40007c00
 8003abc:	40023800 	.word	0x40023800
 8003ac0:	00f42400 	.word	0x00f42400

08003ac4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b083      	sub	sp, #12
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ad0:	f003 0308 	and.w	r3, r3, #8
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d00a      	beq.n	8003aee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	430a      	orrs	r2, r1
 8003aec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003af2:	f003 0301 	and.w	r3, r3, #1
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d00a      	beq.n	8003b10 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	430a      	orrs	r2, r1
 8003b0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b14:	f003 0302 	and.w	r3, r3, #2
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d00a      	beq.n	8003b32 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	430a      	orrs	r2, r1
 8003b30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b36:	f003 0304 	and.w	r3, r3, #4
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d00a      	beq.n	8003b54 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	430a      	orrs	r2, r1
 8003b52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b58:	f003 0310 	and.w	r3, r3, #16
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d00a      	beq.n	8003b76 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	689b      	ldr	r3, [r3, #8]
 8003b66:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	430a      	orrs	r2, r1
 8003b74:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b7a:	f003 0320 	and.w	r3, r3, #32
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d00a      	beq.n	8003b98 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	689b      	ldr	r3, [r3, #8]
 8003b88:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	430a      	orrs	r2, r1
 8003b96:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d01a      	beq.n	8003bda <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	430a      	orrs	r2, r1
 8003bb8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bbe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003bc2:	d10a      	bne.n	8003bda <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	430a      	orrs	r2, r1
 8003bd8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d00a      	beq.n	8003bfc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	430a      	orrs	r2, r1
 8003bfa:	605a      	str	r2, [r3, #4]
  }
}
 8003bfc:	bf00      	nop
 8003bfe:	370c      	adds	r7, #12
 8003c00:	46bd      	mov	sp, r7
 8003c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c06:	4770      	bx	lr

08003c08 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b08c      	sub	sp, #48	@ 0x30
 8003c0c:	af02      	add	r7, sp, #8
 8003c0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2200      	movs	r2, #0
 8003c14:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003c18:	f7fd ff8c 	bl	8001b34 <HAL_GetTick>
 8003c1c:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f003 0308 	and.w	r3, r3, #8
 8003c28:	2b08      	cmp	r3, #8
 8003c2a:	d12e      	bne.n	8003c8a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c2c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003c30:	9300      	str	r3, [sp, #0]
 8003c32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c34:	2200      	movs	r2, #0
 8003c36:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003c3a:	6878      	ldr	r0, [r7, #4]
 8003c3c:	f000 f83b 	bl	8003cb6 <UART_WaitOnFlagUntilTimeout>
 8003c40:	4603      	mov	r3, r0
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d021      	beq.n	8003c8a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	e853 3f00 	ldrex	r3, [r3]
 8003c52:	60fb      	str	r3, [r7, #12]
   return(result);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003c5a:	623b      	str	r3, [r7, #32]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	461a      	mov	r2, r3
 8003c62:	6a3b      	ldr	r3, [r7, #32]
 8003c64:	61fb      	str	r3, [r7, #28]
 8003c66:	61ba      	str	r2, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c68:	69b9      	ldr	r1, [r7, #24]
 8003c6a:	69fa      	ldr	r2, [r7, #28]
 8003c6c:	e841 2300 	strex	r3, r2, [r1]
 8003c70:	617b      	str	r3, [r7, #20]
   return(result);
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d1e6      	bne.n	8003c46 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2220      	movs	r2, #32
 8003c7c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2200      	movs	r2, #0
 8003c82:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c86:	2303      	movs	r3, #3
 8003c88:	e011      	b.n	8003cae <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2220      	movs	r2, #32
 8003c8e:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2220      	movs	r2, #32
 8003c94:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003cac:	2300      	movs	r3, #0
}
 8003cae:	4618      	mov	r0, r3
 8003cb0:	3728      	adds	r7, #40	@ 0x28
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bd80      	pop	{r7, pc}

08003cb6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003cb6:	b580      	push	{r7, lr}
 8003cb8:	b084      	sub	sp, #16
 8003cba:	af00      	add	r7, sp, #0
 8003cbc:	60f8      	str	r0, [r7, #12]
 8003cbe:	60b9      	str	r1, [r7, #8]
 8003cc0:	603b      	str	r3, [r7, #0]
 8003cc2:	4613      	mov	r3, r2
 8003cc4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003cc6:	e04f      	b.n	8003d68 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cc8:	69bb      	ldr	r3, [r7, #24]
 8003cca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cce:	d04b      	beq.n	8003d68 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cd0:	f7fd ff30 	bl	8001b34 <HAL_GetTick>
 8003cd4:	4602      	mov	r2, r0
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	1ad3      	subs	r3, r2, r3
 8003cda:	69ba      	ldr	r2, [r7, #24]
 8003cdc:	429a      	cmp	r2, r3
 8003cde:	d302      	bcc.n	8003ce6 <UART_WaitOnFlagUntilTimeout+0x30>
 8003ce0:	69bb      	ldr	r3, [r7, #24]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d101      	bne.n	8003cea <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003ce6:	2303      	movs	r3, #3
 8003ce8:	e04e      	b.n	8003d88 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f003 0304 	and.w	r3, r3, #4
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d037      	beq.n	8003d68 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	2b80      	cmp	r3, #128	@ 0x80
 8003cfc:	d034      	beq.n	8003d68 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003cfe:	68bb      	ldr	r3, [r7, #8]
 8003d00:	2b40      	cmp	r3, #64	@ 0x40
 8003d02:	d031      	beq.n	8003d68 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	69db      	ldr	r3, [r3, #28]
 8003d0a:	f003 0308 	and.w	r3, r3, #8
 8003d0e:	2b08      	cmp	r3, #8
 8003d10:	d110      	bne.n	8003d34 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	2208      	movs	r2, #8
 8003d18:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003d1a:	68f8      	ldr	r0, [r7, #12]
 8003d1c:	f000 f838 	bl	8003d90 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	2208      	movs	r2, #8
 8003d24:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003d30:	2301      	movs	r3, #1
 8003d32:	e029      	b.n	8003d88 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	69db      	ldr	r3, [r3, #28]
 8003d3a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003d3e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003d42:	d111      	bne.n	8003d68 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003d4c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003d4e:	68f8      	ldr	r0, [r7, #12]
 8003d50:	f000 f81e 	bl	8003d90 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	2220      	movs	r2, #32
 8003d58:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003d64:	2303      	movs	r3, #3
 8003d66:	e00f      	b.n	8003d88 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	69da      	ldr	r2, [r3, #28]
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	4013      	ands	r3, r2
 8003d72:	68ba      	ldr	r2, [r7, #8]
 8003d74:	429a      	cmp	r2, r3
 8003d76:	bf0c      	ite	eq
 8003d78:	2301      	moveq	r3, #1
 8003d7a:	2300      	movne	r3, #0
 8003d7c:	b2db      	uxtb	r3, r3
 8003d7e:	461a      	mov	r2, r3
 8003d80:	79fb      	ldrb	r3, [r7, #7]
 8003d82:	429a      	cmp	r2, r3
 8003d84:	d0a0      	beq.n	8003cc8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003d86:	2300      	movs	r3, #0
}
 8003d88:	4618      	mov	r0, r3
 8003d8a:	3710      	adds	r7, #16
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bd80      	pop	{r7, pc}

08003d90 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003d90:	b480      	push	{r7}
 8003d92:	b095      	sub	sp, #84	@ 0x54
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003da0:	e853 3f00 	ldrex	r3, [r3]
 8003da4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003da6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003da8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003dac:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	461a      	mov	r2, r3
 8003db4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003db6:	643b      	str	r3, [r7, #64]	@ 0x40
 8003db8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dba:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003dbc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003dbe:	e841 2300 	strex	r3, r2, [r1]
 8003dc2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003dc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d1e6      	bne.n	8003d98 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	3308      	adds	r3, #8
 8003dd0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dd2:	6a3b      	ldr	r3, [r7, #32]
 8003dd4:	e853 3f00 	ldrex	r3, [r3]
 8003dd8:	61fb      	str	r3, [r7, #28]
   return(result);
 8003dda:	69fb      	ldr	r3, [r7, #28]
 8003ddc:	f023 0301 	bic.w	r3, r3, #1
 8003de0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	3308      	adds	r3, #8
 8003de8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003dea:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003dec:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dee:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003df0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003df2:	e841 2300 	strex	r3, r2, [r1]
 8003df6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003df8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d1e5      	bne.n	8003dca <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e02:	2b01      	cmp	r3, #1
 8003e04:	d118      	bne.n	8003e38 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	e853 3f00 	ldrex	r3, [r3]
 8003e12:	60bb      	str	r3, [r7, #8]
   return(result);
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	f023 0310 	bic.w	r3, r3, #16
 8003e1a:	647b      	str	r3, [r7, #68]	@ 0x44
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	461a      	mov	r2, r3
 8003e22:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003e24:	61bb      	str	r3, [r7, #24]
 8003e26:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e28:	6979      	ldr	r1, [r7, #20]
 8003e2a:	69ba      	ldr	r2, [r7, #24]
 8003e2c:	e841 2300 	strex	r3, r2, [r1]
 8003e30:	613b      	str	r3, [r7, #16]
   return(result);
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d1e6      	bne.n	8003e06 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2220      	movs	r2, #32
 8003e3c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2200      	movs	r2, #0
 8003e44:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003e4c:	bf00      	nop
 8003e4e:	3754      	adds	r7, #84	@ 0x54
 8003e50:	46bd      	mov	sp, r7
 8003e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e56:	4770      	bx	lr

08003e58 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	b085      	sub	sp, #20
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	4603      	mov	r3, r0
 8003e60:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003e62:	2300      	movs	r3, #0
 8003e64:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003e66:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003e6a:	2b84      	cmp	r3, #132	@ 0x84
 8003e6c:	d005      	beq.n	8003e7a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003e6e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	4413      	add	r3, r2
 8003e76:	3303      	adds	r3, #3
 8003e78:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
}
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	3714      	adds	r7, #20
 8003e80:	46bd      	mov	sp, r7
 8003e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e86:	4770      	bx	lr

08003e88 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003e8c:	f001 f8b2 	bl	8004ff4 <vTaskStartScheduler>
  
  return osOK;
 8003e90:	2300      	movs	r3, #0
}
 8003e92:	4618      	mov	r0, r3
 8003e94:	bd80      	pop	{r7, pc}

08003e96 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003e96:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e98:	b089      	sub	sp, #36	@ 0x24
 8003e9a:	af04      	add	r7, sp, #16
 8003e9c:	6078      	str	r0, [r7, #4]
 8003e9e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	695b      	ldr	r3, [r3, #20]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d020      	beq.n	8003eea <osThreadCreate+0x54>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	699b      	ldr	r3, [r3, #24]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d01c      	beq.n	8003eea <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	685c      	ldr	r4, [r3, #4]
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	691e      	ldr	r6, [r3, #16]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	f7ff ffc8 	bl	8003e58 <makeFreeRtosPriority>
 8003ec8:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	695b      	ldr	r3, [r3, #20]
 8003ece:	687a      	ldr	r2, [r7, #4]
 8003ed0:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003ed2:	9202      	str	r2, [sp, #8]
 8003ed4:	9301      	str	r3, [sp, #4]
 8003ed6:	9100      	str	r1, [sp, #0]
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	4632      	mov	r2, r6
 8003edc:	4629      	mov	r1, r5
 8003ede:	4620      	mov	r0, r4
 8003ee0:	f000 fd0e 	bl	8004900 <xTaskCreateStatic>
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	60fb      	str	r3, [r7, #12]
 8003ee8:	e01c      	b.n	8003f24 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	685c      	ldr	r4, [r3, #4]
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003ef6:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003efe:	4618      	mov	r0, r3
 8003f00:	f7ff ffaa 	bl	8003e58 <makeFreeRtosPriority>
 8003f04:	4602      	mov	r2, r0
 8003f06:	f107 030c 	add.w	r3, r7, #12
 8003f0a:	9301      	str	r3, [sp, #4]
 8003f0c:	9200      	str	r2, [sp, #0]
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	4632      	mov	r2, r6
 8003f12:	4629      	mov	r1, r5
 8003f14:	4620      	mov	r0, r4
 8003f16:	f000 fd59 	bl	80049cc <xTaskCreate>
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	2b01      	cmp	r3, #1
 8003f1e:	d001      	beq.n	8003f24 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003f20:	2300      	movs	r3, #0
 8003f22:	e000      	b.n	8003f26 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003f24:	68fb      	ldr	r3, [r7, #12]
}
 8003f26:	4618      	mov	r0, r3
 8003f28:	3714      	adds	r7, #20
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003f2e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003f2e:	b580      	push	{r7, lr}
 8003f30:	b084      	sub	sp, #16
 8003f32:	af00      	add	r7, sp, #0
 8003f34:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d001      	beq.n	8003f44 <osDelay+0x16>
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	e000      	b.n	8003f46 <osDelay+0x18>
 8003f44:	2301      	movs	r3, #1
 8003f46:	4618      	mov	r0, r3
 8003f48:	f000 fe88 	bl	8004c5c <vTaskDelay>
  
  return osOK;
 8003f4c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003f4e:	4618      	mov	r0, r3
 8003f50:	3710      	adds	r7, #16
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bd80      	pop	{r7, pc}

08003f56 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003f56:	b480      	push	{r7}
 8003f58:	b083      	sub	sp, #12
 8003f5a:	af00      	add	r7, sp, #0
 8003f5c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	f103 0208 	add.w	r2, r3, #8
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	f04f 32ff 	mov.w	r2, #4294967295
 8003f6e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	f103 0208 	add.w	r2, r3, #8
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	f103 0208 	add.w	r2, r3, #8
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2200      	movs	r2, #0
 8003f88:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003f8a:	bf00      	nop
 8003f8c:	370c      	adds	r7, #12
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f94:	4770      	bx	lr

08003f96 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003f96:	b480      	push	{r7}
 8003f98:	b083      	sub	sp, #12
 8003f9a:	af00      	add	r7, sp, #0
 8003f9c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003fa4:	bf00      	nop
 8003fa6:	370c      	adds	r7, #12
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fae:	4770      	bx	lr

08003fb0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b085      	sub	sp, #20
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
 8003fb8:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	68fa      	ldr	r2, [r7, #12]
 8003fc4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	689a      	ldr	r2, [r3, #8]
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	689b      	ldr	r3, [r3, #8]
 8003fd2:	683a      	ldr	r2, [r7, #0]
 8003fd4:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	683a      	ldr	r2, [r7, #0]
 8003fda:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	687a      	ldr	r2, [r7, #4]
 8003fe0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	1c5a      	adds	r2, r3, #1
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	601a      	str	r2, [r3, #0]
}
 8003fec:	bf00      	nop
 8003fee:	3714      	adds	r7, #20
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff6:	4770      	bx	lr

08003ff8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	b085      	sub	sp, #20
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
 8004000:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800400e:	d103      	bne.n	8004018 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	691b      	ldr	r3, [r3, #16]
 8004014:	60fb      	str	r3, [r7, #12]
 8004016:	e00c      	b.n	8004032 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	3308      	adds	r3, #8
 800401c:	60fb      	str	r3, [r7, #12]
 800401e:	e002      	b.n	8004026 <vListInsert+0x2e>
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	60fb      	str	r3, [r7, #12]
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	68ba      	ldr	r2, [r7, #8]
 800402e:	429a      	cmp	r2, r3
 8004030:	d2f6      	bcs.n	8004020 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	685a      	ldr	r2, [r3, #4]
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	683a      	ldr	r2, [r7, #0]
 8004040:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	68fa      	ldr	r2, [r7, #12]
 8004046:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	683a      	ldr	r2, [r7, #0]
 800404c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	687a      	ldr	r2, [r7, #4]
 8004052:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	1c5a      	adds	r2, r3, #1
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	601a      	str	r2, [r3, #0]
}
 800405e:	bf00      	nop
 8004060:	3714      	adds	r7, #20
 8004062:	46bd      	mov	sp, r7
 8004064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004068:	4770      	bx	lr

0800406a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800406a:	b480      	push	{r7}
 800406c:	b085      	sub	sp, #20
 800406e:	af00      	add	r7, sp, #0
 8004070:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	691b      	ldr	r3, [r3, #16]
 8004076:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	687a      	ldr	r2, [r7, #4]
 800407e:	6892      	ldr	r2, [r2, #8]
 8004080:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	689b      	ldr	r3, [r3, #8]
 8004086:	687a      	ldr	r2, [r7, #4]
 8004088:	6852      	ldr	r2, [r2, #4]
 800408a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	687a      	ldr	r2, [r7, #4]
 8004092:	429a      	cmp	r2, r3
 8004094:	d103      	bne.n	800409e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	689a      	ldr	r2, [r3, #8]
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2200      	movs	r2, #0
 80040a2:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	1e5a      	subs	r2, r3, #1
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
}
 80040b2:	4618      	mov	r0, r3
 80040b4:	3714      	adds	r7, #20
 80040b6:	46bd      	mov	sp, r7
 80040b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040bc:	4770      	bx	lr
	...

080040c0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b084      	sub	sp, #16
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
 80040c8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d10d      	bne.n	80040f0 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80040d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040d8:	b672      	cpsid	i
 80040da:	f383 8811 	msr	BASEPRI, r3
 80040de:	f3bf 8f6f 	isb	sy
 80040e2:	f3bf 8f4f 	dsb	sy
 80040e6:	b662      	cpsie	i
 80040e8:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80040ea:	bf00      	nop
 80040ec:	bf00      	nop
 80040ee:	e7fd      	b.n	80040ec <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 80040f0:	f001 ff34 	bl	8005f5c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681a      	ldr	r2, [r3, #0]
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040fc:	68f9      	ldr	r1, [r7, #12]
 80040fe:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004100:	fb01 f303 	mul.w	r3, r1, r3
 8004104:	441a      	add	r2, r3
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	2200      	movs	r2, #0
 800410e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681a      	ldr	r2, [r3, #0]
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681a      	ldr	r2, [r3, #0]
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004120:	3b01      	subs	r3, #1
 8004122:	68f9      	ldr	r1, [r7, #12]
 8004124:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004126:	fb01 f303 	mul.w	r3, r1, r3
 800412a:	441a      	add	r2, r3
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	22ff      	movs	r2, #255	@ 0xff
 8004134:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	22ff      	movs	r2, #255	@ 0xff
 800413c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d114      	bne.n	8004170 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	691b      	ldr	r3, [r3, #16]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d01a      	beq.n	8004184 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	3310      	adds	r3, #16
 8004152:	4618      	mov	r0, r3
 8004154:	f001 f9e8 	bl	8005528 <xTaskRemoveFromEventList>
 8004158:	4603      	mov	r3, r0
 800415a:	2b00      	cmp	r3, #0
 800415c:	d012      	beq.n	8004184 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800415e:	4b0d      	ldr	r3, [pc, #52]	@ (8004194 <xQueueGenericReset+0xd4>)
 8004160:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004164:	601a      	str	r2, [r3, #0]
 8004166:	f3bf 8f4f 	dsb	sy
 800416a:	f3bf 8f6f 	isb	sy
 800416e:	e009      	b.n	8004184 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	3310      	adds	r3, #16
 8004174:	4618      	mov	r0, r3
 8004176:	f7ff feee 	bl	8003f56 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	3324      	adds	r3, #36	@ 0x24
 800417e:	4618      	mov	r0, r3
 8004180:	f7ff fee9 	bl	8003f56 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004184:	f001 ff20 	bl	8005fc8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004188:	2301      	movs	r3, #1
}
 800418a:	4618      	mov	r0, r3
 800418c:	3710      	adds	r7, #16
 800418e:	46bd      	mov	sp, r7
 8004190:	bd80      	pop	{r7, pc}
 8004192:	bf00      	nop
 8004194:	e000ed04 	.word	0xe000ed04

08004198 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004198:	b580      	push	{r7, lr}
 800419a:	b08a      	sub	sp, #40	@ 0x28
 800419c:	af02      	add	r7, sp, #8
 800419e:	60f8      	str	r0, [r7, #12]
 80041a0:	60b9      	str	r1, [r7, #8]
 80041a2:	4613      	mov	r3, r2
 80041a4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d10d      	bne.n	80041c8 <xQueueGenericCreate+0x30>
	__asm volatile
 80041ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041b0:	b672      	cpsid	i
 80041b2:	f383 8811 	msr	BASEPRI, r3
 80041b6:	f3bf 8f6f 	isb	sy
 80041ba:	f3bf 8f4f 	dsb	sy
 80041be:	b662      	cpsie	i
 80041c0:	613b      	str	r3, [r7, #16]
}
 80041c2:	bf00      	nop
 80041c4:	bf00      	nop
 80041c6:	e7fd      	b.n	80041c4 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80041c8:	68bb      	ldr	r3, [r7, #8]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d102      	bne.n	80041d4 <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80041ce:	2300      	movs	r3, #0
 80041d0:	61fb      	str	r3, [r7, #28]
 80041d2:	e004      	b.n	80041de <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	68ba      	ldr	r2, [r7, #8]
 80041d8:	fb02 f303 	mul.w	r3, r2, r3
 80041dc:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80041de:	69fb      	ldr	r3, [r7, #28]
 80041e0:	3350      	adds	r3, #80	@ 0x50
 80041e2:	4618      	mov	r0, r3
 80041e4:	f001 ffa2 	bl	800612c <pvPortMalloc>
 80041e8:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80041ea:	69bb      	ldr	r3, [r7, #24]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d011      	beq.n	8004214 <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80041f0:	69bb      	ldr	r3, [r7, #24]
 80041f2:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80041f4:	697b      	ldr	r3, [r7, #20]
 80041f6:	3350      	adds	r3, #80	@ 0x50
 80041f8:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80041fa:	69bb      	ldr	r3, [r7, #24]
 80041fc:	2200      	movs	r2, #0
 80041fe:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004202:	79fa      	ldrb	r2, [r7, #7]
 8004204:	69bb      	ldr	r3, [r7, #24]
 8004206:	9300      	str	r3, [sp, #0]
 8004208:	4613      	mov	r3, r2
 800420a:	697a      	ldr	r2, [r7, #20]
 800420c:	68b9      	ldr	r1, [r7, #8]
 800420e:	68f8      	ldr	r0, [r7, #12]
 8004210:	f000 f805 	bl	800421e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004214:	69bb      	ldr	r3, [r7, #24]
	}
 8004216:	4618      	mov	r0, r3
 8004218:	3720      	adds	r7, #32
 800421a:	46bd      	mov	sp, r7
 800421c:	bd80      	pop	{r7, pc}

0800421e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800421e:	b580      	push	{r7, lr}
 8004220:	b084      	sub	sp, #16
 8004222:	af00      	add	r7, sp, #0
 8004224:	60f8      	str	r0, [r7, #12]
 8004226:	60b9      	str	r1, [r7, #8]
 8004228:	607a      	str	r2, [r7, #4]
 800422a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d103      	bne.n	800423a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004232:	69bb      	ldr	r3, [r7, #24]
 8004234:	69ba      	ldr	r2, [r7, #24]
 8004236:	601a      	str	r2, [r3, #0]
 8004238:	e002      	b.n	8004240 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800423a:	69bb      	ldr	r3, [r7, #24]
 800423c:	687a      	ldr	r2, [r7, #4]
 800423e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004240:	69bb      	ldr	r3, [r7, #24]
 8004242:	68fa      	ldr	r2, [r7, #12]
 8004244:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004246:	69bb      	ldr	r3, [r7, #24]
 8004248:	68ba      	ldr	r2, [r7, #8]
 800424a:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800424c:	2101      	movs	r1, #1
 800424e:	69b8      	ldr	r0, [r7, #24]
 8004250:	f7ff ff36 	bl	80040c0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004254:	69bb      	ldr	r3, [r7, #24]
 8004256:	78fa      	ldrb	r2, [r7, #3]
 8004258:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800425c:	bf00      	nop
 800425e:	3710      	adds	r7, #16
 8004260:	46bd      	mov	sp, r7
 8004262:	bd80      	pop	{r7, pc}

08004264 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b08e      	sub	sp, #56	@ 0x38
 8004268:	af00      	add	r7, sp, #0
 800426a:	60f8      	str	r0, [r7, #12]
 800426c:	60b9      	str	r1, [r7, #8]
 800426e:	607a      	str	r2, [r7, #4]
 8004270:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004272:	2300      	movs	r3, #0
 8004274:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800427a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800427c:	2b00      	cmp	r3, #0
 800427e:	d10d      	bne.n	800429c <xQueueGenericSend+0x38>
	__asm volatile
 8004280:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004284:	b672      	cpsid	i
 8004286:	f383 8811 	msr	BASEPRI, r3
 800428a:	f3bf 8f6f 	isb	sy
 800428e:	f3bf 8f4f 	dsb	sy
 8004292:	b662      	cpsie	i
 8004294:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004296:	bf00      	nop
 8004298:	bf00      	nop
 800429a:	e7fd      	b.n	8004298 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800429c:	68bb      	ldr	r3, [r7, #8]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d103      	bne.n	80042aa <xQueueGenericSend+0x46>
 80042a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d101      	bne.n	80042ae <xQueueGenericSend+0x4a>
 80042aa:	2301      	movs	r3, #1
 80042ac:	e000      	b.n	80042b0 <xQueueGenericSend+0x4c>
 80042ae:	2300      	movs	r3, #0
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d10d      	bne.n	80042d0 <xQueueGenericSend+0x6c>
	__asm volatile
 80042b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042b8:	b672      	cpsid	i
 80042ba:	f383 8811 	msr	BASEPRI, r3
 80042be:	f3bf 8f6f 	isb	sy
 80042c2:	f3bf 8f4f 	dsb	sy
 80042c6:	b662      	cpsie	i
 80042c8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80042ca:	bf00      	nop
 80042cc:	bf00      	nop
 80042ce:	e7fd      	b.n	80042cc <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	2b02      	cmp	r3, #2
 80042d4:	d103      	bne.n	80042de <xQueueGenericSend+0x7a>
 80042d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042da:	2b01      	cmp	r3, #1
 80042dc:	d101      	bne.n	80042e2 <xQueueGenericSend+0x7e>
 80042de:	2301      	movs	r3, #1
 80042e0:	e000      	b.n	80042e4 <xQueueGenericSend+0x80>
 80042e2:	2300      	movs	r3, #0
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d10d      	bne.n	8004304 <xQueueGenericSend+0xa0>
	__asm volatile
 80042e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042ec:	b672      	cpsid	i
 80042ee:	f383 8811 	msr	BASEPRI, r3
 80042f2:	f3bf 8f6f 	isb	sy
 80042f6:	f3bf 8f4f 	dsb	sy
 80042fa:	b662      	cpsie	i
 80042fc:	623b      	str	r3, [r7, #32]
}
 80042fe:	bf00      	nop
 8004300:	bf00      	nop
 8004302:	e7fd      	b.n	8004300 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004304:	f001 fad8 	bl	80058b8 <xTaskGetSchedulerState>
 8004308:	4603      	mov	r3, r0
 800430a:	2b00      	cmp	r3, #0
 800430c:	d102      	bne.n	8004314 <xQueueGenericSend+0xb0>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d101      	bne.n	8004318 <xQueueGenericSend+0xb4>
 8004314:	2301      	movs	r3, #1
 8004316:	e000      	b.n	800431a <xQueueGenericSend+0xb6>
 8004318:	2300      	movs	r3, #0
 800431a:	2b00      	cmp	r3, #0
 800431c:	d10d      	bne.n	800433a <xQueueGenericSend+0xd6>
	__asm volatile
 800431e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004322:	b672      	cpsid	i
 8004324:	f383 8811 	msr	BASEPRI, r3
 8004328:	f3bf 8f6f 	isb	sy
 800432c:	f3bf 8f4f 	dsb	sy
 8004330:	b662      	cpsie	i
 8004332:	61fb      	str	r3, [r7, #28]
}
 8004334:	bf00      	nop
 8004336:	bf00      	nop
 8004338:	e7fd      	b.n	8004336 <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800433a:	f001 fe0f 	bl	8005f5c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800433e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004340:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004342:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004344:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004346:	429a      	cmp	r2, r3
 8004348:	d302      	bcc.n	8004350 <xQueueGenericSend+0xec>
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	2b02      	cmp	r3, #2
 800434e:	d129      	bne.n	80043a4 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004350:	683a      	ldr	r2, [r7, #0]
 8004352:	68b9      	ldr	r1, [r7, #8]
 8004354:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004356:	f000 f9bf 	bl	80046d8 <prvCopyDataToQueue>
 800435a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800435c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800435e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004360:	2b00      	cmp	r3, #0
 8004362:	d010      	beq.n	8004386 <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004364:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004366:	3324      	adds	r3, #36	@ 0x24
 8004368:	4618      	mov	r0, r3
 800436a:	f001 f8dd 	bl	8005528 <xTaskRemoveFromEventList>
 800436e:	4603      	mov	r3, r0
 8004370:	2b00      	cmp	r3, #0
 8004372:	d013      	beq.n	800439c <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004374:	4b3f      	ldr	r3, [pc, #252]	@ (8004474 <xQueueGenericSend+0x210>)
 8004376:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800437a:	601a      	str	r2, [r3, #0]
 800437c:	f3bf 8f4f 	dsb	sy
 8004380:	f3bf 8f6f 	isb	sy
 8004384:	e00a      	b.n	800439c <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004386:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004388:	2b00      	cmp	r3, #0
 800438a:	d007      	beq.n	800439c <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800438c:	4b39      	ldr	r3, [pc, #228]	@ (8004474 <xQueueGenericSend+0x210>)
 800438e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004392:	601a      	str	r2, [r3, #0]
 8004394:	f3bf 8f4f 	dsb	sy
 8004398:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800439c:	f001 fe14 	bl	8005fc8 <vPortExitCritical>
				return pdPASS;
 80043a0:	2301      	movs	r3, #1
 80043a2:	e063      	b.n	800446c <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d103      	bne.n	80043b2 <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80043aa:	f001 fe0d 	bl	8005fc8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80043ae:	2300      	movs	r3, #0
 80043b0:	e05c      	b.n	800446c <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 80043b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d106      	bne.n	80043c6 <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80043b8:	f107 0314 	add.w	r3, r7, #20
 80043bc:	4618      	mov	r0, r3
 80043be:	f001 f919 	bl	80055f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80043c2:	2301      	movs	r3, #1
 80043c4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80043c6:	f001 fdff 	bl	8005fc8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80043ca:	f000 fe7b 	bl	80050c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80043ce:	f001 fdc5 	bl	8005f5c <vPortEnterCritical>
 80043d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043d4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80043d8:	b25b      	sxtb	r3, r3
 80043da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043de:	d103      	bne.n	80043e8 <xQueueGenericSend+0x184>
 80043e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043e2:	2200      	movs	r2, #0
 80043e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80043e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043ea:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80043ee:	b25b      	sxtb	r3, r3
 80043f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043f4:	d103      	bne.n	80043fe <xQueueGenericSend+0x19a>
 80043f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043f8:	2200      	movs	r2, #0
 80043fa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80043fe:	f001 fde3 	bl	8005fc8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004402:	1d3a      	adds	r2, r7, #4
 8004404:	f107 0314 	add.w	r3, r7, #20
 8004408:	4611      	mov	r1, r2
 800440a:	4618      	mov	r0, r3
 800440c:	f001 f908 	bl	8005620 <xTaskCheckForTimeOut>
 8004410:	4603      	mov	r3, r0
 8004412:	2b00      	cmp	r3, #0
 8004414:	d124      	bne.n	8004460 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004416:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004418:	f000 fa30 	bl	800487c <prvIsQueueFull>
 800441c:	4603      	mov	r3, r0
 800441e:	2b00      	cmp	r3, #0
 8004420:	d018      	beq.n	8004454 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004422:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004424:	3310      	adds	r3, #16
 8004426:	687a      	ldr	r2, [r7, #4]
 8004428:	4611      	mov	r1, r2
 800442a:	4618      	mov	r0, r3
 800442c:	f001 f854 	bl	80054d8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004430:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004432:	f000 f9bb 	bl	80047ac <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004436:	f000 fe53 	bl	80050e0 <xTaskResumeAll>
 800443a:	4603      	mov	r3, r0
 800443c:	2b00      	cmp	r3, #0
 800443e:	f47f af7c 	bne.w	800433a <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 8004442:	4b0c      	ldr	r3, [pc, #48]	@ (8004474 <xQueueGenericSend+0x210>)
 8004444:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004448:	601a      	str	r2, [r3, #0]
 800444a:	f3bf 8f4f 	dsb	sy
 800444e:	f3bf 8f6f 	isb	sy
 8004452:	e772      	b.n	800433a <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004454:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004456:	f000 f9a9 	bl	80047ac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800445a:	f000 fe41 	bl	80050e0 <xTaskResumeAll>
 800445e:	e76c      	b.n	800433a <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004460:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004462:	f000 f9a3 	bl	80047ac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004466:	f000 fe3b 	bl	80050e0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800446a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800446c:	4618      	mov	r0, r3
 800446e:	3738      	adds	r7, #56	@ 0x38
 8004470:	46bd      	mov	sp, r7
 8004472:	bd80      	pop	{r7, pc}
 8004474:	e000ed04 	.word	0xe000ed04

08004478 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b08e      	sub	sp, #56	@ 0x38
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
 8004480:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8004482:	2300      	movs	r3, #0
 8004484:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800448a:	2300      	movs	r3, #0
 800448c:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800448e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004490:	2b00      	cmp	r3, #0
 8004492:	d10d      	bne.n	80044b0 <xQueueSemaphoreTake+0x38>
	__asm volatile
 8004494:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004498:	b672      	cpsid	i
 800449a:	f383 8811 	msr	BASEPRI, r3
 800449e:	f3bf 8f6f 	isb	sy
 80044a2:	f3bf 8f4f 	dsb	sy
 80044a6:	b662      	cpsie	i
 80044a8:	623b      	str	r3, [r7, #32]
}
 80044aa:	bf00      	nop
 80044ac:	bf00      	nop
 80044ae:	e7fd      	b.n	80044ac <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80044b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d00d      	beq.n	80044d4 <xQueueSemaphoreTake+0x5c>
	__asm volatile
 80044b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044bc:	b672      	cpsid	i
 80044be:	f383 8811 	msr	BASEPRI, r3
 80044c2:	f3bf 8f6f 	isb	sy
 80044c6:	f3bf 8f4f 	dsb	sy
 80044ca:	b662      	cpsie	i
 80044cc:	61fb      	str	r3, [r7, #28]
}
 80044ce:	bf00      	nop
 80044d0:	bf00      	nop
 80044d2:	e7fd      	b.n	80044d0 <xQueueSemaphoreTake+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80044d4:	f001 f9f0 	bl	80058b8 <xTaskGetSchedulerState>
 80044d8:	4603      	mov	r3, r0
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d102      	bne.n	80044e4 <xQueueSemaphoreTake+0x6c>
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d101      	bne.n	80044e8 <xQueueSemaphoreTake+0x70>
 80044e4:	2301      	movs	r3, #1
 80044e6:	e000      	b.n	80044ea <xQueueSemaphoreTake+0x72>
 80044e8:	2300      	movs	r3, #0
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d10d      	bne.n	800450a <xQueueSemaphoreTake+0x92>
	__asm volatile
 80044ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044f2:	b672      	cpsid	i
 80044f4:	f383 8811 	msr	BASEPRI, r3
 80044f8:	f3bf 8f6f 	isb	sy
 80044fc:	f3bf 8f4f 	dsb	sy
 8004500:	b662      	cpsie	i
 8004502:	61bb      	str	r3, [r7, #24]
}
 8004504:	bf00      	nop
 8004506:	bf00      	nop
 8004508:	e7fd      	b.n	8004506 <xQueueSemaphoreTake+0x8e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800450a:	f001 fd27 	bl	8005f5c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800450e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004510:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004512:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004514:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004516:	2b00      	cmp	r3, #0
 8004518:	d024      	beq.n	8004564 <xQueueSemaphoreTake+0xec>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800451a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800451c:	1e5a      	subs	r2, r3, #1
 800451e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004520:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004522:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d104      	bne.n	8004534 <xQueueSemaphoreTake+0xbc>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800452a:	f001 fb8f 	bl	8005c4c <pvTaskIncrementMutexHeldCount>
 800452e:	4602      	mov	r2, r0
 8004530:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004532:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004534:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004536:	691b      	ldr	r3, [r3, #16]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d00f      	beq.n	800455c <xQueueSemaphoreTake+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800453c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800453e:	3310      	adds	r3, #16
 8004540:	4618      	mov	r0, r3
 8004542:	f000 fff1 	bl	8005528 <xTaskRemoveFromEventList>
 8004546:	4603      	mov	r3, r0
 8004548:	2b00      	cmp	r3, #0
 800454a:	d007      	beq.n	800455c <xQueueSemaphoreTake+0xe4>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800454c:	4b55      	ldr	r3, [pc, #340]	@ (80046a4 <xQueueSemaphoreTake+0x22c>)
 800454e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004552:	601a      	str	r2, [r3, #0]
 8004554:	f3bf 8f4f 	dsb	sy
 8004558:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800455c:	f001 fd34 	bl	8005fc8 <vPortExitCritical>
				return pdPASS;
 8004560:	2301      	movs	r3, #1
 8004562:	e09a      	b.n	800469a <xQueueSemaphoreTake+0x222>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d114      	bne.n	8004594 <xQueueSemaphoreTake+0x11c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800456a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800456c:	2b00      	cmp	r3, #0
 800456e:	d00d      	beq.n	800458c <xQueueSemaphoreTake+0x114>
	__asm volatile
 8004570:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004574:	b672      	cpsid	i
 8004576:	f383 8811 	msr	BASEPRI, r3
 800457a:	f3bf 8f6f 	isb	sy
 800457e:	f3bf 8f4f 	dsb	sy
 8004582:	b662      	cpsie	i
 8004584:	617b      	str	r3, [r7, #20]
}
 8004586:	bf00      	nop
 8004588:	bf00      	nop
 800458a:	e7fd      	b.n	8004588 <xQueueSemaphoreTake+0x110>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800458c:	f001 fd1c 	bl	8005fc8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004590:	2300      	movs	r3, #0
 8004592:	e082      	b.n	800469a <xQueueSemaphoreTake+0x222>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004594:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004596:	2b00      	cmp	r3, #0
 8004598:	d106      	bne.n	80045a8 <xQueueSemaphoreTake+0x130>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800459a:	f107 030c 	add.w	r3, r7, #12
 800459e:	4618      	mov	r0, r3
 80045a0:	f001 f828 	bl	80055f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80045a4:	2301      	movs	r3, #1
 80045a6:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80045a8:	f001 fd0e 	bl	8005fc8 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80045ac:	f000 fd8a 	bl	80050c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80045b0:	f001 fcd4 	bl	8005f5c <vPortEnterCritical>
 80045b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045b6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80045ba:	b25b      	sxtb	r3, r3
 80045bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045c0:	d103      	bne.n	80045ca <xQueueSemaphoreTake+0x152>
 80045c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045c4:	2200      	movs	r2, #0
 80045c6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80045ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045cc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80045d0:	b25b      	sxtb	r3, r3
 80045d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045d6:	d103      	bne.n	80045e0 <xQueueSemaphoreTake+0x168>
 80045d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045da:	2200      	movs	r2, #0
 80045dc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80045e0:	f001 fcf2 	bl	8005fc8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80045e4:	463a      	mov	r2, r7
 80045e6:	f107 030c 	add.w	r3, r7, #12
 80045ea:	4611      	mov	r1, r2
 80045ec:	4618      	mov	r0, r3
 80045ee:	f001 f817 	bl	8005620 <xTaskCheckForTimeOut>
 80045f2:	4603      	mov	r3, r0
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d132      	bne.n	800465e <xQueueSemaphoreTake+0x1e6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80045f8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80045fa:	f000 f929 	bl	8004850 <prvIsQueueEmpty>
 80045fe:	4603      	mov	r3, r0
 8004600:	2b00      	cmp	r3, #0
 8004602:	d026      	beq.n	8004652 <xQueueSemaphoreTake+0x1da>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004604:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d109      	bne.n	8004620 <xQueueSemaphoreTake+0x1a8>
					{
						taskENTER_CRITICAL();
 800460c:	f001 fca6 	bl	8005f5c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004610:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004612:	689b      	ldr	r3, [r3, #8]
 8004614:	4618      	mov	r0, r3
 8004616:	f001 f96d 	bl	80058f4 <xTaskPriorityInherit>
 800461a:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800461c:	f001 fcd4 	bl	8005fc8 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004620:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004622:	3324      	adds	r3, #36	@ 0x24
 8004624:	683a      	ldr	r2, [r7, #0]
 8004626:	4611      	mov	r1, r2
 8004628:	4618      	mov	r0, r3
 800462a:	f000 ff55 	bl	80054d8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800462e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004630:	f000 f8bc 	bl	80047ac <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004634:	f000 fd54 	bl	80050e0 <xTaskResumeAll>
 8004638:	4603      	mov	r3, r0
 800463a:	2b00      	cmp	r3, #0
 800463c:	f47f af65 	bne.w	800450a <xQueueSemaphoreTake+0x92>
				{
					portYIELD_WITHIN_API();
 8004640:	4b18      	ldr	r3, [pc, #96]	@ (80046a4 <xQueueSemaphoreTake+0x22c>)
 8004642:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004646:	601a      	str	r2, [r3, #0]
 8004648:	f3bf 8f4f 	dsb	sy
 800464c:	f3bf 8f6f 	isb	sy
 8004650:	e75b      	b.n	800450a <xQueueSemaphoreTake+0x92>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8004652:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004654:	f000 f8aa 	bl	80047ac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004658:	f000 fd42 	bl	80050e0 <xTaskResumeAll>
 800465c:	e755      	b.n	800450a <xQueueSemaphoreTake+0x92>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800465e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004660:	f000 f8a4 	bl	80047ac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004664:	f000 fd3c 	bl	80050e0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004668:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800466a:	f000 f8f1 	bl	8004850 <prvIsQueueEmpty>
 800466e:	4603      	mov	r3, r0
 8004670:	2b00      	cmp	r3, #0
 8004672:	f43f af4a 	beq.w	800450a <xQueueSemaphoreTake+0x92>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8004676:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004678:	2b00      	cmp	r3, #0
 800467a:	d00d      	beq.n	8004698 <xQueueSemaphoreTake+0x220>
					{
						taskENTER_CRITICAL();
 800467c:	f001 fc6e 	bl	8005f5c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8004680:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004682:	f000 f811 	bl	80046a8 <prvGetDisinheritPriorityAfterTimeout>
 8004686:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8004688:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800468a:	689b      	ldr	r3, [r3, #8]
 800468c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800468e:	4618      	mov	r0, r3
 8004690:	f001 fa3c 	bl	8005b0c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8004694:	f001 fc98 	bl	8005fc8 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004698:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800469a:	4618      	mov	r0, r3
 800469c:	3738      	adds	r7, #56	@ 0x38
 800469e:	46bd      	mov	sp, r7
 80046a0:	bd80      	pop	{r7, pc}
 80046a2:	bf00      	nop
 80046a4:	e000ed04 	.word	0xe000ed04

080046a8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80046a8:	b480      	push	{r7}
 80046aa:	b085      	sub	sp, #20
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d006      	beq.n	80046c6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f1c3 0307 	rsb	r3, r3, #7
 80046c2:	60fb      	str	r3, [r7, #12]
 80046c4:	e001      	b.n	80046ca <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80046c6:	2300      	movs	r3, #0
 80046c8:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80046ca:	68fb      	ldr	r3, [r7, #12]
	}
 80046cc:	4618      	mov	r0, r3
 80046ce:	3714      	adds	r7, #20
 80046d0:	46bd      	mov	sp, r7
 80046d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d6:	4770      	bx	lr

080046d8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b086      	sub	sp, #24
 80046dc:	af00      	add	r7, sp, #0
 80046de:	60f8      	str	r0, [r7, #12]
 80046e0:	60b9      	str	r1, [r7, #8]
 80046e2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80046e4:	2300      	movs	r3, #0
 80046e6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046ec:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d10d      	bne.n	8004712 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d14d      	bne.n	800479a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	689b      	ldr	r3, [r3, #8]
 8004702:	4618      	mov	r0, r3
 8004704:	f001 f976 	bl	80059f4 <xTaskPriorityDisinherit>
 8004708:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	2200      	movs	r2, #0
 800470e:	609a      	str	r2, [r3, #8]
 8004710:	e043      	b.n	800479a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d119      	bne.n	800474c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	6858      	ldr	r0, [r3, #4]
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004720:	461a      	mov	r2, r3
 8004722:	68b9      	ldr	r1, [r7, #8]
 8004724:	f002 fc63 	bl	8006fee <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	685a      	ldr	r2, [r3, #4]
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004730:	441a      	add	r2, r3
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	685a      	ldr	r2, [r3, #4]
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	689b      	ldr	r3, [r3, #8]
 800473e:	429a      	cmp	r2, r3
 8004740:	d32b      	bcc.n	800479a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681a      	ldr	r2, [r3, #0]
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	605a      	str	r2, [r3, #4]
 800474a:	e026      	b.n	800479a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	68d8      	ldr	r0, [r3, #12]
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004754:	461a      	mov	r2, r3
 8004756:	68b9      	ldr	r1, [r7, #8]
 8004758:	f002 fc49 	bl	8006fee <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	68da      	ldr	r2, [r3, #12]
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004764:	425b      	negs	r3, r3
 8004766:	441a      	add	r2, r3
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	68da      	ldr	r2, [r3, #12]
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	429a      	cmp	r2, r3
 8004776:	d207      	bcs.n	8004788 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	689a      	ldr	r2, [r3, #8]
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004780:	425b      	negs	r3, r3
 8004782:	441a      	add	r2, r3
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2b02      	cmp	r3, #2
 800478c:	d105      	bne.n	800479a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800478e:	693b      	ldr	r3, [r7, #16]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d002      	beq.n	800479a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004794:	693b      	ldr	r3, [r7, #16]
 8004796:	3b01      	subs	r3, #1
 8004798:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800479a:	693b      	ldr	r3, [r7, #16]
 800479c:	1c5a      	adds	r2, r3, #1
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80047a2:	697b      	ldr	r3, [r7, #20]
}
 80047a4:	4618      	mov	r0, r3
 80047a6:	3718      	adds	r7, #24
 80047a8:	46bd      	mov	sp, r7
 80047aa:	bd80      	pop	{r7, pc}

080047ac <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b084      	sub	sp, #16
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80047b4:	f001 fbd2 	bl	8005f5c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80047be:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80047c0:	e011      	b.n	80047e6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d012      	beq.n	80047f0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	3324      	adds	r3, #36	@ 0x24
 80047ce:	4618      	mov	r0, r3
 80047d0:	f000 feaa 	bl	8005528 <xTaskRemoveFromEventList>
 80047d4:	4603      	mov	r3, r0
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d001      	beq.n	80047de <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80047da:	f000 ff89 	bl	80056f0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80047de:	7bfb      	ldrb	r3, [r7, #15]
 80047e0:	3b01      	subs	r3, #1
 80047e2:	b2db      	uxtb	r3, r3
 80047e4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80047e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	dce9      	bgt.n	80047c2 <prvUnlockQueue+0x16>
 80047ee:	e000      	b.n	80047f2 <prvUnlockQueue+0x46>
					break;
 80047f0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	22ff      	movs	r2, #255	@ 0xff
 80047f6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80047fa:	f001 fbe5 	bl	8005fc8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80047fe:	f001 fbad 	bl	8005f5c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004808:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800480a:	e011      	b.n	8004830 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	691b      	ldr	r3, [r3, #16]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d012      	beq.n	800483a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	3310      	adds	r3, #16
 8004818:	4618      	mov	r0, r3
 800481a:	f000 fe85 	bl	8005528 <xTaskRemoveFromEventList>
 800481e:	4603      	mov	r3, r0
 8004820:	2b00      	cmp	r3, #0
 8004822:	d001      	beq.n	8004828 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004824:	f000 ff64 	bl	80056f0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004828:	7bbb      	ldrb	r3, [r7, #14]
 800482a:	3b01      	subs	r3, #1
 800482c:	b2db      	uxtb	r3, r3
 800482e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004830:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004834:	2b00      	cmp	r3, #0
 8004836:	dce9      	bgt.n	800480c <prvUnlockQueue+0x60>
 8004838:	e000      	b.n	800483c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800483a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	22ff      	movs	r2, #255	@ 0xff
 8004840:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8004844:	f001 fbc0 	bl	8005fc8 <vPortExitCritical>
}
 8004848:	bf00      	nop
 800484a:	3710      	adds	r7, #16
 800484c:	46bd      	mov	sp, r7
 800484e:	bd80      	pop	{r7, pc}

08004850 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b084      	sub	sp, #16
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004858:	f001 fb80 	bl	8005f5c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004860:	2b00      	cmp	r3, #0
 8004862:	d102      	bne.n	800486a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004864:	2301      	movs	r3, #1
 8004866:	60fb      	str	r3, [r7, #12]
 8004868:	e001      	b.n	800486e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800486a:	2300      	movs	r3, #0
 800486c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800486e:	f001 fbab 	bl	8005fc8 <vPortExitCritical>

	return xReturn;
 8004872:	68fb      	ldr	r3, [r7, #12]
}
 8004874:	4618      	mov	r0, r3
 8004876:	3710      	adds	r7, #16
 8004878:	46bd      	mov	sp, r7
 800487a:	bd80      	pop	{r7, pc}

0800487c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b084      	sub	sp, #16
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004884:	f001 fb6a 	bl	8005f5c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004890:	429a      	cmp	r2, r3
 8004892:	d102      	bne.n	800489a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004894:	2301      	movs	r3, #1
 8004896:	60fb      	str	r3, [r7, #12]
 8004898:	e001      	b.n	800489e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800489a:	2300      	movs	r3, #0
 800489c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800489e:	f001 fb93 	bl	8005fc8 <vPortExitCritical>

	return xReturn;
 80048a2:	68fb      	ldr	r3, [r7, #12]
}
 80048a4:	4618      	mov	r0, r3
 80048a6:	3710      	adds	r7, #16
 80048a8:	46bd      	mov	sp, r7
 80048aa:	bd80      	pop	{r7, pc}

080048ac <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80048ac:	b480      	push	{r7}
 80048ae:	b085      	sub	sp, #20
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
 80048b4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80048b6:	2300      	movs	r3, #0
 80048b8:	60fb      	str	r3, [r7, #12]
 80048ba:	e014      	b.n	80048e6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80048bc:	4a0f      	ldr	r2, [pc, #60]	@ (80048fc <vQueueAddToRegistry+0x50>)
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d10b      	bne.n	80048e0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80048c8:	490c      	ldr	r1, [pc, #48]	@ (80048fc <vQueueAddToRegistry+0x50>)
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	683a      	ldr	r2, [r7, #0]
 80048ce:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80048d2:	4a0a      	ldr	r2, [pc, #40]	@ (80048fc <vQueueAddToRegistry+0x50>)
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	00db      	lsls	r3, r3, #3
 80048d8:	4413      	add	r3, r2
 80048da:	687a      	ldr	r2, [r7, #4]
 80048dc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80048de:	e006      	b.n	80048ee <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	3301      	adds	r3, #1
 80048e4:	60fb      	str	r3, [r7, #12]
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	2b07      	cmp	r3, #7
 80048ea:	d9e7      	bls.n	80048bc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80048ec:	bf00      	nop
 80048ee:	bf00      	nop
 80048f0:	3714      	adds	r7, #20
 80048f2:	46bd      	mov	sp, r7
 80048f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f8:	4770      	bx	lr
 80048fa:	bf00      	nop
 80048fc:	2000099c 	.word	0x2000099c

08004900 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004900:	b580      	push	{r7, lr}
 8004902:	b08e      	sub	sp, #56	@ 0x38
 8004904:	af04      	add	r7, sp, #16
 8004906:	60f8      	str	r0, [r7, #12]
 8004908:	60b9      	str	r1, [r7, #8]
 800490a:	607a      	str	r2, [r7, #4]
 800490c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800490e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004910:	2b00      	cmp	r3, #0
 8004912:	d10d      	bne.n	8004930 <xTaskCreateStatic+0x30>
	__asm volatile
 8004914:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004918:	b672      	cpsid	i
 800491a:	f383 8811 	msr	BASEPRI, r3
 800491e:	f3bf 8f6f 	isb	sy
 8004922:	f3bf 8f4f 	dsb	sy
 8004926:	b662      	cpsie	i
 8004928:	623b      	str	r3, [r7, #32]
}
 800492a:	bf00      	nop
 800492c:	bf00      	nop
 800492e:	e7fd      	b.n	800492c <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8004930:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004932:	2b00      	cmp	r3, #0
 8004934:	d10d      	bne.n	8004952 <xTaskCreateStatic+0x52>
	__asm volatile
 8004936:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800493a:	b672      	cpsid	i
 800493c:	f383 8811 	msr	BASEPRI, r3
 8004940:	f3bf 8f6f 	isb	sy
 8004944:	f3bf 8f4f 	dsb	sy
 8004948:	b662      	cpsie	i
 800494a:	61fb      	str	r3, [r7, #28]
}
 800494c:	bf00      	nop
 800494e:	bf00      	nop
 8004950:	e7fd      	b.n	800494e <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004952:	2360      	movs	r3, #96	@ 0x60
 8004954:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004956:	693b      	ldr	r3, [r7, #16]
 8004958:	2b60      	cmp	r3, #96	@ 0x60
 800495a:	d00d      	beq.n	8004978 <xTaskCreateStatic+0x78>
	__asm volatile
 800495c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004960:	b672      	cpsid	i
 8004962:	f383 8811 	msr	BASEPRI, r3
 8004966:	f3bf 8f6f 	isb	sy
 800496a:	f3bf 8f4f 	dsb	sy
 800496e:	b662      	cpsie	i
 8004970:	61bb      	str	r3, [r7, #24]
}
 8004972:	bf00      	nop
 8004974:	bf00      	nop
 8004976:	e7fd      	b.n	8004974 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004978:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800497a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800497c:	2b00      	cmp	r3, #0
 800497e:	d01e      	beq.n	80049be <xTaskCreateStatic+0xbe>
 8004980:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004982:	2b00      	cmp	r3, #0
 8004984:	d01b      	beq.n	80049be <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004986:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004988:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800498a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800498c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800498e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004990:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004992:	2202      	movs	r2, #2
 8004994:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004998:	2300      	movs	r3, #0
 800499a:	9303      	str	r3, [sp, #12]
 800499c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800499e:	9302      	str	r3, [sp, #8]
 80049a0:	f107 0314 	add.w	r3, r7, #20
 80049a4:	9301      	str	r3, [sp, #4]
 80049a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049a8:	9300      	str	r3, [sp, #0]
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	687a      	ldr	r2, [r7, #4]
 80049ae:	68b9      	ldr	r1, [r7, #8]
 80049b0:	68f8      	ldr	r0, [r7, #12]
 80049b2:	f000 f850 	bl	8004a56 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80049b6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80049b8:	f000 f8e2 	bl	8004b80 <prvAddNewTaskToReadyList>
 80049bc:	e001      	b.n	80049c2 <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 80049be:	2300      	movs	r3, #0
 80049c0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80049c2:	697b      	ldr	r3, [r7, #20]
	}
 80049c4:	4618      	mov	r0, r3
 80049c6:	3728      	adds	r7, #40	@ 0x28
 80049c8:	46bd      	mov	sp, r7
 80049ca:	bd80      	pop	{r7, pc}

080049cc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b08c      	sub	sp, #48	@ 0x30
 80049d0:	af04      	add	r7, sp, #16
 80049d2:	60f8      	str	r0, [r7, #12]
 80049d4:	60b9      	str	r1, [r7, #8]
 80049d6:	603b      	str	r3, [r7, #0]
 80049d8:	4613      	mov	r3, r2
 80049da:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80049dc:	88fb      	ldrh	r3, [r7, #6]
 80049de:	009b      	lsls	r3, r3, #2
 80049e0:	4618      	mov	r0, r3
 80049e2:	f001 fba3 	bl	800612c <pvPortMalloc>
 80049e6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80049e8:	697b      	ldr	r3, [r7, #20]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d00e      	beq.n	8004a0c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80049ee:	2060      	movs	r0, #96	@ 0x60
 80049f0:	f001 fb9c 	bl	800612c <pvPortMalloc>
 80049f4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80049f6:	69fb      	ldr	r3, [r7, #28]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d003      	beq.n	8004a04 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80049fc:	69fb      	ldr	r3, [r7, #28]
 80049fe:	697a      	ldr	r2, [r7, #20]
 8004a00:	631a      	str	r2, [r3, #48]	@ 0x30
 8004a02:	e005      	b.n	8004a10 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004a04:	6978      	ldr	r0, [r7, #20]
 8004a06:	f001 fc5f 	bl	80062c8 <vPortFree>
 8004a0a:	e001      	b.n	8004a10 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004a10:	69fb      	ldr	r3, [r7, #28]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d017      	beq.n	8004a46 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004a16:	69fb      	ldr	r3, [r7, #28]
 8004a18:	2200      	movs	r2, #0
 8004a1a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004a1e:	88fa      	ldrh	r2, [r7, #6]
 8004a20:	2300      	movs	r3, #0
 8004a22:	9303      	str	r3, [sp, #12]
 8004a24:	69fb      	ldr	r3, [r7, #28]
 8004a26:	9302      	str	r3, [sp, #8]
 8004a28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a2a:	9301      	str	r3, [sp, #4]
 8004a2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a2e:	9300      	str	r3, [sp, #0]
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	68b9      	ldr	r1, [r7, #8]
 8004a34:	68f8      	ldr	r0, [r7, #12]
 8004a36:	f000 f80e 	bl	8004a56 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004a3a:	69f8      	ldr	r0, [r7, #28]
 8004a3c:	f000 f8a0 	bl	8004b80 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004a40:	2301      	movs	r3, #1
 8004a42:	61bb      	str	r3, [r7, #24]
 8004a44:	e002      	b.n	8004a4c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004a46:	f04f 33ff 	mov.w	r3, #4294967295
 8004a4a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004a4c:	69bb      	ldr	r3, [r7, #24]
	}
 8004a4e:	4618      	mov	r0, r3
 8004a50:	3720      	adds	r7, #32
 8004a52:	46bd      	mov	sp, r7
 8004a54:	bd80      	pop	{r7, pc}

08004a56 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004a56:	b580      	push	{r7, lr}
 8004a58:	b088      	sub	sp, #32
 8004a5a:	af00      	add	r7, sp, #0
 8004a5c:	60f8      	str	r0, [r7, #12]
 8004a5e:	60b9      	str	r1, [r7, #8]
 8004a60:	607a      	str	r2, [r7, #4]
 8004a62:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004a64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a66:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	009b      	lsls	r3, r3, #2
 8004a6c:	461a      	mov	r2, r3
 8004a6e:	21a5      	movs	r1, #165	@ 0xa5
 8004a70:	f002 fa2e 	bl	8006ed0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004a74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a76:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004a78:	6879      	ldr	r1, [r7, #4]
 8004a7a:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8004a7e:	440b      	add	r3, r1
 8004a80:	009b      	lsls	r3, r3, #2
 8004a82:	4413      	add	r3, r2
 8004a84:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004a86:	69bb      	ldr	r3, [r7, #24]
 8004a88:	f023 0307 	bic.w	r3, r3, #7
 8004a8c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004a8e:	69bb      	ldr	r3, [r7, #24]
 8004a90:	f003 0307 	and.w	r3, r3, #7
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d00d      	beq.n	8004ab4 <prvInitialiseNewTask+0x5e>
	__asm volatile
 8004a98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a9c:	b672      	cpsid	i
 8004a9e:	f383 8811 	msr	BASEPRI, r3
 8004aa2:	f3bf 8f6f 	isb	sy
 8004aa6:	f3bf 8f4f 	dsb	sy
 8004aaa:	b662      	cpsie	i
 8004aac:	617b      	str	r3, [r7, #20]
}
 8004aae:	bf00      	nop
 8004ab0:	bf00      	nop
 8004ab2:	e7fd      	b.n	8004ab0 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d01f      	beq.n	8004afa <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004aba:	2300      	movs	r3, #0
 8004abc:	61fb      	str	r3, [r7, #28]
 8004abe:	e012      	b.n	8004ae6 <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004ac0:	68ba      	ldr	r2, [r7, #8]
 8004ac2:	69fb      	ldr	r3, [r7, #28]
 8004ac4:	4413      	add	r3, r2
 8004ac6:	7819      	ldrb	r1, [r3, #0]
 8004ac8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004aca:	69fb      	ldr	r3, [r7, #28]
 8004acc:	4413      	add	r3, r2
 8004ace:	3334      	adds	r3, #52	@ 0x34
 8004ad0:	460a      	mov	r2, r1
 8004ad2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004ad4:	68ba      	ldr	r2, [r7, #8]
 8004ad6:	69fb      	ldr	r3, [r7, #28]
 8004ad8:	4413      	add	r3, r2
 8004ada:	781b      	ldrb	r3, [r3, #0]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d006      	beq.n	8004aee <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004ae0:	69fb      	ldr	r3, [r7, #28]
 8004ae2:	3301      	adds	r3, #1
 8004ae4:	61fb      	str	r3, [r7, #28]
 8004ae6:	69fb      	ldr	r3, [r7, #28]
 8004ae8:	2b0f      	cmp	r3, #15
 8004aea:	d9e9      	bls.n	8004ac0 <prvInitialiseNewTask+0x6a>
 8004aec:	e000      	b.n	8004af0 <prvInitialiseNewTask+0x9a>
			{
				break;
 8004aee:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004af0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004af2:	2200      	movs	r2, #0
 8004af4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004af8:	e003      	b.n	8004b02 <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004afa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004afc:	2200      	movs	r2, #0
 8004afe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004b02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b04:	2b06      	cmp	r3, #6
 8004b06:	d901      	bls.n	8004b0c <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004b08:	2306      	movs	r3, #6
 8004b0a:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004b0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b0e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004b10:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004b12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b14:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004b16:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004b18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004b1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b20:	3304      	adds	r3, #4
 8004b22:	4618      	mov	r0, r3
 8004b24:	f7ff fa37 	bl	8003f96 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004b28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b2a:	3318      	adds	r3, #24
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	f7ff fa32 	bl	8003f96 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004b32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b34:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004b36:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b3a:	f1c3 0207 	rsb	r2, r3, #7
 8004b3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b40:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004b42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b44:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004b46:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 8004b48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	655a      	str	r2, [r3, #84]	@ 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004b4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b50:	2200      	movs	r2, #0
 8004b52:	659a      	str	r2, [r3, #88]	@ 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004b54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b56:	2200      	movs	r2, #0
 8004b58:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004b5c:	683a      	ldr	r2, [r7, #0]
 8004b5e:	68f9      	ldr	r1, [r7, #12]
 8004b60:	69b8      	ldr	r0, [r7, #24]
 8004b62:	f001 f8ed 	bl	8005d40 <pxPortInitialiseStack>
 8004b66:	4602      	mov	r2, r0
 8004b68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b6a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004b6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d002      	beq.n	8004b78 <prvInitialiseNewTask+0x122>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004b72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b74:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004b76:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004b78:	bf00      	nop
 8004b7a:	3720      	adds	r7, #32
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	bd80      	pop	{r7, pc}

08004b80 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b082      	sub	sp, #8
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004b88:	f001 f9e8 	bl	8005f5c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004b8c:	4b2c      	ldr	r3, [pc, #176]	@ (8004c40 <prvAddNewTaskToReadyList+0xc0>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	3301      	adds	r3, #1
 8004b92:	4a2b      	ldr	r2, [pc, #172]	@ (8004c40 <prvAddNewTaskToReadyList+0xc0>)
 8004b94:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004b96:	4b2b      	ldr	r3, [pc, #172]	@ (8004c44 <prvAddNewTaskToReadyList+0xc4>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d109      	bne.n	8004bb2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004b9e:	4a29      	ldr	r2, [pc, #164]	@ (8004c44 <prvAddNewTaskToReadyList+0xc4>)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004ba4:	4b26      	ldr	r3, [pc, #152]	@ (8004c40 <prvAddNewTaskToReadyList+0xc0>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	2b01      	cmp	r3, #1
 8004baa:	d110      	bne.n	8004bce <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004bac:	f000 fdc4 	bl	8005738 <prvInitialiseTaskLists>
 8004bb0:	e00d      	b.n	8004bce <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004bb2:	4b25      	ldr	r3, [pc, #148]	@ (8004c48 <prvAddNewTaskToReadyList+0xc8>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d109      	bne.n	8004bce <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004bba:	4b22      	ldr	r3, [pc, #136]	@ (8004c44 <prvAddNewTaskToReadyList+0xc4>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bc4:	429a      	cmp	r2, r3
 8004bc6:	d802      	bhi.n	8004bce <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004bc8:	4a1e      	ldr	r2, [pc, #120]	@ (8004c44 <prvAddNewTaskToReadyList+0xc4>)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004bce:	4b1f      	ldr	r3, [pc, #124]	@ (8004c4c <prvAddNewTaskToReadyList+0xcc>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	3301      	adds	r3, #1
 8004bd4:	4a1d      	ldr	r2, [pc, #116]	@ (8004c4c <prvAddNewTaskToReadyList+0xcc>)
 8004bd6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004bd8:	4b1c      	ldr	r3, [pc, #112]	@ (8004c4c <prvAddNewTaskToReadyList+0xcc>)
 8004bda:	681a      	ldr	r2, [r3, #0]
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004be4:	2201      	movs	r2, #1
 8004be6:	409a      	lsls	r2, r3
 8004be8:	4b19      	ldr	r3, [pc, #100]	@ (8004c50 <prvAddNewTaskToReadyList+0xd0>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4313      	orrs	r3, r2
 8004bee:	4a18      	ldr	r2, [pc, #96]	@ (8004c50 <prvAddNewTaskToReadyList+0xd0>)
 8004bf0:	6013      	str	r3, [r2, #0]
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004bf6:	4613      	mov	r3, r2
 8004bf8:	009b      	lsls	r3, r3, #2
 8004bfa:	4413      	add	r3, r2
 8004bfc:	009b      	lsls	r3, r3, #2
 8004bfe:	4a15      	ldr	r2, [pc, #84]	@ (8004c54 <prvAddNewTaskToReadyList+0xd4>)
 8004c00:	441a      	add	r2, r3
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	3304      	adds	r3, #4
 8004c06:	4619      	mov	r1, r3
 8004c08:	4610      	mov	r0, r2
 8004c0a:	f7ff f9d1 	bl	8003fb0 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004c0e:	f001 f9db 	bl	8005fc8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004c12:	4b0d      	ldr	r3, [pc, #52]	@ (8004c48 <prvAddNewTaskToReadyList+0xc8>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d00e      	beq.n	8004c38 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004c1a:	4b0a      	ldr	r3, [pc, #40]	@ (8004c44 <prvAddNewTaskToReadyList+0xc4>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c24:	429a      	cmp	r2, r3
 8004c26:	d207      	bcs.n	8004c38 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004c28:	4b0b      	ldr	r3, [pc, #44]	@ (8004c58 <prvAddNewTaskToReadyList+0xd8>)
 8004c2a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004c2e:	601a      	str	r2, [r3, #0]
 8004c30:	f3bf 8f4f 	dsb	sy
 8004c34:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004c38:	bf00      	nop
 8004c3a:	3708      	adds	r7, #8
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	bd80      	pop	{r7, pc}
 8004c40:	20000adc 	.word	0x20000adc
 8004c44:	200009dc 	.word	0x200009dc
 8004c48:	20000ae8 	.word	0x20000ae8
 8004c4c:	20000af8 	.word	0x20000af8
 8004c50:	20000ae4 	.word	0x20000ae4
 8004c54:	200009e0 	.word	0x200009e0
 8004c58:	e000ed04 	.word	0xe000ed04

08004c5c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b084      	sub	sp, #16
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004c64:	2300      	movs	r3, #0
 8004c66:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d01a      	beq.n	8004ca4 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004c6e:	4b15      	ldr	r3, [pc, #84]	@ (8004cc4 <vTaskDelay+0x68>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d00d      	beq.n	8004c92 <vTaskDelay+0x36>
	__asm volatile
 8004c76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c7a:	b672      	cpsid	i
 8004c7c:	f383 8811 	msr	BASEPRI, r3
 8004c80:	f3bf 8f6f 	isb	sy
 8004c84:	f3bf 8f4f 	dsb	sy
 8004c88:	b662      	cpsie	i
 8004c8a:	60bb      	str	r3, [r7, #8]
}
 8004c8c:	bf00      	nop
 8004c8e:	bf00      	nop
 8004c90:	e7fd      	b.n	8004c8e <vTaskDelay+0x32>
			vTaskSuspendAll();
 8004c92:	f000 fa17 	bl	80050c4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004c96:	2100      	movs	r1, #0
 8004c98:	6878      	ldr	r0, [r7, #4]
 8004c9a:	f000 ffeb 	bl	8005c74 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004c9e:	f000 fa1f 	bl	80050e0 <xTaskResumeAll>
 8004ca2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d107      	bne.n	8004cba <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 8004caa:	4b07      	ldr	r3, [pc, #28]	@ (8004cc8 <vTaskDelay+0x6c>)
 8004cac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004cb0:	601a      	str	r2, [r3, #0]
 8004cb2:	f3bf 8f4f 	dsb	sy
 8004cb6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004cba:	bf00      	nop
 8004cbc:	3710      	adds	r7, #16
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	bd80      	pop	{r7, pc}
 8004cc2:	bf00      	nop
 8004cc4:	20000b04 	.word	0x20000b04
 8004cc8:	e000ed04 	.word	0xe000ed04

08004ccc <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b088      	sub	sp, #32
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 8004cd8:	69bb      	ldr	r3, [r7, #24]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d10d      	bne.n	8004cfa <eTaskGetState+0x2e>
	__asm volatile
 8004cde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ce2:	b672      	cpsid	i
 8004ce4:	f383 8811 	msr	BASEPRI, r3
 8004ce8:	f3bf 8f6f 	isb	sy
 8004cec:	f3bf 8f4f 	dsb	sy
 8004cf0:	b662      	cpsie	i
 8004cf2:	60bb      	str	r3, [r7, #8]
}
 8004cf4:	bf00      	nop
 8004cf6:	bf00      	nop
 8004cf8:	e7fd      	b.n	8004cf6 <eTaskGetState+0x2a>

		if( pxTCB == pxCurrentTCB )
 8004cfa:	4b24      	ldr	r3, [pc, #144]	@ (8004d8c <eTaskGetState+0xc0>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	69ba      	ldr	r2, [r7, #24]
 8004d00:	429a      	cmp	r2, r3
 8004d02:	d102      	bne.n	8004d0a <eTaskGetState+0x3e>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 8004d04:	2300      	movs	r3, #0
 8004d06:	77fb      	strb	r3, [r7, #31]
 8004d08:	e03a      	b.n	8004d80 <eTaskGetState+0xb4>
		}
		else
		{
			taskENTER_CRITICAL();
 8004d0a:	f001 f927 	bl	8005f5c <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 8004d0e:	69bb      	ldr	r3, [r7, #24]
 8004d10:	695b      	ldr	r3, [r3, #20]
 8004d12:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 8004d14:	4b1e      	ldr	r3, [pc, #120]	@ (8004d90 <eTaskGetState+0xc4>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 8004d1a:	4b1e      	ldr	r3, [pc, #120]	@ (8004d94 <eTaskGetState+0xc8>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 8004d20:	f001 f952 	bl	8005fc8 <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 8004d24:	697a      	ldr	r2, [r7, #20]
 8004d26:	693b      	ldr	r3, [r7, #16]
 8004d28:	429a      	cmp	r2, r3
 8004d2a:	d003      	beq.n	8004d34 <eTaskGetState+0x68>
 8004d2c:	697a      	ldr	r2, [r7, #20]
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	429a      	cmp	r2, r3
 8004d32:	d102      	bne.n	8004d3a <eTaskGetState+0x6e>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 8004d34:	2302      	movs	r3, #2
 8004d36:	77fb      	strb	r3, [r7, #31]
 8004d38:	e022      	b.n	8004d80 <eTaskGetState+0xb4>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 8004d3a:	697b      	ldr	r3, [r7, #20]
 8004d3c:	4a16      	ldr	r2, [pc, #88]	@ (8004d98 <eTaskGetState+0xcc>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d112      	bne.n	8004d68 <eTaskGetState+0x9c>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 8004d42:	69bb      	ldr	r3, [r7, #24]
 8004d44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d10b      	bne.n	8004d62 <eTaskGetState+0x96>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8004d4a:	69bb      	ldr	r3, [r7, #24]
 8004d4c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004d50:	b2db      	uxtb	r3, r3
 8004d52:	2b01      	cmp	r3, #1
 8004d54:	d102      	bne.n	8004d5c <eTaskGetState+0x90>
							{
								eReturn = eBlocked;
 8004d56:	2302      	movs	r3, #2
 8004d58:	77fb      	strb	r3, [r7, #31]
 8004d5a:	e011      	b.n	8004d80 <eTaskGetState+0xb4>
							}
							else
							{
								eReturn = eSuspended;
 8004d5c:	2303      	movs	r3, #3
 8004d5e:	77fb      	strb	r3, [r7, #31]
 8004d60:	e00e      	b.n	8004d80 <eTaskGetState+0xb4>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 8004d62:	2302      	movs	r3, #2
 8004d64:	77fb      	strb	r3, [r7, #31]
 8004d66:	e00b      	b.n	8004d80 <eTaskGetState+0xb4>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 8004d68:	697b      	ldr	r3, [r7, #20]
 8004d6a:	4a0c      	ldr	r2, [pc, #48]	@ (8004d9c <eTaskGetState+0xd0>)
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d002      	beq.n	8004d76 <eTaskGetState+0xaa>
 8004d70:	697b      	ldr	r3, [r7, #20]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d102      	bne.n	8004d7c <eTaskGetState+0xb0>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 8004d76:	2304      	movs	r3, #4
 8004d78:	77fb      	strb	r3, [r7, #31]
 8004d7a:	e001      	b.n	8004d80 <eTaskGetState+0xb4>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 8004d80:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8004d82:	4618      	mov	r0, r3
 8004d84:	3720      	adds	r7, #32
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bd80      	pop	{r7, pc}
 8004d8a:	bf00      	nop
 8004d8c:	200009dc 	.word	0x200009dc
 8004d90:	20000a94 	.word	0x20000a94
 8004d94:	20000a98 	.word	0x20000a98
 8004d98:	20000ac8 	.word	0x20000ac8
 8004d9c:	20000ab0 	.word	0x20000ab0

08004da0 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b084      	sub	sp, #16
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8004da8:	f001 f8d8 	bl	8005f5c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d102      	bne.n	8004db8 <vTaskSuspend+0x18>
 8004db2:	4b3e      	ldr	r3, [pc, #248]	@ (8004eac <vTaskSuspend+0x10c>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	e000      	b.n	8004dba <vTaskSuspend+0x1a>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	3304      	adds	r3, #4
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	f7ff f952 	bl	800406a <uxListRemove>
 8004dc6:	4603      	mov	r3, r0
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d115      	bne.n	8004df8 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004dd0:	4937      	ldr	r1, [pc, #220]	@ (8004eb0 <vTaskSuspend+0x110>)
 8004dd2:	4613      	mov	r3, r2
 8004dd4:	009b      	lsls	r3, r3, #2
 8004dd6:	4413      	add	r3, r2
 8004dd8:	009b      	lsls	r3, r3, #2
 8004dda:	440b      	add	r3, r1
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d10a      	bne.n	8004df8 <vTaskSuspend+0x58>
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004de6:	2201      	movs	r2, #1
 8004de8:	fa02 f303 	lsl.w	r3, r2, r3
 8004dec:	43da      	mvns	r2, r3
 8004dee:	4b31      	ldr	r3, [pc, #196]	@ (8004eb4 <vTaskSuspend+0x114>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	4013      	ands	r3, r2
 8004df4:	4a2f      	ldr	r2, [pc, #188]	@ (8004eb4 <vTaskSuspend+0x114>)
 8004df6:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d004      	beq.n	8004e0a <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	3318      	adds	r3, #24
 8004e04:	4618      	mov	r0, r3
 8004e06:	f7ff f930 	bl	800406a <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	3304      	adds	r3, #4
 8004e0e:	4619      	mov	r1, r3
 8004e10:	4829      	ldr	r0, [pc, #164]	@ (8004eb8 <vTaskSuspend+0x118>)
 8004e12:	f7ff f8cd 	bl	8003fb0 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004e1c:	b2db      	uxtb	r3, r3
 8004e1e:	2b01      	cmp	r3, #1
 8004e20:	d103      	bne.n	8004e2a <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	2200      	movs	r2, #0
 8004e26:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8004e2a:	f001 f8cd 	bl	8005fc8 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8004e2e:	4b23      	ldr	r3, [pc, #140]	@ (8004ebc <vTaskSuspend+0x11c>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d005      	beq.n	8004e42 <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8004e36:	f001 f891 	bl	8005f5c <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8004e3a:	f000 fd1d 	bl	8005878 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8004e3e:	f001 f8c3 	bl	8005fc8 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8004e42:	4b1a      	ldr	r3, [pc, #104]	@ (8004eac <vTaskSuspend+0x10c>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	68fa      	ldr	r2, [r7, #12]
 8004e48:	429a      	cmp	r2, r3
 8004e4a:	d12a      	bne.n	8004ea2 <vTaskSuspend+0x102>
		{
			if( xSchedulerRunning != pdFALSE )
 8004e4c:	4b1b      	ldr	r3, [pc, #108]	@ (8004ebc <vTaskSuspend+0x11c>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d01a      	beq.n	8004e8a <vTaskSuspend+0xea>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8004e54:	4b1a      	ldr	r3, [pc, #104]	@ (8004ec0 <vTaskSuspend+0x120>)
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d00d      	beq.n	8004e78 <vTaskSuspend+0xd8>
	__asm volatile
 8004e5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e60:	b672      	cpsid	i
 8004e62:	f383 8811 	msr	BASEPRI, r3
 8004e66:	f3bf 8f6f 	isb	sy
 8004e6a:	f3bf 8f4f 	dsb	sy
 8004e6e:	b662      	cpsie	i
 8004e70:	60bb      	str	r3, [r7, #8]
}
 8004e72:	bf00      	nop
 8004e74:	bf00      	nop
 8004e76:	e7fd      	b.n	8004e74 <vTaskSuspend+0xd4>
				portYIELD_WITHIN_API();
 8004e78:	4b12      	ldr	r3, [pc, #72]	@ (8004ec4 <vTaskSuspend+0x124>)
 8004e7a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004e7e:	601a      	str	r2, [r3, #0]
 8004e80:	f3bf 8f4f 	dsb	sy
 8004e84:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004e88:	e00b      	b.n	8004ea2 <vTaskSuspend+0x102>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8004e8a:	4b0b      	ldr	r3, [pc, #44]	@ (8004eb8 <vTaskSuspend+0x118>)
 8004e8c:	681a      	ldr	r2, [r3, #0]
 8004e8e:	4b0e      	ldr	r3, [pc, #56]	@ (8004ec8 <vTaskSuspend+0x128>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	429a      	cmp	r2, r3
 8004e94:	d103      	bne.n	8004e9e <vTaskSuspend+0xfe>
					pxCurrentTCB = NULL;
 8004e96:	4b05      	ldr	r3, [pc, #20]	@ (8004eac <vTaskSuspend+0x10c>)
 8004e98:	2200      	movs	r2, #0
 8004e9a:	601a      	str	r2, [r3, #0]
	}
 8004e9c:	e001      	b.n	8004ea2 <vTaskSuspend+0x102>
					vTaskSwitchContext();
 8004e9e:	f000 fa7b 	bl	8005398 <vTaskSwitchContext>
	}
 8004ea2:	bf00      	nop
 8004ea4:	3710      	adds	r7, #16
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	bd80      	pop	{r7, pc}
 8004eaa:	bf00      	nop
 8004eac:	200009dc 	.word	0x200009dc
 8004eb0:	200009e0 	.word	0x200009e0
 8004eb4:	20000ae4 	.word	0x20000ae4
 8004eb8:	20000ac8 	.word	0x20000ac8
 8004ebc:	20000ae8 	.word	0x20000ae8
 8004ec0:	20000b04 	.word	0x20000b04
 8004ec4:	e000ed04 	.word	0xe000ed04
 8004ec8:	20000adc 	.word	0x20000adc

08004ecc <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8004ecc:	b480      	push	{r7}
 8004ece:	b087      	sub	sp, #28
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d10d      	bne.n	8004efe <prvTaskIsTaskSuspended+0x32>
	__asm volatile
 8004ee2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ee6:	b672      	cpsid	i
 8004ee8:	f383 8811 	msr	BASEPRI, r3
 8004eec:	f3bf 8f6f 	isb	sy
 8004ef0:	f3bf 8f4f 	dsb	sy
 8004ef4:	b662      	cpsie	i
 8004ef6:	60fb      	str	r3, [r7, #12]
}
 8004ef8:	bf00      	nop
 8004efa:	bf00      	nop
 8004efc:	e7fd      	b.n	8004efa <prvTaskIsTaskSuspended+0x2e>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004efe:	693b      	ldr	r3, [r7, #16]
 8004f00:	695b      	ldr	r3, [r3, #20]
 8004f02:	4a0a      	ldr	r2, [pc, #40]	@ (8004f2c <prvTaskIsTaskSuspended+0x60>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d10a      	bne.n	8004f1e <prvTaskIsTaskSuspended+0x52>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8004f08:	693b      	ldr	r3, [r7, #16]
 8004f0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f0c:	4a08      	ldr	r2, [pc, #32]	@ (8004f30 <prvTaskIsTaskSuspended+0x64>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d005      	beq.n	8004f1e <prvTaskIsTaskSuspended+0x52>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8004f12:	693b      	ldr	r3, [r7, #16]
 8004f14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d101      	bne.n	8004f1e <prvTaskIsTaskSuspended+0x52>
				{
					xReturn = pdTRUE;
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004f1e:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8004f20:	4618      	mov	r0, r3
 8004f22:	371c      	adds	r7, #28
 8004f24:	46bd      	mov	sp, r7
 8004f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2a:	4770      	bx	lr
 8004f2c:	20000ac8 	.word	0x20000ac8
 8004f30:	20000a9c 	.word	0x20000a9c

08004f34 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b084      	sub	sp, #16
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d10d      	bne.n	8004f62 <vTaskResume+0x2e>
	__asm volatile
 8004f46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f4a:	b672      	cpsid	i
 8004f4c:	f383 8811 	msr	BASEPRI, r3
 8004f50:	f3bf 8f6f 	isb	sy
 8004f54:	f3bf 8f4f 	dsb	sy
 8004f58:	b662      	cpsie	i
 8004f5a:	60bb      	str	r3, [r7, #8]
}
 8004f5c:	bf00      	nop
 8004f5e:	bf00      	nop
 8004f60:	e7fd      	b.n	8004f5e <vTaskResume+0x2a>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8004f62:	4b20      	ldr	r3, [pc, #128]	@ (8004fe4 <vTaskResume+0xb0>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	68fa      	ldr	r2, [r7, #12]
 8004f68:	429a      	cmp	r2, r3
 8004f6a:	d037      	beq.n	8004fdc <vTaskResume+0xa8>
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d034      	beq.n	8004fdc <vTaskResume+0xa8>
		{
			taskENTER_CRITICAL();
 8004f72:	f000 fff3 	bl	8005f5c <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8004f76:	68f8      	ldr	r0, [r7, #12]
 8004f78:	f7ff ffa8 	bl	8004ecc <prvTaskIsTaskSuspended>
 8004f7c:	4603      	mov	r3, r0
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d02a      	beq.n	8004fd8 <vTaskResume+0xa4>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	3304      	adds	r3, #4
 8004f86:	4618      	mov	r0, r3
 8004f88:	f7ff f86f 	bl	800406a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f90:	2201      	movs	r2, #1
 8004f92:	409a      	lsls	r2, r3
 8004f94:	4b14      	ldr	r3, [pc, #80]	@ (8004fe8 <vTaskResume+0xb4>)
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4313      	orrs	r3, r2
 8004f9a:	4a13      	ldr	r2, [pc, #76]	@ (8004fe8 <vTaskResume+0xb4>)
 8004f9c:	6013      	str	r3, [r2, #0]
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004fa2:	4613      	mov	r3, r2
 8004fa4:	009b      	lsls	r3, r3, #2
 8004fa6:	4413      	add	r3, r2
 8004fa8:	009b      	lsls	r3, r3, #2
 8004faa:	4a10      	ldr	r2, [pc, #64]	@ (8004fec <vTaskResume+0xb8>)
 8004fac:	441a      	add	r2, r3
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	3304      	adds	r3, #4
 8004fb2:	4619      	mov	r1, r3
 8004fb4:	4610      	mov	r0, r2
 8004fb6:	f7fe fffb 	bl	8003fb0 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004fbe:	4b09      	ldr	r3, [pc, #36]	@ (8004fe4 <vTaskResume+0xb0>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fc4:	429a      	cmp	r2, r3
 8004fc6:	d307      	bcc.n	8004fd8 <vTaskResume+0xa4>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8004fc8:	4b09      	ldr	r3, [pc, #36]	@ (8004ff0 <vTaskResume+0xbc>)
 8004fca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004fce:	601a      	str	r2, [r3, #0]
 8004fd0:	f3bf 8f4f 	dsb	sy
 8004fd4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8004fd8:	f000 fff6 	bl	8005fc8 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004fdc:	bf00      	nop
 8004fde:	3710      	adds	r7, #16
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	bd80      	pop	{r7, pc}
 8004fe4:	200009dc 	.word	0x200009dc
 8004fe8:	20000ae4 	.word	0x20000ae4
 8004fec:	200009e0 	.word	0x200009e0
 8004ff0:	e000ed04 	.word	0xe000ed04

08004ff4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b08a      	sub	sp, #40	@ 0x28
 8004ff8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004ffe:	2300      	movs	r3, #0
 8005000:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005002:	463a      	mov	r2, r7
 8005004:	1d39      	adds	r1, r7, #4
 8005006:	f107 0308 	add.w	r3, r7, #8
 800500a:	4618      	mov	r0, r3
 800500c:	f7fb fae6 	bl	80005dc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005010:	6839      	ldr	r1, [r7, #0]
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	68ba      	ldr	r2, [r7, #8]
 8005016:	9202      	str	r2, [sp, #8]
 8005018:	9301      	str	r3, [sp, #4]
 800501a:	2300      	movs	r3, #0
 800501c:	9300      	str	r3, [sp, #0]
 800501e:	2300      	movs	r3, #0
 8005020:	460a      	mov	r2, r1
 8005022:	4922      	ldr	r1, [pc, #136]	@ (80050ac <vTaskStartScheduler+0xb8>)
 8005024:	4822      	ldr	r0, [pc, #136]	@ (80050b0 <vTaskStartScheduler+0xbc>)
 8005026:	f7ff fc6b 	bl	8004900 <xTaskCreateStatic>
 800502a:	4603      	mov	r3, r0
 800502c:	4a21      	ldr	r2, [pc, #132]	@ (80050b4 <vTaskStartScheduler+0xc0>)
 800502e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005030:	4b20      	ldr	r3, [pc, #128]	@ (80050b4 <vTaskStartScheduler+0xc0>)
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d002      	beq.n	800503e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005038:	2301      	movs	r3, #1
 800503a:	617b      	str	r3, [r7, #20]
 800503c:	e001      	b.n	8005042 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800503e:	2300      	movs	r3, #0
 8005040:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005042:	697b      	ldr	r3, [r7, #20]
 8005044:	2b01      	cmp	r3, #1
 8005046:	d11a      	bne.n	800507e <vTaskStartScheduler+0x8a>
	__asm volatile
 8005048:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800504c:	b672      	cpsid	i
 800504e:	f383 8811 	msr	BASEPRI, r3
 8005052:	f3bf 8f6f 	isb	sy
 8005056:	f3bf 8f4f 	dsb	sy
 800505a:	b662      	cpsie	i
 800505c:	613b      	str	r3, [r7, #16]
}
 800505e:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005060:	4b15      	ldr	r3, [pc, #84]	@ (80050b8 <vTaskStartScheduler+0xc4>)
 8005062:	f04f 32ff 	mov.w	r2, #4294967295
 8005066:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005068:	4b14      	ldr	r3, [pc, #80]	@ (80050bc <vTaskStartScheduler+0xc8>)
 800506a:	2201      	movs	r2, #1
 800506c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800506e:	4b14      	ldr	r3, [pc, #80]	@ (80050c0 <vTaskStartScheduler+0xcc>)
 8005070:	2200      	movs	r2, #0
 8005072:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 8005074:	f7fc f978 	bl	8001368 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005078:	f000 fef2 	bl	8005e60 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800507c:	e011      	b.n	80050a2 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800507e:	697b      	ldr	r3, [r7, #20]
 8005080:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005084:	d10d      	bne.n	80050a2 <vTaskStartScheduler+0xae>
	__asm volatile
 8005086:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800508a:	b672      	cpsid	i
 800508c:	f383 8811 	msr	BASEPRI, r3
 8005090:	f3bf 8f6f 	isb	sy
 8005094:	f3bf 8f4f 	dsb	sy
 8005098:	b662      	cpsie	i
 800509a:	60fb      	str	r3, [r7, #12]
}
 800509c:	bf00      	nop
 800509e:	bf00      	nop
 80050a0:	e7fd      	b.n	800509e <vTaskStartScheduler+0xaa>
}
 80050a2:	bf00      	nop
 80050a4:	3718      	adds	r7, #24
 80050a6:	46bd      	mov	sp, r7
 80050a8:	bd80      	pop	{r7, pc}
 80050aa:	bf00      	nop
 80050ac:	0800808c 	.word	0x0800808c
 80050b0:	08005709 	.word	0x08005709
 80050b4:	20000b00 	.word	0x20000b00
 80050b8:	20000afc 	.word	0x20000afc
 80050bc:	20000ae8 	.word	0x20000ae8
 80050c0:	20000ae0 	.word	0x20000ae0

080050c4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80050c4:	b480      	push	{r7}
 80050c6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80050c8:	4b04      	ldr	r3, [pc, #16]	@ (80050dc <vTaskSuspendAll+0x18>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	3301      	adds	r3, #1
 80050ce:	4a03      	ldr	r2, [pc, #12]	@ (80050dc <vTaskSuspendAll+0x18>)
 80050d0:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80050d2:	bf00      	nop
 80050d4:	46bd      	mov	sp, r7
 80050d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050da:	4770      	bx	lr
 80050dc:	20000b04 	.word	0x20000b04

080050e0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b084      	sub	sp, #16
 80050e4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80050e6:	2300      	movs	r3, #0
 80050e8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80050ea:	2300      	movs	r3, #0
 80050ec:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80050ee:	4b43      	ldr	r3, [pc, #268]	@ (80051fc <xTaskResumeAll+0x11c>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d10d      	bne.n	8005112 <xTaskResumeAll+0x32>
	__asm volatile
 80050f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050fa:	b672      	cpsid	i
 80050fc:	f383 8811 	msr	BASEPRI, r3
 8005100:	f3bf 8f6f 	isb	sy
 8005104:	f3bf 8f4f 	dsb	sy
 8005108:	b662      	cpsie	i
 800510a:	603b      	str	r3, [r7, #0]
}
 800510c:	bf00      	nop
 800510e:	bf00      	nop
 8005110:	e7fd      	b.n	800510e <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005112:	f000 ff23 	bl	8005f5c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005116:	4b39      	ldr	r3, [pc, #228]	@ (80051fc <xTaskResumeAll+0x11c>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	3b01      	subs	r3, #1
 800511c:	4a37      	ldr	r2, [pc, #220]	@ (80051fc <xTaskResumeAll+0x11c>)
 800511e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005120:	4b36      	ldr	r3, [pc, #216]	@ (80051fc <xTaskResumeAll+0x11c>)
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d161      	bne.n	80051ec <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005128:	4b35      	ldr	r3, [pc, #212]	@ (8005200 <xTaskResumeAll+0x120>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d05d      	beq.n	80051ec <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005130:	e02e      	b.n	8005190 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005132:	4b34      	ldr	r3, [pc, #208]	@ (8005204 <xTaskResumeAll+0x124>)
 8005134:	68db      	ldr	r3, [r3, #12]
 8005136:	68db      	ldr	r3, [r3, #12]
 8005138:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	3318      	adds	r3, #24
 800513e:	4618      	mov	r0, r3
 8005140:	f7fe ff93 	bl	800406a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	3304      	adds	r3, #4
 8005148:	4618      	mov	r0, r3
 800514a:	f7fe ff8e 	bl	800406a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005152:	2201      	movs	r2, #1
 8005154:	409a      	lsls	r2, r3
 8005156:	4b2c      	ldr	r3, [pc, #176]	@ (8005208 <xTaskResumeAll+0x128>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	4313      	orrs	r3, r2
 800515c:	4a2a      	ldr	r2, [pc, #168]	@ (8005208 <xTaskResumeAll+0x128>)
 800515e:	6013      	str	r3, [r2, #0]
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005164:	4613      	mov	r3, r2
 8005166:	009b      	lsls	r3, r3, #2
 8005168:	4413      	add	r3, r2
 800516a:	009b      	lsls	r3, r3, #2
 800516c:	4a27      	ldr	r2, [pc, #156]	@ (800520c <xTaskResumeAll+0x12c>)
 800516e:	441a      	add	r2, r3
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	3304      	adds	r3, #4
 8005174:	4619      	mov	r1, r3
 8005176:	4610      	mov	r0, r2
 8005178:	f7fe ff1a 	bl	8003fb0 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005180:	4b23      	ldr	r3, [pc, #140]	@ (8005210 <xTaskResumeAll+0x130>)
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005186:	429a      	cmp	r2, r3
 8005188:	d302      	bcc.n	8005190 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 800518a:	4b22      	ldr	r3, [pc, #136]	@ (8005214 <xTaskResumeAll+0x134>)
 800518c:	2201      	movs	r2, #1
 800518e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005190:	4b1c      	ldr	r3, [pc, #112]	@ (8005204 <xTaskResumeAll+0x124>)
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d1cc      	bne.n	8005132 <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d001      	beq.n	80051a2 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800519e:	f000 fb6b 	bl	8005878 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80051a2:	4b1d      	ldr	r3, [pc, #116]	@ (8005218 <xTaskResumeAll+0x138>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d010      	beq.n	80051d0 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80051ae:	f000 f837 	bl	8005220 <xTaskIncrementTick>
 80051b2:	4603      	mov	r3, r0
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d002      	beq.n	80051be <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 80051b8:	4b16      	ldr	r3, [pc, #88]	@ (8005214 <xTaskResumeAll+0x134>)
 80051ba:	2201      	movs	r2, #1
 80051bc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	3b01      	subs	r3, #1
 80051c2:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d1f1      	bne.n	80051ae <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 80051ca:	4b13      	ldr	r3, [pc, #76]	@ (8005218 <xTaskResumeAll+0x138>)
 80051cc:	2200      	movs	r2, #0
 80051ce:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80051d0:	4b10      	ldr	r3, [pc, #64]	@ (8005214 <xTaskResumeAll+0x134>)
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d009      	beq.n	80051ec <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80051d8:	2301      	movs	r3, #1
 80051da:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80051dc:	4b0f      	ldr	r3, [pc, #60]	@ (800521c <xTaskResumeAll+0x13c>)
 80051de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80051e2:	601a      	str	r2, [r3, #0]
 80051e4:	f3bf 8f4f 	dsb	sy
 80051e8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80051ec:	f000 feec 	bl	8005fc8 <vPortExitCritical>

	return xAlreadyYielded;
 80051f0:	68bb      	ldr	r3, [r7, #8]
}
 80051f2:	4618      	mov	r0, r3
 80051f4:	3710      	adds	r7, #16
 80051f6:	46bd      	mov	sp, r7
 80051f8:	bd80      	pop	{r7, pc}
 80051fa:	bf00      	nop
 80051fc:	20000b04 	.word	0x20000b04
 8005200:	20000adc 	.word	0x20000adc
 8005204:	20000a9c 	.word	0x20000a9c
 8005208:	20000ae4 	.word	0x20000ae4
 800520c:	200009e0 	.word	0x200009e0
 8005210:	200009dc 	.word	0x200009dc
 8005214:	20000af0 	.word	0x20000af0
 8005218:	20000aec 	.word	0x20000aec
 800521c:	e000ed04 	.word	0xe000ed04

08005220 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b086      	sub	sp, #24
 8005224:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005226:	2300      	movs	r3, #0
 8005228:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800522a:	4b50      	ldr	r3, [pc, #320]	@ (800536c <xTaskIncrementTick+0x14c>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	2b00      	cmp	r3, #0
 8005230:	f040 808b 	bne.w	800534a <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005234:	4b4e      	ldr	r3, [pc, #312]	@ (8005370 <xTaskIncrementTick+0x150>)
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	3301      	adds	r3, #1
 800523a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800523c:	4a4c      	ldr	r2, [pc, #304]	@ (8005370 <xTaskIncrementTick+0x150>)
 800523e:	693b      	ldr	r3, [r7, #16]
 8005240:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005242:	693b      	ldr	r3, [r7, #16]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d123      	bne.n	8005290 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 8005248:	4b4a      	ldr	r3, [pc, #296]	@ (8005374 <xTaskIncrementTick+0x154>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d00d      	beq.n	800526e <xTaskIncrementTick+0x4e>
	__asm volatile
 8005252:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005256:	b672      	cpsid	i
 8005258:	f383 8811 	msr	BASEPRI, r3
 800525c:	f3bf 8f6f 	isb	sy
 8005260:	f3bf 8f4f 	dsb	sy
 8005264:	b662      	cpsie	i
 8005266:	603b      	str	r3, [r7, #0]
}
 8005268:	bf00      	nop
 800526a:	bf00      	nop
 800526c:	e7fd      	b.n	800526a <xTaskIncrementTick+0x4a>
 800526e:	4b41      	ldr	r3, [pc, #260]	@ (8005374 <xTaskIncrementTick+0x154>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	60fb      	str	r3, [r7, #12]
 8005274:	4b40      	ldr	r3, [pc, #256]	@ (8005378 <xTaskIncrementTick+0x158>)
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4a3e      	ldr	r2, [pc, #248]	@ (8005374 <xTaskIncrementTick+0x154>)
 800527a:	6013      	str	r3, [r2, #0]
 800527c:	4a3e      	ldr	r2, [pc, #248]	@ (8005378 <xTaskIncrementTick+0x158>)
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	6013      	str	r3, [r2, #0]
 8005282:	4b3e      	ldr	r3, [pc, #248]	@ (800537c <xTaskIncrementTick+0x15c>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	3301      	adds	r3, #1
 8005288:	4a3c      	ldr	r2, [pc, #240]	@ (800537c <xTaskIncrementTick+0x15c>)
 800528a:	6013      	str	r3, [r2, #0]
 800528c:	f000 faf4 	bl	8005878 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005290:	4b3b      	ldr	r3, [pc, #236]	@ (8005380 <xTaskIncrementTick+0x160>)
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	693a      	ldr	r2, [r7, #16]
 8005296:	429a      	cmp	r2, r3
 8005298:	d348      	bcc.n	800532c <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800529a:	4b36      	ldr	r3, [pc, #216]	@ (8005374 <xTaskIncrementTick+0x154>)
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d104      	bne.n	80052ae <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80052a4:	4b36      	ldr	r3, [pc, #216]	@ (8005380 <xTaskIncrementTick+0x160>)
 80052a6:	f04f 32ff 	mov.w	r2, #4294967295
 80052aa:	601a      	str	r2, [r3, #0]
					break;
 80052ac:	e03e      	b.n	800532c <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80052ae:	4b31      	ldr	r3, [pc, #196]	@ (8005374 <xTaskIncrementTick+0x154>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	68db      	ldr	r3, [r3, #12]
 80052b4:	68db      	ldr	r3, [r3, #12]
 80052b6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80052b8:	68bb      	ldr	r3, [r7, #8]
 80052ba:	685b      	ldr	r3, [r3, #4]
 80052bc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80052be:	693a      	ldr	r2, [r7, #16]
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	429a      	cmp	r2, r3
 80052c4:	d203      	bcs.n	80052ce <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80052c6:	4a2e      	ldr	r2, [pc, #184]	@ (8005380 <xTaskIncrementTick+0x160>)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80052cc:	e02e      	b.n	800532c <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80052ce:	68bb      	ldr	r3, [r7, #8]
 80052d0:	3304      	adds	r3, #4
 80052d2:	4618      	mov	r0, r3
 80052d4:	f7fe fec9 	bl	800406a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80052d8:	68bb      	ldr	r3, [r7, #8]
 80052da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d004      	beq.n	80052ea <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	3318      	adds	r3, #24
 80052e4:	4618      	mov	r0, r3
 80052e6:	f7fe fec0 	bl	800406a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80052ea:	68bb      	ldr	r3, [r7, #8]
 80052ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052ee:	2201      	movs	r2, #1
 80052f0:	409a      	lsls	r2, r3
 80052f2:	4b24      	ldr	r3, [pc, #144]	@ (8005384 <xTaskIncrementTick+0x164>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	4313      	orrs	r3, r2
 80052f8:	4a22      	ldr	r2, [pc, #136]	@ (8005384 <xTaskIncrementTick+0x164>)
 80052fa:	6013      	str	r3, [r2, #0]
 80052fc:	68bb      	ldr	r3, [r7, #8]
 80052fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005300:	4613      	mov	r3, r2
 8005302:	009b      	lsls	r3, r3, #2
 8005304:	4413      	add	r3, r2
 8005306:	009b      	lsls	r3, r3, #2
 8005308:	4a1f      	ldr	r2, [pc, #124]	@ (8005388 <xTaskIncrementTick+0x168>)
 800530a:	441a      	add	r2, r3
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	3304      	adds	r3, #4
 8005310:	4619      	mov	r1, r3
 8005312:	4610      	mov	r0, r2
 8005314:	f7fe fe4c 	bl	8003fb0 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005318:	68bb      	ldr	r3, [r7, #8]
 800531a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800531c:	4b1b      	ldr	r3, [pc, #108]	@ (800538c <xTaskIncrementTick+0x16c>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005322:	429a      	cmp	r2, r3
 8005324:	d3b9      	bcc.n	800529a <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 8005326:	2301      	movs	r3, #1
 8005328:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800532a:	e7b6      	b.n	800529a <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800532c:	4b17      	ldr	r3, [pc, #92]	@ (800538c <xTaskIncrementTick+0x16c>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005332:	4915      	ldr	r1, [pc, #84]	@ (8005388 <xTaskIncrementTick+0x168>)
 8005334:	4613      	mov	r3, r2
 8005336:	009b      	lsls	r3, r3, #2
 8005338:	4413      	add	r3, r2
 800533a:	009b      	lsls	r3, r3, #2
 800533c:	440b      	add	r3, r1
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	2b01      	cmp	r3, #1
 8005342:	d907      	bls.n	8005354 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8005344:	2301      	movs	r3, #1
 8005346:	617b      	str	r3, [r7, #20]
 8005348:	e004      	b.n	8005354 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800534a:	4b11      	ldr	r3, [pc, #68]	@ (8005390 <xTaskIncrementTick+0x170>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	3301      	adds	r3, #1
 8005350:	4a0f      	ldr	r2, [pc, #60]	@ (8005390 <xTaskIncrementTick+0x170>)
 8005352:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005354:	4b0f      	ldr	r3, [pc, #60]	@ (8005394 <xTaskIncrementTick+0x174>)
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d001      	beq.n	8005360 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 800535c:	2301      	movs	r3, #1
 800535e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005360:	697b      	ldr	r3, [r7, #20]
}
 8005362:	4618      	mov	r0, r3
 8005364:	3718      	adds	r7, #24
 8005366:	46bd      	mov	sp, r7
 8005368:	bd80      	pop	{r7, pc}
 800536a:	bf00      	nop
 800536c:	20000b04 	.word	0x20000b04
 8005370:	20000ae0 	.word	0x20000ae0
 8005374:	20000a94 	.word	0x20000a94
 8005378:	20000a98 	.word	0x20000a98
 800537c:	20000af4 	.word	0x20000af4
 8005380:	20000afc 	.word	0x20000afc
 8005384:	20000ae4 	.word	0x20000ae4
 8005388:	200009e0 	.word	0x200009e0
 800538c:	200009dc 	.word	0x200009dc
 8005390:	20000aec 	.word	0x20000aec
 8005394:	20000af0 	.word	0x20000af0

08005398 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b088      	sub	sp, #32
 800539c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800539e:	4b47      	ldr	r3, [pc, #284]	@ (80054bc <vTaskSwitchContext+0x124>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d003      	beq.n	80053ae <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80053a6:	4b46      	ldr	r3, [pc, #280]	@ (80054c0 <vTaskSwitchContext+0x128>)
 80053a8:	2201      	movs	r2, #1
 80053aa:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80053ac:	e082      	b.n	80054b4 <vTaskSwitchContext+0x11c>
		xYieldPending = pdFALSE;
 80053ae:	4b44      	ldr	r3, [pc, #272]	@ (80054c0 <vTaskSwitchContext+0x128>)
 80053b0:	2200      	movs	r2, #0
 80053b2:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 80053b4:	f7fb ffdf 	bl	8001376 <getRunTimeCounterValue>
 80053b8:	4603      	mov	r3, r0
 80053ba:	4a42      	ldr	r2, [pc, #264]	@ (80054c4 <vTaskSwitchContext+0x12c>)
 80053bc:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 80053be:	4b41      	ldr	r3, [pc, #260]	@ (80054c4 <vTaskSwitchContext+0x12c>)
 80053c0:	681a      	ldr	r2, [r3, #0]
 80053c2:	4b41      	ldr	r3, [pc, #260]	@ (80054c8 <vTaskSwitchContext+0x130>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	429a      	cmp	r2, r3
 80053c8:	d909      	bls.n	80053de <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 80053ca:	4b40      	ldr	r3, [pc, #256]	@ (80054cc <vTaskSwitchContext+0x134>)
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80053d0:	4a3c      	ldr	r2, [pc, #240]	@ (80054c4 <vTaskSwitchContext+0x12c>)
 80053d2:	6810      	ldr	r0, [r2, #0]
 80053d4:	4a3c      	ldr	r2, [pc, #240]	@ (80054c8 <vTaskSwitchContext+0x130>)
 80053d6:	6812      	ldr	r2, [r2, #0]
 80053d8:	1a82      	subs	r2, r0, r2
 80053da:	440a      	add	r2, r1
 80053dc:	655a      	str	r2, [r3, #84]	@ 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 80053de:	4b39      	ldr	r3, [pc, #228]	@ (80054c4 <vTaskSwitchContext+0x12c>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4a39      	ldr	r2, [pc, #228]	@ (80054c8 <vTaskSwitchContext+0x130>)
 80053e4:	6013      	str	r3, [r2, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 80053e6:	4b39      	ldr	r3, [pc, #228]	@ (80054cc <vTaskSwitchContext+0x134>)
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053ec:	61fb      	str	r3, [r7, #28]
 80053ee:	f04f 33a5 	mov.w	r3, #2779096485	@ 0xa5a5a5a5
 80053f2:	61bb      	str	r3, [r7, #24]
 80053f4:	69fb      	ldr	r3, [r7, #28]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	69ba      	ldr	r2, [r7, #24]
 80053fa:	429a      	cmp	r2, r3
 80053fc:	d111      	bne.n	8005422 <vTaskSwitchContext+0x8a>
 80053fe:	69fb      	ldr	r3, [r7, #28]
 8005400:	3304      	adds	r3, #4
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	69ba      	ldr	r2, [r7, #24]
 8005406:	429a      	cmp	r2, r3
 8005408:	d10b      	bne.n	8005422 <vTaskSwitchContext+0x8a>
 800540a:	69fb      	ldr	r3, [r7, #28]
 800540c:	3308      	adds	r3, #8
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	69ba      	ldr	r2, [r7, #24]
 8005412:	429a      	cmp	r2, r3
 8005414:	d105      	bne.n	8005422 <vTaskSwitchContext+0x8a>
 8005416:	69fb      	ldr	r3, [r7, #28]
 8005418:	330c      	adds	r3, #12
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	69ba      	ldr	r2, [r7, #24]
 800541e:	429a      	cmp	r2, r3
 8005420:	d008      	beq.n	8005434 <vTaskSwitchContext+0x9c>
 8005422:	4b2a      	ldr	r3, [pc, #168]	@ (80054cc <vTaskSwitchContext+0x134>)
 8005424:	681a      	ldr	r2, [r3, #0]
 8005426:	4b29      	ldr	r3, [pc, #164]	@ (80054cc <vTaskSwitchContext+0x134>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	3334      	adds	r3, #52	@ 0x34
 800542c:	4619      	mov	r1, r3
 800542e:	4610      	mov	r0, r2
 8005430:	f7fb fef8 	bl	8001224 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005434:	4b26      	ldr	r3, [pc, #152]	@ (80054d0 <vTaskSwitchContext+0x138>)
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	fab3 f383 	clz	r3, r3
 8005440:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005442:	7afb      	ldrb	r3, [r7, #11]
 8005444:	f1c3 031f 	rsb	r3, r3, #31
 8005448:	617b      	str	r3, [r7, #20]
 800544a:	4922      	ldr	r1, [pc, #136]	@ (80054d4 <vTaskSwitchContext+0x13c>)
 800544c:	697a      	ldr	r2, [r7, #20]
 800544e:	4613      	mov	r3, r2
 8005450:	009b      	lsls	r3, r3, #2
 8005452:	4413      	add	r3, r2
 8005454:	009b      	lsls	r3, r3, #2
 8005456:	440b      	add	r3, r1
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d10d      	bne.n	800547a <vTaskSwitchContext+0xe2>
	__asm volatile
 800545e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005462:	b672      	cpsid	i
 8005464:	f383 8811 	msr	BASEPRI, r3
 8005468:	f3bf 8f6f 	isb	sy
 800546c:	f3bf 8f4f 	dsb	sy
 8005470:	b662      	cpsie	i
 8005472:	607b      	str	r3, [r7, #4]
}
 8005474:	bf00      	nop
 8005476:	bf00      	nop
 8005478:	e7fd      	b.n	8005476 <vTaskSwitchContext+0xde>
 800547a:	697a      	ldr	r2, [r7, #20]
 800547c:	4613      	mov	r3, r2
 800547e:	009b      	lsls	r3, r3, #2
 8005480:	4413      	add	r3, r2
 8005482:	009b      	lsls	r3, r3, #2
 8005484:	4a13      	ldr	r2, [pc, #76]	@ (80054d4 <vTaskSwitchContext+0x13c>)
 8005486:	4413      	add	r3, r2
 8005488:	613b      	str	r3, [r7, #16]
 800548a:	693b      	ldr	r3, [r7, #16]
 800548c:	685b      	ldr	r3, [r3, #4]
 800548e:	685a      	ldr	r2, [r3, #4]
 8005490:	693b      	ldr	r3, [r7, #16]
 8005492:	605a      	str	r2, [r3, #4]
 8005494:	693b      	ldr	r3, [r7, #16]
 8005496:	685a      	ldr	r2, [r3, #4]
 8005498:	693b      	ldr	r3, [r7, #16]
 800549a:	3308      	adds	r3, #8
 800549c:	429a      	cmp	r2, r3
 800549e:	d104      	bne.n	80054aa <vTaskSwitchContext+0x112>
 80054a0:	693b      	ldr	r3, [r7, #16]
 80054a2:	685b      	ldr	r3, [r3, #4]
 80054a4:	685a      	ldr	r2, [r3, #4]
 80054a6:	693b      	ldr	r3, [r7, #16]
 80054a8:	605a      	str	r2, [r3, #4]
 80054aa:	693b      	ldr	r3, [r7, #16]
 80054ac:	685b      	ldr	r3, [r3, #4]
 80054ae:	68db      	ldr	r3, [r3, #12]
 80054b0:	4a06      	ldr	r2, [pc, #24]	@ (80054cc <vTaskSwitchContext+0x134>)
 80054b2:	6013      	str	r3, [r2, #0]
}
 80054b4:	bf00      	nop
 80054b6:	3720      	adds	r7, #32
 80054b8:	46bd      	mov	sp, r7
 80054ba:	bd80      	pop	{r7, pc}
 80054bc:	20000b04 	.word	0x20000b04
 80054c0:	20000af0 	.word	0x20000af0
 80054c4:	20000b0c 	.word	0x20000b0c
 80054c8:	20000b08 	.word	0x20000b08
 80054cc:	200009dc 	.word	0x200009dc
 80054d0:	20000ae4 	.word	0x20000ae4
 80054d4:	200009e0 	.word	0x200009e0

080054d8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b084      	sub	sp, #16
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
 80054e0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d10d      	bne.n	8005504 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 80054e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054ec:	b672      	cpsid	i
 80054ee:	f383 8811 	msr	BASEPRI, r3
 80054f2:	f3bf 8f6f 	isb	sy
 80054f6:	f3bf 8f4f 	dsb	sy
 80054fa:	b662      	cpsie	i
 80054fc:	60fb      	str	r3, [r7, #12]
}
 80054fe:	bf00      	nop
 8005500:	bf00      	nop
 8005502:	e7fd      	b.n	8005500 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005504:	4b07      	ldr	r3, [pc, #28]	@ (8005524 <vTaskPlaceOnEventList+0x4c>)
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	3318      	adds	r3, #24
 800550a:	4619      	mov	r1, r3
 800550c:	6878      	ldr	r0, [r7, #4]
 800550e:	f7fe fd73 	bl	8003ff8 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005512:	2101      	movs	r1, #1
 8005514:	6838      	ldr	r0, [r7, #0]
 8005516:	f000 fbad 	bl	8005c74 <prvAddCurrentTaskToDelayedList>
}
 800551a:	bf00      	nop
 800551c:	3710      	adds	r7, #16
 800551e:	46bd      	mov	sp, r7
 8005520:	bd80      	pop	{r7, pc}
 8005522:	bf00      	nop
 8005524:	200009dc 	.word	0x200009dc

08005528 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b086      	sub	sp, #24
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	68db      	ldr	r3, [r3, #12]
 8005534:	68db      	ldr	r3, [r3, #12]
 8005536:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005538:	693b      	ldr	r3, [r7, #16]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d10d      	bne.n	800555a <xTaskRemoveFromEventList+0x32>
	__asm volatile
 800553e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005542:	b672      	cpsid	i
 8005544:	f383 8811 	msr	BASEPRI, r3
 8005548:	f3bf 8f6f 	isb	sy
 800554c:	f3bf 8f4f 	dsb	sy
 8005550:	b662      	cpsie	i
 8005552:	60fb      	str	r3, [r7, #12]
}
 8005554:	bf00      	nop
 8005556:	bf00      	nop
 8005558:	e7fd      	b.n	8005556 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800555a:	693b      	ldr	r3, [r7, #16]
 800555c:	3318      	adds	r3, #24
 800555e:	4618      	mov	r0, r3
 8005560:	f7fe fd83 	bl	800406a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005564:	4b1d      	ldr	r3, [pc, #116]	@ (80055dc <xTaskRemoveFromEventList+0xb4>)
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d11c      	bne.n	80055a6 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800556c:	693b      	ldr	r3, [r7, #16]
 800556e:	3304      	adds	r3, #4
 8005570:	4618      	mov	r0, r3
 8005572:	f7fe fd7a 	bl	800406a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005576:	693b      	ldr	r3, [r7, #16]
 8005578:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800557a:	2201      	movs	r2, #1
 800557c:	409a      	lsls	r2, r3
 800557e:	4b18      	ldr	r3, [pc, #96]	@ (80055e0 <xTaskRemoveFromEventList+0xb8>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	4313      	orrs	r3, r2
 8005584:	4a16      	ldr	r2, [pc, #88]	@ (80055e0 <xTaskRemoveFromEventList+0xb8>)
 8005586:	6013      	str	r3, [r2, #0]
 8005588:	693b      	ldr	r3, [r7, #16]
 800558a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800558c:	4613      	mov	r3, r2
 800558e:	009b      	lsls	r3, r3, #2
 8005590:	4413      	add	r3, r2
 8005592:	009b      	lsls	r3, r3, #2
 8005594:	4a13      	ldr	r2, [pc, #76]	@ (80055e4 <xTaskRemoveFromEventList+0xbc>)
 8005596:	441a      	add	r2, r3
 8005598:	693b      	ldr	r3, [r7, #16]
 800559a:	3304      	adds	r3, #4
 800559c:	4619      	mov	r1, r3
 800559e:	4610      	mov	r0, r2
 80055a0:	f7fe fd06 	bl	8003fb0 <vListInsertEnd>
 80055a4:	e005      	b.n	80055b2 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80055a6:	693b      	ldr	r3, [r7, #16]
 80055a8:	3318      	adds	r3, #24
 80055aa:	4619      	mov	r1, r3
 80055ac:	480e      	ldr	r0, [pc, #56]	@ (80055e8 <xTaskRemoveFromEventList+0xc0>)
 80055ae:	f7fe fcff 	bl	8003fb0 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80055b2:	693b      	ldr	r3, [r7, #16]
 80055b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80055b6:	4b0d      	ldr	r3, [pc, #52]	@ (80055ec <xTaskRemoveFromEventList+0xc4>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055bc:	429a      	cmp	r2, r3
 80055be:	d905      	bls.n	80055cc <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80055c0:	2301      	movs	r3, #1
 80055c2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80055c4:	4b0a      	ldr	r3, [pc, #40]	@ (80055f0 <xTaskRemoveFromEventList+0xc8>)
 80055c6:	2201      	movs	r2, #1
 80055c8:	601a      	str	r2, [r3, #0]
 80055ca:	e001      	b.n	80055d0 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 80055cc:	2300      	movs	r3, #0
 80055ce:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80055d0:	697b      	ldr	r3, [r7, #20]
}
 80055d2:	4618      	mov	r0, r3
 80055d4:	3718      	adds	r7, #24
 80055d6:	46bd      	mov	sp, r7
 80055d8:	bd80      	pop	{r7, pc}
 80055da:	bf00      	nop
 80055dc:	20000b04 	.word	0x20000b04
 80055e0:	20000ae4 	.word	0x20000ae4
 80055e4:	200009e0 	.word	0x200009e0
 80055e8:	20000a9c 	.word	0x20000a9c
 80055ec:	200009dc 	.word	0x200009dc
 80055f0:	20000af0 	.word	0x20000af0

080055f4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80055f4:	b480      	push	{r7}
 80055f6:	b083      	sub	sp, #12
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80055fc:	4b06      	ldr	r3, [pc, #24]	@ (8005618 <vTaskInternalSetTimeOutState+0x24>)
 80055fe:	681a      	ldr	r2, [r3, #0]
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005604:	4b05      	ldr	r3, [pc, #20]	@ (800561c <vTaskInternalSetTimeOutState+0x28>)
 8005606:	681a      	ldr	r2, [r3, #0]
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	605a      	str	r2, [r3, #4]
}
 800560c:	bf00      	nop
 800560e:	370c      	adds	r7, #12
 8005610:	46bd      	mov	sp, r7
 8005612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005616:	4770      	bx	lr
 8005618:	20000af4 	.word	0x20000af4
 800561c:	20000ae0 	.word	0x20000ae0

08005620 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b088      	sub	sp, #32
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
 8005628:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d10d      	bne.n	800564c <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 8005630:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005634:	b672      	cpsid	i
 8005636:	f383 8811 	msr	BASEPRI, r3
 800563a:	f3bf 8f6f 	isb	sy
 800563e:	f3bf 8f4f 	dsb	sy
 8005642:	b662      	cpsie	i
 8005644:	613b      	str	r3, [r7, #16]
}
 8005646:	bf00      	nop
 8005648:	bf00      	nop
 800564a:	e7fd      	b.n	8005648 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d10d      	bne.n	800566e <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 8005652:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005656:	b672      	cpsid	i
 8005658:	f383 8811 	msr	BASEPRI, r3
 800565c:	f3bf 8f6f 	isb	sy
 8005660:	f3bf 8f4f 	dsb	sy
 8005664:	b662      	cpsie	i
 8005666:	60fb      	str	r3, [r7, #12]
}
 8005668:	bf00      	nop
 800566a:	bf00      	nop
 800566c:	e7fd      	b.n	800566a <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 800566e:	f000 fc75 	bl	8005f5c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005672:	4b1d      	ldr	r3, [pc, #116]	@ (80056e8 <xTaskCheckForTimeOut+0xc8>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	685b      	ldr	r3, [r3, #4]
 800567c:	69ba      	ldr	r2, [r7, #24]
 800567e:	1ad3      	subs	r3, r2, r3
 8005680:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f1b3 3fff 	cmp.w	r3, #4294967295
 800568a:	d102      	bne.n	8005692 <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800568c:	2300      	movs	r3, #0
 800568e:	61fb      	str	r3, [r7, #28]
 8005690:	e023      	b.n	80056da <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681a      	ldr	r2, [r3, #0]
 8005696:	4b15      	ldr	r3, [pc, #84]	@ (80056ec <xTaskCheckForTimeOut+0xcc>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	429a      	cmp	r2, r3
 800569c:	d007      	beq.n	80056ae <xTaskCheckForTimeOut+0x8e>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	685b      	ldr	r3, [r3, #4]
 80056a2:	69ba      	ldr	r2, [r7, #24]
 80056a4:	429a      	cmp	r2, r3
 80056a6:	d302      	bcc.n	80056ae <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80056a8:	2301      	movs	r3, #1
 80056aa:	61fb      	str	r3, [r7, #28]
 80056ac:	e015      	b.n	80056da <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	697a      	ldr	r2, [r7, #20]
 80056b4:	429a      	cmp	r2, r3
 80056b6:	d20b      	bcs.n	80056d0 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	681a      	ldr	r2, [r3, #0]
 80056bc:	697b      	ldr	r3, [r7, #20]
 80056be:	1ad2      	subs	r2, r2, r3
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80056c4:	6878      	ldr	r0, [r7, #4]
 80056c6:	f7ff ff95 	bl	80055f4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80056ca:	2300      	movs	r3, #0
 80056cc:	61fb      	str	r3, [r7, #28]
 80056ce:	e004      	b.n	80056da <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	2200      	movs	r2, #0
 80056d4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80056d6:	2301      	movs	r3, #1
 80056d8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80056da:	f000 fc75 	bl	8005fc8 <vPortExitCritical>

	return xReturn;
 80056de:	69fb      	ldr	r3, [r7, #28]
}
 80056e0:	4618      	mov	r0, r3
 80056e2:	3720      	adds	r7, #32
 80056e4:	46bd      	mov	sp, r7
 80056e6:	bd80      	pop	{r7, pc}
 80056e8:	20000ae0 	.word	0x20000ae0
 80056ec:	20000af4 	.word	0x20000af4

080056f0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80056f0:	b480      	push	{r7}
 80056f2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80056f4:	4b03      	ldr	r3, [pc, #12]	@ (8005704 <vTaskMissedYield+0x14>)
 80056f6:	2201      	movs	r2, #1
 80056f8:	601a      	str	r2, [r3, #0]
}
 80056fa:	bf00      	nop
 80056fc:	46bd      	mov	sp, r7
 80056fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005702:	4770      	bx	lr
 8005704:	20000af0 	.word	0x20000af0

08005708 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b082      	sub	sp, #8
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005710:	f000 f852 	bl	80057b8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005714:	4b06      	ldr	r3, [pc, #24]	@ (8005730 <prvIdleTask+0x28>)
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	2b01      	cmp	r3, #1
 800571a:	d9f9      	bls.n	8005710 <prvIdleTask+0x8>
			{
				taskYIELD();
 800571c:	4b05      	ldr	r3, [pc, #20]	@ (8005734 <prvIdleTask+0x2c>)
 800571e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005722:	601a      	str	r2, [r3, #0]
 8005724:	f3bf 8f4f 	dsb	sy
 8005728:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800572c:	e7f0      	b.n	8005710 <prvIdleTask+0x8>
 800572e:	bf00      	nop
 8005730:	200009e0 	.word	0x200009e0
 8005734:	e000ed04 	.word	0xe000ed04

08005738 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b082      	sub	sp, #8
 800573c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800573e:	2300      	movs	r3, #0
 8005740:	607b      	str	r3, [r7, #4]
 8005742:	e00c      	b.n	800575e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005744:	687a      	ldr	r2, [r7, #4]
 8005746:	4613      	mov	r3, r2
 8005748:	009b      	lsls	r3, r3, #2
 800574a:	4413      	add	r3, r2
 800574c:	009b      	lsls	r3, r3, #2
 800574e:	4a12      	ldr	r2, [pc, #72]	@ (8005798 <prvInitialiseTaskLists+0x60>)
 8005750:	4413      	add	r3, r2
 8005752:	4618      	mov	r0, r3
 8005754:	f7fe fbff 	bl	8003f56 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	3301      	adds	r3, #1
 800575c:	607b      	str	r3, [r7, #4]
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2b06      	cmp	r3, #6
 8005762:	d9ef      	bls.n	8005744 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005764:	480d      	ldr	r0, [pc, #52]	@ (800579c <prvInitialiseTaskLists+0x64>)
 8005766:	f7fe fbf6 	bl	8003f56 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800576a:	480d      	ldr	r0, [pc, #52]	@ (80057a0 <prvInitialiseTaskLists+0x68>)
 800576c:	f7fe fbf3 	bl	8003f56 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005770:	480c      	ldr	r0, [pc, #48]	@ (80057a4 <prvInitialiseTaskLists+0x6c>)
 8005772:	f7fe fbf0 	bl	8003f56 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005776:	480c      	ldr	r0, [pc, #48]	@ (80057a8 <prvInitialiseTaskLists+0x70>)
 8005778:	f7fe fbed 	bl	8003f56 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800577c:	480b      	ldr	r0, [pc, #44]	@ (80057ac <prvInitialiseTaskLists+0x74>)
 800577e:	f7fe fbea 	bl	8003f56 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005782:	4b0b      	ldr	r3, [pc, #44]	@ (80057b0 <prvInitialiseTaskLists+0x78>)
 8005784:	4a05      	ldr	r2, [pc, #20]	@ (800579c <prvInitialiseTaskLists+0x64>)
 8005786:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005788:	4b0a      	ldr	r3, [pc, #40]	@ (80057b4 <prvInitialiseTaskLists+0x7c>)
 800578a:	4a05      	ldr	r2, [pc, #20]	@ (80057a0 <prvInitialiseTaskLists+0x68>)
 800578c:	601a      	str	r2, [r3, #0]
}
 800578e:	bf00      	nop
 8005790:	3708      	adds	r7, #8
 8005792:	46bd      	mov	sp, r7
 8005794:	bd80      	pop	{r7, pc}
 8005796:	bf00      	nop
 8005798:	200009e0 	.word	0x200009e0
 800579c:	20000a6c 	.word	0x20000a6c
 80057a0:	20000a80 	.word	0x20000a80
 80057a4:	20000a9c 	.word	0x20000a9c
 80057a8:	20000ab0 	.word	0x20000ab0
 80057ac:	20000ac8 	.word	0x20000ac8
 80057b0:	20000a94 	.word	0x20000a94
 80057b4:	20000a98 	.word	0x20000a98

080057b8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b082      	sub	sp, #8
 80057bc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80057be:	e019      	b.n	80057f4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80057c0:	f000 fbcc 	bl	8005f5c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80057c4:	4b10      	ldr	r3, [pc, #64]	@ (8005808 <prvCheckTasksWaitingTermination+0x50>)
 80057c6:	68db      	ldr	r3, [r3, #12]
 80057c8:	68db      	ldr	r3, [r3, #12]
 80057ca:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	3304      	adds	r3, #4
 80057d0:	4618      	mov	r0, r3
 80057d2:	f7fe fc4a 	bl	800406a <uxListRemove>
				--uxCurrentNumberOfTasks;
 80057d6:	4b0d      	ldr	r3, [pc, #52]	@ (800580c <prvCheckTasksWaitingTermination+0x54>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	3b01      	subs	r3, #1
 80057dc:	4a0b      	ldr	r2, [pc, #44]	@ (800580c <prvCheckTasksWaitingTermination+0x54>)
 80057de:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80057e0:	4b0b      	ldr	r3, [pc, #44]	@ (8005810 <prvCheckTasksWaitingTermination+0x58>)
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	3b01      	subs	r3, #1
 80057e6:	4a0a      	ldr	r2, [pc, #40]	@ (8005810 <prvCheckTasksWaitingTermination+0x58>)
 80057e8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80057ea:	f000 fbed 	bl	8005fc8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80057ee:	6878      	ldr	r0, [r7, #4]
 80057f0:	f000 f810 	bl	8005814 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80057f4:	4b06      	ldr	r3, [pc, #24]	@ (8005810 <prvCheckTasksWaitingTermination+0x58>)
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d1e1      	bne.n	80057c0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80057fc:	bf00      	nop
 80057fe:	bf00      	nop
 8005800:	3708      	adds	r7, #8
 8005802:	46bd      	mov	sp, r7
 8005804:	bd80      	pop	{r7, pc}
 8005806:	bf00      	nop
 8005808:	20000ab0 	.word	0x20000ab0
 800580c:	20000adc 	.word	0x20000adc
 8005810:	20000ac4 	.word	0x20000ac4

08005814 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005814:	b580      	push	{r7, lr}
 8005816:	b084      	sub	sp, #16
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005822:	2b00      	cmp	r3, #0
 8005824:	d108      	bne.n	8005838 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800582a:	4618      	mov	r0, r3
 800582c:	f000 fd4c 	bl	80062c8 <vPortFree>
				vPortFree( pxTCB );
 8005830:	6878      	ldr	r0, [r7, #4]
 8005832:	f000 fd49 	bl	80062c8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005836:	e01b      	b.n	8005870 <prvDeleteTCB+0x5c>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800583e:	2b01      	cmp	r3, #1
 8005840:	d103      	bne.n	800584a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005842:	6878      	ldr	r0, [r7, #4]
 8005844:	f000 fd40 	bl	80062c8 <vPortFree>
	}
 8005848:	e012      	b.n	8005870 <prvDeleteTCB+0x5c>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005850:	2b02      	cmp	r3, #2
 8005852:	d00d      	beq.n	8005870 <prvDeleteTCB+0x5c>
	__asm volatile
 8005854:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005858:	b672      	cpsid	i
 800585a:	f383 8811 	msr	BASEPRI, r3
 800585e:	f3bf 8f6f 	isb	sy
 8005862:	f3bf 8f4f 	dsb	sy
 8005866:	b662      	cpsie	i
 8005868:	60fb      	str	r3, [r7, #12]
}
 800586a:	bf00      	nop
 800586c:	bf00      	nop
 800586e:	e7fd      	b.n	800586c <prvDeleteTCB+0x58>
	}
 8005870:	bf00      	nop
 8005872:	3710      	adds	r7, #16
 8005874:	46bd      	mov	sp, r7
 8005876:	bd80      	pop	{r7, pc}

08005878 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005878:	b480      	push	{r7}
 800587a:	b083      	sub	sp, #12
 800587c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800587e:	4b0c      	ldr	r3, [pc, #48]	@ (80058b0 <prvResetNextTaskUnblockTime+0x38>)
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d104      	bne.n	8005892 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005888:	4b0a      	ldr	r3, [pc, #40]	@ (80058b4 <prvResetNextTaskUnblockTime+0x3c>)
 800588a:	f04f 32ff 	mov.w	r2, #4294967295
 800588e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005890:	e008      	b.n	80058a4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005892:	4b07      	ldr	r3, [pc, #28]	@ (80058b0 <prvResetNextTaskUnblockTime+0x38>)
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	68db      	ldr	r3, [r3, #12]
 8005898:	68db      	ldr	r3, [r3, #12]
 800589a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	685b      	ldr	r3, [r3, #4]
 80058a0:	4a04      	ldr	r2, [pc, #16]	@ (80058b4 <prvResetNextTaskUnblockTime+0x3c>)
 80058a2:	6013      	str	r3, [r2, #0]
}
 80058a4:	bf00      	nop
 80058a6:	370c      	adds	r7, #12
 80058a8:	46bd      	mov	sp, r7
 80058aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ae:	4770      	bx	lr
 80058b0:	20000a94 	.word	0x20000a94
 80058b4:	20000afc 	.word	0x20000afc

080058b8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80058b8:	b480      	push	{r7}
 80058ba:	b083      	sub	sp, #12
 80058bc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80058be:	4b0b      	ldr	r3, [pc, #44]	@ (80058ec <xTaskGetSchedulerState+0x34>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d102      	bne.n	80058cc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80058c6:	2301      	movs	r3, #1
 80058c8:	607b      	str	r3, [r7, #4]
 80058ca:	e008      	b.n	80058de <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80058cc:	4b08      	ldr	r3, [pc, #32]	@ (80058f0 <xTaskGetSchedulerState+0x38>)
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d102      	bne.n	80058da <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80058d4:	2302      	movs	r3, #2
 80058d6:	607b      	str	r3, [r7, #4]
 80058d8:	e001      	b.n	80058de <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80058da:	2300      	movs	r3, #0
 80058dc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80058de:	687b      	ldr	r3, [r7, #4]
	}
 80058e0:	4618      	mov	r0, r3
 80058e2:	370c      	adds	r7, #12
 80058e4:	46bd      	mov	sp, r7
 80058e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ea:	4770      	bx	lr
 80058ec:	20000ae8 	.word	0x20000ae8
 80058f0:	20000b04 	.word	0x20000b04

080058f4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b084      	sub	sp, #16
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005900:	2300      	movs	r3, #0
 8005902:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d069      	beq.n	80059de <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800590a:	68bb      	ldr	r3, [r7, #8]
 800590c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800590e:	4b36      	ldr	r3, [pc, #216]	@ (80059e8 <xTaskPriorityInherit+0xf4>)
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005914:	429a      	cmp	r2, r3
 8005916:	d259      	bcs.n	80059cc <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	699b      	ldr	r3, [r3, #24]
 800591c:	2b00      	cmp	r3, #0
 800591e:	db06      	blt.n	800592e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005920:	4b31      	ldr	r3, [pc, #196]	@ (80059e8 <xTaskPriorityInherit+0xf4>)
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005926:	f1c3 0207 	rsb	r2, r3, #7
 800592a:	68bb      	ldr	r3, [r7, #8]
 800592c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800592e:	68bb      	ldr	r3, [r7, #8]
 8005930:	6959      	ldr	r1, [r3, #20]
 8005932:	68bb      	ldr	r3, [r7, #8]
 8005934:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005936:	4613      	mov	r3, r2
 8005938:	009b      	lsls	r3, r3, #2
 800593a:	4413      	add	r3, r2
 800593c:	009b      	lsls	r3, r3, #2
 800593e:	4a2b      	ldr	r2, [pc, #172]	@ (80059ec <xTaskPriorityInherit+0xf8>)
 8005940:	4413      	add	r3, r2
 8005942:	4299      	cmp	r1, r3
 8005944:	d13a      	bne.n	80059bc <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005946:	68bb      	ldr	r3, [r7, #8]
 8005948:	3304      	adds	r3, #4
 800594a:	4618      	mov	r0, r3
 800594c:	f7fe fb8d 	bl	800406a <uxListRemove>
 8005950:	4603      	mov	r3, r0
 8005952:	2b00      	cmp	r3, #0
 8005954:	d115      	bne.n	8005982 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8005956:	68bb      	ldr	r3, [r7, #8]
 8005958:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800595a:	4924      	ldr	r1, [pc, #144]	@ (80059ec <xTaskPriorityInherit+0xf8>)
 800595c:	4613      	mov	r3, r2
 800595e:	009b      	lsls	r3, r3, #2
 8005960:	4413      	add	r3, r2
 8005962:	009b      	lsls	r3, r3, #2
 8005964:	440b      	add	r3, r1
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d10a      	bne.n	8005982 <xTaskPriorityInherit+0x8e>
 800596c:	68bb      	ldr	r3, [r7, #8]
 800596e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005970:	2201      	movs	r2, #1
 8005972:	fa02 f303 	lsl.w	r3, r2, r3
 8005976:	43da      	mvns	r2, r3
 8005978:	4b1d      	ldr	r3, [pc, #116]	@ (80059f0 <xTaskPriorityInherit+0xfc>)
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4013      	ands	r3, r2
 800597e:	4a1c      	ldr	r2, [pc, #112]	@ (80059f0 <xTaskPriorityInherit+0xfc>)
 8005980:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005982:	4b19      	ldr	r3, [pc, #100]	@ (80059e8 <xTaskPriorityInherit+0xf4>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800598c:	68bb      	ldr	r3, [r7, #8]
 800598e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005990:	2201      	movs	r2, #1
 8005992:	409a      	lsls	r2, r3
 8005994:	4b16      	ldr	r3, [pc, #88]	@ (80059f0 <xTaskPriorityInherit+0xfc>)
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	4313      	orrs	r3, r2
 800599a:	4a15      	ldr	r2, [pc, #84]	@ (80059f0 <xTaskPriorityInherit+0xfc>)
 800599c:	6013      	str	r3, [r2, #0]
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059a2:	4613      	mov	r3, r2
 80059a4:	009b      	lsls	r3, r3, #2
 80059a6:	4413      	add	r3, r2
 80059a8:	009b      	lsls	r3, r3, #2
 80059aa:	4a10      	ldr	r2, [pc, #64]	@ (80059ec <xTaskPriorityInherit+0xf8>)
 80059ac:	441a      	add	r2, r3
 80059ae:	68bb      	ldr	r3, [r7, #8]
 80059b0:	3304      	adds	r3, #4
 80059b2:	4619      	mov	r1, r3
 80059b4:	4610      	mov	r0, r2
 80059b6:	f7fe fafb 	bl	8003fb0 <vListInsertEnd>
 80059ba:	e004      	b.n	80059c6 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80059bc:	4b0a      	ldr	r3, [pc, #40]	@ (80059e8 <xTaskPriorityInherit+0xf4>)
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059c2:	68bb      	ldr	r3, [r7, #8]
 80059c4:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80059c6:	2301      	movs	r3, #1
 80059c8:	60fb      	str	r3, [r7, #12]
 80059ca:	e008      	b.n	80059de <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80059cc:	68bb      	ldr	r3, [r7, #8]
 80059ce:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80059d0:	4b05      	ldr	r3, [pc, #20]	@ (80059e8 <xTaskPriorityInherit+0xf4>)
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059d6:	429a      	cmp	r2, r3
 80059d8:	d201      	bcs.n	80059de <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80059da:	2301      	movs	r3, #1
 80059dc:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80059de:	68fb      	ldr	r3, [r7, #12]
	}
 80059e0:	4618      	mov	r0, r3
 80059e2:	3710      	adds	r7, #16
 80059e4:	46bd      	mov	sp, r7
 80059e6:	bd80      	pop	{r7, pc}
 80059e8:	200009dc 	.word	0x200009dc
 80059ec:	200009e0 	.word	0x200009e0
 80059f0:	20000ae4 	.word	0x20000ae4

080059f4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b086      	sub	sp, #24
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005a00:	2300      	movs	r3, #0
 8005a02:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d074      	beq.n	8005af4 <xTaskPriorityDisinherit+0x100>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005a0a:	4b3d      	ldr	r3, [pc, #244]	@ (8005b00 <xTaskPriorityDisinherit+0x10c>)
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	693a      	ldr	r2, [r7, #16]
 8005a10:	429a      	cmp	r2, r3
 8005a12:	d00d      	beq.n	8005a30 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 8005a14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a18:	b672      	cpsid	i
 8005a1a:	f383 8811 	msr	BASEPRI, r3
 8005a1e:	f3bf 8f6f 	isb	sy
 8005a22:	f3bf 8f4f 	dsb	sy
 8005a26:	b662      	cpsie	i
 8005a28:	60fb      	str	r3, [r7, #12]
}
 8005a2a:	bf00      	nop
 8005a2c:	bf00      	nop
 8005a2e:	e7fd      	b.n	8005a2c <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8005a30:	693b      	ldr	r3, [r7, #16]
 8005a32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d10d      	bne.n	8005a54 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 8005a38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a3c:	b672      	cpsid	i
 8005a3e:	f383 8811 	msr	BASEPRI, r3
 8005a42:	f3bf 8f6f 	isb	sy
 8005a46:	f3bf 8f4f 	dsb	sy
 8005a4a:	b662      	cpsie	i
 8005a4c:	60bb      	str	r3, [r7, #8]
}
 8005a4e:	bf00      	nop
 8005a50:	bf00      	nop
 8005a52:	e7fd      	b.n	8005a50 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 8005a54:	693b      	ldr	r3, [r7, #16]
 8005a56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a58:	1e5a      	subs	r2, r3, #1
 8005a5a:	693b      	ldr	r3, [r7, #16]
 8005a5c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005a5e:	693b      	ldr	r3, [r7, #16]
 8005a60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a62:	693b      	ldr	r3, [r7, #16]
 8005a64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a66:	429a      	cmp	r2, r3
 8005a68:	d044      	beq.n	8005af4 <xTaskPriorityDisinherit+0x100>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005a6a:	693b      	ldr	r3, [r7, #16]
 8005a6c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d140      	bne.n	8005af4 <xTaskPriorityDisinherit+0x100>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005a72:	693b      	ldr	r3, [r7, #16]
 8005a74:	3304      	adds	r3, #4
 8005a76:	4618      	mov	r0, r3
 8005a78:	f7fe faf7 	bl	800406a <uxListRemove>
 8005a7c:	4603      	mov	r3, r0
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d115      	bne.n	8005aae <xTaskPriorityDisinherit+0xba>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005a82:	693b      	ldr	r3, [r7, #16]
 8005a84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a86:	491f      	ldr	r1, [pc, #124]	@ (8005b04 <xTaskPriorityDisinherit+0x110>)
 8005a88:	4613      	mov	r3, r2
 8005a8a:	009b      	lsls	r3, r3, #2
 8005a8c:	4413      	add	r3, r2
 8005a8e:	009b      	lsls	r3, r3, #2
 8005a90:	440b      	add	r3, r1
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d10a      	bne.n	8005aae <xTaskPriorityDisinherit+0xba>
 8005a98:	693b      	ldr	r3, [r7, #16]
 8005a9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a9c:	2201      	movs	r2, #1
 8005a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8005aa2:	43da      	mvns	r2, r3
 8005aa4:	4b18      	ldr	r3, [pc, #96]	@ (8005b08 <xTaskPriorityDisinherit+0x114>)
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	4013      	ands	r3, r2
 8005aaa:	4a17      	ldr	r2, [pc, #92]	@ (8005b08 <xTaskPriorityDisinherit+0x114>)
 8005aac:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005aae:	693b      	ldr	r3, [r7, #16]
 8005ab0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005ab2:	693b      	ldr	r3, [r7, #16]
 8005ab4:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ab6:	693b      	ldr	r3, [r7, #16]
 8005ab8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005aba:	f1c3 0207 	rsb	r2, r3, #7
 8005abe:	693b      	ldr	r3, [r7, #16]
 8005ac0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005ac2:	693b      	ldr	r3, [r7, #16]
 8005ac4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ac6:	2201      	movs	r2, #1
 8005ac8:	409a      	lsls	r2, r3
 8005aca:	4b0f      	ldr	r3, [pc, #60]	@ (8005b08 <xTaskPriorityDisinherit+0x114>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	4313      	orrs	r3, r2
 8005ad0:	4a0d      	ldr	r2, [pc, #52]	@ (8005b08 <xTaskPriorityDisinherit+0x114>)
 8005ad2:	6013      	str	r3, [r2, #0]
 8005ad4:	693b      	ldr	r3, [r7, #16]
 8005ad6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ad8:	4613      	mov	r3, r2
 8005ada:	009b      	lsls	r3, r3, #2
 8005adc:	4413      	add	r3, r2
 8005ade:	009b      	lsls	r3, r3, #2
 8005ae0:	4a08      	ldr	r2, [pc, #32]	@ (8005b04 <xTaskPriorityDisinherit+0x110>)
 8005ae2:	441a      	add	r2, r3
 8005ae4:	693b      	ldr	r3, [r7, #16]
 8005ae6:	3304      	adds	r3, #4
 8005ae8:	4619      	mov	r1, r3
 8005aea:	4610      	mov	r0, r2
 8005aec:	f7fe fa60 	bl	8003fb0 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005af0:	2301      	movs	r3, #1
 8005af2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005af4:	697b      	ldr	r3, [r7, #20]
	}
 8005af6:	4618      	mov	r0, r3
 8005af8:	3718      	adds	r7, #24
 8005afa:	46bd      	mov	sp, r7
 8005afc:	bd80      	pop	{r7, pc}
 8005afe:	bf00      	nop
 8005b00:	200009dc 	.word	0x200009dc
 8005b04:	200009e0 	.word	0x200009e0
 8005b08:	20000ae4 	.word	0x20000ae4

08005b0c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b088      	sub	sp, #32
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
 8005b14:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	f000 8089 	beq.w	8005c38 <vTaskPriorityDisinheritAfterTimeout+0x12c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8005b26:	69bb      	ldr	r3, [r7, #24]
 8005b28:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d10d      	bne.n	8005b4a <vTaskPriorityDisinheritAfterTimeout+0x3e>
	__asm volatile
 8005b2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b32:	b672      	cpsid	i
 8005b34:	f383 8811 	msr	BASEPRI, r3
 8005b38:	f3bf 8f6f 	isb	sy
 8005b3c:	f3bf 8f4f 	dsb	sy
 8005b40:	b662      	cpsie	i
 8005b42:	60fb      	str	r3, [r7, #12]
}
 8005b44:	bf00      	nop
 8005b46:	bf00      	nop
 8005b48:	e7fd      	b.n	8005b46 <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8005b4a:	69bb      	ldr	r3, [r7, #24]
 8005b4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b4e:	683a      	ldr	r2, [r7, #0]
 8005b50:	429a      	cmp	r2, r3
 8005b52:	d902      	bls.n	8005b5a <vTaskPriorityDisinheritAfterTimeout+0x4e>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	61fb      	str	r3, [r7, #28]
 8005b58:	e002      	b.n	8005b60 <vTaskPriorityDisinheritAfterTimeout+0x54>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8005b5a:	69bb      	ldr	r3, [r7, #24]
 8005b5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b5e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8005b60:	69bb      	ldr	r3, [r7, #24]
 8005b62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b64:	69fa      	ldr	r2, [r7, #28]
 8005b66:	429a      	cmp	r2, r3
 8005b68:	d066      	beq.n	8005c38 <vTaskPriorityDisinheritAfterTimeout+0x12c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005b6a:	69bb      	ldr	r3, [r7, #24]
 8005b6c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b6e:	697a      	ldr	r2, [r7, #20]
 8005b70:	429a      	cmp	r2, r3
 8005b72:	d161      	bne.n	8005c38 <vTaskPriorityDisinheritAfterTimeout+0x12c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8005b74:	4b32      	ldr	r3, [pc, #200]	@ (8005c40 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	69ba      	ldr	r2, [r7, #24]
 8005b7a:	429a      	cmp	r2, r3
 8005b7c:	d10d      	bne.n	8005b9a <vTaskPriorityDisinheritAfterTimeout+0x8e>
	__asm volatile
 8005b7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b82:	b672      	cpsid	i
 8005b84:	f383 8811 	msr	BASEPRI, r3
 8005b88:	f3bf 8f6f 	isb	sy
 8005b8c:	f3bf 8f4f 	dsb	sy
 8005b90:	b662      	cpsie	i
 8005b92:	60bb      	str	r3, [r7, #8]
}
 8005b94:	bf00      	nop
 8005b96:	bf00      	nop
 8005b98:	e7fd      	b.n	8005b96 <vTaskPriorityDisinheritAfterTimeout+0x8a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005b9a:	69bb      	ldr	r3, [r7, #24]
 8005b9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b9e:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8005ba0:	69bb      	ldr	r3, [r7, #24]
 8005ba2:	69fa      	ldr	r2, [r7, #28]
 8005ba4:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005ba6:	69bb      	ldr	r3, [r7, #24]
 8005ba8:	699b      	ldr	r3, [r3, #24]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	db04      	blt.n	8005bb8 <vTaskPriorityDisinheritAfterTimeout+0xac>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005bae:	69fb      	ldr	r3, [r7, #28]
 8005bb0:	f1c3 0207 	rsb	r2, r3, #7
 8005bb4:	69bb      	ldr	r3, [r7, #24]
 8005bb6:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005bb8:	69bb      	ldr	r3, [r7, #24]
 8005bba:	6959      	ldr	r1, [r3, #20]
 8005bbc:	693a      	ldr	r2, [r7, #16]
 8005bbe:	4613      	mov	r3, r2
 8005bc0:	009b      	lsls	r3, r3, #2
 8005bc2:	4413      	add	r3, r2
 8005bc4:	009b      	lsls	r3, r3, #2
 8005bc6:	4a1f      	ldr	r2, [pc, #124]	@ (8005c44 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8005bc8:	4413      	add	r3, r2
 8005bca:	4299      	cmp	r1, r3
 8005bcc:	d134      	bne.n	8005c38 <vTaskPriorityDisinheritAfterTimeout+0x12c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005bce:	69bb      	ldr	r3, [r7, #24]
 8005bd0:	3304      	adds	r3, #4
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	f7fe fa49 	bl	800406a <uxListRemove>
 8005bd8:	4603      	mov	r3, r0
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d115      	bne.n	8005c0a <vTaskPriorityDisinheritAfterTimeout+0xfe>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005bde:	69bb      	ldr	r3, [r7, #24]
 8005be0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005be2:	4918      	ldr	r1, [pc, #96]	@ (8005c44 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8005be4:	4613      	mov	r3, r2
 8005be6:	009b      	lsls	r3, r3, #2
 8005be8:	4413      	add	r3, r2
 8005bea:	009b      	lsls	r3, r3, #2
 8005bec:	440b      	add	r3, r1
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d10a      	bne.n	8005c0a <vTaskPriorityDisinheritAfterTimeout+0xfe>
 8005bf4:	69bb      	ldr	r3, [r7, #24]
 8005bf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bf8:	2201      	movs	r2, #1
 8005bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8005bfe:	43da      	mvns	r2, r3
 8005c00:	4b11      	ldr	r3, [pc, #68]	@ (8005c48 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	4013      	ands	r3, r2
 8005c06:	4a10      	ldr	r2, [pc, #64]	@ (8005c48 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8005c08:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8005c0a:	69bb      	ldr	r3, [r7, #24]
 8005c0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c0e:	2201      	movs	r2, #1
 8005c10:	409a      	lsls	r2, r3
 8005c12:	4b0d      	ldr	r3, [pc, #52]	@ (8005c48 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	4313      	orrs	r3, r2
 8005c18:	4a0b      	ldr	r2, [pc, #44]	@ (8005c48 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8005c1a:	6013      	str	r3, [r2, #0]
 8005c1c:	69bb      	ldr	r3, [r7, #24]
 8005c1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c20:	4613      	mov	r3, r2
 8005c22:	009b      	lsls	r3, r3, #2
 8005c24:	4413      	add	r3, r2
 8005c26:	009b      	lsls	r3, r3, #2
 8005c28:	4a06      	ldr	r2, [pc, #24]	@ (8005c44 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8005c2a:	441a      	add	r2, r3
 8005c2c:	69bb      	ldr	r3, [r7, #24]
 8005c2e:	3304      	adds	r3, #4
 8005c30:	4619      	mov	r1, r3
 8005c32:	4610      	mov	r0, r2
 8005c34:	f7fe f9bc 	bl	8003fb0 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005c38:	bf00      	nop
 8005c3a:	3720      	adds	r7, #32
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	bd80      	pop	{r7, pc}
 8005c40:	200009dc 	.word	0x200009dc
 8005c44:	200009e0 	.word	0x200009e0
 8005c48:	20000ae4 	.word	0x20000ae4

08005c4c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8005c4c:	b480      	push	{r7}
 8005c4e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8005c50:	4b07      	ldr	r3, [pc, #28]	@ (8005c70 <pvTaskIncrementMutexHeldCount+0x24>)
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d004      	beq.n	8005c62 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8005c58:	4b05      	ldr	r3, [pc, #20]	@ (8005c70 <pvTaskIncrementMutexHeldCount+0x24>)
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005c5e:	3201      	adds	r2, #1
 8005c60:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8005c62:	4b03      	ldr	r3, [pc, #12]	@ (8005c70 <pvTaskIncrementMutexHeldCount+0x24>)
 8005c64:	681b      	ldr	r3, [r3, #0]
	}
 8005c66:	4618      	mov	r0, r3
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6e:	4770      	bx	lr
 8005c70:	200009dc 	.word	0x200009dc

08005c74 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b084      	sub	sp, #16
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
 8005c7c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005c7e:	4b29      	ldr	r3, [pc, #164]	@ (8005d24 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005c84:	4b28      	ldr	r3, [pc, #160]	@ (8005d28 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	3304      	adds	r3, #4
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	f7fe f9ed 	bl	800406a <uxListRemove>
 8005c90:	4603      	mov	r3, r0
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d10b      	bne.n	8005cae <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005c96:	4b24      	ldr	r3, [pc, #144]	@ (8005d28 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c9c:	2201      	movs	r2, #1
 8005c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8005ca2:	43da      	mvns	r2, r3
 8005ca4:	4b21      	ldr	r3, [pc, #132]	@ (8005d2c <prvAddCurrentTaskToDelayedList+0xb8>)
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	4013      	ands	r3, r2
 8005caa:	4a20      	ldr	r2, [pc, #128]	@ (8005d2c <prvAddCurrentTaskToDelayedList+0xb8>)
 8005cac:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cb4:	d10a      	bne.n	8005ccc <prvAddCurrentTaskToDelayedList+0x58>
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d007      	beq.n	8005ccc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005cbc:	4b1a      	ldr	r3, [pc, #104]	@ (8005d28 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	3304      	adds	r3, #4
 8005cc2:	4619      	mov	r1, r3
 8005cc4:	481a      	ldr	r0, [pc, #104]	@ (8005d30 <prvAddCurrentTaskToDelayedList+0xbc>)
 8005cc6:	f7fe f973 	bl	8003fb0 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005cca:	e026      	b.n	8005d1a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005ccc:	68fa      	ldr	r2, [r7, #12]
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	4413      	add	r3, r2
 8005cd2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005cd4:	4b14      	ldr	r3, [pc, #80]	@ (8005d28 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	68ba      	ldr	r2, [r7, #8]
 8005cda:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005cdc:	68ba      	ldr	r2, [r7, #8]
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	429a      	cmp	r2, r3
 8005ce2:	d209      	bcs.n	8005cf8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005ce4:	4b13      	ldr	r3, [pc, #76]	@ (8005d34 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005ce6:	681a      	ldr	r2, [r3, #0]
 8005ce8:	4b0f      	ldr	r3, [pc, #60]	@ (8005d28 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	3304      	adds	r3, #4
 8005cee:	4619      	mov	r1, r3
 8005cf0:	4610      	mov	r0, r2
 8005cf2:	f7fe f981 	bl	8003ff8 <vListInsert>
}
 8005cf6:	e010      	b.n	8005d1a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005cf8:	4b0f      	ldr	r3, [pc, #60]	@ (8005d38 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005cfa:	681a      	ldr	r2, [r3, #0]
 8005cfc:	4b0a      	ldr	r3, [pc, #40]	@ (8005d28 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	3304      	adds	r3, #4
 8005d02:	4619      	mov	r1, r3
 8005d04:	4610      	mov	r0, r2
 8005d06:	f7fe f977 	bl	8003ff8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005d0a:	4b0c      	ldr	r3, [pc, #48]	@ (8005d3c <prvAddCurrentTaskToDelayedList+0xc8>)
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	68ba      	ldr	r2, [r7, #8]
 8005d10:	429a      	cmp	r2, r3
 8005d12:	d202      	bcs.n	8005d1a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005d14:	4a09      	ldr	r2, [pc, #36]	@ (8005d3c <prvAddCurrentTaskToDelayedList+0xc8>)
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	6013      	str	r3, [r2, #0]
}
 8005d1a:	bf00      	nop
 8005d1c:	3710      	adds	r7, #16
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	bd80      	pop	{r7, pc}
 8005d22:	bf00      	nop
 8005d24:	20000ae0 	.word	0x20000ae0
 8005d28:	200009dc 	.word	0x200009dc
 8005d2c:	20000ae4 	.word	0x20000ae4
 8005d30:	20000ac8 	.word	0x20000ac8
 8005d34:	20000a98 	.word	0x20000a98
 8005d38:	20000a94 	.word	0x20000a94
 8005d3c:	20000afc 	.word	0x20000afc

08005d40 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005d40:	b480      	push	{r7}
 8005d42:	b085      	sub	sp, #20
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	60f8      	str	r0, [r7, #12]
 8005d48:	60b9      	str	r1, [r7, #8]
 8005d4a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	3b04      	subs	r3, #4
 8005d50:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005d58:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	3b04      	subs	r3, #4
 8005d5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005d60:	68bb      	ldr	r3, [r7, #8]
 8005d62:	f023 0201 	bic.w	r2, r3, #1
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	3b04      	subs	r3, #4
 8005d6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005d70:	4a0c      	ldr	r2, [pc, #48]	@ (8005da4 <pxPortInitialiseStack+0x64>)
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	3b14      	subs	r3, #20
 8005d7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005d7c:	687a      	ldr	r2, [r7, #4]
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	3b04      	subs	r3, #4
 8005d86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	f06f 0202 	mvn.w	r2, #2
 8005d8e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	3b20      	subs	r3, #32
 8005d94:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005d96:	68fb      	ldr	r3, [r7, #12]
}
 8005d98:	4618      	mov	r0, r3
 8005d9a:	3714      	adds	r7, #20
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da2:	4770      	bx	lr
 8005da4:	08005da9 	.word	0x08005da9

08005da8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005da8:	b480      	push	{r7}
 8005daa:	b085      	sub	sp, #20
 8005dac:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005dae:	2300      	movs	r3, #0
 8005db0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005db2:	4b15      	ldr	r3, [pc, #84]	@ (8005e08 <prvTaskExitError+0x60>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dba:	d00d      	beq.n	8005dd8 <prvTaskExitError+0x30>
	__asm volatile
 8005dbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dc0:	b672      	cpsid	i
 8005dc2:	f383 8811 	msr	BASEPRI, r3
 8005dc6:	f3bf 8f6f 	isb	sy
 8005dca:	f3bf 8f4f 	dsb	sy
 8005dce:	b662      	cpsie	i
 8005dd0:	60fb      	str	r3, [r7, #12]
}
 8005dd2:	bf00      	nop
 8005dd4:	bf00      	nop
 8005dd6:	e7fd      	b.n	8005dd4 <prvTaskExitError+0x2c>
	__asm volatile
 8005dd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ddc:	b672      	cpsid	i
 8005dde:	f383 8811 	msr	BASEPRI, r3
 8005de2:	f3bf 8f6f 	isb	sy
 8005de6:	f3bf 8f4f 	dsb	sy
 8005dea:	b662      	cpsie	i
 8005dec:	60bb      	str	r3, [r7, #8]
}
 8005dee:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005df0:	bf00      	nop
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d0fc      	beq.n	8005df2 <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005df8:	bf00      	nop
 8005dfa:	bf00      	nop
 8005dfc:	3714      	adds	r7, #20
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e04:	4770      	bx	lr
 8005e06:	bf00      	nop
 8005e08:	2000010c 	.word	0x2000010c
 8005e0c:	00000000 	.word	0x00000000

08005e10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005e10:	4b07      	ldr	r3, [pc, #28]	@ (8005e30 <pxCurrentTCBConst2>)
 8005e12:	6819      	ldr	r1, [r3, #0]
 8005e14:	6808      	ldr	r0, [r1, #0]
 8005e16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e1a:	f380 8809 	msr	PSP, r0
 8005e1e:	f3bf 8f6f 	isb	sy
 8005e22:	f04f 0000 	mov.w	r0, #0
 8005e26:	f380 8811 	msr	BASEPRI, r0
 8005e2a:	4770      	bx	lr
 8005e2c:	f3af 8000 	nop.w

08005e30 <pxCurrentTCBConst2>:
 8005e30:	200009dc 	.word	0x200009dc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005e34:	bf00      	nop
 8005e36:	bf00      	nop

08005e38 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005e38:	4808      	ldr	r0, [pc, #32]	@ (8005e5c <prvPortStartFirstTask+0x24>)
 8005e3a:	6800      	ldr	r0, [r0, #0]
 8005e3c:	6800      	ldr	r0, [r0, #0]
 8005e3e:	f380 8808 	msr	MSP, r0
 8005e42:	f04f 0000 	mov.w	r0, #0
 8005e46:	f380 8814 	msr	CONTROL, r0
 8005e4a:	b662      	cpsie	i
 8005e4c:	b661      	cpsie	f
 8005e4e:	f3bf 8f4f 	dsb	sy
 8005e52:	f3bf 8f6f 	isb	sy
 8005e56:	df00      	svc	0
 8005e58:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005e5a:	bf00      	nop
 8005e5c:	e000ed08 	.word	0xe000ed08

08005e60 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b084      	sub	sp, #16
 8005e64:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005e66:	4b37      	ldr	r3, [pc, #220]	@ (8005f44 <xPortStartScheduler+0xe4>)
 8005e68:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	781b      	ldrb	r3, [r3, #0]
 8005e6e:	b2db      	uxtb	r3, r3
 8005e70:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	22ff      	movs	r2, #255	@ 0xff
 8005e76:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	781b      	ldrb	r3, [r3, #0]
 8005e7c:	b2db      	uxtb	r3, r3
 8005e7e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005e80:	78fb      	ldrb	r3, [r7, #3]
 8005e82:	b2db      	uxtb	r3, r3
 8005e84:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005e88:	b2da      	uxtb	r2, r3
 8005e8a:	4b2f      	ldr	r3, [pc, #188]	@ (8005f48 <xPortStartScheduler+0xe8>)
 8005e8c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005e8e:	4b2f      	ldr	r3, [pc, #188]	@ (8005f4c <xPortStartScheduler+0xec>)
 8005e90:	2207      	movs	r2, #7
 8005e92:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005e94:	e009      	b.n	8005eaa <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8005e96:	4b2d      	ldr	r3, [pc, #180]	@ (8005f4c <xPortStartScheduler+0xec>)
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	3b01      	subs	r3, #1
 8005e9c:	4a2b      	ldr	r2, [pc, #172]	@ (8005f4c <xPortStartScheduler+0xec>)
 8005e9e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005ea0:	78fb      	ldrb	r3, [r7, #3]
 8005ea2:	b2db      	uxtb	r3, r3
 8005ea4:	005b      	lsls	r3, r3, #1
 8005ea6:	b2db      	uxtb	r3, r3
 8005ea8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005eaa:	78fb      	ldrb	r3, [r7, #3]
 8005eac:	b2db      	uxtb	r3, r3
 8005eae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005eb2:	2b80      	cmp	r3, #128	@ 0x80
 8005eb4:	d0ef      	beq.n	8005e96 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005eb6:	4b25      	ldr	r3, [pc, #148]	@ (8005f4c <xPortStartScheduler+0xec>)
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f1c3 0307 	rsb	r3, r3, #7
 8005ebe:	2b04      	cmp	r3, #4
 8005ec0:	d00d      	beq.n	8005ede <xPortStartScheduler+0x7e>
	__asm volatile
 8005ec2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ec6:	b672      	cpsid	i
 8005ec8:	f383 8811 	msr	BASEPRI, r3
 8005ecc:	f3bf 8f6f 	isb	sy
 8005ed0:	f3bf 8f4f 	dsb	sy
 8005ed4:	b662      	cpsie	i
 8005ed6:	60bb      	str	r3, [r7, #8]
}
 8005ed8:	bf00      	nop
 8005eda:	bf00      	nop
 8005edc:	e7fd      	b.n	8005eda <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005ede:	4b1b      	ldr	r3, [pc, #108]	@ (8005f4c <xPortStartScheduler+0xec>)
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	021b      	lsls	r3, r3, #8
 8005ee4:	4a19      	ldr	r2, [pc, #100]	@ (8005f4c <xPortStartScheduler+0xec>)
 8005ee6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005ee8:	4b18      	ldr	r3, [pc, #96]	@ (8005f4c <xPortStartScheduler+0xec>)
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005ef0:	4a16      	ldr	r2, [pc, #88]	@ (8005f4c <xPortStartScheduler+0xec>)
 8005ef2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	b2da      	uxtb	r2, r3
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005efc:	4b14      	ldr	r3, [pc, #80]	@ (8005f50 <xPortStartScheduler+0xf0>)
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	4a13      	ldr	r2, [pc, #76]	@ (8005f50 <xPortStartScheduler+0xf0>)
 8005f02:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005f06:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005f08:	4b11      	ldr	r3, [pc, #68]	@ (8005f50 <xPortStartScheduler+0xf0>)
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	4a10      	ldr	r2, [pc, #64]	@ (8005f50 <xPortStartScheduler+0xf0>)
 8005f0e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005f12:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005f14:	f000 f8dc 	bl	80060d0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005f18:	4b0e      	ldr	r3, [pc, #56]	@ (8005f54 <xPortStartScheduler+0xf4>)
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005f1e:	f000 f8fb 	bl	8006118 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005f22:	4b0d      	ldr	r3, [pc, #52]	@ (8005f58 <xPortStartScheduler+0xf8>)
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	4a0c      	ldr	r2, [pc, #48]	@ (8005f58 <xPortStartScheduler+0xf8>)
 8005f28:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8005f2c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005f2e:	f7ff ff83 	bl	8005e38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005f32:	f7ff fa31 	bl	8005398 <vTaskSwitchContext>
	prvTaskExitError();
 8005f36:	f7ff ff37 	bl	8005da8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005f3a:	2300      	movs	r3, #0
}
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	3710      	adds	r7, #16
 8005f40:	46bd      	mov	sp, r7
 8005f42:	bd80      	pop	{r7, pc}
 8005f44:	e000e400 	.word	0xe000e400
 8005f48:	20000b10 	.word	0x20000b10
 8005f4c:	20000b14 	.word	0x20000b14
 8005f50:	e000ed20 	.word	0xe000ed20
 8005f54:	2000010c 	.word	0x2000010c
 8005f58:	e000ef34 	.word	0xe000ef34

08005f5c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005f5c:	b480      	push	{r7}
 8005f5e:	b083      	sub	sp, #12
 8005f60:	af00      	add	r7, sp, #0
	__asm volatile
 8005f62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f66:	b672      	cpsid	i
 8005f68:	f383 8811 	msr	BASEPRI, r3
 8005f6c:	f3bf 8f6f 	isb	sy
 8005f70:	f3bf 8f4f 	dsb	sy
 8005f74:	b662      	cpsie	i
 8005f76:	607b      	str	r3, [r7, #4]
}
 8005f78:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005f7a:	4b11      	ldr	r3, [pc, #68]	@ (8005fc0 <vPortEnterCritical+0x64>)
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	3301      	adds	r3, #1
 8005f80:	4a0f      	ldr	r2, [pc, #60]	@ (8005fc0 <vPortEnterCritical+0x64>)
 8005f82:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005f84:	4b0e      	ldr	r3, [pc, #56]	@ (8005fc0 <vPortEnterCritical+0x64>)
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	2b01      	cmp	r3, #1
 8005f8a:	d112      	bne.n	8005fb2 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005f8c:	4b0d      	ldr	r3, [pc, #52]	@ (8005fc4 <vPortEnterCritical+0x68>)
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	b2db      	uxtb	r3, r3
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d00d      	beq.n	8005fb2 <vPortEnterCritical+0x56>
	__asm volatile
 8005f96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f9a:	b672      	cpsid	i
 8005f9c:	f383 8811 	msr	BASEPRI, r3
 8005fa0:	f3bf 8f6f 	isb	sy
 8005fa4:	f3bf 8f4f 	dsb	sy
 8005fa8:	b662      	cpsie	i
 8005faa:	603b      	str	r3, [r7, #0]
}
 8005fac:	bf00      	nop
 8005fae:	bf00      	nop
 8005fb0:	e7fd      	b.n	8005fae <vPortEnterCritical+0x52>
	}
}
 8005fb2:	bf00      	nop
 8005fb4:	370c      	adds	r7, #12
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbc:	4770      	bx	lr
 8005fbe:	bf00      	nop
 8005fc0:	2000010c 	.word	0x2000010c
 8005fc4:	e000ed04 	.word	0xe000ed04

08005fc8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005fc8:	b480      	push	{r7}
 8005fca:	b083      	sub	sp, #12
 8005fcc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005fce:	4b13      	ldr	r3, [pc, #76]	@ (800601c <vPortExitCritical+0x54>)
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d10d      	bne.n	8005ff2 <vPortExitCritical+0x2a>
	__asm volatile
 8005fd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fda:	b672      	cpsid	i
 8005fdc:	f383 8811 	msr	BASEPRI, r3
 8005fe0:	f3bf 8f6f 	isb	sy
 8005fe4:	f3bf 8f4f 	dsb	sy
 8005fe8:	b662      	cpsie	i
 8005fea:	607b      	str	r3, [r7, #4]
}
 8005fec:	bf00      	nop
 8005fee:	bf00      	nop
 8005ff0:	e7fd      	b.n	8005fee <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8005ff2:	4b0a      	ldr	r3, [pc, #40]	@ (800601c <vPortExitCritical+0x54>)
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	3b01      	subs	r3, #1
 8005ff8:	4a08      	ldr	r2, [pc, #32]	@ (800601c <vPortExitCritical+0x54>)
 8005ffa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005ffc:	4b07      	ldr	r3, [pc, #28]	@ (800601c <vPortExitCritical+0x54>)
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d105      	bne.n	8006010 <vPortExitCritical+0x48>
 8006004:	2300      	movs	r3, #0
 8006006:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800600e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006010:	bf00      	nop
 8006012:	370c      	adds	r7, #12
 8006014:	46bd      	mov	sp, r7
 8006016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601a:	4770      	bx	lr
 800601c:	2000010c 	.word	0x2000010c

08006020 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006020:	f3ef 8009 	mrs	r0, PSP
 8006024:	f3bf 8f6f 	isb	sy
 8006028:	4b15      	ldr	r3, [pc, #84]	@ (8006080 <pxCurrentTCBConst>)
 800602a:	681a      	ldr	r2, [r3, #0]
 800602c:	f01e 0f10 	tst.w	lr, #16
 8006030:	bf08      	it	eq
 8006032:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006036:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800603a:	6010      	str	r0, [r2, #0]
 800603c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006040:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006044:	b672      	cpsid	i
 8006046:	f380 8811 	msr	BASEPRI, r0
 800604a:	f3bf 8f4f 	dsb	sy
 800604e:	f3bf 8f6f 	isb	sy
 8006052:	b662      	cpsie	i
 8006054:	f7ff f9a0 	bl	8005398 <vTaskSwitchContext>
 8006058:	f04f 0000 	mov.w	r0, #0
 800605c:	f380 8811 	msr	BASEPRI, r0
 8006060:	bc09      	pop	{r0, r3}
 8006062:	6819      	ldr	r1, [r3, #0]
 8006064:	6808      	ldr	r0, [r1, #0]
 8006066:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800606a:	f01e 0f10 	tst.w	lr, #16
 800606e:	bf08      	it	eq
 8006070:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006074:	f380 8809 	msr	PSP, r0
 8006078:	f3bf 8f6f 	isb	sy
 800607c:	4770      	bx	lr
 800607e:	bf00      	nop

08006080 <pxCurrentTCBConst>:
 8006080:	200009dc 	.word	0x200009dc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006084:	bf00      	nop
 8006086:	bf00      	nop

08006088 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b082      	sub	sp, #8
 800608c:	af00      	add	r7, sp, #0
	__asm volatile
 800608e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006092:	b672      	cpsid	i
 8006094:	f383 8811 	msr	BASEPRI, r3
 8006098:	f3bf 8f6f 	isb	sy
 800609c:	f3bf 8f4f 	dsb	sy
 80060a0:	b662      	cpsie	i
 80060a2:	607b      	str	r3, [r7, #4]
}
 80060a4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80060a6:	f7ff f8bb 	bl	8005220 <xTaskIncrementTick>
 80060aa:	4603      	mov	r3, r0
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d003      	beq.n	80060b8 <xPortSysTickHandler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80060b0:	4b06      	ldr	r3, [pc, #24]	@ (80060cc <xPortSysTickHandler+0x44>)
 80060b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80060b6:	601a      	str	r2, [r3, #0]
 80060b8:	2300      	movs	r3, #0
 80060ba:	603b      	str	r3, [r7, #0]
	__asm volatile
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	f383 8811 	msr	BASEPRI, r3
}
 80060c2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80060c4:	bf00      	nop
 80060c6:	3708      	adds	r7, #8
 80060c8:	46bd      	mov	sp, r7
 80060ca:	bd80      	pop	{r7, pc}
 80060cc:	e000ed04 	.word	0xe000ed04

080060d0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80060d0:	b480      	push	{r7}
 80060d2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80060d4:	4b0b      	ldr	r3, [pc, #44]	@ (8006104 <vPortSetupTimerInterrupt+0x34>)
 80060d6:	2200      	movs	r2, #0
 80060d8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80060da:	4b0b      	ldr	r3, [pc, #44]	@ (8006108 <vPortSetupTimerInterrupt+0x38>)
 80060dc:	2200      	movs	r2, #0
 80060de:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80060e0:	4b0a      	ldr	r3, [pc, #40]	@ (800610c <vPortSetupTimerInterrupt+0x3c>)
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	4a0a      	ldr	r2, [pc, #40]	@ (8006110 <vPortSetupTimerInterrupt+0x40>)
 80060e6:	fba2 2303 	umull	r2, r3, r2, r3
 80060ea:	099b      	lsrs	r3, r3, #6
 80060ec:	4a09      	ldr	r2, [pc, #36]	@ (8006114 <vPortSetupTimerInterrupt+0x44>)
 80060ee:	3b01      	subs	r3, #1
 80060f0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80060f2:	4b04      	ldr	r3, [pc, #16]	@ (8006104 <vPortSetupTimerInterrupt+0x34>)
 80060f4:	2207      	movs	r2, #7
 80060f6:	601a      	str	r2, [r3, #0]
}
 80060f8:	bf00      	nop
 80060fa:	46bd      	mov	sp, r7
 80060fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006100:	4770      	bx	lr
 8006102:	bf00      	nop
 8006104:	e000e010 	.word	0xe000e010
 8006108:	e000e018 	.word	0xe000e018
 800610c:	20000100 	.word	0x20000100
 8006110:	10624dd3 	.word	0x10624dd3
 8006114:	e000e014 	.word	0xe000e014

08006118 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006118:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006128 <vPortEnableVFP+0x10>
 800611c:	6801      	ldr	r1, [r0, #0]
 800611e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8006122:	6001      	str	r1, [r0, #0]
 8006124:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006126:	bf00      	nop
 8006128:	e000ed88 	.word	0xe000ed88

0800612c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b08a      	sub	sp, #40	@ 0x28
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006134:	2300      	movs	r3, #0
 8006136:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006138:	f7fe ffc4 	bl	80050c4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800613c:	4b5d      	ldr	r3, [pc, #372]	@ (80062b4 <pvPortMalloc+0x188>)
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d101      	bne.n	8006148 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006144:	f000 f920 	bl	8006388 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006148:	4b5b      	ldr	r3, [pc, #364]	@ (80062b8 <pvPortMalloc+0x18c>)
 800614a:	681a      	ldr	r2, [r3, #0]
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	4013      	ands	r3, r2
 8006150:	2b00      	cmp	r3, #0
 8006152:	f040 8094 	bne.w	800627e <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d020      	beq.n	800619e <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 800615c:	2208      	movs	r2, #8
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	4413      	add	r3, r2
 8006162:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	f003 0307 	and.w	r3, r3, #7
 800616a:	2b00      	cmp	r3, #0
 800616c:	d017      	beq.n	800619e <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	f023 0307 	bic.w	r3, r3, #7
 8006174:	3308      	adds	r3, #8
 8006176:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	f003 0307 	and.w	r3, r3, #7
 800617e:	2b00      	cmp	r3, #0
 8006180:	d00d      	beq.n	800619e <pvPortMalloc+0x72>
	__asm volatile
 8006182:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006186:	b672      	cpsid	i
 8006188:	f383 8811 	msr	BASEPRI, r3
 800618c:	f3bf 8f6f 	isb	sy
 8006190:	f3bf 8f4f 	dsb	sy
 8006194:	b662      	cpsie	i
 8006196:	617b      	str	r3, [r7, #20]
}
 8006198:	bf00      	nop
 800619a:	bf00      	nop
 800619c:	e7fd      	b.n	800619a <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d06c      	beq.n	800627e <pvPortMalloc+0x152>
 80061a4:	4b45      	ldr	r3, [pc, #276]	@ (80062bc <pvPortMalloc+0x190>)
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	687a      	ldr	r2, [r7, #4]
 80061aa:	429a      	cmp	r2, r3
 80061ac:	d867      	bhi.n	800627e <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80061ae:	4b44      	ldr	r3, [pc, #272]	@ (80062c0 <pvPortMalloc+0x194>)
 80061b0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80061b2:	4b43      	ldr	r3, [pc, #268]	@ (80062c0 <pvPortMalloc+0x194>)
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80061b8:	e004      	b.n	80061c4 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 80061ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061bc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80061be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80061c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061c6:	685b      	ldr	r3, [r3, #4]
 80061c8:	687a      	ldr	r2, [r7, #4]
 80061ca:	429a      	cmp	r2, r3
 80061cc:	d903      	bls.n	80061d6 <pvPortMalloc+0xaa>
 80061ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d1f1      	bne.n	80061ba <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80061d6:	4b37      	ldr	r3, [pc, #220]	@ (80062b4 <pvPortMalloc+0x188>)
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80061dc:	429a      	cmp	r2, r3
 80061de:	d04e      	beq.n	800627e <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80061e0:	6a3b      	ldr	r3, [r7, #32]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	2208      	movs	r2, #8
 80061e6:	4413      	add	r3, r2
 80061e8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80061ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061ec:	681a      	ldr	r2, [r3, #0]
 80061ee:	6a3b      	ldr	r3, [r7, #32]
 80061f0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80061f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061f4:	685a      	ldr	r2, [r3, #4]
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	1ad2      	subs	r2, r2, r3
 80061fa:	2308      	movs	r3, #8
 80061fc:	005b      	lsls	r3, r3, #1
 80061fe:	429a      	cmp	r2, r3
 8006200:	d922      	bls.n	8006248 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006202:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	4413      	add	r3, r2
 8006208:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800620a:	69bb      	ldr	r3, [r7, #24]
 800620c:	f003 0307 	and.w	r3, r3, #7
 8006210:	2b00      	cmp	r3, #0
 8006212:	d00d      	beq.n	8006230 <pvPortMalloc+0x104>
	__asm volatile
 8006214:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006218:	b672      	cpsid	i
 800621a:	f383 8811 	msr	BASEPRI, r3
 800621e:	f3bf 8f6f 	isb	sy
 8006222:	f3bf 8f4f 	dsb	sy
 8006226:	b662      	cpsie	i
 8006228:	613b      	str	r3, [r7, #16]
}
 800622a:	bf00      	nop
 800622c:	bf00      	nop
 800622e:	e7fd      	b.n	800622c <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006230:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006232:	685a      	ldr	r2, [r3, #4]
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	1ad2      	subs	r2, r2, r3
 8006238:	69bb      	ldr	r3, [r7, #24]
 800623a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800623c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800623e:	687a      	ldr	r2, [r7, #4]
 8006240:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006242:	69b8      	ldr	r0, [r7, #24]
 8006244:	f000 f902 	bl	800644c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006248:	4b1c      	ldr	r3, [pc, #112]	@ (80062bc <pvPortMalloc+0x190>)
 800624a:	681a      	ldr	r2, [r3, #0]
 800624c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800624e:	685b      	ldr	r3, [r3, #4]
 8006250:	1ad3      	subs	r3, r2, r3
 8006252:	4a1a      	ldr	r2, [pc, #104]	@ (80062bc <pvPortMalloc+0x190>)
 8006254:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006256:	4b19      	ldr	r3, [pc, #100]	@ (80062bc <pvPortMalloc+0x190>)
 8006258:	681a      	ldr	r2, [r3, #0]
 800625a:	4b1a      	ldr	r3, [pc, #104]	@ (80062c4 <pvPortMalloc+0x198>)
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	429a      	cmp	r2, r3
 8006260:	d203      	bcs.n	800626a <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006262:	4b16      	ldr	r3, [pc, #88]	@ (80062bc <pvPortMalloc+0x190>)
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	4a17      	ldr	r2, [pc, #92]	@ (80062c4 <pvPortMalloc+0x198>)
 8006268:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800626a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800626c:	685a      	ldr	r2, [r3, #4]
 800626e:	4b12      	ldr	r3, [pc, #72]	@ (80062b8 <pvPortMalloc+0x18c>)
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	431a      	orrs	r2, r3
 8006274:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006276:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006278:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800627a:	2200      	movs	r2, #0
 800627c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800627e:	f7fe ff2f 	bl	80050e0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006282:	69fb      	ldr	r3, [r7, #28]
 8006284:	f003 0307 	and.w	r3, r3, #7
 8006288:	2b00      	cmp	r3, #0
 800628a:	d00d      	beq.n	80062a8 <pvPortMalloc+0x17c>
	__asm volatile
 800628c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006290:	b672      	cpsid	i
 8006292:	f383 8811 	msr	BASEPRI, r3
 8006296:	f3bf 8f6f 	isb	sy
 800629a:	f3bf 8f4f 	dsb	sy
 800629e:	b662      	cpsie	i
 80062a0:	60fb      	str	r3, [r7, #12]
}
 80062a2:	bf00      	nop
 80062a4:	bf00      	nop
 80062a6:	e7fd      	b.n	80062a4 <pvPortMalloc+0x178>
	return pvReturn;
 80062a8:	69fb      	ldr	r3, [r7, #28]
}
 80062aa:	4618      	mov	r0, r3
 80062ac:	3728      	adds	r7, #40	@ 0x28
 80062ae:	46bd      	mov	sp, r7
 80062b0:	bd80      	pop	{r7, pc}
 80062b2:	bf00      	nop
 80062b4:	20004720 	.word	0x20004720
 80062b8:	2000472c 	.word	0x2000472c
 80062bc:	20004724 	.word	0x20004724
 80062c0:	20004718 	.word	0x20004718
 80062c4:	20004728 	.word	0x20004728

080062c8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b086      	sub	sp, #24
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d04e      	beq.n	8006378 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80062da:	2308      	movs	r3, #8
 80062dc:	425b      	negs	r3, r3
 80062de:	697a      	ldr	r2, [r7, #20]
 80062e0:	4413      	add	r3, r2
 80062e2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80062e4:	697b      	ldr	r3, [r7, #20]
 80062e6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80062e8:	693b      	ldr	r3, [r7, #16]
 80062ea:	685a      	ldr	r2, [r3, #4]
 80062ec:	4b24      	ldr	r3, [pc, #144]	@ (8006380 <vPortFree+0xb8>)
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	4013      	ands	r3, r2
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d10d      	bne.n	8006312 <vPortFree+0x4a>
	__asm volatile
 80062f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062fa:	b672      	cpsid	i
 80062fc:	f383 8811 	msr	BASEPRI, r3
 8006300:	f3bf 8f6f 	isb	sy
 8006304:	f3bf 8f4f 	dsb	sy
 8006308:	b662      	cpsie	i
 800630a:	60fb      	str	r3, [r7, #12]
}
 800630c:	bf00      	nop
 800630e:	bf00      	nop
 8006310:	e7fd      	b.n	800630e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006312:	693b      	ldr	r3, [r7, #16]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d00d      	beq.n	8006336 <vPortFree+0x6e>
	__asm volatile
 800631a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800631e:	b672      	cpsid	i
 8006320:	f383 8811 	msr	BASEPRI, r3
 8006324:	f3bf 8f6f 	isb	sy
 8006328:	f3bf 8f4f 	dsb	sy
 800632c:	b662      	cpsie	i
 800632e:	60bb      	str	r3, [r7, #8]
}
 8006330:	bf00      	nop
 8006332:	bf00      	nop
 8006334:	e7fd      	b.n	8006332 <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006336:	693b      	ldr	r3, [r7, #16]
 8006338:	685a      	ldr	r2, [r3, #4]
 800633a:	4b11      	ldr	r3, [pc, #68]	@ (8006380 <vPortFree+0xb8>)
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	4013      	ands	r3, r2
 8006340:	2b00      	cmp	r3, #0
 8006342:	d019      	beq.n	8006378 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006344:	693b      	ldr	r3, [r7, #16]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d115      	bne.n	8006378 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800634c:	693b      	ldr	r3, [r7, #16]
 800634e:	685a      	ldr	r2, [r3, #4]
 8006350:	4b0b      	ldr	r3, [pc, #44]	@ (8006380 <vPortFree+0xb8>)
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	43db      	mvns	r3, r3
 8006356:	401a      	ands	r2, r3
 8006358:	693b      	ldr	r3, [r7, #16]
 800635a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800635c:	f7fe feb2 	bl	80050c4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006360:	693b      	ldr	r3, [r7, #16]
 8006362:	685a      	ldr	r2, [r3, #4]
 8006364:	4b07      	ldr	r3, [pc, #28]	@ (8006384 <vPortFree+0xbc>)
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	4413      	add	r3, r2
 800636a:	4a06      	ldr	r2, [pc, #24]	@ (8006384 <vPortFree+0xbc>)
 800636c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800636e:	6938      	ldr	r0, [r7, #16]
 8006370:	f000 f86c 	bl	800644c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006374:	f7fe feb4 	bl	80050e0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006378:	bf00      	nop
 800637a:	3718      	adds	r7, #24
 800637c:	46bd      	mov	sp, r7
 800637e:	bd80      	pop	{r7, pc}
 8006380:	2000472c 	.word	0x2000472c
 8006384:	20004724 	.word	0x20004724

08006388 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006388:	b480      	push	{r7}
 800638a:	b085      	sub	sp, #20
 800638c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800638e:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8006392:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006394:	4b27      	ldr	r3, [pc, #156]	@ (8006434 <prvHeapInit+0xac>)
 8006396:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	f003 0307 	and.w	r3, r3, #7
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d00c      	beq.n	80063bc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	3307      	adds	r3, #7
 80063a6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	f023 0307 	bic.w	r3, r3, #7
 80063ae:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80063b0:	68ba      	ldr	r2, [r7, #8]
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	1ad3      	subs	r3, r2, r3
 80063b6:	4a1f      	ldr	r2, [pc, #124]	@ (8006434 <prvHeapInit+0xac>)
 80063b8:	4413      	add	r3, r2
 80063ba:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80063c0:	4a1d      	ldr	r2, [pc, #116]	@ (8006438 <prvHeapInit+0xb0>)
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80063c6:	4b1c      	ldr	r3, [pc, #112]	@ (8006438 <prvHeapInit+0xb0>)
 80063c8:	2200      	movs	r2, #0
 80063ca:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	68ba      	ldr	r2, [r7, #8]
 80063d0:	4413      	add	r3, r2
 80063d2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80063d4:	2208      	movs	r2, #8
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	1a9b      	subs	r3, r3, r2
 80063da:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	f023 0307 	bic.w	r3, r3, #7
 80063e2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	4a15      	ldr	r2, [pc, #84]	@ (800643c <prvHeapInit+0xb4>)
 80063e8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80063ea:	4b14      	ldr	r3, [pc, #80]	@ (800643c <prvHeapInit+0xb4>)
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	2200      	movs	r2, #0
 80063f0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80063f2:	4b12      	ldr	r3, [pc, #72]	@ (800643c <prvHeapInit+0xb4>)
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	2200      	movs	r2, #0
 80063f8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	68fa      	ldr	r2, [r7, #12]
 8006402:	1ad2      	subs	r2, r2, r3
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006408:	4b0c      	ldr	r3, [pc, #48]	@ (800643c <prvHeapInit+0xb4>)
 800640a:	681a      	ldr	r2, [r3, #0]
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	685b      	ldr	r3, [r3, #4]
 8006414:	4a0a      	ldr	r2, [pc, #40]	@ (8006440 <prvHeapInit+0xb8>)
 8006416:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	685b      	ldr	r3, [r3, #4]
 800641c:	4a09      	ldr	r2, [pc, #36]	@ (8006444 <prvHeapInit+0xbc>)
 800641e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006420:	4b09      	ldr	r3, [pc, #36]	@ (8006448 <prvHeapInit+0xc0>)
 8006422:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8006426:	601a      	str	r2, [r3, #0]
}
 8006428:	bf00      	nop
 800642a:	3714      	adds	r7, #20
 800642c:	46bd      	mov	sp, r7
 800642e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006432:	4770      	bx	lr
 8006434:	20000b18 	.word	0x20000b18
 8006438:	20004718 	.word	0x20004718
 800643c:	20004720 	.word	0x20004720
 8006440:	20004728 	.word	0x20004728
 8006444:	20004724 	.word	0x20004724
 8006448:	2000472c 	.word	0x2000472c

0800644c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800644c:	b480      	push	{r7}
 800644e:	b085      	sub	sp, #20
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006454:	4b28      	ldr	r3, [pc, #160]	@ (80064f8 <prvInsertBlockIntoFreeList+0xac>)
 8006456:	60fb      	str	r3, [r7, #12]
 8006458:	e002      	b.n	8006460 <prvInsertBlockIntoFreeList+0x14>
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	60fb      	str	r3, [r7, #12]
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	687a      	ldr	r2, [r7, #4]
 8006466:	429a      	cmp	r2, r3
 8006468:	d8f7      	bhi.n	800645a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	685b      	ldr	r3, [r3, #4]
 8006472:	68ba      	ldr	r2, [r7, #8]
 8006474:	4413      	add	r3, r2
 8006476:	687a      	ldr	r2, [r7, #4]
 8006478:	429a      	cmp	r2, r3
 800647a:	d108      	bne.n	800648e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	685a      	ldr	r2, [r3, #4]
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	685b      	ldr	r3, [r3, #4]
 8006484:	441a      	add	r2, r3
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	685b      	ldr	r3, [r3, #4]
 8006496:	68ba      	ldr	r2, [r7, #8]
 8006498:	441a      	add	r2, r3
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	429a      	cmp	r2, r3
 80064a0:	d118      	bne.n	80064d4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	681a      	ldr	r2, [r3, #0]
 80064a6:	4b15      	ldr	r3, [pc, #84]	@ (80064fc <prvInsertBlockIntoFreeList+0xb0>)
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	429a      	cmp	r2, r3
 80064ac:	d00d      	beq.n	80064ca <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	685a      	ldr	r2, [r3, #4]
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	685b      	ldr	r3, [r3, #4]
 80064b8:	441a      	add	r2, r3
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	681a      	ldr	r2, [r3, #0]
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	601a      	str	r2, [r3, #0]
 80064c8:	e008      	b.n	80064dc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80064ca:	4b0c      	ldr	r3, [pc, #48]	@ (80064fc <prvInsertBlockIntoFreeList+0xb0>)
 80064cc:	681a      	ldr	r2, [r3, #0]
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	601a      	str	r2, [r3, #0]
 80064d2:	e003      	b.n	80064dc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	681a      	ldr	r2, [r3, #0]
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80064dc:	68fa      	ldr	r2, [r7, #12]
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	429a      	cmp	r2, r3
 80064e2:	d002      	beq.n	80064ea <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	687a      	ldr	r2, [r7, #4]
 80064e8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80064ea:	bf00      	nop
 80064ec:	3714      	adds	r7, #20
 80064ee:	46bd      	mov	sp, r7
 80064f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f4:	4770      	bx	lr
 80064f6:	bf00      	nop
 80064f8:	20004718 	.word	0x20004718
 80064fc:	20004720 	.word	0x20004720

08006500 <drv_uart1_receive>:

#include "usart.h"
#include "gpio.h"

uint8_t drv_uart1_receive(char * pData, uint16_t size)
{
 8006500:	b580      	push	{r7, lr}
 8006502:	b082      	sub	sp, #8
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
 8006508:	460b      	mov	r3, r1
 800650a:	807b      	strh	r3, [r7, #2]
	HAL_UART_Receive(&huart1, (uint8_t*)(pData), size, HAL_MAX_DELAY);
 800650c:	887a      	ldrh	r2, [r7, #2]
 800650e:	f04f 33ff 	mov.w	r3, #4294967295
 8006512:	6879      	ldr	r1, [r7, #4]
 8006514:	4803      	ldr	r0, [pc, #12]	@ (8006524 <drv_uart1_receive+0x24>)
 8006516:	f7fc ffa8 	bl	800346a <HAL_UART_Receive>

	return 0;	// Life's too short for error management
 800651a:	2300      	movs	r3, #0
}
 800651c:	4618      	mov	r0, r3
 800651e:	3708      	adds	r7, #8
 8006520:	46bd      	mov	sp, r7
 8006522:	bd80      	pop	{r7, pc}
 8006524:	20000910 	.word	0x20000910

08006528 <drv_uart1_transmit>:

uint8_t drv_uart1_transmit(const char * pData, uint16_t size)
{
 8006528:	b580      	push	{r7, lr}
 800652a:	b082      	sub	sp, #8
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
 8006530:	460b      	mov	r3, r1
 8006532:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit(&huart1, (uint8_t*)pData, size, HAL_MAX_DELAY);
 8006534:	887a      	ldrh	r2, [r7, #2]
 8006536:	f04f 33ff 	mov.w	r3, #4294967295
 800653a:	6879      	ldr	r1, [r7, #4]
 800653c:	4803      	ldr	r0, [pc, #12]	@ (800654c <drv_uart1_transmit+0x24>)
 800653e:	f7fc ff0b 	bl	8003358 <HAL_UART_Transmit>

	return 0;	// Srsly, don't do that kids
 8006542:	2300      	movs	r3, #0
}
 8006544:	4618      	mov	r0, r3
 8006546:	3708      	adds	r7, #8
 8006548:	46bd      	mov	sp, r7
 800654a:	bd80      	pop	{r7, pc}
 800654c:	20000910 	.word	0x20000910

08006550 <sh_help>:

#include "shell.h"

#include <stdio.h>

static int sh_help(h_shell_t * h_shell, int argc, char ** argv) {
 8006550:	b590      	push	{r4, r7, lr}
 8006552:	b08b      	sub	sp, #44	@ 0x2c
 8006554:	af02      	add	r7, sp, #8
 8006556:	60f8      	str	r0, [r7, #12]
 8006558:	60b9      	str	r1, [r7, #8]
 800655a:	607a      	str	r2, [r7, #4]
	int size;

	size = snprintf(h_shell->print_buffer, BUFFER_SIZE, "sh_help appelé avec %d argument(s)\r\n", argc);
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	f503 7041 	add.w	r0, r3, #772	@ 0x304
 8006562:	68bb      	ldr	r3, [r7, #8]
 8006564:	4a35      	ldr	r2, [pc, #212]	@ (800663c <sh_help+0xec>)
 8006566:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800656a:	f000 fba3 	bl	8006cb4 <sniprintf>
 800656e:	6178      	str	r0, [r7, #20]
	h_shell->drv.transmit(h_shell->print_buffer, size);
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	f8d3 3504 	ldr.w	r3, [r3, #1284]	@ 0x504
 8006576:	68fa      	ldr	r2, [r7, #12]
 8006578:	f502 7241 	add.w	r2, r2, #772	@ 0x304
 800657c:	6979      	ldr	r1, [r7, #20]
 800657e:	b289      	uxth	r1, r1
 8006580:	4610      	mov	r0, r2
 8006582:	4798      	blx	r3

	for(int i = 0; i < argc; i++) {
 8006584:	2300      	movs	r3, #0
 8006586:	61fb      	str	r3, [r7, #28]
 8006588:	e01c      	b.n	80065c4 <sh_help+0x74>
		size = snprintf(h_shell->print_buffer, BUFFER_SIZE, "argv[%d] = %s\r\n", i, argv[i]);
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	f503 7041 	add.w	r0, r3, #772	@ 0x304
 8006590:	69fb      	ldr	r3, [r7, #28]
 8006592:	009b      	lsls	r3, r3, #2
 8006594:	687a      	ldr	r2, [r7, #4]
 8006596:	4413      	add	r3, r2
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	9300      	str	r3, [sp, #0]
 800659c:	69fb      	ldr	r3, [r7, #28]
 800659e:	4a28      	ldr	r2, [pc, #160]	@ (8006640 <sh_help+0xf0>)
 80065a0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80065a4:	f000 fb86 	bl	8006cb4 <sniprintf>
 80065a8:	6178      	str	r0, [r7, #20]
		h_shell->drv.transmit(h_shell->print_buffer, size);
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	f8d3 3504 	ldr.w	r3, [r3, #1284]	@ 0x504
 80065b0:	68fa      	ldr	r2, [r7, #12]
 80065b2:	f502 7241 	add.w	r2, r2, #772	@ 0x304
 80065b6:	6979      	ldr	r1, [r7, #20]
 80065b8:	b289      	uxth	r1, r1
 80065ba:	4610      	mov	r0, r2
 80065bc:	4798      	blx	r3
	for(int i = 0; i < argc; i++) {
 80065be:	69fb      	ldr	r3, [r7, #28]
 80065c0:	3301      	adds	r3, #1
 80065c2:	61fb      	str	r3, [r7, #28]
 80065c4:	69fa      	ldr	r2, [r7, #28]
 80065c6:	68bb      	ldr	r3, [r7, #8]
 80065c8:	429a      	cmp	r2, r3
 80065ca:	dbde      	blt.n	800658a <sh_help+0x3a>
	}

	for(int i = 0 ; i < h_shell->func_list_size ; i++) {
 80065cc:	2300      	movs	r3, #0
 80065ce:	61bb      	str	r3, [r7, #24]
 80065d0:	e02a      	b.n	8006628 <sh_help+0xd8>
		size = snprintf(h_shell->print_buffer, BUFFER_SIZE, "%c: %s\r\n", h_shell->func_list[i].c, h_shell->func_list[i].description);
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	f503 7041 	add.w	r0, r3, #772	@ 0x304
 80065d8:	68f9      	ldr	r1, [r7, #12]
 80065da:	69ba      	ldr	r2, [r7, #24]
 80065dc:	4613      	mov	r3, r2
 80065de:	005b      	lsls	r3, r3, #1
 80065e0:	4413      	add	r3, r2
 80065e2:	009b      	lsls	r3, r3, #2
 80065e4:	440b      	add	r3, r1
 80065e6:	3304      	adds	r3, #4
 80065e8:	781b      	ldrb	r3, [r3, #0]
 80065ea:	461c      	mov	r4, r3
 80065ec:	68f9      	ldr	r1, [r7, #12]
 80065ee:	69ba      	ldr	r2, [r7, #24]
 80065f0:	4613      	mov	r3, r2
 80065f2:	005b      	lsls	r3, r3, #1
 80065f4:	4413      	add	r3, r2
 80065f6:	009b      	lsls	r3, r3, #2
 80065f8:	440b      	add	r3, r1
 80065fa:	330c      	adds	r3, #12
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	9300      	str	r3, [sp, #0]
 8006600:	4623      	mov	r3, r4
 8006602:	4a10      	ldr	r2, [pc, #64]	@ (8006644 <sh_help+0xf4>)
 8006604:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8006608:	f000 fb54 	bl	8006cb4 <sniprintf>
 800660c:	6178      	str	r0, [r7, #20]
		h_shell->drv.transmit(h_shell->print_buffer, size);
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	f8d3 3504 	ldr.w	r3, [r3, #1284]	@ 0x504
 8006614:	68fa      	ldr	r2, [r7, #12]
 8006616:	f502 7241 	add.w	r2, r2, #772	@ 0x304
 800661a:	6979      	ldr	r1, [r7, #20]
 800661c:	b289      	uxth	r1, r1
 800661e:	4610      	mov	r0, r2
 8006620:	4798      	blx	r3
	for(int i = 0 ; i < h_shell->func_list_size ; i++) {
 8006622:	69bb      	ldr	r3, [r7, #24]
 8006624:	3301      	adds	r3, #1
 8006626:	61bb      	str	r3, [r7, #24]
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	69ba      	ldr	r2, [r7, #24]
 800662e:	429a      	cmp	r2, r3
 8006630:	dbcf      	blt.n	80065d2 <sh_help+0x82>
	}
	return 0;
 8006632:	2300      	movs	r3, #0
}
 8006634:	4618      	mov	r0, r3
 8006636:	3724      	adds	r7, #36	@ 0x24
 8006638:	46bd      	mov	sp, r7
 800663a:	bd90      	pop	{r4, r7, pc}
 800663c:	080080bc 	.word	0x080080bc
 8006640:	080080e4 	.word	0x080080e4
 8006644:	080080f4 	.word	0x080080f4

08006648 <shell_init>:

void shell_init(h_shell_t * h_shell) {
 8006648:	b580      	push	{r7, lr}
 800664a:	b084      	sub	sp, #16
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
	int size = 0;
 8006650:	2300      	movs	r3, #0
 8006652:	60fb      	str	r3, [r7, #12]

	h_shell->func_list_size = 0;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2200      	movs	r2, #0
 8006658:	601a      	str	r2, [r3, #0]

	size = snprintf (h_shell->print_buffer, BUFFER_SIZE, "\r\n\r\n===== Monsieur Shell v0.2 =====\r\n");
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	f503 7341 	add.w	r3, r3, #772	@ 0x304
 8006660:	4a17      	ldr	r2, [pc, #92]	@ (80066c0 <shell_init+0x78>)
 8006662:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8006666:	4618      	mov	r0, r3
 8006668:	f000 fb24 	bl	8006cb4 <sniprintf>
 800666c:	60f8      	str	r0, [r7, #12]
	h_shell->drv.transmit(h_shell->print_buffer, size);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	f8d3 3504 	ldr.w	r3, [r3, #1284]	@ 0x504
 8006674:	687a      	ldr	r2, [r7, #4]
 8006676:	f502 7241 	add.w	r2, r2, #772	@ 0x304
 800667a:	68f9      	ldr	r1, [r7, #12]
 800667c:	b289      	uxth	r1, r1
 800667e:	4610      	mov	r0, r2
 8006680:	4798      	blx	r3

	size = snprintf (h_shell->print_buffer, BUFFER_SIZE, "Correction TD (v0.2.1 du coup?)\r\n");
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	f503 7341 	add.w	r3, r3, #772	@ 0x304
 8006688:	4a0e      	ldr	r2, [pc, #56]	@ (80066c4 <shell_init+0x7c>)
 800668a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800668e:	4618      	mov	r0, r3
 8006690:	f000 fb10 	bl	8006cb4 <sniprintf>
 8006694:	60f8      	str	r0, [r7, #12]
	h_shell->drv.transmit(h_shell->print_buffer, size);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	f8d3 3504 	ldr.w	r3, [r3, #1284]	@ 0x504
 800669c:	687a      	ldr	r2, [r7, #4]
 800669e:	f502 7241 	add.w	r2, r2, #772	@ 0x304
 80066a2:	68f9      	ldr	r1, [r7, #12]
 80066a4:	b289      	uxth	r1, r1
 80066a6:	4610      	mov	r0, r2
 80066a8:	4798      	blx	r3

	shell_add(h_shell, 'h', sh_help, "Help");
 80066aa:	4b07      	ldr	r3, [pc, #28]	@ (80066c8 <shell_init+0x80>)
 80066ac:	4a07      	ldr	r2, [pc, #28]	@ (80066cc <shell_init+0x84>)
 80066ae:	2168      	movs	r1, #104	@ 0x68
 80066b0:	6878      	ldr	r0, [r7, #4]
 80066b2:	f000 f80d 	bl	80066d0 <shell_add>
}
 80066b6:	bf00      	nop
 80066b8:	3710      	adds	r7, #16
 80066ba:	46bd      	mov	sp, r7
 80066bc:	bd80      	pop	{r7, pc}
 80066be:	bf00      	nop
 80066c0:	08008100 	.word	0x08008100
 80066c4:	08008128 	.word	0x08008128
 80066c8:	0800814c 	.word	0x0800814c
 80066cc:	08006551 	.word	0x08006551

080066d0 <shell_add>:

int shell_add(h_shell_t * h_shell, char c, shell_func_pointer_t pfunc, char * description) {
 80066d0:	b480      	push	{r7}
 80066d2:	b085      	sub	sp, #20
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	60f8      	str	r0, [r7, #12]
 80066d8:	607a      	str	r2, [r7, #4]
 80066da:	603b      	str	r3, [r7, #0]
 80066dc:	460b      	mov	r3, r1
 80066de:	72fb      	strb	r3, [r7, #11]
	if (h_shell->func_list_size < SHELL_FUNC_LIST_MAX_SIZE) {
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	2b3f      	cmp	r3, #63	@ 0x3f
 80066e6:	dc27      	bgt.n	8006738 <shell_add+0x68>
		h_shell->func_list[h_shell->func_list_size].c = c;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	681a      	ldr	r2, [r3, #0]
 80066ec:	68f9      	ldr	r1, [r7, #12]
 80066ee:	4613      	mov	r3, r2
 80066f0:	005b      	lsls	r3, r3, #1
 80066f2:	4413      	add	r3, r2
 80066f4:	009b      	lsls	r3, r3, #2
 80066f6:	440b      	add	r3, r1
 80066f8:	3304      	adds	r3, #4
 80066fa:	7afa      	ldrb	r2, [r7, #11]
 80066fc:	701a      	strb	r2, [r3, #0]
		h_shell->func_list[h_shell->func_list_size].func = pfunc;
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	681a      	ldr	r2, [r3, #0]
 8006702:	68f9      	ldr	r1, [r7, #12]
 8006704:	4613      	mov	r3, r2
 8006706:	005b      	lsls	r3, r3, #1
 8006708:	4413      	add	r3, r2
 800670a:	009b      	lsls	r3, r3, #2
 800670c:	440b      	add	r3, r1
 800670e:	3308      	adds	r3, #8
 8006710:	687a      	ldr	r2, [r7, #4]
 8006712:	601a      	str	r2, [r3, #0]
		h_shell->func_list[h_shell->func_list_size].description = description;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	681a      	ldr	r2, [r3, #0]
 8006718:	68f9      	ldr	r1, [r7, #12]
 800671a:	4613      	mov	r3, r2
 800671c:	005b      	lsls	r3, r3, #1
 800671e:	4413      	add	r3, r2
 8006720:	009b      	lsls	r3, r3, #2
 8006722:	440b      	add	r3, r1
 8006724:	330c      	adds	r3, #12
 8006726:	683a      	ldr	r2, [r7, #0]
 8006728:	601a      	str	r2, [r3, #0]
		h_shell->func_list_size++;
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	1c5a      	adds	r2, r3, #1
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	601a      	str	r2, [r3, #0]
		return 0;
 8006734:	2300      	movs	r3, #0
 8006736:	e001      	b.n	800673c <shell_add+0x6c>
	}

	return -1;
 8006738:	f04f 33ff 	mov.w	r3, #4294967295
}
 800673c:	4618      	mov	r0, r3
 800673e:	3714      	adds	r7, #20
 8006740:	46bd      	mov	sp, r7
 8006742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006746:	4770      	bx	lr

08006748 <shell_exec>:

static int shell_exec(h_shell_t * h_shell, char * buf) {
 8006748:	b580      	push	{r7, lr}
 800674a:	b090      	sub	sp, #64	@ 0x40
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
 8006750:	6039      	str	r1, [r7, #0]
	int i;

	char c = buf[0];
 8006752:	683b      	ldr	r3, [r7, #0]
 8006754:	781b      	ldrb	r3, [r3, #0]
 8006756:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

	int argc;
	char * argv[ARGC_MAX];
	char *p;

	for(i = 0 ; i < h_shell->func_list_size ; i++) {
 800675a:	2300      	movs	r3, #0
 800675c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800675e:	e041      	b.n	80067e4 <shell_exec+0x9c>
		if (h_shell->func_list[i].c == c) {
 8006760:	6879      	ldr	r1, [r7, #4]
 8006762:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006764:	4613      	mov	r3, r2
 8006766:	005b      	lsls	r3, r3, #1
 8006768:	4413      	add	r3, r2
 800676a:	009b      	lsls	r3, r3, #2
 800676c:	440b      	add	r3, r1
 800676e:	3304      	adds	r3, #4
 8006770:	781b      	ldrb	r3, [r3, #0]
 8006772:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 8006776:	429a      	cmp	r2, r3
 8006778:	d131      	bne.n	80067de <shell_exec+0x96>
			argc = 1;
 800677a:	2301      	movs	r3, #1
 800677c:	63bb      	str	r3, [r7, #56]	@ 0x38
			argv[0] = buf;
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	60fb      	str	r3, [r7, #12]

			for(p = buf ; *p != '\0' && argc < ARGC_MAX ; p++){
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	637b      	str	r3, [r7, #52]	@ 0x34
 8006786:	e013      	b.n	80067b0 <shell_exec+0x68>
				if(*p == ' ') {
 8006788:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800678a:	781b      	ldrb	r3, [r3, #0]
 800678c:	2b20      	cmp	r3, #32
 800678e:	d10c      	bne.n	80067aa <shell_exec+0x62>
					*p = '\0';
 8006790:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006792:	2200      	movs	r2, #0
 8006794:	701a      	strb	r2, [r3, #0]
					argv[argc++] = p+1;
 8006796:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006798:	1c5a      	adds	r2, r3, #1
 800679a:	63ba      	str	r2, [r7, #56]	@ 0x38
 800679c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800679e:	3201      	adds	r2, #1
 80067a0:	009b      	lsls	r3, r3, #2
 80067a2:	3340      	adds	r3, #64	@ 0x40
 80067a4:	443b      	add	r3, r7
 80067a6:	f843 2c34 	str.w	r2, [r3, #-52]
			for(p = buf ; *p != '\0' && argc < ARGC_MAX ; p++){
 80067aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067ac:	3301      	adds	r3, #1
 80067ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80067b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067b2:	781b      	ldrb	r3, [r3, #0]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d002      	beq.n	80067be <shell_exec+0x76>
 80067b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067ba:	2b07      	cmp	r3, #7
 80067bc:	dde4      	ble.n	8006788 <shell_exec+0x40>
				}
			}

			return h_shell->func_list[i].func(h_shell, argc, argv);
 80067be:	6879      	ldr	r1, [r7, #4]
 80067c0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80067c2:	4613      	mov	r3, r2
 80067c4:	005b      	lsls	r3, r3, #1
 80067c6:	4413      	add	r3, r2
 80067c8:	009b      	lsls	r3, r3, #2
 80067ca:	440b      	add	r3, r1
 80067cc:	3308      	adds	r3, #8
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f107 020c 	add.w	r2, r7, #12
 80067d4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80067d6:	6878      	ldr	r0, [r7, #4]
 80067d8:	4798      	blx	r3
 80067da:	4603      	mov	r3, r0
 80067dc:	e01e      	b.n	800681c <shell_exec+0xd4>
	for(i = 0 ; i < h_shell->func_list_size ; i++) {
 80067de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80067e0:	3301      	adds	r3, #1
 80067e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80067ea:	429a      	cmp	r2, r3
 80067ec:	dbb8      	blt.n	8006760 <shell_exec+0x18>
		}
	}

	int size;
	size = snprintf (h_shell->print_buffer, BUFFER_SIZE, "%c: no such command\r\n", c);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	f503 7041 	add.w	r0, r3, #772	@ 0x304
 80067f4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80067f8:	4a0a      	ldr	r2, [pc, #40]	@ (8006824 <shell_exec+0xdc>)
 80067fa:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80067fe:	f000 fa59 	bl	8006cb4 <sniprintf>
 8006802:	62f8      	str	r0, [r7, #44]	@ 0x2c
	h_shell->drv.transmit(h_shell->print_buffer, size);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	f8d3 3504 	ldr.w	r3, [r3, #1284]	@ 0x504
 800680a:	687a      	ldr	r2, [r7, #4]
 800680c:	f502 7241 	add.w	r2, r2, #772	@ 0x304
 8006810:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006812:	b289      	uxth	r1, r1
 8006814:	4610      	mov	r0, r2
 8006816:	4798      	blx	r3
	return -1;
 8006818:	f04f 33ff 	mov.w	r3, #4294967295
}
 800681c:	4618      	mov	r0, r3
 800681e:	3740      	adds	r7, #64	@ 0x40
 8006820:	46bd      	mov	sp, r7
 8006822:	bd80      	pop	{r7, pc}
 8006824:	08008154 	.word	0x08008154

08006828 <shell_run>:

static const char backspace[] = "\b \b";
static const char prompt[] = "> ";

int shell_run(h_shell_t * h_shell) {
 8006828:	b580      	push	{r7, lr}
 800682a:	b086      	sub	sp, #24
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
	int reading = 0;
 8006830:	2300      	movs	r3, #0
 8006832:	617b      	str	r3, [r7, #20]
	int pos = 0;
 8006834:	2300      	movs	r3, #0
 8006836:	613b      	str	r3, [r7, #16]

	while (1) {
		h_shell->drv.transmit(prompt, 2);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	@ 0x504
 800683e:	2102      	movs	r1, #2
 8006840:	483b      	ldr	r0, [pc, #236]	@ (8006930 <shell_run+0x108>)
 8006842:	4798      	blx	r3
		reading = 1;
 8006844:	2301      	movs	r3, #1
 8006846:	617b      	str	r3, [r7, #20]

		while(reading) {
 8006848:	e066      	b.n	8006918 <shell_run+0xf0>
			char c;
			h_shell->drv.receive(&c, 1);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 8006850:	f107 020b 	add.w	r2, r7, #11
 8006854:	2101      	movs	r1, #1
 8006856:	4610      	mov	r0, r2
 8006858:	4798      	blx	r3
			int size;

			switch (c) {
 800685a:	7afb      	ldrb	r3, [r7, #11]
 800685c:	2b08      	cmp	r3, #8
 800685e:	d038      	beq.n	80068d2 <shell_run+0xaa>
 8006860:	2b0d      	cmp	r3, #13
 8006862:	d143      	bne.n	80068ec <shell_run+0xc4>
			//process RETURN key
			case '\r':
				//case '\n':
				size = snprintf (h_shell->print_buffer, BUFFER_SIZE, "\r\n");
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	f503 7341 	add.w	r3, r3, #772	@ 0x304
 800686a:	4a32      	ldr	r2, [pc, #200]	@ (8006934 <shell_run+0x10c>)
 800686c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8006870:	4618      	mov	r0, r3
 8006872:	f000 fa1f 	bl	8006cb4 <sniprintf>
 8006876:	60f8      	str	r0, [r7, #12]
				h_shell->drv.transmit(h_shell->print_buffer, size);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	@ 0x504
 800687e:	687a      	ldr	r2, [r7, #4]
 8006880:	f502 7241 	add.w	r2, r2, #772	@ 0x304
 8006884:	68f9      	ldr	r1, [r7, #12]
 8006886:	b289      	uxth	r1, r1
 8006888:	4610      	mov	r0, r2
 800688a:	4798      	blx	r3
				h_shell->cmd_buffer[pos++] = 0;     //add \0 char at end of string
 800688c:	693b      	ldr	r3, [r7, #16]
 800688e:	1c5a      	adds	r2, r3, #1
 8006890:	613a      	str	r2, [r7, #16]
 8006892:	687a      	ldr	r2, [r7, #4]
 8006894:	4413      	add	r3, r2
 8006896:	2200      	movs	r2, #0
 8006898:	f883 2404 	strb.w	r2, [r3, #1028]	@ 0x404
				size = snprintf (h_shell->print_buffer, BUFFER_SIZE, ":%s\r\n", h_shell->cmd_buffer);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	f503 7041 	add.w	r0, r3, #772	@ 0x304
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80068a8:	4a23      	ldr	r2, [pc, #140]	@ (8006938 <shell_run+0x110>)
 80068aa:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80068ae:	f000 fa01 	bl	8006cb4 <sniprintf>
 80068b2:	60f8      	str	r0, [r7, #12]
				h_shell->drv.transmit(h_shell->print_buffer, size);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	f8d3 3504 	ldr.w	r3, [r3, #1284]	@ 0x504
 80068ba:	687a      	ldr	r2, [r7, #4]
 80068bc:	f502 7241 	add.w	r2, r2, #772	@ 0x304
 80068c0:	68f9      	ldr	r1, [r7, #12]
 80068c2:	b289      	uxth	r1, r1
 80068c4:	4610      	mov	r0, r2
 80068c6:	4798      	blx	r3
				reading = 0;        //exit read loop
 80068c8:	2300      	movs	r3, #0
 80068ca:	617b      	str	r3, [r7, #20]
				pos = 0;            //reset buffer
 80068cc:	2300      	movs	r3, #0
 80068ce:	613b      	str	r3, [r7, #16]
				break;
 80068d0:	e022      	b.n	8006918 <shell_run+0xf0>
				//backspace
			case '\b':
				if (pos > 0) {      //is there a char to delete?
 80068d2:	693b      	ldr	r3, [r7, #16]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	dd1e      	ble.n	8006916 <shell_run+0xee>
					pos--;          //remove it in buffer
 80068d8:	693b      	ldr	r3, [r7, #16]
 80068da:	3b01      	subs	r3, #1
 80068dc:	613b      	str	r3, [r7, #16]

					h_shell->drv.transmit(backspace, 3);	// delete the char on the terminal
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	f8d3 3504 	ldr.w	r3, [r3, #1284]	@ 0x504
 80068e4:	2103      	movs	r1, #3
 80068e6:	4815      	ldr	r0, [pc, #84]	@ (800693c <shell_run+0x114>)
 80068e8:	4798      	blx	r3
				}
				break;
 80068ea:	e014      	b.n	8006916 <shell_run+0xee>
				//other characters
			default:
				//only store characters if buffer has space
				if (pos < BUFFER_SIZE) {
 80068ec:	693b      	ldr	r3, [r7, #16]
 80068ee:	2bff      	cmp	r3, #255	@ 0xff
 80068f0:	dc12      	bgt.n	8006918 <shell_run+0xf0>
					h_shell->drv.transmit(&c, 1);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	f8d3 3504 	ldr.w	r3, [r3, #1284]	@ 0x504
 80068f8:	f107 020b 	add.w	r2, r7, #11
 80068fc:	2101      	movs	r1, #1
 80068fe:	4610      	mov	r0, r2
 8006900:	4798      	blx	r3
					h_shell->cmd_buffer[pos++] = c; //store
 8006902:	693b      	ldr	r3, [r7, #16]
 8006904:	1c5a      	adds	r2, r3, #1
 8006906:	613a      	str	r2, [r7, #16]
 8006908:	7af9      	ldrb	r1, [r7, #11]
 800690a:	687a      	ldr	r2, [r7, #4]
 800690c:	4413      	add	r3, r2
 800690e:	460a      	mov	r2, r1
 8006910:	f883 2404 	strb.w	r2, [r3, #1028]	@ 0x404
 8006914:	e000      	b.n	8006918 <shell_run+0xf0>
				break;
 8006916:	bf00      	nop
		while(reading) {
 8006918:	697b      	ldr	r3, [r7, #20]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d195      	bne.n	800684a <shell_run+0x22>
				}
			}
		}
		shell_exec(h_shell, h_shell->cmd_buffer);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006924:	4619      	mov	r1, r3
 8006926:	6878      	ldr	r0, [r7, #4]
 8006928:	f7ff ff0e 	bl	8006748 <shell_exec>
		h_shell->drv.transmit(prompt, 2);
 800692c:	e784      	b.n	8006838 <shell_run+0x10>
 800692e:	bf00      	nop
 8006930:	08008194 	.word	0x08008194
 8006934:	0800816c 	.word	0x0800816c
 8006938:	08008170 	.word	0x08008170
 800693c:	08008190 	.word	0x08008190

08006940 <atoi>:
 8006940:	220a      	movs	r2, #10
 8006942:	2100      	movs	r1, #0
 8006944:	f000 b87a 	b.w	8006a3c <strtol>

08006948 <_strtol_l.isra.0>:
 8006948:	2b24      	cmp	r3, #36	@ 0x24
 800694a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800694e:	4686      	mov	lr, r0
 8006950:	4690      	mov	r8, r2
 8006952:	d801      	bhi.n	8006958 <_strtol_l.isra.0+0x10>
 8006954:	2b01      	cmp	r3, #1
 8006956:	d106      	bne.n	8006966 <_strtol_l.isra.0+0x1e>
 8006958:	f000 fb1c 	bl	8006f94 <__errno>
 800695c:	2316      	movs	r3, #22
 800695e:	6003      	str	r3, [r0, #0]
 8006960:	2000      	movs	r0, #0
 8006962:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006966:	4834      	ldr	r0, [pc, #208]	@ (8006a38 <_strtol_l.isra.0+0xf0>)
 8006968:	460d      	mov	r5, r1
 800696a:	462a      	mov	r2, r5
 800696c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006970:	5d06      	ldrb	r6, [r0, r4]
 8006972:	f016 0608 	ands.w	r6, r6, #8
 8006976:	d1f8      	bne.n	800696a <_strtol_l.isra.0+0x22>
 8006978:	2c2d      	cmp	r4, #45	@ 0x2d
 800697a:	d110      	bne.n	800699e <_strtol_l.isra.0+0x56>
 800697c:	782c      	ldrb	r4, [r5, #0]
 800697e:	2601      	movs	r6, #1
 8006980:	1c95      	adds	r5, r2, #2
 8006982:	f033 0210 	bics.w	r2, r3, #16
 8006986:	d115      	bne.n	80069b4 <_strtol_l.isra.0+0x6c>
 8006988:	2c30      	cmp	r4, #48	@ 0x30
 800698a:	d10d      	bne.n	80069a8 <_strtol_l.isra.0+0x60>
 800698c:	782a      	ldrb	r2, [r5, #0]
 800698e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8006992:	2a58      	cmp	r2, #88	@ 0x58
 8006994:	d108      	bne.n	80069a8 <_strtol_l.isra.0+0x60>
 8006996:	786c      	ldrb	r4, [r5, #1]
 8006998:	3502      	adds	r5, #2
 800699a:	2310      	movs	r3, #16
 800699c:	e00a      	b.n	80069b4 <_strtol_l.isra.0+0x6c>
 800699e:	2c2b      	cmp	r4, #43	@ 0x2b
 80069a0:	bf04      	itt	eq
 80069a2:	782c      	ldrbeq	r4, [r5, #0]
 80069a4:	1c95      	addeq	r5, r2, #2
 80069a6:	e7ec      	b.n	8006982 <_strtol_l.isra.0+0x3a>
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d1f6      	bne.n	800699a <_strtol_l.isra.0+0x52>
 80069ac:	2c30      	cmp	r4, #48	@ 0x30
 80069ae:	bf14      	ite	ne
 80069b0:	230a      	movne	r3, #10
 80069b2:	2308      	moveq	r3, #8
 80069b4:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80069b8:	f10c 3cff 	add.w	ip, ip, #4294967295
 80069bc:	2200      	movs	r2, #0
 80069be:	fbbc f9f3 	udiv	r9, ip, r3
 80069c2:	4610      	mov	r0, r2
 80069c4:	fb03 ca19 	mls	sl, r3, r9, ip
 80069c8:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80069cc:	2f09      	cmp	r7, #9
 80069ce:	d80f      	bhi.n	80069f0 <_strtol_l.isra.0+0xa8>
 80069d0:	463c      	mov	r4, r7
 80069d2:	42a3      	cmp	r3, r4
 80069d4:	dd1b      	ble.n	8006a0e <_strtol_l.isra.0+0xc6>
 80069d6:	1c57      	adds	r7, r2, #1
 80069d8:	d007      	beq.n	80069ea <_strtol_l.isra.0+0xa2>
 80069da:	4581      	cmp	r9, r0
 80069dc:	d314      	bcc.n	8006a08 <_strtol_l.isra.0+0xc0>
 80069de:	d101      	bne.n	80069e4 <_strtol_l.isra.0+0x9c>
 80069e0:	45a2      	cmp	sl, r4
 80069e2:	db11      	blt.n	8006a08 <_strtol_l.isra.0+0xc0>
 80069e4:	fb00 4003 	mla	r0, r0, r3, r4
 80069e8:	2201      	movs	r2, #1
 80069ea:	f815 4b01 	ldrb.w	r4, [r5], #1
 80069ee:	e7eb      	b.n	80069c8 <_strtol_l.isra.0+0x80>
 80069f0:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80069f4:	2f19      	cmp	r7, #25
 80069f6:	d801      	bhi.n	80069fc <_strtol_l.isra.0+0xb4>
 80069f8:	3c37      	subs	r4, #55	@ 0x37
 80069fa:	e7ea      	b.n	80069d2 <_strtol_l.isra.0+0x8a>
 80069fc:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8006a00:	2f19      	cmp	r7, #25
 8006a02:	d804      	bhi.n	8006a0e <_strtol_l.isra.0+0xc6>
 8006a04:	3c57      	subs	r4, #87	@ 0x57
 8006a06:	e7e4      	b.n	80069d2 <_strtol_l.isra.0+0x8a>
 8006a08:	f04f 32ff 	mov.w	r2, #4294967295
 8006a0c:	e7ed      	b.n	80069ea <_strtol_l.isra.0+0xa2>
 8006a0e:	1c53      	adds	r3, r2, #1
 8006a10:	d108      	bne.n	8006a24 <_strtol_l.isra.0+0xdc>
 8006a12:	2322      	movs	r3, #34	@ 0x22
 8006a14:	f8ce 3000 	str.w	r3, [lr]
 8006a18:	4660      	mov	r0, ip
 8006a1a:	f1b8 0f00 	cmp.w	r8, #0
 8006a1e:	d0a0      	beq.n	8006962 <_strtol_l.isra.0+0x1a>
 8006a20:	1e69      	subs	r1, r5, #1
 8006a22:	e006      	b.n	8006a32 <_strtol_l.isra.0+0xea>
 8006a24:	b106      	cbz	r6, 8006a28 <_strtol_l.isra.0+0xe0>
 8006a26:	4240      	negs	r0, r0
 8006a28:	f1b8 0f00 	cmp.w	r8, #0
 8006a2c:	d099      	beq.n	8006962 <_strtol_l.isra.0+0x1a>
 8006a2e:	2a00      	cmp	r2, #0
 8006a30:	d1f6      	bne.n	8006a20 <_strtol_l.isra.0+0xd8>
 8006a32:	f8c8 1000 	str.w	r1, [r8]
 8006a36:	e794      	b.n	8006962 <_strtol_l.isra.0+0x1a>
 8006a38:	08008198 	.word	0x08008198

08006a3c <strtol>:
 8006a3c:	4613      	mov	r3, r2
 8006a3e:	460a      	mov	r2, r1
 8006a40:	4601      	mov	r1, r0
 8006a42:	4802      	ldr	r0, [pc, #8]	@ (8006a4c <strtol+0x10>)
 8006a44:	6800      	ldr	r0, [r0, #0]
 8006a46:	f7ff bf7f 	b.w	8006948 <_strtol_l.isra.0>
 8006a4a:	bf00      	nop
 8006a4c:	2000011c 	.word	0x2000011c

08006a50 <std>:
 8006a50:	2300      	movs	r3, #0
 8006a52:	b510      	push	{r4, lr}
 8006a54:	4604      	mov	r4, r0
 8006a56:	e9c0 3300 	strd	r3, r3, [r0]
 8006a5a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006a5e:	6083      	str	r3, [r0, #8]
 8006a60:	8181      	strh	r1, [r0, #12]
 8006a62:	6643      	str	r3, [r0, #100]	@ 0x64
 8006a64:	81c2      	strh	r2, [r0, #14]
 8006a66:	6183      	str	r3, [r0, #24]
 8006a68:	4619      	mov	r1, r3
 8006a6a:	2208      	movs	r2, #8
 8006a6c:	305c      	adds	r0, #92	@ 0x5c
 8006a6e:	f000 fa2f 	bl	8006ed0 <memset>
 8006a72:	4b0d      	ldr	r3, [pc, #52]	@ (8006aa8 <std+0x58>)
 8006a74:	6263      	str	r3, [r4, #36]	@ 0x24
 8006a76:	4b0d      	ldr	r3, [pc, #52]	@ (8006aac <std+0x5c>)
 8006a78:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006a7a:	4b0d      	ldr	r3, [pc, #52]	@ (8006ab0 <std+0x60>)
 8006a7c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006a7e:	4b0d      	ldr	r3, [pc, #52]	@ (8006ab4 <std+0x64>)
 8006a80:	6323      	str	r3, [r4, #48]	@ 0x30
 8006a82:	4b0d      	ldr	r3, [pc, #52]	@ (8006ab8 <std+0x68>)
 8006a84:	6224      	str	r4, [r4, #32]
 8006a86:	429c      	cmp	r4, r3
 8006a88:	d006      	beq.n	8006a98 <std+0x48>
 8006a8a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006a8e:	4294      	cmp	r4, r2
 8006a90:	d002      	beq.n	8006a98 <std+0x48>
 8006a92:	33d0      	adds	r3, #208	@ 0xd0
 8006a94:	429c      	cmp	r4, r3
 8006a96:	d105      	bne.n	8006aa4 <std+0x54>
 8006a98:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006a9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006aa0:	f000 baa2 	b.w	8006fe8 <__retarget_lock_init_recursive>
 8006aa4:	bd10      	pop	{r4, pc}
 8006aa6:	bf00      	nop
 8006aa8:	08006d21 	.word	0x08006d21
 8006aac:	08006d43 	.word	0x08006d43
 8006ab0:	08006d7b 	.word	0x08006d7b
 8006ab4:	08006d9f 	.word	0x08006d9f
 8006ab8:	20004730 	.word	0x20004730

08006abc <stdio_exit_handler>:
 8006abc:	4a02      	ldr	r2, [pc, #8]	@ (8006ac8 <stdio_exit_handler+0xc>)
 8006abe:	4903      	ldr	r1, [pc, #12]	@ (8006acc <stdio_exit_handler+0x10>)
 8006ac0:	4803      	ldr	r0, [pc, #12]	@ (8006ad0 <stdio_exit_handler+0x14>)
 8006ac2:	f000 b869 	b.w	8006b98 <_fwalk_sglue>
 8006ac6:	bf00      	nop
 8006ac8:	20000110 	.word	0x20000110
 8006acc:	08007b51 	.word	0x08007b51
 8006ad0:	20000120 	.word	0x20000120

08006ad4 <cleanup_stdio>:
 8006ad4:	6841      	ldr	r1, [r0, #4]
 8006ad6:	4b0c      	ldr	r3, [pc, #48]	@ (8006b08 <cleanup_stdio+0x34>)
 8006ad8:	4299      	cmp	r1, r3
 8006ada:	b510      	push	{r4, lr}
 8006adc:	4604      	mov	r4, r0
 8006ade:	d001      	beq.n	8006ae4 <cleanup_stdio+0x10>
 8006ae0:	f001 f836 	bl	8007b50 <_fflush_r>
 8006ae4:	68a1      	ldr	r1, [r4, #8]
 8006ae6:	4b09      	ldr	r3, [pc, #36]	@ (8006b0c <cleanup_stdio+0x38>)
 8006ae8:	4299      	cmp	r1, r3
 8006aea:	d002      	beq.n	8006af2 <cleanup_stdio+0x1e>
 8006aec:	4620      	mov	r0, r4
 8006aee:	f001 f82f 	bl	8007b50 <_fflush_r>
 8006af2:	68e1      	ldr	r1, [r4, #12]
 8006af4:	4b06      	ldr	r3, [pc, #24]	@ (8006b10 <cleanup_stdio+0x3c>)
 8006af6:	4299      	cmp	r1, r3
 8006af8:	d004      	beq.n	8006b04 <cleanup_stdio+0x30>
 8006afa:	4620      	mov	r0, r4
 8006afc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b00:	f001 b826 	b.w	8007b50 <_fflush_r>
 8006b04:	bd10      	pop	{r4, pc}
 8006b06:	bf00      	nop
 8006b08:	20004730 	.word	0x20004730
 8006b0c:	20004798 	.word	0x20004798
 8006b10:	20004800 	.word	0x20004800

08006b14 <global_stdio_init.part.0>:
 8006b14:	b510      	push	{r4, lr}
 8006b16:	4b0b      	ldr	r3, [pc, #44]	@ (8006b44 <global_stdio_init.part.0+0x30>)
 8006b18:	4c0b      	ldr	r4, [pc, #44]	@ (8006b48 <global_stdio_init.part.0+0x34>)
 8006b1a:	4a0c      	ldr	r2, [pc, #48]	@ (8006b4c <global_stdio_init.part.0+0x38>)
 8006b1c:	601a      	str	r2, [r3, #0]
 8006b1e:	4620      	mov	r0, r4
 8006b20:	2200      	movs	r2, #0
 8006b22:	2104      	movs	r1, #4
 8006b24:	f7ff ff94 	bl	8006a50 <std>
 8006b28:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006b2c:	2201      	movs	r2, #1
 8006b2e:	2109      	movs	r1, #9
 8006b30:	f7ff ff8e 	bl	8006a50 <std>
 8006b34:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006b38:	2202      	movs	r2, #2
 8006b3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b3e:	2112      	movs	r1, #18
 8006b40:	f7ff bf86 	b.w	8006a50 <std>
 8006b44:	20004868 	.word	0x20004868
 8006b48:	20004730 	.word	0x20004730
 8006b4c:	08006abd 	.word	0x08006abd

08006b50 <__sfp_lock_acquire>:
 8006b50:	4801      	ldr	r0, [pc, #4]	@ (8006b58 <__sfp_lock_acquire+0x8>)
 8006b52:	f000 ba4a 	b.w	8006fea <__retarget_lock_acquire_recursive>
 8006b56:	bf00      	nop
 8006b58:	20004871 	.word	0x20004871

08006b5c <__sfp_lock_release>:
 8006b5c:	4801      	ldr	r0, [pc, #4]	@ (8006b64 <__sfp_lock_release+0x8>)
 8006b5e:	f000 ba45 	b.w	8006fec <__retarget_lock_release_recursive>
 8006b62:	bf00      	nop
 8006b64:	20004871 	.word	0x20004871

08006b68 <__sinit>:
 8006b68:	b510      	push	{r4, lr}
 8006b6a:	4604      	mov	r4, r0
 8006b6c:	f7ff fff0 	bl	8006b50 <__sfp_lock_acquire>
 8006b70:	6a23      	ldr	r3, [r4, #32]
 8006b72:	b11b      	cbz	r3, 8006b7c <__sinit+0x14>
 8006b74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b78:	f7ff bff0 	b.w	8006b5c <__sfp_lock_release>
 8006b7c:	4b04      	ldr	r3, [pc, #16]	@ (8006b90 <__sinit+0x28>)
 8006b7e:	6223      	str	r3, [r4, #32]
 8006b80:	4b04      	ldr	r3, [pc, #16]	@ (8006b94 <__sinit+0x2c>)
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d1f5      	bne.n	8006b74 <__sinit+0xc>
 8006b88:	f7ff ffc4 	bl	8006b14 <global_stdio_init.part.0>
 8006b8c:	e7f2      	b.n	8006b74 <__sinit+0xc>
 8006b8e:	bf00      	nop
 8006b90:	08006ad5 	.word	0x08006ad5
 8006b94:	20004868 	.word	0x20004868

08006b98 <_fwalk_sglue>:
 8006b98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b9c:	4607      	mov	r7, r0
 8006b9e:	4688      	mov	r8, r1
 8006ba0:	4614      	mov	r4, r2
 8006ba2:	2600      	movs	r6, #0
 8006ba4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006ba8:	f1b9 0901 	subs.w	r9, r9, #1
 8006bac:	d505      	bpl.n	8006bba <_fwalk_sglue+0x22>
 8006bae:	6824      	ldr	r4, [r4, #0]
 8006bb0:	2c00      	cmp	r4, #0
 8006bb2:	d1f7      	bne.n	8006ba4 <_fwalk_sglue+0xc>
 8006bb4:	4630      	mov	r0, r6
 8006bb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006bba:	89ab      	ldrh	r3, [r5, #12]
 8006bbc:	2b01      	cmp	r3, #1
 8006bbe:	d907      	bls.n	8006bd0 <_fwalk_sglue+0x38>
 8006bc0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006bc4:	3301      	adds	r3, #1
 8006bc6:	d003      	beq.n	8006bd0 <_fwalk_sglue+0x38>
 8006bc8:	4629      	mov	r1, r5
 8006bca:	4638      	mov	r0, r7
 8006bcc:	47c0      	blx	r8
 8006bce:	4306      	orrs	r6, r0
 8006bd0:	3568      	adds	r5, #104	@ 0x68
 8006bd2:	e7e9      	b.n	8006ba8 <_fwalk_sglue+0x10>

08006bd4 <iprintf>:
 8006bd4:	b40f      	push	{r0, r1, r2, r3}
 8006bd6:	b507      	push	{r0, r1, r2, lr}
 8006bd8:	4906      	ldr	r1, [pc, #24]	@ (8006bf4 <iprintf+0x20>)
 8006bda:	ab04      	add	r3, sp, #16
 8006bdc:	6808      	ldr	r0, [r1, #0]
 8006bde:	f853 2b04 	ldr.w	r2, [r3], #4
 8006be2:	6881      	ldr	r1, [r0, #8]
 8006be4:	9301      	str	r3, [sp, #4]
 8006be6:	f000 fc8b 	bl	8007500 <_vfiprintf_r>
 8006bea:	b003      	add	sp, #12
 8006bec:	f85d eb04 	ldr.w	lr, [sp], #4
 8006bf0:	b004      	add	sp, #16
 8006bf2:	4770      	bx	lr
 8006bf4:	2000011c 	.word	0x2000011c

08006bf8 <_puts_r>:
 8006bf8:	6a03      	ldr	r3, [r0, #32]
 8006bfa:	b570      	push	{r4, r5, r6, lr}
 8006bfc:	6884      	ldr	r4, [r0, #8]
 8006bfe:	4605      	mov	r5, r0
 8006c00:	460e      	mov	r6, r1
 8006c02:	b90b      	cbnz	r3, 8006c08 <_puts_r+0x10>
 8006c04:	f7ff ffb0 	bl	8006b68 <__sinit>
 8006c08:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006c0a:	07db      	lsls	r3, r3, #31
 8006c0c:	d405      	bmi.n	8006c1a <_puts_r+0x22>
 8006c0e:	89a3      	ldrh	r3, [r4, #12]
 8006c10:	0598      	lsls	r0, r3, #22
 8006c12:	d402      	bmi.n	8006c1a <_puts_r+0x22>
 8006c14:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006c16:	f000 f9e8 	bl	8006fea <__retarget_lock_acquire_recursive>
 8006c1a:	89a3      	ldrh	r3, [r4, #12]
 8006c1c:	0719      	lsls	r1, r3, #28
 8006c1e:	d502      	bpl.n	8006c26 <_puts_r+0x2e>
 8006c20:	6923      	ldr	r3, [r4, #16]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d135      	bne.n	8006c92 <_puts_r+0x9a>
 8006c26:	4621      	mov	r1, r4
 8006c28:	4628      	mov	r0, r5
 8006c2a:	f000 f8fb 	bl	8006e24 <__swsetup_r>
 8006c2e:	b380      	cbz	r0, 8006c92 <_puts_r+0x9a>
 8006c30:	f04f 35ff 	mov.w	r5, #4294967295
 8006c34:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006c36:	07da      	lsls	r2, r3, #31
 8006c38:	d405      	bmi.n	8006c46 <_puts_r+0x4e>
 8006c3a:	89a3      	ldrh	r3, [r4, #12]
 8006c3c:	059b      	lsls	r3, r3, #22
 8006c3e:	d402      	bmi.n	8006c46 <_puts_r+0x4e>
 8006c40:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006c42:	f000 f9d3 	bl	8006fec <__retarget_lock_release_recursive>
 8006c46:	4628      	mov	r0, r5
 8006c48:	bd70      	pop	{r4, r5, r6, pc}
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	da04      	bge.n	8006c58 <_puts_r+0x60>
 8006c4e:	69a2      	ldr	r2, [r4, #24]
 8006c50:	429a      	cmp	r2, r3
 8006c52:	dc17      	bgt.n	8006c84 <_puts_r+0x8c>
 8006c54:	290a      	cmp	r1, #10
 8006c56:	d015      	beq.n	8006c84 <_puts_r+0x8c>
 8006c58:	6823      	ldr	r3, [r4, #0]
 8006c5a:	1c5a      	adds	r2, r3, #1
 8006c5c:	6022      	str	r2, [r4, #0]
 8006c5e:	7019      	strb	r1, [r3, #0]
 8006c60:	68a3      	ldr	r3, [r4, #8]
 8006c62:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006c66:	3b01      	subs	r3, #1
 8006c68:	60a3      	str	r3, [r4, #8]
 8006c6a:	2900      	cmp	r1, #0
 8006c6c:	d1ed      	bne.n	8006c4a <_puts_r+0x52>
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	da11      	bge.n	8006c96 <_puts_r+0x9e>
 8006c72:	4622      	mov	r2, r4
 8006c74:	210a      	movs	r1, #10
 8006c76:	4628      	mov	r0, r5
 8006c78:	f000 f895 	bl	8006da6 <__swbuf_r>
 8006c7c:	3001      	adds	r0, #1
 8006c7e:	d0d7      	beq.n	8006c30 <_puts_r+0x38>
 8006c80:	250a      	movs	r5, #10
 8006c82:	e7d7      	b.n	8006c34 <_puts_r+0x3c>
 8006c84:	4622      	mov	r2, r4
 8006c86:	4628      	mov	r0, r5
 8006c88:	f000 f88d 	bl	8006da6 <__swbuf_r>
 8006c8c:	3001      	adds	r0, #1
 8006c8e:	d1e7      	bne.n	8006c60 <_puts_r+0x68>
 8006c90:	e7ce      	b.n	8006c30 <_puts_r+0x38>
 8006c92:	3e01      	subs	r6, #1
 8006c94:	e7e4      	b.n	8006c60 <_puts_r+0x68>
 8006c96:	6823      	ldr	r3, [r4, #0]
 8006c98:	1c5a      	adds	r2, r3, #1
 8006c9a:	6022      	str	r2, [r4, #0]
 8006c9c:	220a      	movs	r2, #10
 8006c9e:	701a      	strb	r2, [r3, #0]
 8006ca0:	e7ee      	b.n	8006c80 <_puts_r+0x88>
	...

08006ca4 <puts>:
 8006ca4:	4b02      	ldr	r3, [pc, #8]	@ (8006cb0 <puts+0xc>)
 8006ca6:	4601      	mov	r1, r0
 8006ca8:	6818      	ldr	r0, [r3, #0]
 8006caa:	f7ff bfa5 	b.w	8006bf8 <_puts_r>
 8006cae:	bf00      	nop
 8006cb0:	2000011c 	.word	0x2000011c

08006cb4 <sniprintf>:
 8006cb4:	b40c      	push	{r2, r3}
 8006cb6:	b530      	push	{r4, r5, lr}
 8006cb8:	4b18      	ldr	r3, [pc, #96]	@ (8006d1c <sniprintf+0x68>)
 8006cba:	1e0c      	subs	r4, r1, #0
 8006cbc:	681d      	ldr	r5, [r3, #0]
 8006cbe:	b09d      	sub	sp, #116	@ 0x74
 8006cc0:	da08      	bge.n	8006cd4 <sniprintf+0x20>
 8006cc2:	238b      	movs	r3, #139	@ 0x8b
 8006cc4:	602b      	str	r3, [r5, #0]
 8006cc6:	f04f 30ff 	mov.w	r0, #4294967295
 8006cca:	b01d      	add	sp, #116	@ 0x74
 8006ccc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006cd0:	b002      	add	sp, #8
 8006cd2:	4770      	bx	lr
 8006cd4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8006cd8:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006cdc:	f04f 0300 	mov.w	r3, #0
 8006ce0:	931b      	str	r3, [sp, #108]	@ 0x6c
 8006ce2:	bf14      	ite	ne
 8006ce4:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006ce8:	4623      	moveq	r3, r4
 8006cea:	9304      	str	r3, [sp, #16]
 8006cec:	9307      	str	r3, [sp, #28]
 8006cee:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006cf2:	9002      	str	r0, [sp, #8]
 8006cf4:	9006      	str	r0, [sp, #24]
 8006cf6:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006cfa:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8006cfc:	ab21      	add	r3, sp, #132	@ 0x84
 8006cfe:	a902      	add	r1, sp, #8
 8006d00:	4628      	mov	r0, r5
 8006d02:	9301      	str	r3, [sp, #4]
 8006d04:	f000 fad6 	bl	80072b4 <_svfiprintf_r>
 8006d08:	1c43      	adds	r3, r0, #1
 8006d0a:	bfbc      	itt	lt
 8006d0c:	238b      	movlt	r3, #139	@ 0x8b
 8006d0e:	602b      	strlt	r3, [r5, #0]
 8006d10:	2c00      	cmp	r4, #0
 8006d12:	d0da      	beq.n	8006cca <sniprintf+0x16>
 8006d14:	9b02      	ldr	r3, [sp, #8]
 8006d16:	2200      	movs	r2, #0
 8006d18:	701a      	strb	r2, [r3, #0]
 8006d1a:	e7d6      	b.n	8006cca <sniprintf+0x16>
 8006d1c:	2000011c 	.word	0x2000011c

08006d20 <__sread>:
 8006d20:	b510      	push	{r4, lr}
 8006d22:	460c      	mov	r4, r1
 8006d24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d28:	f000 f910 	bl	8006f4c <_read_r>
 8006d2c:	2800      	cmp	r0, #0
 8006d2e:	bfab      	itete	ge
 8006d30:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006d32:	89a3      	ldrhlt	r3, [r4, #12]
 8006d34:	181b      	addge	r3, r3, r0
 8006d36:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006d3a:	bfac      	ite	ge
 8006d3c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006d3e:	81a3      	strhlt	r3, [r4, #12]
 8006d40:	bd10      	pop	{r4, pc}

08006d42 <__swrite>:
 8006d42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d46:	461f      	mov	r7, r3
 8006d48:	898b      	ldrh	r3, [r1, #12]
 8006d4a:	05db      	lsls	r3, r3, #23
 8006d4c:	4605      	mov	r5, r0
 8006d4e:	460c      	mov	r4, r1
 8006d50:	4616      	mov	r6, r2
 8006d52:	d505      	bpl.n	8006d60 <__swrite+0x1e>
 8006d54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d58:	2302      	movs	r3, #2
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	f000 f8e4 	bl	8006f28 <_lseek_r>
 8006d60:	89a3      	ldrh	r3, [r4, #12]
 8006d62:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006d66:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006d6a:	81a3      	strh	r3, [r4, #12]
 8006d6c:	4632      	mov	r2, r6
 8006d6e:	463b      	mov	r3, r7
 8006d70:	4628      	mov	r0, r5
 8006d72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006d76:	f000 b8fb 	b.w	8006f70 <_write_r>

08006d7a <__sseek>:
 8006d7a:	b510      	push	{r4, lr}
 8006d7c:	460c      	mov	r4, r1
 8006d7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d82:	f000 f8d1 	bl	8006f28 <_lseek_r>
 8006d86:	1c43      	adds	r3, r0, #1
 8006d88:	89a3      	ldrh	r3, [r4, #12]
 8006d8a:	bf15      	itete	ne
 8006d8c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006d8e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006d92:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006d96:	81a3      	strheq	r3, [r4, #12]
 8006d98:	bf18      	it	ne
 8006d9a:	81a3      	strhne	r3, [r4, #12]
 8006d9c:	bd10      	pop	{r4, pc}

08006d9e <__sclose>:
 8006d9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006da2:	f000 b8b1 	b.w	8006f08 <_close_r>

08006da6 <__swbuf_r>:
 8006da6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006da8:	460e      	mov	r6, r1
 8006daa:	4614      	mov	r4, r2
 8006dac:	4605      	mov	r5, r0
 8006dae:	b118      	cbz	r0, 8006db8 <__swbuf_r+0x12>
 8006db0:	6a03      	ldr	r3, [r0, #32]
 8006db2:	b90b      	cbnz	r3, 8006db8 <__swbuf_r+0x12>
 8006db4:	f7ff fed8 	bl	8006b68 <__sinit>
 8006db8:	69a3      	ldr	r3, [r4, #24]
 8006dba:	60a3      	str	r3, [r4, #8]
 8006dbc:	89a3      	ldrh	r3, [r4, #12]
 8006dbe:	071a      	lsls	r2, r3, #28
 8006dc0:	d501      	bpl.n	8006dc6 <__swbuf_r+0x20>
 8006dc2:	6923      	ldr	r3, [r4, #16]
 8006dc4:	b943      	cbnz	r3, 8006dd8 <__swbuf_r+0x32>
 8006dc6:	4621      	mov	r1, r4
 8006dc8:	4628      	mov	r0, r5
 8006dca:	f000 f82b 	bl	8006e24 <__swsetup_r>
 8006dce:	b118      	cbz	r0, 8006dd8 <__swbuf_r+0x32>
 8006dd0:	f04f 37ff 	mov.w	r7, #4294967295
 8006dd4:	4638      	mov	r0, r7
 8006dd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006dd8:	6823      	ldr	r3, [r4, #0]
 8006dda:	6922      	ldr	r2, [r4, #16]
 8006ddc:	1a98      	subs	r0, r3, r2
 8006dde:	6963      	ldr	r3, [r4, #20]
 8006de0:	b2f6      	uxtb	r6, r6
 8006de2:	4283      	cmp	r3, r0
 8006de4:	4637      	mov	r7, r6
 8006de6:	dc05      	bgt.n	8006df4 <__swbuf_r+0x4e>
 8006de8:	4621      	mov	r1, r4
 8006dea:	4628      	mov	r0, r5
 8006dec:	f000 feb0 	bl	8007b50 <_fflush_r>
 8006df0:	2800      	cmp	r0, #0
 8006df2:	d1ed      	bne.n	8006dd0 <__swbuf_r+0x2a>
 8006df4:	68a3      	ldr	r3, [r4, #8]
 8006df6:	3b01      	subs	r3, #1
 8006df8:	60a3      	str	r3, [r4, #8]
 8006dfa:	6823      	ldr	r3, [r4, #0]
 8006dfc:	1c5a      	adds	r2, r3, #1
 8006dfe:	6022      	str	r2, [r4, #0]
 8006e00:	701e      	strb	r6, [r3, #0]
 8006e02:	6962      	ldr	r2, [r4, #20]
 8006e04:	1c43      	adds	r3, r0, #1
 8006e06:	429a      	cmp	r2, r3
 8006e08:	d004      	beq.n	8006e14 <__swbuf_r+0x6e>
 8006e0a:	89a3      	ldrh	r3, [r4, #12]
 8006e0c:	07db      	lsls	r3, r3, #31
 8006e0e:	d5e1      	bpl.n	8006dd4 <__swbuf_r+0x2e>
 8006e10:	2e0a      	cmp	r6, #10
 8006e12:	d1df      	bne.n	8006dd4 <__swbuf_r+0x2e>
 8006e14:	4621      	mov	r1, r4
 8006e16:	4628      	mov	r0, r5
 8006e18:	f000 fe9a 	bl	8007b50 <_fflush_r>
 8006e1c:	2800      	cmp	r0, #0
 8006e1e:	d0d9      	beq.n	8006dd4 <__swbuf_r+0x2e>
 8006e20:	e7d6      	b.n	8006dd0 <__swbuf_r+0x2a>
	...

08006e24 <__swsetup_r>:
 8006e24:	b538      	push	{r3, r4, r5, lr}
 8006e26:	4b29      	ldr	r3, [pc, #164]	@ (8006ecc <__swsetup_r+0xa8>)
 8006e28:	4605      	mov	r5, r0
 8006e2a:	6818      	ldr	r0, [r3, #0]
 8006e2c:	460c      	mov	r4, r1
 8006e2e:	b118      	cbz	r0, 8006e38 <__swsetup_r+0x14>
 8006e30:	6a03      	ldr	r3, [r0, #32]
 8006e32:	b90b      	cbnz	r3, 8006e38 <__swsetup_r+0x14>
 8006e34:	f7ff fe98 	bl	8006b68 <__sinit>
 8006e38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e3c:	0719      	lsls	r1, r3, #28
 8006e3e:	d422      	bmi.n	8006e86 <__swsetup_r+0x62>
 8006e40:	06da      	lsls	r2, r3, #27
 8006e42:	d407      	bmi.n	8006e54 <__swsetup_r+0x30>
 8006e44:	2209      	movs	r2, #9
 8006e46:	602a      	str	r2, [r5, #0]
 8006e48:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006e4c:	81a3      	strh	r3, [r4, #12]
 8006e4e:	f04f 30ff 	mov.w	r0, #4294967295
 8006e52:	e033      	b.n	8006ebc <__swsetup_r+0x98>
 8006e54:	0758      	lsls	r0, r3, #29
 8006e56:	d512      	bpl.n	8006e7e <__swsetup_r+0x5a>
 8006e58:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006e5a:	b141      	cbz	r1, 8006e6e <__swsetup_r+0x4a>
 8006e5c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006e60:	4299      	cmp	r1, r3
 8006e62:	d002      	beq.n	8006e6a <__swsetup_r+0x46>
 8006e64:	4628      	mov	r0, r5
 8006e66:	f000 f8d1 	bl	800700c <_free_r>
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	6363      	str	r3, [r4, #52]	@ 0x34
 8006e6e:	89a3      	ldrh	r3, [r4, #12]
 8006e70:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006e74:	81a3      	strh	r3, [r4, #12]
 8006e76:	2300      	movs	r3, #0
 8006e78:	6063      	str	r3, [r4, #4]
 8006e7a:	6923      	ldr	r3, [r4, #16]
 8006e7c:	6023      	str	r3, [r4, #0]
 8006e7e:	89a3      	ldrh	r3, [r4, #12]
 8006e80:	f043 0308 	orr.w	r3, r3, #8
 8006e84:	81a3      	strh	r3, [r4, #12]
 8006e86:	6923      	ldr	r3, [r4, #16]
 8006e88:	b94b      	cbnz	r3, 8006e9e <__swsetup_r+0x7a>
 8006e8a:	89a3      	ldrh	r3, [r4, #12]
 8006e8c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006e90:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006e94:	d003      	beq.n	8006e9e <__swsetup_r+0x7a>
 8006e96:	4621      	mov	r1, r4
 8006e98:	4628      	mov	r0, r5
 8006e9a:	f000 fea7 	bl	8007bec <__smakebuf_r>
 8006e9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ea2:	f013 0201 	ands.w	r2, r3, #1
 8006ea6:	d00a      	beq.n	8006ebe <__swsetup_r+0x9a>
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	60a2      	str	r2, [r4, #8]
 8006eac:	6962      	ldr	r2, [r4, #20]
 8006eae:	4252      	negs	r2, r2
 8006eb0:	61a2      	str	r2, [r4, #24]
 8006eb2:	6922      	ldr	r2, [r4, #16]
 8006eb4:	b942      	cbnz	r2, 8006ec8 <__swsetup_r+0xa4>
 8006eb6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006eba:	d1c5      	bne.n	8006e48 <__swsetup_r+0x24>
 8006ebc:	bd38      	pop	{r3, r4, r5, pc}
 8006ebe:	0799      	lsls	r1, r3, #30
 8006ec0:	bf58      	it	pl
 8006ec2:	6962      	ldrpl	r2, [r4, #20]
 8006ec4:	60a2      	str	r2, [r4, #8]
 8006ec6:	e7f4      	b.n	8006eb2 <__swsetup_r+0x8e>
 8006ec8:	2000      	movs	r0, #0
 8006eca:	e7f7      	b.n	8006ebc <__swsetup_r+0x98>
 8006ecc:	2000011c 	.word	0x2000011c

08006ed0 <memset>:
 8006ed0:	4402      	add	r2, r0
 8006ed2:	4603      	mov	r3, r0
 8006ed4:	4293      	cmp	r3, r2
 8006ed6:	d100      	bne.n	8006eda <memset+0xa>
 8006ed8:	4770      	bx	lr
 8006eda:	f803 1b01 	strb.w	r1, [r3], #1
 8006ede:	e7f9      	b.n	8006ed4 <memset+0x4>

08006ee0 <strncpy>:
 8006ee0:	b510      	push	{r4, lr}
 8006ee2:	3901      	subs	r1, #1
 8006ee4:	4603      	mov	r3, r0
 8006ee6:	b132      	cbz	r2, 8006ef6 <strncpy+0x16>
 8006ee8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006eec:	f803 4b01 	strb.w	r4, [r3], #1
 8006ef0:	3a01      	subs	r2, #1
 8006ef2:	2c00      	cmp	r4, #0
 8006ef4:	d1f7      	bne.n	8006ee6 <strncpy+0x6>
 8006ef6:	441a      	add	r2, r3
 8006ef8:	2100      	movs	r1, #0
 8006efa:	4293      	cmp	r3, r2
 8006efc:	d100      	bne.n	8006f00 <strncpy+0x20>
 8006efe:	bd10      	pop	{r4, pc}
 8006f00:	f803 1b01 	strb.w	r1, [r3], #1
 8006f04:	e7f9      	b.n	8006efa <strncpy+0x1a>
	...

08006f08 <_close_r>:
 8006f08:	b538      	push	{r3, r4, r5, lr}
 8006f0a:	4d06      	ldr	r5, [pc, #24]	@ (8006f24 <_close_r+0x1c>)
 8006f0c:	2300      	movs	r3, #0
 8006f0e:	4604      	mov	r4, r0
 8006f10:	4608      	mov	r0, r1
 8006f12:	602b      	str	r3, [r5, #0]
 8006f14:	f7fa fc65 	bl	80017e2 <_close>
 8006f18:	1c43      	adds	r3, r0, #1
 8006f1a:	d102      	bne.n	8006f22 <_close_r+0x1a>
 8006f1c:	682b      	ldr	r3, [r5, #0]
 8006f1e:	b103      	cbz	r3, 8006f22 <_close_r+0x1a>
 8006f20:	6023      	str	r3, [r4, #0]
 8006f22:	bd38      	pop	{r3, r4, r5, pc}
 8006f24:	2000486c 	.word	0x2000486c

08006f28 <_lseek_r>:
 8006f28:	b538      	push	{r3, r4, r5, lr}
 8006f2a:	4d07      	ldr	r5, [pc, #28]	@ (8006f48 <_lseek_r+0x20>)
 8006f2c:	4604      	mov	r4, r0
 8006f2e:	4608      	mov	r0, r1
 8006f30:	4611      	mov	r1, r2
 8006f32:	2200      	movs	r2, #0
 8006f34:	602a      	str	r2, [r5, #0]
 8006f36:	461a      	mov	r2, r3
 8006f38:	f7fa fc7a 	bl	8001830 <_lseek>
 8006f3c:	1c43      	adds	r3, r0, #1
 8006f3e:	d102      	bne.n	8006f46 <_lseek_r+0x1e>
 8006f40:	682b      	ldr	r3, [r5, #0]
 8006f42:	b103      	cbz	r3, 8006f46 <_lseek_r+0x1e>
 8006f44:	6023      	str	r3, [r4, #0]
 8006f46:	bd38      	pop	{r3, r4, r5, pc}
 8006f48:	2000486c 	.word	0x2000486c

08006f4c <_read_r>:
 8006f4c:	b538      	push	{r3, r4, r5, lr}
 8006f4e:	4d07      	ldr	r5, [pc, #28]	@ (8006f6c <_read_r+0x20>)
 8006f50:	4604      	mov	r4, r0
 8006f52:	4608      	mov	r0, r1
 8006f54:	4611      	mov	r1, r2
 8006f56:	2200      	movs	r2, #0
 8006f58:	602a      	str	r2, [r5, #0]
 8006f5a:	461a      	mov	r2, r3
 8006f5c:	f7fa fc08 	bl	8001770 <_read>
 8006f60:	1c43      	adds	r3, r0, #1
 8006f62:	d102      	bne.n	8006f6a <_read_r+0x1e>
 8006f64:	682b      	ldr	r3, [r5, #0]
 8006f66:	b103      	cbz	r3, 8006f6a <_read_r+0x1e>
 8006f68:	6023      	str	r3, [r4, #0]
 8006f6a:	bd38      	pop	{r3, r4, r5, pc}
 8006f6c:	2000486c 	.word	0x2000486c

08006f70 <_write_r>:
 8006f70:	b538      	push	{r3, r4, r5, lr}
 8006f72:	4d07      	ldr	r5, [pc, #28]	@ (8006f90 <_write_r+0x20>)
 8006f74:	4604      	mov	r4, r0
 8006f76:	4608      	mov	r0, r1
 8006f78:	4611      	mov	r1, r2
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	602a      	str	r2, [r5, #0]
 8006f7e:	461a      	mov	r2, r3
 8006f80:	f7fa fc13 	bl	80017aa <_write>
 8006f84:	1c43      	adds	r3, r0, #1
 8006f86:	d102      	bne.n	8006f8e <_write_r+0x1e>
 8006f88:	682b      	ldr	r3, [r5, #0]
 8006f8a:	b103      	cbz	r3, 8006f8e <_write_r+0x1e>
 8006f8c:	6023      	str	r3, [r4, #0]
 8006f8e:	bd38      	pop	{r3, r4, r5, pc}
 8006f90:	2000486c 	.word	0x2000486c

08006f94 <__errno>:
 8006f94:	4b01      	ldr	r3, [pc, #4]	@ (8006f9c <__errno+0x8>)
 8006f96:	6818      	ldr	r0, [r3, #0]
 8006f98:	4770      	bx	lr
 8006f9a:	bf00      	nop
 8006f9c:	2000011c 	.word	0x2000011c

08006fa0 <__libc_init_array>:
 8006fa0:	b570      	push	{r4, r5, r6, lr}
 8006fa2:	4d0d      	ldr	r5, [pc, #52]	@ (8006fd8 <__libc_init_array+0x38>)
 8006fa4:	4c0d      	ldr	r4, [pc, #52]	@ (8006fdc <__libc_init_array+0x3c>)
 8006fa6:	1b64      	subs	r4, r4, r5
 8006fa8:	10a4      	asrs	r4, r4, #2
 8006faa:	2600      	movs	r6, #0
 8006fac:	42a6      	cmp	r6, r4
 8006fae:	d109      	bne.n	8006fc4 <__libc_init_array+0x24>
 8006fb0:	4d0b      	ldr	r5, [pc, #44]	@ (8006fe0 <__libc_init_array+0x40>)
 8006fb2:	4c0c      	ldr	r4, [pc, #48]	@ (8006fe4 <__libc_init_array+0x44>)
 8006fb4:	f000 fed8 	bl	8007d68 <_init>
 8006fb8:	1b64      	subs	r4, r4, r5
 8006fba:	10a4      	asrs	r4, r4, #2
 8006fbc:	2600      	movs	r6, #0
 8006fbe:	42a6      	cmp	r6, r4
 8006fc0:	d105      	bne.n	8006fce <__libc_init_array+0x2e>
 8006fc2:	bd70      	pop	{r4, r5, r6, pc}
 8006fc4:	f855 3b04 	ldr.w	r3, [r5], #4
 8006fc8:	4798      	blx	r3
 8006fca:	3601      	adds	r6, #1
 8006fcc:	e7ee      	b.n	8006fac <__libc_init_array+0xc>
 8006fce:	f855 3b04 	ldr.w	r3, [r5], #4
 8006fd2:	4798      	blx	r3
 8006fd4:	3601      	adds	r6, #1
 8006fd6:	e7f2      	b.n	8006fbe <__libc_init_array+0x1e>
 8006fd8:	080082d4 	.word	0x080082d4
 8006fdc:	080082d4 	.word	0x080082d4
 8006fe0:	080082d4 	.word	0x080082d4
 8006fe4:	080082d8 	.word	0x080082d8

08006fe8 <__retarget_lock_init_recursive>:
 8006fe8:	4770      	bx	lr

08006fea <__retarget_lock_acquire_recursive>:
 8006fea:	4770      	bx	lr

08006fec <__retarget_lock_release_recursive>:
 8006fec:	4770      	bx	lr

08006fee <memcpy>:
 8006fee:	440a      	add	r2, r1
 8006ff0:	4291      	cmp	r1, r2
 8006ff2:	f100 33ff 	add.w	r3, r0, #4294967295
 8006ff6:	d100      	bne.n	8006ffa <memcpy+0xc>
 8006ff8:	4770      	bx	lr
 8006ffa:	b510      	push	{r4, lr}
 8006ffc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007000:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007004:	4291      	cmp	r1, r2
 8007006:	d1f9      	bne.n	8006ffc <memcpy+0xe>
 8007008:	bd10      	pop	{r4, pc}
	...

0800700c <_free_r>:
 800700c:	b538      	push	{r3, r4, r5, lr}
 800700e:	4605      	mov	r5, r0
 8007010:	2900      	cmp	r1, #0
 8007012:	d041      	beq.n	8007098 <_free_r+0x8c>
 8007014:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007018:	1f0c      	subs	r4, r1, #4
 800701a:	2b00      	cmp	r3, #0
 800701c:	bfb8      	it	lt
 800701e:	18e4      	addlt	r4, r4, r3
 8007020:	f000 f8e0 	bl	80071e4 <__malloc_lock>
 8007024:	4a1d      	ldr	r2, [pc, #116]	@ (800709c <_free_r+0x90>)
 8007026:	6813      	ldr	r3, [r2, #0]
 8007028:	b933      	cbnz	r3, 8007038 <_free_r+0x2c>
 800702a:	6063      	str	r3, [r4, #4]
 800702c:	6014      	str	r4, [r2, #0]
 800702e:	4628      	mov	r0, r5
 8007030:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007034:	f000 b8dc 	b.w	80071f0 <__malloc_unlock>
 8007038:	42a3      	cmp	r3, r4
 800703a:	d908      	bls.n	800704e <_free_r+0x42>
 800703c:	6820      	ldr	r0, [r4, #0]
 800703e:	1821      	adds	r1, r4, r0
 8007040:	428b      	cmp	r3, r1
 8007042:	bf01      	itttt	eq
 8007044:	6819      	ldreq	r1, [r3, #0]
 8007046:	685b      	ldreq	r3, [r3, #4]
 8007048:	1809      	addeq	r1, r1, r0
 800704a:	6021      	streq	r1, [r4, #0]
 800704c:	e7ed      	b.n	800702a <_free_r+0x1e>
 800704e:	461a      	mov	r2, r3
 8007050:	685b      	ldr	r3, [r3, #4]
 8007052:	b10b      	cbz	r3, 8007058 <_free_r+0x4c>
 8007054:	42a3      	cmp	r3, r4
 8007056:	d9fa      	bls.n	800704e <_free_r+0x42>
 8007058:	6811      	ldr	r1, [r2, #0]
 800705a:	1850      	adds	r0, r2, r1
 800705c:	42a0      	cmp	r0, r4
 800705e:	d10b      	bne.n	8007078 <_free_r+0x6c>
 8007060:	6820      	ldr	r0, [r4, #0]
 8007062:	4401      	add	r1, r0
 8007064:	1850      	adds	r0, r2, r1
 8007066:	4283      	cmp	r3, r0
 8007068:	6011      	str	r1, [r2, #0]
 800706a:	d1e0      	bne.n	800702e <_free_r+0x22>
 800706c:	6818      	ldr	r0, [r3, #0]
 800706e:	685b      	ldr	r3, [r3, #4]
 8007070:	6053      	str	r3, [r2, #4]
 8007072:	4408      	add	r0, r1
 8007074:	6010      	str	r0, [r2, #0]
 8007076:	e7da      	b.n	800702e <_free_r+0x22>
 8007078:	d902      	bls.n	8007080 <_free_r+0x74>
 800707a:	230c      	movs	r3, #12
 800707c:	602b      	str	r3, [r5, #0]
 800707e:	e7d6      	b.n	800702e <_free_r+0x22>
 8007080:	6820      	ldr	r0, [r4, #0]
 8007082:	1821      	adds	r1, r4, r0
 8007084:	428b      	cmp	r3, r1
 8007086:	bf04      	itt	eq
 8007088:	6819      	ldreq	r1, [r3, #0]
 800708a:	685b      	ldreq	r3, [r3, #4]
 800708c:	6063      	str	r3, [r4, #4]
 800708e:	bf04      	itt	eq
 8007090:	1809      	addeq	r1, r1, r0
 8007092:	6021      	streq	r1, [r4, #0]
 8007094:	6054      	str	r4, [r2, #4]
 8007096:	e7ca      	b.n	800702e <_free_r+0x22>
 8007098:	bd38      	pop	{r3, r4, r5, pc}
 800709a:	bf00      	nop
 800709c:	20004878 	.word	0x20004878

080070a0 <sbrk_aligned>:
 80070a0:	b570      	push	{r4, r5, r6, lr}
 80070a2:	4e0f      	ldr	r6, [pc, #60]	@ (80070e0 <sbrk_aligned+0x40>)
 80070a4:	460c      	mov	r4, r1
 80070a6:	6831      	ldr	r1, [r6, #0]
 80070a8:	4605      	mov	r5, r0
 80070aa:	b911      	cbnz	r1, 80070b2 <sbrk_aligned+0x12>
 80070ac:	f000 fe16 	bl	8007cdc <_sbrk_r>
 80070b0:	6030      	str	r0, [r6, #0]
 80070b2:	4621      	mov	r1, r4
 80070b4:	4628      	mov	r0, r5
 80070b6:	f000 fe11 	bl	8007cdc <_sbrk_r>
 80070ba:	1c43      	adds	r3, r0, #1
 80070bc:	d103      	bne.n	80070c6 <sbrk_aligned+0x26>
 80070be:	f04f 34ff 	mov.w	r4, #4294967295
 80070c2:	4620      	mov	r0, r4
 80070c4:	bd70      	pop	{r4, r5, r6, pc}
 80070c6:	1cc4      	adds	r4, r0, #3
 80070c8:	f024 0403 	bic.w	r4, r4, #3
 80070cc:	42a0      	cmp	r0, r4
 80070ce:	d0f8      	beq.n	80070c2 <sbrk_aligned+0x22>
 80070d0:	1a21      	subs	r1, r4, r0
 80070d2:	4628      	mov	r0, r5
 80070d4:	f000 fe02 	bl	8007cdc <_sbrk_r>
 80070d8:	3001      	adds	r0, #1
 80070da:	d1f2      	bne.n	80070c2 <sbrk_aligned+0x22>
 80070dc:	e7ef      	b.n	80070be <sbrk_aligned+0x1e>
 80070de:	bf00      	nop
 80070e0:	20004874 	.word	0x20004874

080070e4 <_malloc_r>:
 80070e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80070e8:	1ccd      	adds	r5, r1, #3
 80070ea:	f025 0503 	bic.w	r5, r5, #3
 80070ee:	3508      	adds	r5, #8
 80070f0:	2d0c      	cmp	r5, #12
 80070f2:	bf38      	it	cc
 80070f4:	250c      	movcc	r5, #12
 80070f6:	2d00      	cmp	r5, #0
 80070f8:	4606      	mov	r6, r0
 80070fa:	db01      	blt.n	8007100 <_malloc_r+0x1c>
 80070fc:	42a9      	cmp	r1, r5
 80070fe:	d904      	bls.n	800710a <_malloc_r+0x26>
 8007100:	230c      	movs	r3, #12
 8007102:	6033      	str	r3, [r6, #0]
 8007104:	2000      	movs	r0, #0
 8007106:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800710a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80071e0 <_malloc_r+0xfc>
 800710e:	f000 f869 	bl	80071e4 <__malloc_lock>
 8007112:	f8d8 3000 	ldr.w	r3, [r8]
 8007116:	461c      	mov	r4, r3
 8007118:	bb44      	cbnz	r4, 800716c <_malloc_r+0x88>
 800711a:	4629      	mov	r1, r5
 800711c:	4630      	mov	r0, r6
 800711e:	f7ff ffbf 	bl	80070a0 <sbrk_aligned>
 8007122:	1c43      	adds	r3, r0, #1
 8007124:	4604      	mov	r4, r0
 8007126:	d158      	bne.n	80071da <_malloc_r+0xf6>
 8007128:	f8d8 4000 	ldr.w	r4, [r8]
 800712c:	4627      	mov	r7, r4
 800712e:	2f00      	cmp	r7, #0
 8007130:	d143      	bne.n	80071ba <_malloc_r+0xd6>
 8007132:	2c00      	cmp	r4, #0
 8007134:	d04b      	beq.n	80071ce <_malloc_r+0xea>
 8007136:	6823      	ldr	r3, [r4, #0]
 8007138:	4639      	mov	r1, r7
 800713a:	4630      	mov	r0, r6
 800713c:	eb04 0903 	add.w	r9, r4, r3
 8007140:	f000 fdcc 	bl	8007cdc <_sbrk_r>
 8007144:	4581      	cmp	r9, r0
 8007146:	d142      	bne.n	80071ce <_malloc_r+0xea>
 8007148:	6821      	ldr	r1, [r4, #0]
 800714a:	1a6d      	subs	r5, r5, r1
 800714c:	4629      	mov	r1, r5
 800714e:	4630      	mov	r0, r6
 8007150:	f7ff ffa6 	bl	80070a0 <sbrk_aligned>
 8007154:	3001      	adds	r0, #1
 8007156:	d03a      	beq.n	80071ce <_malloc_r+0xea>
 8007158:	6823      	ldr	r3, [r4, #0]
 800715a:	442b      	add	r3, r5
 800715c:	6023      	str	r3, [r4, #0]
 800715e:	f8d8 3000 	ldr.w	r3, [r8]
 8007162:	685a      	ldr	r2, [r3, #4]
 8007164:	bb62      	cbnz	r2, 80071c0 <_malloc_r+0xdc>
 8007166:	f8c8 7000 	str.w	r7, [r8]
 800716a:	e00f      	b.n	800718c <_malloc_r+0xa8>
 800716c:	6822      	ldr	r2, [r4, #0]
 800716e:	1b52      	subs	r2, r2, r5
 8007170:	d420      	bmi.n	80071b4 <_malloc_r+0xd0>
 8007172:	2a0b      	cmp	r2, #11
 8007174:	d917      	bls.n	80071a6 <_malloc_r+0xc2>
 8007176:	1961      	adds	r1, r4, r5
 8007178:	42a3      	cmp	r3, r4
 800717a:	6025      	str	r5, [r4, #0]
 800717c:	bf18      	it	ne
 800717e:	6059      	strne	r1, [r3, #4]
 8007180:	6863      	ldr	r3, [r4, #4]
 8007182:	bf08      	it	eq
 8007184:	f8c8 1000 	streq.w	r1, [r8]
 8007188:	5162      	str	r2, [r4, r5]
 800718a:	604b      	str	r3, [r1, #4]
 800718c:	4630      	mov	r0, r6
 800718e:	f000 f82f 	bl	80071f0 <__malloc_unlock>
 8007192:	f104 000b 	add.w	r0, r4, #11
 8007196:	1d23      	adds	r3, r4, #4
 8007198:	f020 0007 	bic.w	r0, r0, #7
 800719c:	1ac2      	subs	r2, r0, r3
 800719e:	bf1c      	itt	ne
 80071a0:	1a1b      	subne	r3, r3, r0
 80071a2:	50a3      	strne	r3, [r4, r2]
 80071a4:	e7af      	b.n	8007106 <_malloc_r+0x22>
 80071a6:	6862      	ldr	r2, [r4, #4]
 80071a8:	42a3      	cmp	r3, r4
 80071aa:	bf0c      	ite	eq
 80071ac:	f8c8 2000 	streq.w	r2, [r8]
 80071b0:	605a      	strne	r2, [r3, #4]
 80071b2:	e7eb      	b.n	800718c <_malloc_r+0xa8>
 80071b4:	4623      	mov	r3, r4
 80071b6:	6864      	ldr	r4, [r4, #4]
 80071b8:	e7ae      	b.n	8007118 <_malloc_r+0x34>
 80071ba:	463c      	mov	r4, r7
 80071bc:	687f      	ldr	r7, [r7, #4]
 80071be:	e7b6      	b.n	800712e <_malloc_r+0x4a>
 80071c0:	461a      	mov	r2, r3
 80071c2:	685b      	ldr	r3, [r3, #4]
 80071c4:	42a3      	cmp	r3, r4
 80071c6:	d1fb      	bne.n	80071c0 <_malloc_r+0xdc>
 80071c8:	2300      	movs	r3, #0
 80071ca:	6053      	str	r3, [r2, #4]
 80071cc:	e7de      	b.n	800718c <_malloc_r+0xa8>
 80071ce:	230c      	movs	r3, #12
 80071d0:	6033      	str	r3, [r6, #0]
 80071d2:	4630      	mov	r0, r6
 80071d4:	f000 f80c 	bl	80071f0 <__malloc_unlock>
 80071d8:	e794      	b.n	8007104 <_malloc_r+0x20>
 80071da:	6005      	str	r5, [r0, #0]
 80071dc:	e7d6      	b.n	800718c <_malloc_r+0xa8>
 80071de:	bf00      	nop
 80071e0:	20004878 	.word	0x20004878

080071e4 <__malloc_lock>:
 80071e4:	4801      	ldr	r0, [pc, #4]	@ (80071ec <__malloc_lock+0x8>)
 80071e6:	f7ff bf00 	b.w	8006fea <__retarget_lock_acquire_recursive>
 80071ea:	bf00      	nop
 80071ec:	20004870 	.word	0x20004870

080071f0 <__malloc_unlock>:
 80071f0:	4801      	ldr	r0, [pc, #4]	@ (80071f8 <__malloc_unlock+0x8>)
 80071f2:	f7ff befb 	b.w	8006fec <__retarget_lock_release_recursive>
 80071f6:	bf00      	nop
 80071f8:	20004870 	.word	0x20004870

080071fc <__ssputs_r>:
 80071fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007200:	688e      	ldr	r6, [r1, #8]
 8007202:	461f      	mov	r7, r3
 8007204:	42be      	cmp	r6, r7
 8007206:	680b      	ldr	r3, [r1, #0]
 8007208:	4682      	mov	sl, r0
 800720a:	460c      	mov	r4, r1
 800720c:	4690      	mov	r8, r2
 800720e:	d82d      	bhi.n	800726c <__ssputs_r+0x70>
 8007210:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007214:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007218:	d026      	beq.n	8007268 <__ssputs_r+0x6c>
 800721a:	6965      	ldr	r5, [r4, #20]
 800721c:	6909      	ldr	r1, [r1, #16]
 800721e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007222:	eba3 0901 	sub.w	r9, r3, r1
 8007226:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800722a:	1c7b      	adds	r3, r7, #1
 800722c:	444b      	add	r3, r9
 800722e:	106d      	asrs	r5, r5, #1
 8007230:	429d      	cmp	r5, r3
 8007232:	bf38      	it	cc
 8007234:	461d      	movcc	r5, r3
 8007236:	0553      	lsls	r3, r2, #21
 8007238:	d527      	bpl.n	800728a <__ssputs_r+0x8e>
 800723a:	4629      	mov	r1, r5
 800723c:	f7ff ff52 	bl	80070e4 <_malloc_r>
 8007240:	4606      	mov	r6, r0
 8007242:	b360      	cbz	r0, 800729e <__ssputs_r+0xa2>
 8007244:	6921      	ldr	r1, [r4, #16]
 8007246:	464a      	mov	r2, r9
 8007248:	f7ff fed1 	bl	8006fee <memcpy>
 800724c:	89a3      	ldrh	r3, [r4, #12]
 800724e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007252:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007256:	81a3      	strh	r3, [r4, #12]
 8007258:	6126      	str	r6, [r4, #16]
 800725a:	6165      	str	r5, [r4, #20]
 800725c:	444e      	add	r6, r9
 800725e:	eba5 0509 	sub.w	r5, r5, r9
 8007262:	6026      	str	r6, [r4, #0]
 8007264:	60a5      	str	r5, [r4, #8]
 8007266:	463e      	mov	r6, r7
 8007268:	42be      	cmp	r6, r7
 800726a:	d900      	bls.n	800726e <__ssputs_r+0x72>
 800726c:	463e      	mov	r6, r7
 800726e:	6820      	ldr	r0, [r4, #0]
 8007270:	4632      	mov	r2, r6
 8007272:	4641      	mov	r1, r8
 8007274:	f000 fcf6 	bl	8007c64 <memmove>
 8007278:	68a3      	ldr	r3, [r4, #8]
 800727a:	1b9b      	subs	r3, r3, r6
 800727c:	60a3      	str	r3, [r4, #8]
 800727e:	6823      	ldr	r3, [r4, #0]
 8007280:	4433      	add	r3, r6
 8007282:	6023      	str	r3, [r4, #0]
 8007284:	2000      	movs	r0, #0
 8007286:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800728a:	462a      	mov	r2, r5
 800728c:	f000 fd36 	bl	8007cfc <_realloc_r>
 8007290:	4606      	mov	r6, r0
 8007292:	2800      	cmp	r0, #0
 8007294:	d1e0      	bne.n	8007258 <__ssputs_r+0x5c>
 8007296:	6921      	ldr	r1, [r4, #16]
 8007298:	4650      	mov	r0, sl
 800729a:	f7ff feb7 	bl	800700c <_free_r>
 800729e:	230c      	movs	r3, #12
 80072a0:	f8ca 3000 	str.w	r3, [sl]
 80072a4:	89a3      	ldrh	r3, [r4, #12]
 80072a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80072aa:	81a3      	strh	r3, [r4, #12]
 80072ac:	f04f 30ff 	mov.w	r0, #4294967295
 80072b0:	e7e9      	b.n	8007286 <__ssputs_r+0x8a>
	...

080072b4 <_svfiprintf_r>:
 80072b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072b8:	4698      	mov	r8, r3
 80072ba:	898b      	ldrh	r3, [r1, #12]
 80072bc:	061b      	lsls	r3, r3, #24
 80072be:	b09d      	sub	sp, #116	@ 0x74
 80072c0:	4607      	mov	r7, r0
 80072c2:	460d      	mov	r5, r1
 80072c4:	4614      	mov	r4, r2
 80072c6:	d510      	bpl.n	80072ea <_svfiprintf_r+0x36>
 80072c8:	690b      	ldr	r3, [r1, #16]
 80072ca:	b973      	cbnz	r3, 80072ea <_svfiprintf_r+0x36>
 80072cc:	2140      	movs	r1, #64	@ 0x40
 80072ce:	f7ff ff09 	bl	80070e4 <_malloc_r>
 80072d2:	6028      	str	r0, [r5, #0]
 80072d4:	6128      	str	r0, [r5, #16]
 80072d6:	b930      	cbnz	r0, 80072e6 <_svfiprintf_r+0x32>
 80072d8:	230c      	movs	r3, #12
 80072da:	603b      	str	r3, [r7, #0]
 80072dc:	f04f 30ff 	mov.w	r0, #4294967295
 80072e0:	b01d      	add	sp, #116	@ 0x74
 80072e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072e6:	2340      	movs	r3, #64	@ 0x40
 80072e8:	616b      	str	r3, [r5, #20]
 80072ea:	2300      	movs	r3, #0
 80072ec:	9309      	str	r3, [sp, #36]	@ 0x24
 80072ee:	2320      	movs	r3, #32
 80072f0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80072f4:	f8cd 800c 	str.w	r8, [sp, #12]
 80072f8:	2330      	movs	r3, #48	@ 0x30
 80072fa:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007498 <_svfiprintf_r+0x1e4>
 80072fe:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007302:	f04f 0901 	mov.w	r9, #1
 8007306:	4623      	mov	r3, r4
 8007308:	469a      	mov	sl, r3
 800730a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800730e:	b10a      	cbz	r2, 8007314 <_svfiprintf_r+0x60>
 8007310:	2a25      	cmp	r2, #37	@ 0x25
 8007312:	d1f9      	bne.n	8007308 <_svfiprintf_r+0x54>
 8007314:	ebba 0b04 	subs.w	fp, sl, r4
 8007318:	d00b      	beq.n	8007332 <_svfiprintf_r+0x7e>
 800731a:	465b      	mov	r3, fp
 800731c:	4622      	mov	r2, r4
 800731e:	4629      	mov	r1, r5
 8007320:	4638      	mov	r0, r7
 8007322:	f7ff ff6b 	bl	80071fc <__ssputs_r>
 8007326:	3001      	adds	r0, #1
 8007328:	f000 80a7 	beq.w	800747a <_svfiprintf_r+0x1c6>
 800732c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800732e:	445a      	add	r2, fp
 8007330:	9209      	str	r2, [sp, #36]	@ 0x24
 8007332:	f89a 3000 	ldrb.w	r3, [sl]
 8007336:	2b00      	cmp	r3, #0
 8007338:	f000 809f 	beq.w	800747a <_svfiprintf_r+0x1c6>
 800733c:	2300      	movs	r3, #0
 800733e:	f04f 32ff 	mov.w	r2, #4294967295
 8007342:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007346:	f10a 0a01 	add.w	sl, sl, #1
 800734a:	9304      	str	r3, [sp, #16]
 800734c:	9307      	str	r3, [sp, #28]
 800734e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007352:	931a      	str	r3, [sp, #104]	@ 0x68
 8007354:	4654      	mov	r4, sl
 8007356:	2205      	movs	r2, #5
 8007358:	f814 1b01 	ldrb.w	r1, [r4], #1
 800735c:	484e      	ldr	r0, [pc, #312]	@ (8007498 <_svfiprintf_r+0x1e4>)
 800735e:	f7f8 ff57 	bl	8000210 <memchr>
 8007362:	9a04      	ldr	r2, [sp, #16]
 8007364:	b9d8      	cbnz	r0, 800739e <_svfiprintf_r+0xea>
 8007366:	06d0      	lsls	r0, r2, #27
 8007368:	bf44      	itt	mi
 800736a:	2320      	movmi	r3, #32
 800736c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007370:	0711      	lsls	r1, r2, #28
 8007372:	bf44      	itt	mi
 8007374:	232b      	movmi	r3, #43	@ 0x2b
 8007376:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800737a:	f89a 3000 	ldrb.w	r3, [sl]
 800737e:	2b2a      	cmp	r3, #42	@ 0x2a
 8007380:	d015      	beq.n	80073ae <_svfiprintf_r+0xfa>
 8007382:	9a07      	ldr	r2, [sp, #28]
 8007384:	4654      	mov	r4, sl
 8007386:	2000      	movs	r0, #0
 8007388:	f04f 0c0a 	mov.w	ip, #10
 800738c:	4621      	mov	r1, r4
 800738e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007392:	3b30      	subs	r3, #48	@ 0x30
 8007394:	2b09      	cmp	r3, #9
 8007396:	d94b      	bls.n	8007430 <_svfiprintf_r+0x17c>
 8007398:	b1b0      	cbz	r0, 80073c8 <_svfiprintf_r+0x114>
 800739a:	9207      	str	r2, [sp, #28]
 800739c:	e014      	b.n	80073c8 <_svfiprintf_r+0x114>
 800739e:	eba0 0308 	sub.w	r3, r0, r8
 80073a2:	fa09 f303 	lsl.w	r3, r9, r3
 80073a6:	4313      	orrs	r3, r2
 80073a8:	9304      	str	r3, [sp, #16]
 80073aa:	46a2      	mov	sl, r4
 80073ac:	e7d2      	b.n	8007354 <_svfiprintf_r+0xa0>
 80073ae:	9b03      	ldr	r3, [sp, #12]
 80073b0:	1d19      	adds	r1, r3, #4
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	9103      	str	r1, [sp, #12]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	bfbb      	ittet	lt
 80073ba:	425b      	neglt	r3, r3
 80073bc:	f042 0202 	orrlt.w	r2, r2, #2
 80073c0:	9307      	strge	r3, [sp, #28]
 80073c2:	9307      	strlt	r3, [sp, #28]
 80073c4:	bfb8      	it	lt
 80073c6:	9204      	strlt	r2, [sp, #16]
 80073c8:	7823      	ldrb	r3, [r4, #0]
 80073ca:	2b2e      	cmp	r3, #46	@ 0x2e
 80073cc:	d10a      	bne.n	80073e4 <_svfiprintf_r+0x130>
 80073ce:	7863      	ldrb	r3, [r4, #1]
 80073d0:	2b2a      	cmp	r3, #42	@ 0x2a
 80073d2:	d132      	bne.n	800743a <_svfiprintf_r+0x186>
 80073d4:	9b03      	ldr	r3, [sp, #12]
 80073d6:	1d1a      	adds	r2, r3, #4
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	9203      	str	r2, [sp, #12]
 80073dc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80073e0:	3402      	adds	r4, #2
 80073e2:	9305      	str	r3, [sp, #20]
 80073e4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80074a8 <_svfiprintf_r+0x1f4>
 80073e8:	7821      	ldrb	r1, [r4, #0]
 80073ea:	2203      	movs	r2, #3
 80073ec:	4650      	mov	r0, sl
 80073ee:	f7f8 ff0f 	bl	8000210 <memchr>
 80073f2:	b138      	cbz	r0, 8007404 <_svfiprintf_r+0x150>
 80073f4:	9b04      	ldr	r3, [sp, #16]
 80073f6:	eba0 000a 	sub.w	r0, r0, sl
 80073fa:	2240      	movs	r2, #64	@ 0x40
 80073fc:	4082      	lsls	r2, r0
 80073fe:	4313      	orrs	r3, r2
 8007400:	3401      	adds	r4, #1
 8007402:	9304      	str	r3, [sp, #16]
 8007404:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007408:	4824      	ldr	r0, [pc, #144]	@ (800749c <_svfiprintf_r+0x1e8>)
 800740a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800740e:	2206      	movs	r2, #6
 8007410:	f7f8 fefe 	bl	8000210 <memchr>
 8007414:	2800      	cmp	r0, #0
 8007416:	d036      	beq.n	8007486 <_svfiprintf_r+0x1d2>
 8007418:	4b21      	ldr	r3, [pc, #132]	@ (80074a0 <_svfiprintf_r+0x1ec>)
 800741a:	bb1b      	cbnz	r3, 8007464 <_svfiprintf_r+0x1b0>
 800741c:	9b03      	ldr	r3, [sp, #12]
 800741e:	3307      	adds	r3, #7
 8007420:	f023 0307 	bic.w	r3, r3, #7
 8007424:	3308      	adds	r3, #8
 8007426:	9303      	str	r3, [sp, #12]
 8007428:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800742a:	4433      	add	r3, r6
 800742c:	9309      	str	r3, [sp, #36]	@ 0x24
 800742e:	e76a      	b.n	8007306 <_svfiprintf_r+0x52>
 8007430:	fb0c 3202 	mla	r2, ip, r2, r3
 8007434:	460c      	mov	r4, r1
 8007436:	2001      	movs	r0, #1
 8007438:	e7a8      	b.n	800738c <_svfiprintf_r+0xd8>
 800743a:	2300      	movs	r3, #0
 800743c:	3401      	adds	r4, #1
 800743e:	9305      	str	r3, [sp, #20]
 8007440:	4619      	mov	r1, r3
 8007442:	f04f 0c0a 	mov.w	ip, #10
 8007446:	4620      	mov	r0, r4
 8007448:	f810 2b01 	ldrb.w	r2, [r0], #1
 800744c:	3a30      	subs	r2, #48	@ 0x30
 800744e:	2a09      	cmp	r2, #9
 8007450:	d903      	bls.n	800745a <_svfiprintf_r+0x1a6>
 8007452:	2b00      	cmp	r3, #0
 8007454:	d0c6      	beq.n	80073e4 <_svfiprintf_r+0x130>
 8007456:	9105      	str	r1, [sp, #20]
 8007458:	e7c4      	b.n	80073e4 <_svfiprintf_r+0x130>
 800745a:	fb0c 2101 	mla	r1, ip, r1, r2
 800745e:	4604      	mov	r4, r0
 8007460:	2301      	movs	r3, #1
 8007462:	e7f0      	b.n	8007446 <_svfiprintf_r+0x192>
 8007464:	ab03      	add	r3, sp, #12
 8007466:	9300      	str	r3, [sp, #0]
 8007468:	462a      	mov	r2, r5
 800746a:	4b0e      	ldr	r3, [pc, #56]	@ (80074a4 <_svfiprintf_r+0x1f0>)
 800746c:	a904      	add	r1, sp, #16
 800746e:	4638      	mov	r0, r7
 8007470:	f3af 8000 	nop.w
 8007474:	1c42      	adds	r2, r0, #1
 8007476:	4606      	mov	r6, r0
 8007478:	d1d6      	bne.n	8007428 <_svfiprintf_r+0x174>
 800747a:	89ab      	ldrh	r3, [r5, #12]
 800747c:	065b      	lsls	r3, r3, #25
 800747e:	f53f af2d 	bmi.w	80072dc <_svfiprintf_r+0x28>
 8007482:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007484:	e72c      	b.n	80072e0 <_svfiprintf_r+0x2c>
 8007486:	ab03      	add	r3, sp, #12
 8007488:	9300      	str	r3, [sp, #0]
 800748a:	462a      	mov	r2, r5
 800748c:	4b05      	ldr	r3, [pc, #20]	@ (80074a4 <_svfiprintf_r+0x1f0>)
 800748e:	a904      	add	r1, sp, #16
 8007490:	4638      	mov	r0, r7
 8007492:	f000 f9bb 	bl	800780c <_printf_i>
 8007496:	e7ed      	b.n	8007474 <_svfiprintf_r+0x1c0>
 8007498:	08008298 	.word	0x08008298
 800749c:	080082a2 	.word	0x080082a2
 80074a0:	00000000 	.word	0x00000000
 80074a4:	080071fd 	.word	0x080071fd
 80074a8:	0800829e 	.word	0x0800829e

080074ac <__sfputc_r>:
 80074ac:	6893      	ldr	r3, [r2, #8]
 80074ae:	3b01      	subs	r3, #1
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	b410      	push	{r4}
 80074b4:	6093      	str	r3, [r2, #8]
 80074b6:	da08      	bge.n	80074ca <__sfputc_r+0x1e>
 80074b8:	6994      	ldr	r4, [r2, #24]
 80074ba:	42a3      	cmp	r3, r4
 80074bc:	db01      	blt.n	80074c2 <__sfputc_r+0x16>
 80074be:	290a      	cmp	r1, #10
 80074c0:	d103      	bne.n	80074ca <__sfputc_r+0x1e>
 80074c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80074c6:	f7ff bc6e 	b.w	8006da6 <__swbuf_r>
 80074ca:	6813      	ldr	r3, [r2, #0]
 80074cc:	1c58      	adds	r0, r3, #1
 80074ce:	6010      	str	r0, [r2, #0]
 80074d0:	7019      	strb	r1, [r3, #0]
 80074d2:	4608      	mov	r0, r1
 80074d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80074d8:	4770      	bx	lr

080074da <__sfputs_r>:
 80074da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074dc:	4606      	mov	r6, r0
 80074de:	460f      	mov	r7, r1
 80074e0:	4614      	mov	r4, r2
 80074e2:	18d5      	adds	r5, r2, r3
 80074e4:	42ac      	cmp	r4, r5
 80074e6:	d101      	bne.n	80074ec <__sfputs_r+0x12>
 80074e8:	2000      	movs	r0, #0
 80074ea:	e007      	b.n	80074fc <__sfputs_r+0x22>
 80074ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80074f0:	463a      	mov	r2, r7
 80074f2:	4630      	mov	r0, r6
 80074f4:	f7ff ffda 	bl	80074ac <__sfputc_r>
 80074f8:	1c43      	adds	r3, r0, #1
 80074fa:	d1f3      	bne.n	80074e4 <__sfputs_r+0xa>
 80074fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007500 <_vfiprintf_r>:
 8007500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007504:	460d      	mov	r5, r1
 8007506:	b09d      	sub	sp, #116	@ 0x74
 8007508:	4614      	mov	r4, r2
 800750a:	4698      	mov	r8, r3
 800750c:	4606      	mov	r6, r0
 800750e:	b118      	cbz	r0, 8007518 <_vfiprintf_r+0x18>
 8007510:	6a03      	ldr	r3, [r0, #32]
 8007512:	b90b      	cbnz	r3, 8007518 <_vfiprintf_r+0x18>
 8007514:	f7ff fb28 	bl	8006b68 <__sinit>
 8007518:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800751a:	07d9      	lsls	r1, r3, #31
 800751c:	d405      	bmi.n	800752a <_vfiprintf_r+0x2a>
 800751e:	89ab      	ldrh	r3, [r5, #12]
 8007520:	059a      	lsls	r2, r3, #22
 8007522:	d402      	bmi.n	800752a <_vfiprintf_r+0x2a>
 8007524:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007526:	f7ff fd60 	bl	8006fea <__retarget_lock_acquire_recursive>
 800752a:	89ab      	ldrh	r3, [r5, #12]
 800752c:	071b      	lsls	r3, r3, #28
 800752e:	d501      	bpl.n	8007534 <_vfiprintf_r+0x34>
 8007530:	692b      	ldr	r3, [r5, #16]
 8007532:	b99b      	cbnz	r3, 800755c <_vfiprintf_r+0x5c>
 8007534:	4629      	mov	r1, r5
 8007536:	4630      	mov	r0, r6
 8007538:	f7ff fc74 	bl	8006e24 <__swsetup_r>
 800753c:	b170      	cbz	r0, 800755c <_vfiprintf_r+0x5c>
 800753e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007540:	07dc      	lsls	r4, r3, #31
 8007542:	d504      	bpl.n	800754e <_vfiprintf_r+0x4e>
 8007544:	f04f 30ff 	mov.w	r0, #4294967295
 8007548:	b01d      	add	sp, #116	@ 0x74
 800754a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800754e:	89ab      	ldrh	r3, [r5, #12]
 8007550:	0598      	lsls	r0, r3, #22
 8007552:	d4f7      	bmi.n	8007544 <_vfiprintf_r+0x44>
 8007554:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007556:	f7ff fd49 	bl	8006fec <__retarget_lock_release_recursive>
 800755a:	e7f3      	b.n	8007544 <_vfiprintf_r+0x44>
 800755c:	2300      	movs	r3, #0
 800755e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007560:	2320      	movs	r3, #32
 8007562:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007566:	f8cd 800c 	str.w	r8, [sp, #12]
 800756a:	2330      	movs	r3, #48	@ 0x30
 800756c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800771c <_vfiprintf_r+0x21c>
 8007570:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007574:	f04f 0901 	mov.w	r9, #1
 8007578:	4623      	mov	r3, r4
 800757a:	469a      	mov	sl, r3
 800757c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007580:	b10a      	cbz	r2, 8007586 <_vfiprintf_r+0x86>
 8007582:	2a25      	cmp	r2, #37	@ 0x25
 8007584:	d1f9      	bne.n	800757a <_vfiprintf_r+0x7a>
 8007586:	ebba 0b04 	subs.w	fp, sl, r4
 800758a:	d00b      	beq.n	80075a4 <_vfiprintf_r+0xa4>
 800758c:	465b      	mov	r3, fp
 800758e:	4622      	mov	r2, r4
 8007590:	4629      	mov	r1, r5
 8007592:	4630      	mov	r0, r6
 8007594:	f7ff ffa1 	bl	80074da <__sfputs_r>
 8007598:	3001      	adds	r0, #1
 800759a:	f000 80a7 	beq.w	80076ec <_vfiprintf_r+0x1ec>
 800759e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80075a0:	445a      	add	r2, fp
 80075a2:	9209      	str	r2, [sp, #36]	@ 0x24
 80075a4:	f89a 3000 	ldrb.w	r3, [sl]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	f000 809f 	beq.w	80076ec <_vfiprintf_r+0x1ec>
 80075ae:	2300      	movs	r3, #0
 80075b0:	f04f 32ff 	mov.w	r2, #4294967295
 80075b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80075b8:	f10a 0a01 	add.w	sl, sl, #1
 80075bc:	9304      	str	r3, [sp, #16]
 80075be:	9307      	str	r3, [sp, #28]
 80075c0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80075c4:	931a      	str	r3, [sp, #104]	@ 0x68
 80075c6:	4654      	mov	r4, sl
 80075c8:	2205      	movs	r2, #5
 80075ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80075ce:	4853      	ldr	r0, [pc, #332]	@ (800771c <_vfiprintf_r+0x21c>)
 80075d0:	f7f8 fe1e 	bl	8000210 <memchr>
 80075d4:	9a04      	ldr	r2, [sp, #16]
 80075d6:	b9d8      	cbnz	r0, 8007610 <_vfiprintf_r+0x110>
 80075d8:	06d1      	lsls	r1, r2, #27
 80075da:	bf44      	itt	mi
 80075dc:	2320      	movmi	r3, #32
 80075de:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80075e2:	0713      	lsls	r3, r2, #28
 80075e4:	bf44      	itt	mi
 80075e6:	232b      	movmi	r3, #43	@ 0x2b
 80075e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80075ec:	f89a 3000 	ldrb.w	r3, [sl]
 80075f0:	2b2a      	cmp	r3, #42	@ 0x2a
 80075f2:	d015      	beq.n	8007620 <_vfiprintf_r+0x120>
 80075f4:	9a07      	ldr	r2, [sp, #28]
 80075f6:	4654      	mov	r4, sl
 80075f8:	2000      	movs	r0, #0
 80075fa:	f04f 0c0a 	mov.w	ip, #10
 80075fe:	4621      	mov	r1, r4
 8007600:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007604:	3b30      	subs	r3, #48	@ 0x30
 8007606:	2b09      	cmp	r3, #9
 8007608:	d94b      	bls.n	80076a2 <_vfiprintf_r+0x1a2>
 800760a:	b1b0      	cbz	r0, 800763a <_vfiprintf_r+0x13a>
 800760c:	9207      	str	r2, [sp, #28]
 800760e:	e014      	b.n	800763a <_vfiprintf_r+0x13a>
 8007610:	eba0 0308 	sub.w	r3, r0, r8
 8007614:	fa09 f303 	lsl.w	r3, r9, r3
 8007618:	4313      	orrs	r3, r2
 800761a:	9304      	str	r3, [sp, #16]
 800761c:	46a2      	mov	sl, r4
 800761e:	e7d2      	b.n	80075c6 <_vfiprintf_r+0xc6>
 8007620:	9b03      	ldr	r3, [sp, #12]
 8007622:	1d19      	adds	r1, r3, #4
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	9103      	str	r1, [sp, #12]
 8007628:	2b00      	cmp	r3, #0
 800762a:	bfbb      	ittet	lt
 800762c:	425b      	neglt	r3, r3
 800762e:	f042 0202 	orrlt.w	r2, r2, #2
 8007632:	9307      	strge	r3, [sp, #28]
 8007634:	9307      	strlt	r3, [sp, #28]
 8007636:	bfb8      	it	lt
 8007638:	9204      	strlt	r2, [sp, #16]
 800763a:	7823      	ldrb	r3, [r4, #0]
 800763c:	2b2e      	cmp	r3, #46	@ 0x2e
 800763e:	d10a      	bne.n	8007656 <_vfiprintf_r+0x156>
 8007640:	7863      	ldrb	r3, [r4, #1]
 8007642:	2b2a      	cmp	r3, #42	@ 0x2a
 8007644:	d132      	bne.n	80076ac <_vfiprintf_r+0x1ac>
 8007646:	9b03      	ldr	r3, [sp, #12]
 8007648:	1d1a      	adds	r2, r3, #4
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	9203      	str	r2, [sp, #12]
 800764e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007652:	3402      	adds	r4, #2
 8007654:	9305      	str	r3, [sp, #20]
 8007656:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800772c <_vfiprintf_r+0x22c>
 800765a:	7821      	ldrb	r1, [r4, #0]
 800765c:	2203      	movs	r2, #3
 800765e:	4650      	mov	r0, sl
 8007660:	f7f8 fdd6 	bl	8000210 <memchr>
 8007664:	b138      	cbz	r0, 8007676 <_vfiprintf_r+0x176>
 8007666:	9b04      	ldr	r3, [sp, #16]
 8007668:	eba0 000a 	sub.w	r0, r0, sl
 800766c:	2240      	movs	r2, #64	@ 0x40
 800766e:	4082      	lsls	r2, r0
 8007670:	4313      	orrs	r3, r2
 8007672:	3401      	adds	r4, #1
 8007674:	9304      	str	r3, [sp, #16]
 8007676:	f814 1b01 	ldrb.w	r1, [r4], #1
 800767a:	4829      	ldr	r0, [pc, #164]	@ (8007720 <_vfiprintf_r+0x220>)
 800767c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007680:	2206      	movs	r2, #6
 8007682:	f7f8 fdc5 	bl	8000210 <memchr>
 8007686:	2800      	cmp	r0, #0
 8007688:	d03f      	beq.n	800770a <_vfiprintf_r+0x20a>
 800768a:	4b26      	ldr	r3, [pc, #152]	@ (8007724 <_vfiprintf_r+0x224>)
 800768c:	bb1b      	cbnz	r3, 80076d6 <_vfiprintf_r+0x1d6>
 800768e:	9b03      	ldr	r3, [sp, #12]
 8007690:	3307      	adds	r3, #7
 8007692:	f023 0307 	bic.w	r3, r3, #7
 8007696:	3308      	adds	r3, #8
 8007698:	9303      	str	r3, [sp, #12]
 800769a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800769c:	443b      	add	r3, r7
 800769e:	9309      	str	r3, [sp, #36]	@ 0x24
 80076a0:	e76a      	b.n	8007578 <_vfiprintf_r+0x78>
 80076a2:	fb0c 3202 	mla	r2, ip, r2, r3
 80076a6:	460c      	mov	r4, r1
 80076a8:	2001      	movs	r0, #1
 80076aa:	e7a8      	b.n	80075fe <_vfiprintf_r+0xfe>
 80076ac:	2300      	movs	r3, #0
 80076ae:	3401      	adds	r4, #1
 80076b0:	9305      	str	r3, [sp, #20]
 80076b2:	4619      	mov	r1, r3
 80076b4:	f04f 0c0a 	mov.w	ip, #10
 80076b8:	4620      	mov	r0, r4
 80076ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 80076be:	3a30      	subs	r2, #48	@ 0x30
 80076c0:	2a09      	cmp	r2, #9
 80076c2:	d903      	bls.n	80076cc <_vfiprintf_r+0x1cc>
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d0c6      	beq.n	8007656 <_vfiprintf_r+0x156>
 80076c8:	9105      	str	r1, [sp, #20]
 80076ca:	e7c4      	b.n	8007656 <_vfiprintf_r+0x156>
 80076cc:	fb0c 2101 	mla	r1, ip, r1, r2
 80076d0:	4604      	mov	r4, r0
 80076d2:	2301      	movs	r3, #1
 80076d4:	e7f0      	b.n	80076b8 <_vfiprintf_r+0x1b8>
 80076d6:	ab03      	add	r3, sp, #12
 80076d8:	9300      	str	r3, [sp, #0]
 80076da:	462a      	mov	r2, r5
 80076dc:	4b12      	ldr	r3, [pc, #72]	@ (8007728 <_vfiprintf_r+0x228>)
 80076de:	a904      	add	r1, sp, #16
 80076e0:	4630      	mov	r0, r6
 80076e2:	f3af 8000 	nop.w
 80076e6:	4607      	mov	r7, r0
 80076e8:	1c78      	adds	r0, r7, #1
 80076ea:	d1d6      	bne.n	800769a <_vfiprintf_r+0x19a>
 80076ec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80076ee:	07d9      	lsls	r1, r3, #31
 80076f0:	d405      	bmi.n	80076fe <_vfiprintf_r+0x1fe>
 80076f2:	89ab      	ldrh	r3, [r5, #12]
 80076f4:	059a      	lsls	r2, r3, #22
 80076f6:	d402      	bmi.n	80076fe <_vfiprintf_r+0x1fe>
 80076f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80076fa:	f7ff fc77 	bl	8006fec <__retarget_lock_release_recursive>
 80076fe:	89ab      	ldrh	r3, [r5, #12]
 8007700:	065b      	lsls	r3, r3, #25
 8007702:	f53f af1f 	bmi.w	8007544 <_vfiprintf_r+0x44>
 8007706:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007708:	e71e      	b.n	8007548 <_vfiprintf_r+0x48>
 800770a:	ab03      	add	r3, sp, #12
 800770c:	9300      	str	r3, [sp, #0]
 800770e:	462a      	mov	r2, r5
 8007710:	4b05      	ldr	r3, [pc, #20]	@ (8007728 <_vfiprintf_r+0x228>)
 8007712:	a904      	add	r1, sp, #16
 8007714:	4630      	mov	r0, r6
 8007716:	f000 f879 	bl	800780c <_printf_i>
 800771a:	e7e4      	b.n	80076e6 <_vfiprintf_r+0x1e6>
 800771c:	08008298 	.word	0x08008298
 8007720:	080082a2 	.word	0x080082a2
 8007724:	00000000 	.word	0x00000000
 8007728:	080074db 	.word	0x080074db
 800772c:	0800829e 	.word	0x0800829e

08007730 <_printf_common>:
 8007730:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007734:	4616      	mov	r6, r2
 8007736:	4698      	mov	r8, r3
 8007738:	688a      	ldr	r2, [r1, #8]
 800773a:	690b      	ldr	r3, [r1, #16]
 800773c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007740:	4293      	cmp	r3, r2
 8007742:	bfb8      	it	lt
 8007744:	4613      	movlt	r3, r2
 8007746:	6033      	str	r3, [r6, #0]
 8007748:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800774c:	4607      	mov	r7, r0
 800774e:	460c      	mov	r4, r1
 8007750:	b10a      	cbz	r2, 8007756 <_printf_common+0x26>
 8007752:	3301      	adds	r3, #1
 8007754:	6033      	str	r3, [r6, #0]
 8007756:	6823      	ldr	r3, [r4, #0]
 8007758:	0699      	lsls	r1, r3, #26
 800775a:	bf42      	ittt	mi
 800775c:	6833      	ldrmi	r3, [r6, #0]
 800775e:	3302      	addmi	r3, #2
 8007760:	6033      	strmi	r3, [r6, #0]
 8007762:	6825      	ldr	r5, [r4, #0]
 8007764:	f015 0506 	ands.w	r5, r5, #6
 8007768:	d106      	bne.n	8007778 <_printf_common+0x48>
 800776a:	f104 0a19 	add.w	sl, r4, #25
 800776e:	68e3      	ldr	r3, [r4, #12]
 8007770:	6832      	ldr	r2, [r6, #0]
 8007772:	1a9b      	subs	r3, r3, r2
 8007774:	42ab      	cmp	r3, r5
 8007776:	dc26      	bgt.n	80077c6 <_printf_common+0x96>
 8007778:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800777c:	6822      	ldr	r2, [r4, #0]
 800777e:	3b00      	subs	r3, #0
 8007780:	bf18      	it	ne
 8007782:	2301      	movne	r3, #1
 8007784:	0692      	lsls	r2, r2, #26
 8007786:	d42b      	bmi.n	80077e0 <_printf_common+0xb0>
 8007788:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800778c:	4641      	mov	r1, r8
 800778e:	4638      	mov	r0, r7
 8007790:	47c8      	blx	r9
 8007792:	3001      	adds	r0, #1
 8007794:	d01e      	beq.n	80077d4 <_printf_common+0xa4>
 8007796:	6823      	ldr	r3, [r4, #0]
 8007798:	6922      	ldr	r2, [r4, #16]
 800779a:	f003 0306 	and.w	r3, r3, #6
 800779e:	2b04      	cmp	r3, #4
 80077a0:	bf02      	ittt	eq
 80077a2:	68e5      	ldreq	r5, [r4, #12]
 80077a4:	6833      	ldreq	r3, [r6, #0]
 80077a6:	1aed      	subeq	r5, r5, r3
 80077a8:	68a3      	ldr	r3, [r4, #8]
 80077aa:	bf0c      	ite	eq
 80077ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80077b0:	2500      	movne	r5, #0
 80077b2:	4293      	cmp	r3, r2
 80077b4:	bfc4      	itt	gt
 80077b6:	1a9b      	subgt	r3, r3, r2
 80077b8:	18ed      	addgt	r5, r5, r3
 80077ba:	2600      	movs	r6, #0
 80077bc:	341a      	adds	r4, #26
 80077be:	42b5      	cmp	r5, r6
 80077c0:	d11a      	bne.n	80077f8 <_printf_common+0xc8>
 80077c2:	2000      	movs	r0, #0
 80077c4:	e008      	b.n	80077d8 <_printf_common+0xa8>
 80077c6:	2301      	movs	r3, #1
 80077c8:	4652      	mov	r2, sl
 80077ca:	4641      	mov	r1, r8
 80077cc:	4638      	mov	r0, r7
 80077ce:	47c8      	blx	r9
 80077d0:	3001      	adds	r0, #1
 80077d2:	d103      	bne.n	80077dc <_printf_common+0xac>
 80077d4:	f04f 30ff 	mov.w	r0, #4294967295
 80077d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077dc:	3501      	adds	r5, #1
 80077de:	e7c6      	b.n	800776e <_printf_common+0x3e>
 80077e0:	18e1      	adds	r1, r4, r3
 80077e2:	1c5a      	adds	r2, r3, #1
 80077e4:	2030      	movs	r0, #48	@ 0x30
 80077e6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80077ea:	4422      	add	r2, r4
 80077ec:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80077f0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80077f4:	3302      	adds	r3, #2
 80077f6:	e7c7      	b.n	8007788 <_printf_common+0x58>
 80077f8:	2301      	movs	r3, #1
 80077fa:	4622      	mov	r2, r4
 80077fc:	4641      	mov	r1, r8
 80077fe:	4638      	mov	r0, r7
 8007800:	47c8      	blx	r9
 8007802:	3001      	adds	r0, #1
 8007804:	d0e6      	beq.n	80077d4 <_printf_common+0xa4>
 8007806:	3601      	adds	r6, #1
 8007808:	e7d9      	b.n	80077be <_printf_common+0x8e>
	...

0800780c <_printf_i>:
 800780c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007810:	7e0f      	ldrb	r7, [r1, #24]
 8007812:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007814:	2f78      	cmp	r7, #120	@ 0x78
 8007816:	4691      	mov	r9, r2
 8007818:	4680      	mov	r8, r0
 800781a:	460c      	mov	r4, r1
 800781c:	469a      	mov	sl, r3
 800781e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007822:	d807      	bhi.n	8007834 <_printf_i+0x28>
 8007824:	2f62      	cmp	r7, #98	@ 0x62
 8007826:	d80a      	bhi.n	800783e <_printf_i+0x32>
 8007828:	2f00      	cmp	r7, #0
 800782a:	f000 80d1 	beq.w	80079d0 <_printf_i+0x1c4>
 800782e:	2f58      	cmp	r7, #88	@ 0x58
 8007830:	f000 80b8 	beq.w	80079a4 <_printf_i+0x198>
 8007834:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007838:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800783c:	e03a      	b.n	80078b4 <_printf_i+0xa8>
 800783e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007842:	2b15      	cmp	r3, #21
 8007844:	d8f6      	bhi.n	8007834 <_printf_i+0x28>
 8007846:	a101      	add	r1, pc, #4	@ (adr r1, 800784c <_printf_i+0x40>)
 8007848:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800784c:	080078a5 	.word	0x080078a5
 8007850:	080078b9 	.word	0x080078b9
 8007854:	08007835 	.word	0x08007835
 8007858:	08007835 	.word	0x08007835
 800785c:	08007835 	.word	0x08007835
 8007860:	08007835 	.word	0x08007835
 8007864:	080078b9 	.word	0x080078b9
 8007868:	08007835 	.word	0x08007835
 800786c:	08007835 	.word	0x08007835
 8007870:	08007835 	.word	0x08007835
 8007874:	08007835 	.word	0x08007835
 8007878:	080079b7 	.word	0x080079b7
 800787c:	080078e3 	.word	0x080078e3
 8007880:	08007971 	.word	0x08007971
 8007884:	08007835 	.word	0x08007835
 8007888:	08007835 	.word	0x08007835
 800788c:	080079d9 	.word	0x080079d9
 8007890:	08007835 	.word	0x08007835
 8007894:	080078e3 	.word	0x080078e3
 8007898:	08007835 	.word	0x08007835
 800789c:	08007835 	.word	0x08007835
 80078a0:	08007979 	.word	0x08007979
 80078a4:	6833      	ldr	r3, [r6, #0]
 80078a6:	1d1a      	adds	r2, r3, #4
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	6032      	str	r2, [r6, #0]
 80078ac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80078b0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80078b4:	2301      	movs	r3, #1
 80078b6:	e09c      	b.n	80079f2 <_printf_i+0x1e6>
 80078b8:	6833      	ldr	r3, [r6, #0]
 80078ba:	6820      	ldr	r0, [r4, #0]
 80078bc:	1d19      	adds	r1, r3, #4
 80078be:	6031      	str	r1, [r6, #0]
 80078c0:	0606      	lsls	r6, r0, #24
 80078c2:	d501      	bpl.n	80078c8 <_printf_i+0xbc>
 80078c4:	681d      	ldr	r5, [r3, #0]
 80078c6:	e003      	b.n	80078d0 <_printf_i+0xc4>
 80078c8:	0645      	lsls	r5, r0, #25
 80078ca:	d5fb      	bpl.n	80078c4 <_printf_i+0xb8>
 80078cc:	f9b3 5000 	ldrsh.w	r5, [r3]
 80078d0:	2d00      	cmp	r5, #0
 80078d2:	da03      	bge.n	80078dc <_printf_i+0xd0>
 80078d4:	232d      	movs	r3, #45	@ 0x2d
 80078d6:	426d      	negs	r5, r5
 80078d8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80078dc:	4858      	ldr	r0, [pc, #352]	@ (8007a40 <_printf_i+0x234>)
 80078de:	230a      	movs	r3, #10
 80078e0:	e011      	b.n	8007906 <_printf_i+0xfa>
 80078e2:	6821      	ldr	r1, [r4, #0]
 80078e4:	6833      	ldr	r3, [r6, #0]
 80078e6:	0608      	lsls	r0, r1, #24
 80078e8:	f853 5b04 	ldr.w	r5, [r3], #4
 80078ec:	d402      	bmi.n	80078f4 <_printf_i+0xe8>
 80078ee:	0649      	lsls	r1, r1, #25
 80078f0:	bf48      	it	mi
 80078f2:	b2ad      	uxthmi	r5, r5
 80078f4:	2f6f      	cmp	r7, #111	@ 0x6f
 80078f6:	4852      	ldr	r0, [pc, #328]	@ (8007a40 <_printf_i+0x234>)
 80078f8:	6033      	str	r3, [r6, #0]
 80078fa:	bf14      	ite	ne
 80078fc:	230a      	movne	r3, #10
 80078fe:	2308      	moveq	r3, #8
 8007900:	2100      	movs	r1, #0
 8007902:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007906:	6866      	ldr	r6, [r4, #4]
 8007908:	60a6      	str	r6, [r4, #8]
 800790a:	2e00      	cmp	r6, #0
 800790c:	db05      	blt.n	800791a <_printf_i+0x10e>
 800790e:	6821      	ldr	r1, [r4, #0]
 8007910:	432e      	orrs	r6, r5
 8007912:	f021 0104 	bic.w	r1, r1, #4
 8007916:	6021      	str	r1, [r4, #0]
 8007918:	d04b      	beq.n	80079b2 <_printf_i+0x1a6>
 800791a:	4616      	mov	r6, r2
 800791c:	fbb5 f1f3 	udiv	r1, r5, r3
 8007920:	fb03 5711 	mls	r7, r3, r1, r5
 8007924:	5dc7      	ldrb	r7, [r0, r7]
 8007926:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800792a:	462f      	mov	r7, r5
 800792c:	42bb      	cmp	r3, r7
 800792e:	460d      	mov	r5, r1
 8007930:	d9f4      	bls.n	800791c <_printf_i+0x110>
 8007932:	2b08      	cmp	r3, #8
 8007934:	d10b      	bne.n	800794e <_printf_i+0x142>
 8007936:	6823      	ldr	r3, [r4, #0]
 8007938:	07df      	lsls	r7, r3, #31
 800793a:	d508      	bpl.n	800794e <_printf_i+0x142>
 800793c:	6923      	ldr	r3, [r4, #16]
 800793e:	6861      	ldr	r1, [r4, #4]
 8007940:	4299      	cmp	r1, r3
 8007942:	bfde      	ittt	le
 8007944:	2330      	movle	r3, #48	@ 0x30
 8007946:	f806 3c01 	strble.w	r3, [r6, #-1]
 800794a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800794e:	1b92      	subs	r2, r2, r6
 8007950:	6122      	str	r2, [r4, #16]
 8007952:	f8cd a000 	str.w	sl, [sp]
 8007956:	464b      	mov	r3, r9
 8007958:	aa03      	add	r2, sp, #12
 800795a:	4621      	mov	r1, r4
 800795c:	4640      	mov	r0, r8
 800795e:	f7ff fee7 	bl	8007730 <_printf_common>
 8007962:	3001      	adds	r0, #1
 8007964:	d14a      	bne.n	80079fc <_printf_i+0x1f0>
 8007966:	f04f 30ff 	mov.w	r0, #4294967295
 800796a:	b004      	add	sp, #16
 800796c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007970:	6823      	ldr	r3, [r4, #0]
 8007972:	f043 0320 	orr.w	r3, r3, #32
 8007976:	6023      	str	r3, [r4, #0]
 8007978:	4832      	ldr	r0, [pc, #200]	@ (8007a44 <_printf_i+0x238>)
 800797a:	2778      	movs	r7, #120	@ 0x78
 800797c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007980:	6823      	ldr	r3, [r4, #0]
 8007982:	6831      	ldr	r1, [r6, #0]
 8007984:	061f      	lsls	r7, r3, #24
 8007986:	f851 5b04 	ldr.w	r5, [r1], #4
 800798a:	d402      	bmi.n	8007992 <_printf_i+0x186>
 800798c:	065f      	lsls	r7, r3, #25
 800798e:	bf48      	it	mi
 8007990:	b2ad      	uxthmi	r5, r5
 8007992:	6031      	str	r1, [r6, #0]
 8007994:	07d9      	lsls	r1, r3, #31
 8007996:	bf44      	itt	mi
 8007998:	f043 0320 	orrmi.w	r3, r3, #32
 800799c:	6023      	strmi	r3, [r4, #0]
 800799e:	b11d      	cbz	r5, 80079a8 <_printf_i+0x19c>
 80079a0:	2310      	movs	r3, #16
 80079a2:	e7ad      	b.n	8007900 <_printf_i+0xf4>
 80079a4:	4826      	ldr	r0, [pc, #152]	@ (8007a40 <_printf_i+0x234>)
 80079a6:	e7e9      	b.n	800797c <_printf_i+0x170>
 80079a8:	6823      	ldr	r3, [r4, #0]
 80079aa:	f023 0320 	bic.w	r3, r3, #32
 80079ae:	6023      	str	r3, [r4, #0]
 80079b0:	e7f6      	b.n	80079a0 <_printf_i+0x194>
 80079b2:	4616      	mov	r6, r2
 80079b4:	e7bd      	b.n	8007932 <_printf_i+0x126>
 80079b6:	6833      	ldr	r3, [r6, #0]
 80079b8:	6825      	ldr	r5, [r4, #0]
 80079ba:	6961      	ldr	r1, [r4, #20]
 80079bc:	1d18      	adds	r0, r3, #4
 80079be:	6030      	str	r0, [r6, #0]
 80079c0:	062e      	lsls	r6, r5, #24
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	d501      	bpl.n	80079ca <_printf_i+0x1be>
 80079c6:	6019      	str	r1, [r3, #0]
 80079c8:	e002      	b.n	80079d0 <_printf_i+0x1c4>
 80079ca:	0668      	lsls	r0, r5, #25
 80079cc:	d5fb      	bpl.n	80079c6 <_printf_i+0x1ba>
 80079ce:	8019      	strh	r1, [r3, #0]
 80079d0:	2300      	movs	r3, #0
 80079d2:	6123      	str	r3, [r4, #16]
 80079d4:	4616      	mov	r6, r2
 80079d6:	e7bc      	b.n	8007952 <_printf_i+0x146>
 80079d8:	6833      	ldr	r3, [r6, #0]
 80079da:	1d1a      	adds	r2, r3, #4
 80079dc:	6032      	str	r2, [r6, #0]
 80079de:	681e      	ldr	r6, [r3, #0]
 80079e0:	6862      	ldr	r2, [r4, #4]
 80079e2:	2100      	movs	r1, #0
 80079e4:	4630      	mov	r0, r6
 80079e6:	f7f8 fc13 	bl	8000210 <memchr>
 80079ea:	b108      	cbz	r0, 80079f0 <_printf_i+0x1e4>
 80079ec:	1b80      	subs	r0, r0, r6
 80079ee:	6060      	str	r0, [r4, #4]
 80079f0:	6863      	ldr	r3, [r4, #4]
 80079f2:	6123      	str	r3, [r4, #16]
 80079f4:	2300      	movs	r3, #0
 80079f6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80079fa:	e7aa      	b.n	8007952 <_printf_i+0x146>
 80079fc:	6923      	ldr	r3, [r4, #16]
 80079fe:	4632      	mov	r2, r6
 8007a00:	4649      	mov	r1, r9
 8007a02:	4640      	mov	r0, r8
 8007a04:	47d0      	blx	sl
 8007a06:	3001      	adds	r0, #1
 8007a08:	d0ad      	beq.n	8007966 <_printf_i+0x15a>
 8007a0a:	6823      	ldr	r3, [r4, #0]
 8007a0c:	079b      	lsls	r3, r3, #30
 8007a0e:	d413      	bmi.n	8007a38 <_printf_i+0x22c>
 8007a10:	68e0      	ldr	r0, [r4, #12]
 8007a12:	9b03      	ldr	r3, [sp, #12]
 8007a14:	4298      	cmp	r0, r3
 8007a16:	bfb8      	it	lt
 8007a18:	4618      	movlt	r0, r3
 8007a1a:	e7a6      	b.n	800796a <_printf_i+0x15e>
 8007a1c:	2301      	movs	r3, #1
 8007a1e:	4632      	mov	r2, r6
 8007a20:	4649      	mov	r1, r9
 8007a22:	4640      	mov	r0, r8
 8007a24:	47d0      	blx	sl
 8007a26:	3001      	adds	r0, #1
 8007a28:	d09d      	beq.n	8007966 <_printf_i+0x15a>
 8007a2a:	3501      	adds	r5, #1
 8007a2c:	68e3      	ldr	r3, [r4, #12]
 8007a2e:	9903      	ldr	r1, [sp, #12]
 8007a30:	1a5b      	subs	r3, r3, r1
 8007a32:	42ab      	cmp	r3, r5
 8007a34:	dcf2      	bgt.n	8007a1c <_printf_i+0x210>
 8007a36:	e7eb      	b.n	8007a10 <_printf_i+0x204>
 8007a38:	2500      	movs	r5, #0
 8007a3a:	f104 0619 	add.w	r6, r4, #25
 8007a3e:	e7f5      	b.n	8007a2c <_printf_i+0x220>
 8007a40:	080082a9 	.word	0x080082a9
 8007a44:	080082ba 	.word	0x080082ba

08007a48 <__sflush_r>:
 8007a48:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007a4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a50:	0716      	lsls	r6, r2, #28
 8007a52:	4605      	mov	r5, r0
 8007a54:	460c      	mov	r4, r1
 8007a56:	d454      	bmi.n	8007b02 <__sflush_r+0xba>
 8007a58:	684b      	ldr	r3, [r1, #4]
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	dc02      	bgt.n	8007a64 <__sflush_r+0x1c>
 8007a5e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	dd48      	ble.n	8007af6 <__sflush_r+0xae>
 8007a64:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007a66:	2e00      	cmp	r6, #0
 8007a68:	d045      	beq.n	8007af6 <__sflush_r+0xae>
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007a70:	682f      	ldr	r7, [r5, #0]
 8007a72:	6a21      	ldr	r1, [r4, #32]
 8007a74:	602b      	str	r3, [r5, #0]
 8007a76:	d030      	beq.n	8007ada <__sflush_r+0x92>
 8007a78:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007a7a:	89a3      	ldrh	r3, [r4, #12]
 8007a7c:	0759      	lsls	r1, r3, #29
 8007a7e:	d505      	bpl.n	8007a8c <__sflush_r+0x44>
 8007a80:	6863      	ldr	r3, [r4, #4]
 8007a82:	1ad2      	subs	r2, r2, r3
 8007a84:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007a86:	b10b      	cbz	r3, 8007a8c <__sflush_r+0x44>
 8007a88:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007a8a:	1ad2      	subs	r2, r2, r3
 8007a8c:	2300      	movs	r3, #0
 8007a8e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007a90:	6a21      	ldr	r1, [r4, #32]
 8007a92:	4628      	mov	r0, r5
 8007a94:	47b0      	blx	r6
 8007a96:	1c43      	adds	r3, r0, #1
 8007a98:	89a3      	ldrh	r3, [r4, #12]
 8007a9a:	d106      	bne.n	8007aaa <__sflush_r+0x62>
 8007a9c:	6829      	ldr	r1, [r5, #0]
 8007a9e:	291d      	cmp	r1, #29
 8007aa0:	d82b      	bhi.n	8007afa <__sflush_r+0xb2>
 8007aa2:	4a2a      	ldr	r2, [pc, #168]	@ (8007b4c <__sflush_r+0x104>)
 8007aa4:	40ca      	lsrs	r2, r1
 8007aa6:	07d6      	lsls	r6, r2, #31
 8007aa8:	d527      	bpl.n	8007afa <__sflush_r+0xb2>
 8007aaa:	2200      	movs	r2, #0
 8007aac:	6062      	str	r2, [r4, #4]
 8007aae:	04d9      	lsls	r1, r3, #19
 8007ab0:	6922      	ldr	r2, [r4, #16]
 8007ab2:	6022      	str	r2, [r4, #0]
 8007ab4:	d504      	bpl.n	8007ac0 <__sflush_r+0x78>
 8007ab6:	1c42      	adds	r2, r0, #1
 8007ab8:	d101      	bne.n	8007abe <__sflush_r+0x76>
 8007aba:	682b      	ldr	r3, [r5, #0]
 8007abc:	b903      	cbnz	r3, 8007ac0 <__sflush_r+0x78>
 8007abe:	6560      	str	r0, [r4, #84]	@ 0x54
 8007ac0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007ac2:	602f      	str	r7, [r5, #0]
 8007ac4:	b1b9      	cbz	r1, 8007af6 <__sflush_r+0xae>
 8007ac6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007aca:	4299      	cmp	r1, r3
 8007acc:	d002      	beq.n	8007ad4 <__sflush_r+0x8c>
 8007ace:	4628      	mov	r0, r5
 8007ad0:	f7ff fa9c 	bl	800700c <_free_r>
 8007ad4:	2300      	movs	r3, #0
 8007ad6:	6363      	str	r3, [r4, #52]	@ 0x34
 8007ad8:	e00d      	b.n	8007af6 <__sflush_r+0xae>
 8007ada:	2301      	movs	r3, #1
 8007adc:	4628      	mov	r0, r5
 8007ade:	47b0      	blx	r6
 8007ae0:	4602      	mov	r2, r0
 8007ae2:	1c50      	adds	r0, r2, #1
 8007ae4:	d1c9      	bne.n	8007a7a <__sflush_r+0x32>
 8007ae6:	682b      	ldr	r3, [r5, #0]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d0c6      	beq.n	8007a7a <__sflush_r+0x32>
 8007aec:	2b1d      	cmp	r3, #29
 8007aee:	d001      	beq.n	8007af4 <__sflush_r+0xac>
 8007af0:	2b16      	cmp	r3, #22
 8007af2:	d11e      	bne.n	8007b32 <__sflush_r+0xea>
 8007af4:	602f      	str	r7, [r5, #0]
 8007af6:	2000      	movs	r0, #0
 8007af8:	e022      	b.n	8007b40 <__sflush_r+0xf8>
 8007afa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007afe:	b21b      	sxth	r3, r3
 8007b00:	e01b      	b.n	8007b3a <__sflush_r+0xf2>
 8007b02:	690f      	ldr	r7, [r1, #16]
 8007b04:	2f00      	cmp	r7, #0
 8007b06:	d0f6      	beq.n	8007af6 <__sflush_r+0xae>
 8007b08:	0793      	lsls	r3, r2, #30
 8007b0a:	680e      	ldr	r6, [r1, #0]
 8007b0c:	bf08      	it	eq
 8007b0e:	694b      	ldreq	r3, [r1, #20]
 8007b10:	600f      	str	r7, [r1, #0]
 8007b12:	bf18      	it	ne
 8007b14:	2300      	movne	r3, #0
 8007b16:	eba6 0807 	sub.w	r8, r6, r7
 8007b1a:	608b      	str	r3, [r1, #8]
 8007b1c:	f1b8 0f00 	cmp.w	r8, #0
 8007b20:	dde9      	ble.n	8007af6 <__sflush_r+0xae>
 8007b22:	6a21      	ldr	r1, [r4, #32]
 8007b24:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007b26:	4643      	mov	r3, r8
 8007b28:	463a      	mov	r2, r7
 8007b2a:	4628      	mov	r0, r5
 8007b2c:	47b0      	blx	r6
 8007b2e:	2800      	cmp	r0, #0
 8007b30:	dc08      	bgt.n	8007b44 <__sflush_r+0xfc>
 8007b32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b36:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007b3a:	81a3      	strh	r3, [r4, #12]
 8007b3c:	f04f 30ff 	mov.w	r0, #4294967295
 8007b40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b44:	4407      	add	r7, r0
 8007b46:	eba8 0800 	sub.w	r8, r8, r0
 8007b4a:	e7e7      	b.n	8007b1c <__sflush_r+0xd4>
 8007b4c:	20400001 	.word	0x20400001

08007b50 <_fflush_r>:
 8007b50:	b538      	push	{r3, r4, r5, lr}
 8007b52:	690b      	ldr	r3, [r1, #16]
 8007b54:	4605      	mov	r5, r0
 8007b56:	460c      	mov	r4, r1
 8007b58:	b913      	cbnz	r3, 8007b60 <_fflush_r+0x10>
 8007b5a:	2500      	movs	r5, #0
 8007b5c:	4628      	mov	r0, r5
 8007b5e:	bd38      	pop	{r3, r4, r5, pc}
 8007b60:	b118      	cbz	r0, 8007b6a <_fflush_r+0x1a>
 8007b62:	6a03      	ldr	r3, [r0, #32]
 8007b64:	b90b      	cbnz	r3, 8007b6a <_fflush_r+0x1a>
 8007b66:	f7fe ffff 	bl	8006b68 <__sinit>
 8007b6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d0f3      	beq.n	8007b5a <_fflush_r+0xa>
 8007b72:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007b74:	07d0      	lsls	r0, r2, #31
 8007b76:	d404      	bmi.n	8007b82 <_fflush_r+0x32>
 8007b78:	0599      	lsls	r1, r3, #22
 8007b7a:	d402      	bmi.n	8007b82 <_fflush_r+0x32>
 8007b7c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007b7e:	f7ff fa34 	bl	8006fea <__retarget_lock_acquire_recursive>
 8007b82:	4628      	mov	r0, r5
 8007b84:	4621      	mov	r1, r4
 8007b86:	f7ff ff5f 	bl	8007a48 <__sflush_r>
 8007b8a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007b8c:	07da      	lsls	r2, r3, #31
 8007b8e:	4605      	mov	r5, r0
 8007b90:	d4e4      	bmi.n	8007b5c <_fflush_r+0xc>
 8007b92:	89a3      	ldrh	r3, [r4, #12]
 8007b94:	059b      	lsls	r3, r3, #22
 8007b96:	d4e1      	bmi.n	8007b5c <_fflush_r+0xc>
 8007b98:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007b9a:	f7ff fa27 	bl	8006fec <__retarget_lock_release_recursive>
 8007b9e:	e7dd      	b.n	8007b5c <_fflush_r+0xc>

08007ba0 <__swhatbuf_r>:
 8007ba0:	b570      	push	{r4, r5, r6, lr}
 8007ba2:	460c      	mov	r4, r1
 8007ba4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ba8:	2900      	cmp	r1, #0
 8007baa:	b096      	sub	sp, #88	@ 0x58
 8007bac:	4615      	mov	r5, r2
 8007bae:	461e      	mov	r6, r3
 8007bb0:	da0d      	bge.n	8007bce <__swhatbuf_r+0x2e>
 8007bb2:	89a3      	ldrh	r3, [r4, #12]
 8007bb4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007bb8:	f04f 0100 	mov.w	r1, #0
 8007bbc:	bf14      	ite	ne
 8007bbe:	2340      	movne	r3, #64	@ 0x40
 8007bc0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007bc4:	2000      	movs	r0, #0
 8007bc6:	6031      	str	r1, [r6, #0]
 8007bc8:	602b      	str	r3, [r5, #0]
 8007bca:	b016      	add	sp, #88	@ 0x58
 8007bcc:	bd70      	pop	{r4, r5, r6, pc}
 8007bce:	466a      	mov	r2, sp
 8007bd0:	f000 f862 	bl	8007c98 <_fstat_r>
 8007bd4:	2800      	cmp	r0, #0
 8007bd6:	dbec      	blt.n	8007bb2 <__swhatbuf_r+0x12>
 8007bd8:	9901      	ldr	r1, [sp, #4]
 8007bda:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007bde:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007be2:	4259      	negs	r1, r3
 8007be4:	4159      	adcs	r1, r3
 8007be6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007bea:	e7eb      	b.n	8007bc4 <__swhatbuf_r+0x24>

08007bec <__smakebuf_r>:
 8007bec:	898b      	ldrh	r3, [r1, #12]
 8007bee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007bf0:	079d      	lsls	r5, r3, #30
 8007bf2:	4606      	mov	r6, r0
 8007bf4:	460c      	mov	r4, r1
 8007bf6:	d507      	bpl.n	8007c08 <__smakebuf_r+0x1c>
 8007bf8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007bfc:	6023      	str	r3, [r4, #0]
 8007bfe:	6123      	str	r3, [r4, #16]
 8007c00:	2301      	movs	r3, #1
 8007c02:	6163      	str	r3, [r4, #20]
 8007c04:	b003      	add	sp, #12
 8007c06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007c08:	ab01      	add	r3, sp, #4
 8007c0a:	466a      	mov	r2, sp
 8007c0c:	f7ff ffc8 	bl	8007ba0 <__swhatbuf_r>
 8007c10:	9f00      	ldr	r7, [sp, #0]
 8007c12:	4605      	mov	r5, r0
 8007c14:	4639      	mov	r1, r7
 8007c16:	4630      	mov	r0, r6
 8007c18:	f7ff fa64 	bl	80070e4 <_malloc_r>
 8007c1c:	b948      	cbnz	r0, 8007c32 <__smakebuf_r+0x46>
 8007c1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c22:	059a      	lsls	r2, r3, #22
 8007c24:	d4ee      	bmi.n	8007c04 <__smakebuf_r+0x18>
 8007c26:	f023 0303 	bic.w	r3, r3, #3
 8007c2a:	f043 0302 	orr.w	r3, r3, #2
 8007c2e:	81a3      	strh	r3, [r4, #12]
 8007c30:	e7e2      	b.n	8007bf8 <__smakebuf_r+0xc>
 8007c32:	89a3      	ldrh	r3, [r4, #12]
 8007c34:	6020      	str	r0, [r4, #0]
 8007c36:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007c3a:	81a3      	strh	r3, [r4, #12]
 8007c3c:	9b01      	ldr	r3, [sp, #4]
 8007c3e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007c42:	b15b      	cbz	r3, 8007c5c <__smakebuf_r+0x70>
 8007c44:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007c48:	4630      	mov	r0, r6
 8007c4a:	f000 f837 	bl	8007cbc <_isatty_r>
 8007c4e:	b128      	cbz	r0, 8007c5c <__smakebuf_r+0x70>
 8007c50:	89a3      	ldrh	r3, [r4, #12]
 8007c52:	f023 0303 	bic.w	r3, r3, #3
 8007c56:	f043 0301 	orr.w	r3, r3, #1
 8007c5a:	81a3      	strh	r3, [r4, #12]
 8007c5c:	89a3      	ldrh	r3, [r4, #12]
 8007c5e:	431d      	orrs	r5, r3
 8007c60:	81a5      	strh	r5, [r4, #12]
 8007c62:	e7cf      	b.n	8007c04 <__smakebuf_r+0x18>

08007c64 <memmove>:
 8007c64:	4288      	cmp	r0, r1
 8007c66:	b510      	push	{r4, lr}
 8007c68:	eb01 0402 	add.w	r4, r1, r2
 8007c6c:	d902      	bls.n	8007c74 <memmove+0x10>
 8007c6e:	4284      	cmp	r4, r0
 8007c70:	4623      	mov	r3, r4
 8007c72:	d807      	bhi.n	8007c84 <memmove+0x20>
 8007c74:	1e43      	subs	r3, r0, #1
 8007c76:	42a1      	cmp	r1, r4
 8007c78:	d008      	beq.n	8007c8c <memmove+0x28>
 8007c7a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007c7e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007c82:	e7f8      	b.n	8007c76 <memmove+0x12>
 8007c84:	4402      	add	r2, r0
 8007c86:	4601      	mov	r1, r0
 8007c88:	428a      	cmp	r2, r1
 8007c8a:	d100      	bne.n	8007c8e <memmove+0x2a>
 8007c8c:	bd10      	pop	{r4, pc}
 8007c8e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007c92:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007c96:	e7f7      	b.n	8007c88 <memmove+0x24>

08007c98 <_fstat_r>:
 8007c98:	b538      	push	{r3, r4, r5, lr}
 8007c9a:	4d07      	ldr	r5, [pc, #28]	@ (8007cb8 <_fstat_r+0x20>)
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	4604      	mov	r4, r0
 8007ca0:	4608      	mov	r0, r1
 8007ca2:	4611      	mov	r1, r2
 8007ca4:	602b      	str	r3, [r5, #0]
 8007ca6:	f7f9 fda8 	bl	80017fa <_fstat>
 8007caa:	1c43      	adds	r3, r0, #1
 8007cac:	d102      	bne.n	8007cb4 <_fstat_r+0x1c>
 8007cae:	682b      	ldr	r3, [r5, #0]
 8007cb0:	b103      	cbz	r3, 8007cb4 <_fstat_r+0x1c>
 8007cb2:	6023      	str	r3, [r4, #0]
 8007cb4:	bd38      	pop	{r3, r4, r5, pc}
 8007cb6:	bf00      	nop
 8007cb8:	2000486c 	.word	0x2000486c

08007cbc <_isatty_r>:
 8007cbc:	b538      	push	{r3, r4, r5, lr}
 8007cbe:	4d06      	ldr	r5, [pc, #24]	@ (8007cd8 <_isatty_r+0x1c>)
 8007cc0:	2300      	movs	r3, #0
 8007cc2:	4604      	mov	r4, r0
 8007cc4:	4608      	mov	r0, r1
 8007cc6:	602b      	str	r3, [r5, #0]
 8007cc8:	f7f9 fda7 	bl	800181a <_isatty>
 8007ccc:	1c43      	adds	r3, r0, #1
 8007cce:	d102      	bne.n	8007cd6 <_isatty_r+0x1a>
 8007cd0:	682b      	ldr	r3, [r5, #0]
 8007cd2:	b103      	cbz	r3, 8007cd6 <_isatty_r+0x1a>
 8007cd4:	6023      	str	r3, [r4, #0]
 8007cd6:	bd38      	pop	{r3, r4, r5, pc}
 8007cd8:	2000486c 	.word	0x2000486c

08007cdc <_sbrk_r>:
 8007cdc:	b538      	push	{r3, r4, r5, lr}
 8007cde:	4d06      	ldr	r5, [pc, #24]	@ (8007cf8 <_sbrk_r+0x1c>)
 8007ce0:	2300      	movs	r3, #0
 8007ce2:	4604      	mov	r4, r0
 8007ce4:	4608      	mov	r0, r1
 8007ce6:	602b      	str	r3, [r5, #0]
 8007ce8:	f7f9 fdb0 	bl	800184c <_sbrk>
 8007cec:	1c43      	adds	r3, r0, #1
 8007cee:	d102      	bne.n	8007cf6 <_sbrk_r+0x1a>
 8007cf0:	682b      	ldr	r3, [r5, #0]
 8007cf2:	b103      	cbz	r3, 8007cf6 <_sbrk_r+0x1a>
 8007cf4:	6023      	str	r3, [r4, #0]
 8007cf6:	bd38      	pop	{r3, r4, r5, pc}
 8007cf8:	2000486c 	.word	0x2000486c

08007cfc <_realloc_r>:
 8007cfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d00:	4607      	mov	r7, r0
 8007d02:	4614      	mov	r4, r2
 8007d04:	460d      	mov	r5, r1
 8007d06:	b921      	cbnz	r1, 8007d12 <_realloc_r+0x16>
 8007d08:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007d0c:	4611      	mov	r1, r2
 8007d0e:	f7ff b9e9 	b.w	80070e4 <_malloc_r>
 8007d12:	b92a      	cbnz	r2, 8007d20 <_realloc_r+0x24>
 8007d14:	f7ff f97a 	bl	800700c <_free_r>
 8007d18:	4625      	mov	r5, r4
 8007d1a:	4628      	mov	r0, r5
 8007d1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d20:	f000 f81a 	bl	8007d58 <_malloc_usable_size_r>
 8007d24:	4284      	cmp	r4, r0
 8007d26:	4606      	mov	r6, r0
 8007d28:	d802      	bhi.n	8007d30 <_realloc_r+0x34>
 8007d2a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007d2e:	d8f4      	bhi.n	8007d1a <_realloc_r+0x1e>
 8007d30:	4621      	mov	r1, r4
 8007d32:	4638      	mov	r0, r7
 8007d34:	f7ff f9d6 	bl	80070e4 <_malloc_r>
 8007d38:	4680      	mov	r8, r0
 8007d3a:	b908      	cbnz	r0, 8007d40 <_realloc_r+0x44>
 8007d3c:	4645      	mov	r5, r8
 8007d3e:	e7ec      	b.n	8007d1a <_realloc_r+0x1e>
 8007d40:	42b4      	cmp	r4, r6
 8007d42:	4622      	mov	r2, r4
 8007d44:	4629      	mov	r1, r5
 8007d46:	bf28      	it	cs
 8007d48:	4632      	movcs	r2, r6
 8007d4a:	f7ff f950 	bl	8006fee <memcpy>
 8007d4e:	4629      	mov	r1, r5
 8007d50:	4638      	mov	r0, r7
 8007d52:	f7ff f95b 	bl	800700c <_free_r>
 8007d56:	e7f1      	b.n	8007d3c <_realloc_r+0x40>

08007d58 <_malloc_usable_size_r>:
 8007d58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007d5c:	1f18      	subs	r0, r3, #4
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	bfbc      	itt	lt
 8007d62:	580b      	ldrlt	r3, [r1, r0]
 8007d64:	18c0      	addlt	r0, r0, r3
 8007d66:	4770      	bx	lr

08007d68 <_init>:
 8007d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d6a:	bf00      	nop
 8007d6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d6e:	bc08      	pop	{r3}
 8007d70:	469e      	mov	lr, r3
 8007d72:	4770      	bx	lr

08007d74 <_fini>:
 8007d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d76:	bf00      	nop
 8007d78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d7a:	bc08      	pop	{r3}
 8007d7c:	469e      	mov	lr, r3
 8007d7e:	4770      	bx	lr
