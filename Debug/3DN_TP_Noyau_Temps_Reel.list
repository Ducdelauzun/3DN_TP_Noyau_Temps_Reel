
3DN_TP_Noyau_Temps_Reel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c40  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000480  08006e10  08006e10  00007e10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007290  08007290  0000916c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08007290  08007290  00008290  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007298  08007298  0000916c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007298  08007298  00008298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800729c  0800729c  0000829c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000016c  20000000  080072a0  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000046b8  2000016c  0800740c  0000916c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004824  0800740c  00009824  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000916c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010c20  00000000  00000000  0000919c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002fb7  00000000  00000000  00019dbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e40  00000000  00000000  0001cd78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ac2  00000000  00000000  0001dbb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028b20  00000000  00000000  0001e67a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012514  00000000  00000000  0004719a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f2a05  00000000  00000000  000596ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014c0b3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004188  00000000  00000000  0014c0f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007e  00000000  00000000  00150280  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000016c 	.word	0x2000016c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006df8 	.word	0x08006df8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000170 	.word	0x20000170
 800020c:	08006df8 	.word	0x08006df8

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b988 	b.w	80005d8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	468e      	mov	lr, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	4688      	mov	r8, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d962      	bls.n	80003bc <__udivmoddi4+0xdc>
 80002f6:	fab2 f682 	clz	r6, r2
 80002fa:	b14e      	cbz	r6, 8000310 <__udivmoddi4+0x30>
 80002fc:	f1c6 0320 	rsb	r3, r6, #32
 8000300:	fa01 f806 	lsl.w	r8, r1, r6
 8000304:	fa20 f303 	lsr.w	r3, r0, r3
 8000308:	40b7      	lsls	r7, r6
 800030a:	ea43 0808 	orr.w	r8, r3, r8
 800030e:	40b4      	lsls	r4, r6
 8000310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000314:	fa1f fc87 	uxth.w	ip, r7
 8000318:	fbb8 f1fe 	udiv	r1, r8, lr
 800031c:	0c23      	lsrs	r3, r4, #16
 800031e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000322:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000326:	fb01 f20c 	mul.w	r2, r1, ip
 800032a:	429a      	cmp	r2, r3
 800032c:	d909      	bls.n	8000342 <__udivmoddi4+0x62>
 800032e:	18fb      	adds	r3, r7, r3
 8000330:	f101 30ff 	add.w	r0, r1, #4294967295
 8000334:	f080 80ea 	bcs.w	800050c <__udivmoddi4+0x22c>
 8000338:	429a      	cmp	r2, r3
 800033a:	f240 80e7 	bls.w	800050c <__udivmoddi4+0x22c>
 800033e:	3902      	subs	r1, #2
 8000340:	443b      	add	r3, r7
 8000342:	1a9a      	subs	r2, r3, r2
 8000344:	b2a3      	uxth	r3, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000352:	fb00 fc0c 	mul.w	ip, r0, ip
 8000356:	459c      	cmp	ip, r3
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x8e>
 800035a:	18fb      	adds	r3, r7, r3
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000360:	f080 80d6 	bcs.w	8000510 <__udivmoddi4+0x230>
 8000364:	459c      	cmp	ip, r3
 8000366:	f240 80d3 	bls.w	8000510 <__udivmoddi4+0x230>
 800036a:	443b      	add	r3, r7
 800036c:	3802      	subs	r0, #2
 800036e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000372:	eba3 030c 	sub.w	r3, r3, ip
 8000376:	2100      	movs	r1, #0
 8000378:	b11d      	cbz	r5, 8000382 <__udivmoddi4+0xa2>
 800037a:	40f3      	lsrs	r3, r6
 800037c:	2200      	movs	r2, #0
 800037e:	e9c5 3200 	strd	r3, r2, [r5]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d905      	bls.n	8000396 <__udivmoddi4+0xb6>
 800038a:	b10d      	cbz	r5, 8000390 <__udivmoddi4+0xb0>
 800038c:	e9c5 0100 	strd	r0, r1, [r5]
 8000390:	2100      	movs	r1, #0
 8000392:	4608      	mov	r0, r1
 8000394:	e7f5      	b.n	8000382 <__udivmoddi4+0xa2>
 8000396:	fab3 f183 	clz	r1, r3
 800039a:	2900      	cmp	r1, #0
 800039c:	d146      	bne.n	800042c <__udivmoddi4+0x14c>
 800039e:	4573      	cmp	r3, lr
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0xc8>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 8105 	bhi.w	80005b2 <__udivmoddi4+0x2d2>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb6e 0203 	sbc.w	r2, lr, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	4690      	mov	r8, r2
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0e5      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003b6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ba:	e7e2      	b.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f000 8090 	beq.w	80004e2 <__udivmoddi4+0x202>
 80003c2:	fab2 f682 	clz	r6, r2
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	f040 80a4 	bne.w	8000514 <__udivmoddi4+0x234>
 80003cc:	1a8a      	subs	r2, r1, r2
 80003ce:	0c03      	lsrs	r3, r0, #16
 80003d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d4:	b280      	uxth	r0, r0
 80003d6:	b2bc      	uxth	r4, r7
 80003d8:	2101      	movs	r1, #1
 80003da:	fbb2 fcfe 	udiv	ip, r2, lr
 80003de:	fb0e 221c 	mls	r2, lr, ip, r2
 80003e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003e6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ea:	429a      	cmp	r2, r3
 80003ec:	d907      	bls.n	80003fe <__udivmoddi4+0x11e>
 80003ee:	18fb      	adds	r3, r7, r3
 80003f0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x11c>
 80003f6:	429a      	cmp	r2, r3
 80003f8:	f200 80e0 	bhi.w	80005bc <__udivmoddi4+0x2dc>
 80003fc:	46c4      	mov	ip, r8
 80003fe:	1a9b      	subs	r3, r3, r2
 8000400:	fbb3 f2fe 	udiv	r2, r3, lr
 8000404:	fb0e 3312 	mls	r3, lr, r2, r3
 8000408:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800040c:	fb02 f404 	mul.w	r4, r2, r4
 8000410:	429c      	cmp	r4, r3
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0x144>
 8000414:	18fb      	adds	r3, r7, r3
 8000416:	f102 30ff 	add.w	r0, r2, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x142>
 800041c:	429c      	cmp	r4, r3
 800041e:	f200 80ca 	bhi.w	80005b6 <__udivmoddi4+0x2d6>
 8000422:	4602      	mov	r2, r0
 8000424:	1b1b      	subs	r3, r3, r4
 8000426:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800042a:	e7a5      	b.n	8000378 <__udivmoddi4+0x98>
 800042c:	f1c1 0620 	rsb	r6, r1, #32
 8000430:	408b      	lsls	r3, r1
 8000432:	fa22 f706 	lsr.w	r7, r2, r6
 8000436:	431f      	orrs	r7, r3
 8000438:	fa0e f401 	lsl.w	r4, lr, r1
 800043c:	fa20 f306 	lsr.w	r3, r0, r6
 8000440:	fa2e fe06 	lsr.w	lr, lr, r6
 8000444:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000448:	4323      	orrs	r3, r4
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	fa1f fc87 	uxth.w	ip, r7
 8000452:	fbbe f0f9 	udiv	r0, lr, r9
 8000456:	0c1c      	lsrs	r4, r3, #16
 8000458:	fb09 ee10 	mls	lr, r9, r0, lr
 800045c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000460:	fb00 fe0c 	mul.w	lr, r0, ip
 8000464:	45a6      	cmp	lr, r4
 8000466:	fa02 f201 	lsl.w	r2, r2, r1
 800046a:	d909      	bls.n	8000480 <__udivmoddi4+0x1a0>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000472:	f080 809c 	bcs.w	80005ae <__udivmoddi4+0x2ce>
 8000476:	45a6      	cmp	lr, r4
 8000478:	f240 8099 	bls.w	80005ae <__udivmoddi4+0x2ce>
 800047c:	3802      	subs	r0, #2
 800047e:	443c      	add	r4, r7
 8000480:	eba4 040e 	sub.w	r4, r4, lr
 8000484:	fa1f fe83 	uxth.w	lr, r3
 8000488:	fbb4 f3f9 	udiv	r3, r4, r9
 800048c:	fb09 4413 	mls	r4, r9, r3, r4
 8000490:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000494:	fb03 fc0c 	mul.w	ip, r3, ip
 8000498:	45a4      	cmp	ip, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x1ce>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f103 3eff 	add.w	lr, r3, #4294967295
 80004a2:	f080 8082 	bcs.w	80005aa <__udivmoddi4+0x2ca>
 80004a6:	45a4      	cmp	ip, r4
 80004a8:	d97f      	bls.n	80005aa <__udivmoddi4+0x2ca>
 80004aa:	3b02      	subs	r3, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004b2:	eba4 040c 	sub.w	r4, r4, ip
 80004b6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ba:	4564      	cmp	r4, ip
 80004bc:	4673      	mov	r3, lr
 80004be:	46e1      	mov	r9, ip
 80004c0:	d362      	bcc.n	8000588 <__udivmoddi4+0x2a8>
 80004c2:	d05f      	beq.n	8000584 <__udivmoddi4+0x2a4>
 80004c4:	b15d      	cbz	r5, 80004de <__udivmoddi4+0x1fe>
 80004c6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ca:	eb64 0409 	sbc.w	r4, r4, r9
 80004ce:	fa04 f606 	lsl.w	r6, r4, r6
 80004d2:	fa22 f301 	lsr.w	r3, r2, r1
 80004d6:	431e      	orrs	r6, r3
 80004d8:	40cc      	lsrs	r4, r1
 80004da:	e9c5 6400 	strd	r6, r4, [r5]
 80004de:	2100      	movs	r1, #0
 80004e0:	e74f      	b.n	8000382 <__udivmoddi4+0xa2>
 80004e2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004e6:	0c01      	lsrs	r1, r0, #16
 80004e8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ec:	b280      	uxth	r0, r0
 80004ee:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004f2:	463b      	mov	r3, r7
 80004f4:	4638      	mov	r0, r7
 80004f6:	463c      	mov	r4, r7
 80004f8:	46b8      	mov	r8, r7
 80004fa:	46be      	mov	lr, r7
 80004fc:	2620      	movs	r6, #32
 80004fe:	fbb1 f1f7 	udiv	r1, r1, r7
 8000502:	eba2 0208 	sub.w	r2, r2, r8
 8000506:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800050a:	e766      	b.n	80003da <__udivmoddi4+0xfa>
 800050c:	4601      	mov	r1, r0
 800050e:	e718      	b.n	8000342 <__udivmoddi4+0x62>
 8000510:	4610      	mov	r0, r2
 8000512:	e72c      	b.n	800036e <__udivmoddi4+0x8e>
 8000514:	f1c6 0220 	rsb	r2, r6, #32
 8000518:	fa2e f302 	lsr.w	r3, lr, r2
 800051c:	40b7      	lsls	r7, r6
 800051e:	40b1      	lsls	r1, r6
 8000520:	fa20 f202 	lsr.w	r2, r0, r2
 8000524:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000528:	430a      	orrs	r2, r1
 800052a:	fbb3 f8fe 	udiv	r8, r3, lr
 800052e:	b2bc      	uxth	r4, r7
 8000530:	fb0e 3318 	mls	r3, lr, r8, r3
 8000534:	0c11      	lsrs	r1, r2, #16
 8000536:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800053a:	fb08 f904 	mul.w	r9, r8, r4
 800053e:	40b0      	lsls	r0, r6
 8000540:	4589      	cmp	r9, r1
 8000542:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000546:	b280      	uxth	r0, r0
 8000548:	d93e      	bls.n	80005c8 <__udivmoddi4+0x2e8>
 800054a:	1879      	adds	r1, r7, r1
 800054c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000550:	d201      	bcs.n	8000556 <__udivmoddi4+0x276>
 8000552:	4589      	cmp	r9, r1
 8000554:	d81f      	bhi.n	8000596 <__udivmoddi4+0x2b6>
 8000556:	eba1 0109 	sub.w	r1, r1, r9
 800055a:	fbb1 f9fe 	udiv	r9, r1, lr
 800055e:	fb09 f804 	mul.w	r8, r9, r4
 8000562:	fb0e 1119 	mls	r1, lr, r9, r1
 8000566:	b292      	uxth	r2, r2
 8000568:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800056c:	4542      	cmp	r2, r8
 800056e:	d229      	bcs.n	80005c4 <__udivmoddi4+0x2e4>
 8000570:	18ba      	adds	r2, r7, r2
 8000572:	f109 31ff 	add.w	r1, r9, #4294967295
 8000576:	d2c4      	bcs.n	8000502 <__udivmoddi4+0x222>
 8000578:	4542      	cmp	r2, r8
 800057a:	d2c2      	bcs.n	8000502 <__udivmoddi4+0x222>
 800057c:	f1a9 0102 	sub.w	r1, r9, #2
 8000580:	443a      	add	r2, r7
 8000582:	e7be      	b.n	8000502 <__udivmoddi4+0x222>
 8000584:	45f0      	cmp	r8, lr
 8000586:	d29d      	bcs.n	80004c4 <__udivmoddi4+0x1e4>
 8000588:	ebbe 0302 	subs.w	r3, lr, r2
 800058c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000590:	3801      	subs	r0, #1
 8000592:	46e1      	mov	r9, ip
 8000594:	e796      	b.n	80004c4 <__udivmoddi4+0x1e4>
 8000596:	eba7 0909 	sub.w	r9, r7, r9
 800059a:	4449      	add	r1, r9
 800059c:	f1a8 0c02 	sub.w	ip, r8, #2
 80005a0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a4:	fb09 f804 	mul.w	r8, r9, r4
 80005a8:	e7db      	b.n	8000562 <__udivmoddi4+0x282>
 80005aa:	4673      	mov	r3, lr
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1ce>
 80005ae:	4650      	mov	r0, sl
 80005b0:	e766      	b.n	8000480 <__udivmoddi4+0x1a0>
 80005b2:	4608      	mov	r0, r1
 80005b4:	e6fd      	b.n	80003b2 <__udivmoddi4+0xd2>
 80005b6:	443b      	add	r3, r7
 80005b8:	3a02      	subs	r2, #2
 80005ba:	e733      	b.n	8000424 <__udivmoddi4+0x144>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	443b      	add	r3, r7
 80005c2:	e71c      	b.n	80003fe <__udivmoddi4+0x11e>
 80005c4:	4649      	mov	r1, r9
 80005c6:	e79c      	b.n	8000502 <__udivmoddi4+0x222>
 80005c8:	eba1 0109 	sub.w	r1, r1, r9
 80005cc:	46c4      	mov	ip, r8
 80005ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d2:	fb09 f804 	mul.w	r8, r9, r4
 80005d6:	e7c4      	b.n	8000562 <__udivmoddi4+0x282>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005dc:	b480      	push	{r7}
 80005de:	b085      	sub	sp, #20
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	60f8      	str	r0, [r7, #12]
 80005e4:	60b9      	str	r1, [r7, #8]
 80005e6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	4a07      	ldr	r2, [pc, #28]	@ (8000608 <vApplicationGetIdleTaskMemory+0x2c>)
 80005ec:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005ee:	68bb      	ldr	r3, [r7, #8]
 80005f0:	4a06      	ldr	r2, [pc, #24]	@ (800060c <vApplicationGetIdleTaskMemory+0x30>)
 80005f2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	2280      	movs	r2, #128	@ 0x80
 80005f8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005fa:	bf00      	nop
 80005fc:	3714      	adds	r7, #20
 80005fe:	46bd      	mov	sp, r7
 8000600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop
 8000608:	2000018c 	.word	0x2000018c
 800060c:	200001e0 	.word	0x200001e0

08000610 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000610:	b5b0      	push	{r4, r5, r7, lr}
 8000612:	b088      	sub	sp, #32
 8000614:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000616:	4b0a      	ldr	r3, [pc, #40]	@ (8000640 <MX_FREERTOS_Init+0x30>)
 8000618:	1d3c      	adds	r4, r7, #4
 800061a:	461d      	mov	r5, r3
 800061c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800061e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000620:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000624:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000628:	1d3b      	adds	r3, r7, #4
 800062a:	2100      	movs	r1, #0
 800062c:	4618      	mov	r0, r3
 800062e:	f003 fb94 	bl	8003d5a <osThreadCreate>
 8000632:	4603      	mov	r3, r0
 8000634:	4a03      	ldr	r2, [pc, #12]	@ (8000644 <MX_FREERTOS_Init+0x34>)
 8000636:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000638:	bf00      	nop
 800063a:	3720      	adds	r7, #32
 800063c:	46bd      	mov	sp, r7
 800063e:	bdb0      	pop	{r4, r5, r7, pc}
 8000640:	08006e1c 	.word	0x08006e1c
 8000644:	20000188 	.word	0x20000188

08000648 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000650:	2001      	movs	r0, #1
 8000652:	f003 fbce 	bl	8003df2 <osDelay>
 8000656:	e7fb      	b.n	8000650 <StartDefaultTask+0x8>

08000658 <MX_GPIO_Init>:
     PB11   ------> USB_OTG_HS_ULPI_D4
     PB14   ------> SPI2_MISO
     PB15   ------> SPI2_MOSI
*/
void MX_GPIO_Init(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b090      	sub	sp, #64	@ 0x40
 800065c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800065e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000662:	2200      	movs	r2, #0
 8000664:	601a      	str	r2, [r3, #0]
 8000666:	605a      	str	r2, [r3, #4]
 8000668:	609a      	str	r2, [r3, #8]
 800066a:	60da      	str	r2, [r3, #12]
 800066c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800066e:	4bad      	ldr	r3, [pc, #692]	@ (8000924 <MX_GPIO_Init+0x2cc>)
 8000670:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000672:	4aac      	ldr	r2, [pc, #688]	@ (8000924 <MX_GPIO_Init+0x2cc>)
 8000674:	f043 0310 	orr.w	r3, r3, #16
 8000678:	6313      	str	r3, [r2, #48]	@ 0x30
 800067a:	4baa      	ldr	r3, [pc, #680]	@ (8000924 <MX_GPIO_Init+0x2cc>)
 800067c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800067e:	f003 0310 	and.w	r3, r3, #16
 8000682:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000684:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000686:	4ba7      	ldr	r3, [pc, #668]	@ (8000924 <MX_GPIO_Init+0x2cc>)
 8000688:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800068a:	4aa6      	ldr	r2, [pc, #664]	@ (8000924 <MX_GPIO_Init+0x2cc>)
 800068c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000690:	6313      	str	r3, [r2, #48]	@ 0x30
 8000692:	4ba4      	ldr	r3, [pc, #656]	@ (8000924 <MX_GPIO_Init+0x2cc>)
 8000694:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000696:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800069a:	627b      	str	r3, [r7, #36]	@ 0x24
 800069c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800069e:	4ba1      	ldr	r3, [pc, #644]	@ (8000924 <MX_GPIO_Init+0x2cc>)
 80006a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006a2:	4aa0      	ldr	r2, [pc, #640]	@ (8000924 <MX_GPIO_Init+0x2cc>)
 80006a4:	f043 0302 	orr.w	r3, r3, #2
 80006a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80006aa:	4b9e      	ldr	r3, [pc, #632]	@ (8000924 <MX_GPIO_Init+0x2cc>)
 80006ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ae:	f003 0302 	and.w	r3, r3, #2
 80006b2:	623b      	str	r3, [r7, #32]
 80006b4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006b6:	4b9b      	ldr	r3, [pc, #620]	@ (8000924 <MX_GPIO_Init+0x2cc>)
 80006b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ba:	4a9a      	ldr	r2, [pc, #616]	@ (8000924 <MX_GPIO_Init+0x2cc>)
 80006bc:	f043 0308 	orr.w	r3, r3, #8
 80006c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80006c2:	4b98      	ldr	r3, [pc, #608]	@ (8000924 <MX_GPIO_Init+0x2cc>)
 80006c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006c6:	f003 0308 	and.w	r3, r3, #8
 80006ca:	61fb      	str	r3, [r7, #28]
 80006cc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006ce:	4b95      	ldr	r3, [pc, #596]	@ (8000924 <MX_GPIO_Init+0x2cc>)
 80006d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006d2:	4a94      	ldr	r2, [pc, #592]	@ (8000924 <MX_GPIO_Init+0x2cc>)
 80006d4:	f043 0304 	orr.w	r3, r3, #4
 80006d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80006da:	4b92      	ldr	r3, [pc, #584]	@ (8000924 <MX_GPIO_Init+0x2cc>)
 80006dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006de:	f003 0304 	and.w	r3, r3, #4
 80006e2:	61bb      	str	r3, [r7, #24]
 80006e4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006e6:	4b8f      	ldr	r3, [pc, #572]	@ (8000924 <MX_GPIO_Init+0x2cc>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ea:	4a8e      	ldr	r2, [pc, #568]	@ (8000924 <MX_GPIO_Init+0x2cc>)
 80006ec:	f043 0301 	orr.w	r3, r3, #1
 80006f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80006f2:	4b8c      	ldr	r3, [pc, #560]	@ (8000924 <MX_GPIO_Init+0x2cc>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006f6:	f003 0301 	and.w	r3, r3, #1
 80006fa:	617b      	str	r3, [r7, #20]
 80006fc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80006fe:	4b89      	ldr	r3, [pc, #548]	@ (8000924 <MX_GPIO_Init+0x2cc>)
 8000700:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000702:	4a88      	ldr	r2, [pc, #544]	@ (8000924 <MX_GPIO_Init+0x2cc>)
 8000704:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000708:	6313      	str	r3, [r2, #48]	@ 0x30
 800070a:	4b86      	ldr	r3, [pc, #536]	@ (8000924 <MX_GPIO_Init+0x2cc>)
 800070c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800070e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000712:	613b      	str	r3, [r7, #16]
 8000714:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000716:	4b83      	ldr	r3, [pc, #524]	@ (8000924 <MX_GPIO_Init+0x2cc>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800071a:	4a82      	ldr	r2, [pc, #520]	@ (8000924 <MX_GPIO_Init+0x2cc>)
 800071c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000720:	6313      	str	r3, [r2, #48]	@ 0x30
 8000722:	4b80      	ldr	r3, [pc, #512]	@ (8000924 <MX_GPIO_Init+0x2cc>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000726:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800072a:	60fb      	str	r3, [r7, #12]
 800072c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800072e:	4b7d      	ldr	r3, [pc, #500]	@ (8000924 <MX_GPIO_Init+0x2cc>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000732:	4a7c      	ldr	r2, [pc, #496]	@ (8000924 <MX_GPIO_Init+0x2cc>)
 8000734:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000738:	6313      	str	r3, [r2, #48]	@ 0x30
 800073a:	4b7a      	ldr	r3, [pc, #488]	@ (8000924 <MX_GPIO_Init+0x2cc>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800073e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000742:	60bb      	str	r3, [r7, #8]
 8000744:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000746:	4b77      	ldr	r3, [pc, #476]	@ (8000924 <MX_GPIO_Init+0x2cc>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800074a:	4a76      	ldr	r2, [pc, #472]	@ (8000924 <MX_GPIO_Init+0x2cc>)
 800074c:	f043 0320 	orr.w	r3, r3, #32
 8000750:	6313      	str	r3, [r2, #48]	@ 0x30
 8000752:	4b74      	ldr	r3, [pc, #464]	@ (8000924 <MX_GPIO_Init+0x2cc>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000756:	f003 0320 	and.w	r3, r3, #32
 800075a:	607b      	str	r3, [r7, #4]
 800075c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800075e:	4b71      	ldr	r3, [pc, #452]	@ (8000924 <MX_GPIO_Init+0x2cc>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000762:	4a70      	ldr	r2, [pc, #448]	@ (8000924 <MX_GPIO_Init+0x2cc>)
 8000764:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000768:	6313      	str	r3, [r2, #48]	@ 0x30
 800076a:	4b6e      	ldr	r3, [pc, #440]	@ (8000924 <MX_GPIO_Init+0x2cc>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800076e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000772:	603b      	str	r3, [r7, #0]
 8000774:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000776:	2201      	movs	r2, #1
 8000778:	2120      	movs	r1, #32
 800077a:	486b      	ldr	r0, [pc, #428]	@ (8000928 <MX_GPIO_Init+0x2d0>)
 800077c:	f001 fbf2 	bl	8001f64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin|LED_Pin|LCD_DISP_Pin, GPIO_PIN_RESET);
 8000780:	2200      	movs	r2, #0
 8000782:	f241 010e 	movw	r1, #4110	@ 0x100e
 8000786:	4869      	ldr	r0, [pc, #420]	@ (800092c <MX_GPIO_Init+0x2d4>)
 8000788:	f001 fbec 	bl	8001f64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 800078c:	2200      	movs	r2, #0
 800078e:	2108      	movs	r1, #8
 8000790:	4867      	ldr	r0, [pc, #412]	@ (8000930 <MX_GPIO_Init+0x2d8>)
 8000792:	f001 fbe7 	bl	8001f64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8000796:	2200      	movs	r2, #0
 8000798:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800079c:	4865      	ldr	r0, [pc, #404]	@ (8000934 <MX_GPIO_Init+0x2dc>)
 800079e:	f001 fbe1 	bl	8001f64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 80007a2:	2200      	movs	r2, #0
 80007a4:	21c8      	movs	r1, #200	@ 0xc8
 80007a6:	4864      	ldr	r0, [pc, #400]	@ (8000938 <MX_GPIO_Init+0x2e0>)
 80007a8:	f001 fbdc 	bl	8001f64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LCD_B0_Pin */
  GPIO_InitStruct.Pin = LCD_B0_Pin;
 80007ac:	2310      	movs	r3, #16
 80007ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007b0:	2302      	movs	r3, #2
 80007b2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b4:	2300      	movs	r3, #0
 80007b6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b8:	2300      	movs	r3, #0
 80007ba:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80007bc:	230e      	movs	r3, #14
 80007be:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 80007c0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80007c4:	4619      	mov	r1, r3
 80007c6:	485d      	ldr	r0, [pc, #372]	@ (800093c <MX_GPIO_Init+0x2e4>)
 80007c8:	f001 fa08 	bl	8001bdc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 80007cc:	2308      	movs	r3, #8
 80007ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007d0:	2300      	movs	r3, #0
 80007d2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d4:	2300      	movs	r3, #0
 80007d6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80007d8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80007dc:	4619      	mov	r1, r3
 80007de:	4857      	ldr	r0, [pc, #348]	@ (800093c <MX_GPIO_Init+0x2e4>)
 80007e0:	f001 f9fc 	bl	8001bdc <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_D2_Pin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 80007e4:	2304      	movs	r3, #4
 80007e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007e8:	2302      	movs	r3, #2
 80007ea:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ec:	2300      	movs	r3, #0
 80007ee:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007f0:	2303      	movs	r3, #3
 80007f2:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80007f4:	2309      	movs	r3, #9
 80007f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 80007f8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80007fc:	4619      	mov	r1, r3
 80007fe:	484f      	ldr	r0, [pc, #316]	@ (800093c <MX_GPIO_Init+0x2e4>)
 8000800:	f001 f9ec 	bl	8001bdc <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8000804:	f44f 43d0 	mov.w	r3, #26624	@ 0x6800
 8000808:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800080a:	2302      	movs	r3, #2
 800080c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080e:	2300      	movs	r3, #0
 8000810:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000812:	2303      	movs	r3, #3
 8000814:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000816:	230b      	movs	r3, #11
 8000818:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800081a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800081e:	4619      	mov	r1, r3
 8000820:	4845      	ldr	r0, [pc, #276]	@ (8000938 <MX_GPIO_Init+0x2e0>)
 8000822:	f001 f9db 	bl	8001bdc <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_NBL1_Pin FMC_NBL0_Pin FMC_D5_Pin FMC_D6_Pin
                           FMC_D8_Pin FMC_D11_Pin FMC_D4_Pin FMC_D7_Pin
                           FMC_D9_Pin FMC_D12_Pin FMC_D10_Pin */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8000826:	f64f 7383 	movw	r3, #65411	@ 0xff83
 800082a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800082c:	2302      	movs	r3, #2
 800082e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000830:	2300      	movs	r3, #0
 8000832:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000834:	2303      	movs	r3, #3
 8000836:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000838:	230c      	movs	r3, #12
 800083a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800083c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000840:	4619      	mov	r1, r3
 8000842:	483e      	ldr	r0, [pc, #248]	@ (800093c <MX_GPIO_Init+0x2e4>)
 8000844:	f001 f9ca 	bl	8001bdc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_SCL_D15_Pin ARDUINO_SDA_D14_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8000848:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800084c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800084e:	2312      	movs	r3, #18
 8000850:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000852:	2300      	movs	r3, #0
 8000854:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000856:	2300      	movs	r3, #0
 8000858:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800085a:	2304      	movs	r3, #4
 800085c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800085e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000862:	4619      	mov	r1, r3
 8000864:	4836      	ldr	r0, [pc, #216]	@ (8000940 <MX_GPIO_Init+0x2e8>)
 8000866:	f001 f9b9 	bl	8001bdc <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 800086a:	f643 4323 	movw	r3, #15395	@ 0x3c23
 800086e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000870:	2302      	movs	r3, #2
 8000872:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000874:	2300      	movs	r3, #0
 8000876:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000878:	2303      	movs	r3, #3
 800087a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800087c:	230a      	movs	r3, #10
 800087e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000880:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000884:	4619      	mov	r1, r3
 8000886:	482e      	ldr	r0, [pc, #184]	@ (8000940 <MX_GPIO_Init+0x2e8>)
 8000888:	f001 f9a8 	bl	8001bdc <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 800088c:	2310      	movs	r3, #16
 800088e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000890:	2302      	movs	r3, #2
 8000892:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000894:	2300      	movs	r3, #0
 8000896:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000898:	2300      	movs	r3, #0
 800089a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800089c:	2302      	movs	r3, #2
 800089e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 80008a0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80008a4:	4619      	mov	r1, r3
 80008a6:	4826      	ldr	r0, [pc, #152]	@ (8000940 <MX_GPIO_Init+0x2e8>)
 80008a8:	f001 f998 	bl	8001bdc <HAL_GPIO_Init>

  /*Configure GPIO pin : SPDIF_RX0_Pin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 80008ac:	2380      	movs	r3, #128	@ 0x80
 80008ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008b0:	2302      	movs	r3, #2
 80008b2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b4:	2300      	movs	r3, #0
 80008b6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b8:	2300      	movs	r3, #0
 80008ba:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 80008bc:	2308      	movs	r3, #8
 80008be:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 80008c0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80008c4:	4619      	mov	r1, r3
 80008c6:	4818      	ldr	r0, [pc, #96]	@ (8000928 <MX_GPIO_Init+0x2d0>)
 80008c8:	f001 f988 	bl	8001bdc <HAL_GPIO_Init>

  /*Configure GPIO pins : SDMMC_CK_Pin SDMMC_D3_Pin SDMMC_D2_Pin PC9
                           PC8 */
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 80008cc:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 80008d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d2:	2302      	movs	r3, #2
 80008d4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d6:	2300      	movs	r3, #0
 80008d8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008da:	2303      	movs	r3, #3
 80008dc:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80008de:	230c      	movs	r3, #12
 80008e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008e2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80008e6:	4619      	mov	r1, r3
 80008e8:	4816      	ldr	r0, [pc, #88]	@ (8000944 <MX_GPIO_Init+0x2ec>)
 80008ea:	f001 f977 	bl	8001bdc <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D9_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 80008ee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80008f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008f4:	2302      	movs	r3, #2
 80008f6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f8:	2300      	movs	r3, #0
 80008fa:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fc:	2300      	movs	r3, #0
 80008fe:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000900:	2301      	movs	r3, #1
 8000902:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8000904:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000908:	4619      	mov	r1, r3
 800090a:	480f      	ldr	r0, [pc, #60]	@ (8000948 <MX_GPIO_Init+0x2f0>)
 800090c:	f001 f966 	bl	8001bdc <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D6_Pin DCMI_D7_Pin */
  GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8000910:	2360      	movs	r3, #96	@ 0x60
 8000912:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000914:	2302      	movs	r3, #2
 8000916:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000918:	2300      	movs	r3, #0
 800091a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800091c:	2300      	movs	r3, #0
 800091e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000920:	230d      	movs	r3, #13
 8000922:	e013      	b.n	800094c <MX_GPIO_Init+0x2f4>
 8000924:	40023800 	.word	0x40023800
 8000928:	40020c00 	.word	0x40020c00
 800092c:	40022000 	.word	0x40022000
 8000930:	40022800 	.word	0x40022800
 8000934:	40021c00 	.word	0x40021c00
 8000938:	40021800 	.word	0x40021800
 800093c:	40021000 	.word	0x40021000
 8000940:	40020400 	.word	0x40020400
 8000944:	40020800 	.word	0x40020800
 8000948:	40020000 	.word	0x40020000
 800094c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800094e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000952:	4619      	mov	r1, r3
 8000954:	48bc      	ldr	r0, [pc, #752]	@ (8000c48 <MX_GPIO_Init+0x5f0>)
 8000956:	f001 f941 	bl	8001bdc <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_NCS_Pin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 800095a:	2340      	movs	r3, #64	@ 0x40
 800095c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800095e:	2302      	movs	r3, #2
 8000960:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000962:	2300      	movs	r3, #0
 8000964:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000966:	2303      	movs	r3, #3
 8000968:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800096a:	230a      	movs	r3, #10
 800096c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 800096e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000972:	4619      	mov	r1, r3
 8000974:	48b5      	ldr	r0, [pc, #724]	@ (8000c4c <MX_GPIO_Init+0x5f4>)
 8000976:	f001 f931 	bl	8001bdc <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNCAS_Pin FMC_SDCLK_Pin FMC_A11_Pin FMC_A10_Pin
                           FMC_BA1_Pin FMC_BA0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 800097a:	f248 1333 	movw	r3, #33075	@ 0x8133
 800097e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000980:	2302      	movs	r3, #2
 8000982:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000984:	2300      	movs	r3, #0
 8000986:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000988:	2303      	movs	r3, #3
 800098a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800098c:	230c      	movs	r3, #12
 800098e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000990:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000994:	4619      	mov	r1, r3
 8000996:	48ae      	ldr	r0, [pc, #696]	@ (8000c50 <MX_GPIO_Init+0x5f8>)
 8000998:	f001 f920 	bl	8001bdc <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_B1_Pin LCD_B2_Pin LCD_B3_Pin LCD_G4_Pin
                           LCD_G1_Pin LCD_G3_Pin LCD_G0_Pin LCD_G2_Pin
                           LCD_R7_Pin LCD_R5_Pin LCD_R6_Pin LCD_R4_Pin
                           LCD_R3_Pin LCD_R1_Pin LCD_R2_Pin */
  GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 800099c:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 80009a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a2:	2302      	movs	r3, #2
 80009a4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a6:	2300      	movs	r3, #0
 80009a8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009aa:	2300      	movs	r3, #0
 80009ac:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80009ae:	230e      	movs	r3, #14
 80009b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80009b2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80009b6:	4619      	mov	r1, r3
 80009b8:	48a6      	ldr	r0, [pc, #664]	@ (8000c54 <MX_GPIO_Init+0x5fc>)
 80009ba:	f001 f90f 	bl	8001bdc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 80009be:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009c4:	2300      	movs	r3, #0
 80009c6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c8:	2300      	movs	r3, #0
 80009ca:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80009cc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80009d0:	4619      	mov	r1, r3
 80009d2:	48a0      	ldr	r0, [pc, #640]	@ (8000c54 <MX_GPIO_Init+0x5fc>)
 80009d4:	f001 f902 	bl	8001bdc <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 80009d8:	2340      	movs	r3, #64	@ 0x40
 80009da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009dc:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80009e0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e2:	2300      	movs	r3, #0
 80009e4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 80009e6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80009ea:	4619      	mov	r1, r3
 80009ec:	489a      	ldr	r0, [pc, #616]	@ (8000c58 <MX_GPIO_Init+0x600>)
 80009ee:	f001 f8f5 	bl	8001bdc <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_D2_Pin FMC_D3_Pin FMC_D1_Pin FMC_D15_Pin
                           FMC_D0_Pin FMC_D14_Pin FMC_D13_Pin */
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 80009f2:	f24c 7303 	movw	r3, #50947	@ 0xc703
 80009f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f8:	2302      	movs	r3, #2
 80009fa:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fc:	2300      	movs	r3, #0
 80009fe:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a00:	2303      	movs	r3, #3
 8000a02:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000a04:	230c      	movs	r3, #12
 8000a06:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a08:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	4892      	ldr	r0, [pc, #584]	@ (8000c58 <MX_GPIO_Init+0x600>)
 8000a10:	f001 f8e4 	bl	8001bdc <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 8000a14:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000a18:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a1a:	2302      	movs	r3, #2
 8000a1c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a22:	2303      	movs	r3, #3
 8000a24:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000a26:	230a      	movs	r3, #10
 8000a28:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a2a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a2e:	4619      	mov	r1, r3
 8000a30:	488a      	ldr	r0, [pc, #552]	@ (8000c5c <MX_GPIO_Init+0x604>)
 8000a32:	f001 f8d3 	bl	8001bdc <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI2_MCLKA_Pin SAI2_SCKA_Pin SAI2_FSA_Pin SAI2_SDA_Pin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8000a36:	23f0      	movs	r3, #240	@ 0xf0
 8000a38:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a3a:	2302      	movs	r3, #2
 8000a3c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a42:	2300      	movs	r3, #0
 8000a44:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8000a46:	230a      	movs	r3, #10
 8000a48:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000a4a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a4e:	4619      	mov	r1, r3
 8000a50:	4883      	ldr	r0, [pc, #524]	@ (8000c60 <MX_GPIO_Init+0x608>)
 8000a52:	f001 f8c3 	bl	8001bdc <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_DE_Pin LCD_B7_Pin LCD_B6_Pin LCD_B5_Pin
                           LCD_G6_Pin LCD_G7_Pin LCD_G5_Pin */
  GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8000a56:	23f7      	movs	r3, #247	@ 0xf7
 8000a58:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a5a:	2302      	movs	r3, #2
 8000a5c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a62:	2300      	movs	r3, #0
 8000a64:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000a66:	230e      	movs	r3, #14
 8000a68:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8000a6a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a6e:	4619      	mov	r1, r3
 8000a70:	487c      	ldr	r0, [pc, #496]	@ (8000c64 <MX_GPIO_Init+0x60c>)
 8000a72:	f001 f8b3 	bl	8001bdc <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_B4_Pin */
  GPIO_InitStruct.Pin = LCD_B4_Pin;
 8000a76:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a7c:	2302      	movs	r3, #2
 8000a7e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a80:	2300      	movs	r3, #0
 8000a82:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a84:	2300      	movs	r3, #0
 8000a86:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000a88:	2309      	movs	r3, #9
 8000a8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8000a8c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a90:	4619      	mov	r1, r3
 8000a92:	486f      	ldr	r0, [pc, #444]	@ (8000c50 <MX_GPIO_Init+0x5f8>)
 8000a94:	f001 f8a2 	bl	8001bdc <HAL_GPIO_Init>

  /*Configure GPIO pin : SAI2_SDB_Pin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8000a98:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a9e:	2302      	movs	r3, #2
 8000aa0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8000aaa:	230a      	movs	r3, #10
 8000aac:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8000aae:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	4866      	ldr	r0, [pc, #408]	@ (8000c50 <MX_GPIO_Init+0x5f8>)
 8000ab6:	f001 f891 	bl	8001bdc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000aba:	2320      	movs	r3, #32
 8000abc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000abe:	2301      	movs	r3, #1
 8000ac0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000aca:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ace:	4619      	mov	r1, r3
 8000ad0:	4861      	ldr	r0, [pc, #388]	@ (8000c58 <MX_GPIO_Init+0x600>)
 8000ad2:	f001 f883 	bl	8001bdc <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_D5_Pin */
  GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8000ad6:	2308      	movs	r3, #8
 8000ad8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ada:	2302      	movs	r3, #2
 8000adc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000ae6:	230d      	movs	r3, #13
 8000ae8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8000aea:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000aee:	4619      	mov	r1, r3
 8000af0:	4859      	ldr	r0, [pc, #356]	@ (8000c58 <MX_GPIO_Init+0x600>)
 8000af2:	f001 f873 	bl	8001bdc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LED_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LED_Pin|LCD_DISP_Pin;
 8000af6:	f241 030e 	movw	r3, #4110	@ 0x100e
 8000afa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000afc:	2301      	movs	r3, #1
 8000afe:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b00:	2300      	movs	r3, #0
 8000b02:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b04:	2300      	movs	r3, #0
 8000b06:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000b08:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	4854      	ldr	r0, [pc, #336]	@ (8000c60 <MX_GPIO_Init+0x608>)
 8000b10:	f001 f864 	bl	8001bdc <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8000b14:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b18:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8000b22:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b26:	4619      	mov	r1, r3
 8000b28:	484f      	ldr	r0, [pc, #316]	@ (8000c68 <MX_GPIO_Init+0x610>)
 8000b2a:	f001 f857 	bl	8001bdc <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_A0_Pin FMC_A1_Pin FMC_A2_Pin FMC_A3_Pin
                           FMC_A4_Pin FMC_A5_Pin FMC_A6_Pin FMC_A9_Pin
                           FMC_A7_Pin FMC_A8_Pin FMC_SDNRAS_Pin */
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8000b2e:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8000b32:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b34:	2302      	movs	r3, #2
 8000b36:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b3c:	2303      	movs	r3, #3
 8000b3e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000b40:	230c      	movs	r3, #12
 8000b42:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000b44:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b48:	4619      	mov	r1, r3
 8000b4a:	4848      	ldr	r0, [pc, #288]	@ (8000c6c <MX_GPIO_Init+0x614>)
 8000b4c:	f001 f846 	bl	8001bdc <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_HSYNC_Pin LCD_VSYNC_Pin LCD_R0_Pin LCD_CLK_Pin */
  GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8000b50:	f44f 4346 	mov.w	r3, #50688	@ 0xc600
 8000b54:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b56:	2302      	movs	r3, #2
 8000b58:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000b62:	230e      	movs	r3, #14
 8000b64:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000b66:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	483c      	ldr	r0, [pc, #240]	@ (8000c60 <MX_GPIO_Init+0x608>)
 8000b6e:	f001 f835 	bl	8001bdc <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8000b72:	2308      	movs	r3, #8
 8000b74:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b76:	2301      	movs	r3, #1
 8000b78:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8000b82:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b86:	4619      	mov	r1, r3
 8000b88:	4836      	ldr	r0, [pc, #216]	@ (8000c64 <MX_GPIO_Init+0x60c>)
 8000b8a:	f001 f827 	bl	8001bdc <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_VSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8000b8e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000b92:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b94:	2302      	movs	r3, #2
 8000b96:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000ba0:	230d      	movs	r3, #13
 8000ba2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8000ba4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ba8:	4619      	mov	r1, r3
 8000baa:	4829      	ldr	r0, [pc, #164]	@ (8000c50 <MX_GPIO_Init+0x5f8>)
 8000bac:	f001 f816 	bl	8001bdc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000bb0:	2310      	movs	r3, #16
 8000bb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000bbc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	4825      	ldr	r0, [pc, #148]	@ (8000c58 <MX_GPIO_Init+0x600>)
 8000bc4:	f001 f80a 	bl	8001bdc <HAL_GPIO_Init>

  /*Configure GPIO pin : SDMMC_D0_Pin */
  GPIO_InitStruct.Pin = SDMMC_D0_Pin;
 8000bc8:	2304      	movs	r3, #4
 8000bca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bcc:	2302      	movs	r3, #2
 8000bce:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bd4:	2303      	movs	r3, #3
 8000bd6:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000bd8:	230c      	movs	r3, #12
 8000bda:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SDMMC_D0_GPIO_Port, &GPIO_InitStruct);
 8000bdc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000be0:	4619      	mov	r1, r3
 8000be2:	481d      	ldr	r0, [pc, #116]	@ (8000c58 <MX_GPIO_Init+0x600>)
 8000be4:	f000 fffa 	bl	8001bdc <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8000be8:	f248 0304 	movw	r3, #32772	@ 0x8004
 8000bec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000bf6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	481c      	ldr	r0, [pc, #112]	@ (8000c70 <MX_GPIO_Init+0x618>)
 8000bfe:	f000 ffed 	bl	8001bdc <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8000c02:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c06:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c08:	2301      	movs	r3, #1
 8000c0a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c10:	2300      	movs	r3, #0
 8000c12:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000c14:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c18:	4619      	mov	r1, r3
 8000c1a:	4815      	ldr	r0, [pc, #84]	@ (8000c70 <MX_GPIO_Init+0x618>)
 8000c1c:	f000 ffde 	bl	8001bdc <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D4_Pin DCMI_D3_Pin DCMI_D0_Pin DCMI_D2_Pin
                           DCMI_D1_Pin */
  GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8000c20:	f44f 43bc 	mov.w	r3, #24064	@ 0x5e00
 8000c24:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |DCMI_D1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c26:	2302      	movs	r3, #2
 8000c28:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000c32:	230d      	movs	r3, #13
 8000c34:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000c36:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	480c      	ldr	r0, [pc, #48]	@ (8000c70 <MX_GPIO_Init+0x618>)
 8000c3e:	f000 ffcd 	bl	8001bdc <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_CS_D5_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 8000c42:	2301      	movs	r3, #1
 8000c44:	e016      	b.n	8000c74 <MX_GPIO_Init+0x61c>
 8000c46:	bf00      	nop
 8000c48:	40021000 	.word	0x40021000
 8000c4c:	40020400 	.word	0x40020400
 8000c50:	40021800 	.word	0x40021800
 8000c54:	40022400 	.word	0x40022400
 8000c58:	40020c00 	.word	0x40020c00
 8000c5c:	40020000 	.word	0x40020000
 8000c60:	40022000 	.word	0x40022000
 8000c64:	40022800 	.word	0x40022800
 8000c68:	40020800 	.word	0x40020800
 8000c6c:	40021400 	.word	0x40021400
 8000c70:	40021c00 	.word	0x40021c00
 8000c74:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c76:	2302      	movs	r3, #2
 8000c78:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8000c82:	2302      	movs	r3, #2
 8000c84:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 8000c86:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	48a4      	ldr	r0, [pc, #656]	@ (8000f20 <MX_GPIO_Init+0x8c8>)
 8000c8e:	f000 ffa5 	bl	8001bdc <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8000c92:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000c96:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000ca0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	489e      	ldr	r0, [pc, #632]	@ (8000f20 <MX_GPIO_Init+0x8c8>)
 8000ca8:	f000 ff98 	bl	8001bdc <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D10_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8000cac:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000cb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb2:	2302      	movs	r3, #2
 8000cb4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8000cc2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	4896      	ldr	r0, [pc, #600]	@ (8000f24 <MX_GPIO_Init+0x8cc>)
 8000cca:	f000 ff87 	bl	8001bdc <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8000cce:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000cd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000cd4:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000cd8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8000cde:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	488e      	ldr	r0, [pc, #568]	@ (8000f20 <MX_GPIO_Init+0x8c8>)
 8000ce6:	f000 ff79 	bl	8001bdc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_RX_D0_Pin ARDUINO_TX_D1_Pin */
  GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8000cea:	23c0      	movs	r3, #192	@ 0xc0
 8000cec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cee:	2302      	movs	r3, #2
 8000cf0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cf6:	2303      	movs	r3, #3
 8000cf8:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000cfa:	2308      	movs	r3, #8
 8000cfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cfe:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d02:	4619      	mov	r1, r3
 8000d04:	4888      	ldr	r0, [pc, #544]	@ (8000f28 <MX_GPIO_Init+0x8d0>)
 8000d06:	f000 ff69 	bl	8001bdc <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8000d0a:	2310      	movs	r3, #16
 8000d0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d0e:	2302      	movs	r3, #2
 8000d10:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d12:	2300      	movs	r3, #0
 8000d14:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d16:	2303      	movs	r3, #3
 8000d18:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000d1a:	230a      	movs	r3, #10
 8000d1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8000d1e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d22:	4619      	mov	r1, r3
 8000d24:	4881      	ldr	r0, [pc, #516]	@ (8000f2c <MX_GPIO_Init+0x8d4>)
 8000d26:	f000 ff59 	bl	8001bdc <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNME_Pin FMC_SDNE0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8000d2a:	2328      	movs	r3, #40	@ 0x28
 8000d2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d2e:	2302      	movs	r3, #2
 8000d30:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d32:	2300      	movs	r3, #0
 8000d34:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d36:	2303      	movs	r3, #3
 8000d38:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000d3a:	230c      	movs	r3, #12
 8000d3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000d3e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d42:	4619      	mov	r1, r3
 8000d44:	4879      	ldr	r0, [pc, #484]	@ (8000f2c <MX_GPIO_Init+0x8d4>)
 8000d46:	f000 ff49 	bl	8001bdc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8000d4a:	23c8      	movs	r3, #200	@ 0xc8
 8000d4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d4e:	2301      	movs	r3, #1
 8000d50:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d52:	2300      	movs	r3, #0
 8000d54:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d56:	2300      	movs	r3, #0
 8000d58:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d5a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d5e:	4619      	mov	r1, r3
 8000d60:	4873      	ldr	r0, [pc, #460]	@ (8000f30 <MX_GPIO_Init+0x8d8>)
 8000d62:	f000 ff3b 	bl	8001bdc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_A4_Pin ARDUINO_A5_Pin ARDUINO_A1_Pin ARDUINO_A2_Pin
                           ARDUINO_A3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 8000d66:	f44f 63f8 	mov.w	r3, #1984	@ 0x7c0
 8000d6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |ARDUINO_A3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d6c:	2303      	movs	r3, #3
 8000d6e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d70:	2300      	movs	r3, #0
 8000d72:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000d74:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d78:	4619      	mov	r1, r3
 8000d7a:	486e      	ldr	r0, [pc, #440]	@ (8000f34 <MX_GPIO_Init+0x8dc>)
 8000d7c:	f000 ff2e 	bl	8001bdc <HAL_GPIO_Init>

  /*Configure GPIO pin : FMC_SDCKE0_Pin */
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8000d80:	2308      	movs	r3, #8
 8000d82:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d84:	2302      	movs	r3, #2
 8000d86:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d8c:	2303      	movs	r3, #3
 8000d8e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000d90:	230c      	movs	r3, #12
 8000d92:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8000d94:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d98:	4619      	mov	r1, r3
 8000d9a:	4863      	ldr	r0, [pc, #396]	@ (8000f28 <MX_GPIO_Init+0x8d0>)
 8000d9c:	f000 ff1e 	bl	8001bdc <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8000da0:	2305      	movs	r3, #5
 8000da2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da4:	2302      	movs	r3, #2
 8000da6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da8:	2300      	movs	r3, #0
 8000daa:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dac:	2303      	movs	r3, #3
 8000dae:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000db0:	230a      	movs	r3, #10
 8000db2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000db4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000db8:	4619      	mov	r1, r3
 8000dba:	485b      	ldr	r0, [pc, #364]	@ (8000f28 <MX_GPIO_Init+0x8d0>)
 8000dbc:	f000 ff0e 	bl	8001bdc <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000dc0:	2332      	movs	r3, #50	@ 0x32
 8000dc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc4:	2302      	movs	r3, #2
 8000dc6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dcc:	2303      	movs	r3, #3
 8000dce:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000dd0:	230b      	movs	r3, #11
 8000dd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dd4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000dd8:	4619      	mov	r1, r3
 8000dda:	4853      	ldr	r0, [pc, #332]	@ (8000f28 <MX_GPIO_Init+0x8d0>)
 8000ddc:	f000 fefe 	bl	8001bdc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000de0:	2304      	movs	r3, #4
 8000de2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de4:	2302      	movs	r3, #2
 8000de6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de8:	2300      	movs	r3, #0
 8000dea:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dec:	2303      	movs	r3, #3
 8000dee:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000df0:	2309      	movs	r3, #9
 8000df2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000df4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000df8:	4619      	mov	r1, r3
 8000dfa:	484f      	ldr	r0, [pc, #316]	@ (8000f38 <MX_GPIO_Init+0x8e0>)
 8000dfc:	f000 feee 	bl	8001bdc <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_D1_Pin QSPI_D3_Pin QSPI_D0_Pin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8000e00:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8000e04:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e06:	2302      	movs	r3, #2
 8000e08:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e0e:	2303      	movs	r3, #3
 8000e10:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000e12:	2309      	movs	r3, #9
 8000e14:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e16:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	4847      	ldr	r0, [pc, #284]	@ (8000f3c <MX_GPIO_Init+0x8e4>)
 8000e1e:	f000 fedd 	bl	8001bdc <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8000e22:	2304      	movs	r3, #4
 8000e24:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e26:	2300      	movs	r3, #0
 8000e28:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8000e2e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e32:	4619      	mov	r1, r3
 8000e34:	483e      	ldr	r0, [pc, #248]	@ (8000f30 <MX_GPIO_Init+0x8d8>)
 8000e36:	f000 fed1 	bl	8001bdc <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000e3a:	2386      	movs	r3, #134	@ 0x86
 8000e3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e3e:	2302      	movs	r3, #2
 8000e40:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e42:	2300      	movs	r3, #0
 8000e44:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e46:	2303      	movs	r3, #3
 8000e48:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e4a:	230b      	movs	r3, #11
 8000e4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e4e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e52:	4619      	mov	r1, r3
 8000e54:	4833      	ldr	r0, [pc, #204]	@ (8000f24 <MX_GPIO_Init+0x8cc>)
 8000e56:	f000 fec1 	bl	8001bdc <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_A0_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e5e:	2303      	movs	r3, #3
 8000e60:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e62:	2300      	movs	r3, #0
 8000e64:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8000e66:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	482d      	ldr	r0, [pc, #180]	@ (8000f24 <MX_GPIO_Init+0x8cc>)
 8000e6e:	f000 feb5 	bl	8001bdc <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_HSYNC_Pin PA6 */
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8000e72:	2350      	movs	r3, #80	@ 0x50
 8000e74:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e76:	2302      	movs	r3, #2
 8000e78:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000e82:	230d      	movs	r3, #13
 8000e84:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e86:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	4825      	ldr	r0, [pc, #148]	@ (8000f24 <MX_GPIO_Init+0x8cc>)
 8000e8e:	f000 fea5 	bl	8001bdc <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_SCL_Pin LCD_SDA_Pin */
  GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8000e92:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000e96:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e98:	2312      	movs	r3, #18
 8000e9a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ea0:	2303      	movs	r3, #3
 8000ea2:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000ea4:	2304      	movs	r3, #4
 8000ea6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000ea8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000eac:	4619      	mov	r1, r3
 8000eae:	481f      	ldr	r0, [pc, #124]	@ (8000f2c <MX_GPIO_Init+0x8d4>)
 8000eb0:	f000 fe94 	bl	8001bdc <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8000eb4:	2328      	movs	r3, #40	@ 0x28
 8000eb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb8:	2302      	movs	r3, #2
 8000eba:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ec0:	2303      	movs	r3, #3
 8000ec2:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000ec4:	230a      	movs	r3, #10
 8000ec6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ec8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ecc:	4619      	mov	r1, r3
 8000ece:	4815      	ldr	r0, [pc, #84]	@ (8000f24 <MX_GPIO_Init+0x8cc>)
 8000ed0:	f000 fe84 	bl	8001bdc <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D6_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8000ed4:	2340      	movs	r3, #64	@ 0x40
 8000ed6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed8:	2302      	movs	r3, #2
 8000eda:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000edc:	2300      	movs	r3, #0
 8000ede:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8000ee4:	2309      	movs	r3, #9
 8000ee6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8000ee8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000eec:	4619      	mov	r1, r3
 8000eee:	480f      	ldr	r0, [pc, #60]	@ (8000f2c <MX_GPIO_Init+0x8d4>)
 8000ef0:	f000 fe74 	bl	8001bdc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8000ef4:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000ef8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000efa:	2302      	movs	r3, #2
 8000efc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efe:	2300      	movs	r3, #0
 8000f00:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f02:	2300      	movs	r3, #0
 8000f04:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000f06:	2305      	movs	r3, #5
 8000f08:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f0a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f0e:	4619      	mov	r1, r3
 8000f10:	4809      	ldr	r0, [pc, #36]	@ (8000f38 <MX_GPIO_Init+0x8e0>)
 8000f12:	f000 fe63 	bl	8001bdc <HAL_GPIO_Init>

}
 8000f16:	bf00      	nop
 8000f18:	3740      	adds	r7, #64	@ 0x40
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	40022000 	.word	0x40022000
 8000f24:	40020000 	.word	0x40020000
 8000f28:	40020800 	.word	0x40020800
 8000f2c:	40021c00 	.word	0x40021c00
 8000f30:	40021800 	.word	0x40021800
 8000f34:	40021400 	.word	0x40021400
 8000f38:	40020400 	.word	0x40020400
 8000f3c:	40020c00 	.word	0x40020c00

08000f40 <__io_putchar>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
void MX_FREERTOS_Init(void);
/* USER CODE BEGIN PFP */
int __io_putchar(int chr)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)&chr, 1, HAL_MAX_DELAY);
 8000f48:	1d39      	adds	r1, r7, #4
 8000f4a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f4e:	2201      	movs	r2, #1
 8000f50:	4803      	ldr	r0, [pc, #12]	@ (8000f60 <__io_putchar+0x20>)
 8000f52:	f002 f963 	bl	800321c <HAL_UART_Transmit>
	return chr;
 8000f56:	687b      	ldr	r3, [r7, #4]
}
 8000f58:	4618      	mov	r0, r3
 8000f5a:	3708      	adds	r7, #8
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	20000900 	.word	0x20000900

08000f64 <LedTask>:

void LedTask(void *pvParameters)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
	while (1)
	{
		if (led_period_ms == 0)
 8000f6c:	4b0f      	ldr	r3, [pc, #60]	@ (8000fac <LedTask+0x48>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d108      	bne.n	8000f86 <LedTask+0x22>
		{
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000f74:	2200      	movs	r2, #0
 8000f76:	2102      	movs	r1, #2
 8000f78:	480d      	ldr	r0, [pc, #52]	@ (8000fb0 <LedTask+0x4c>)
 8000f7a:	f000 fff3 	bl	8001f64 <HAL_GPIO_WritePin>
			vTaskSuspend(NULL);
 8000f7e:	2000      	movs	r0, #0
 8000f80:	f003 fa48 	bl	8004414 <vTaskSuspend>
 8000f84:	e7f2      	b.n	8000f6c <LedTask+0x8>
		}
		else
		{
			HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000f86:	2102      	movs	r1, #2
 8000f88:	4809      	ldr	r0, [pc, #36]	@ (8000fb0 <LedTask+0x4c>)
 8000f8a:	f001 f804 	bl	8001f96 <HAL_GPIO_TogglePin>
			vTaskDelay(pdMS_TO_TICKS(led_period_ms / 2));
 8000f8e:	4b07      	ldr	r3, [pc, #28]	@ (8000fac <LedTask+0x48>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	085b      	lsrs	r3, r3, #1
 8000f94:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000f98:	fb02 f303 	mul.w	r3, r2, r3
 8000f9c:	4a05      	ldr	r2, [pc, #20]	@ (8000fb4 <LedTask+0x50>)
 8000f9e:	fba2 2303 	umull	r2, r3, r2, r3
 8000fa2:	099b      	lsrs	r3, r3, #6
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f003 f993 	bl	80042d0 <vTaskDelay>
		if (led_period_ms == 0)
 8000faa:	e7df      	b.n	8000f6c <LedTask+0x8>
 8000fac:	200008f0 	.word	0x200008f0
 8000fb0:	40022000 	.word	0x40022000
 8000fb4:	10624dd3 	.word	0x10624dd3

08000fb8 <ma_fonction_test>:
		vTaskDelay(delay);
	}
}*/

int ma_fonction_test(h_shell_t * h_shell, int argc, char ** argv)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b088      	sub	sp, #32
 8000fbc:	af02      	add	r7, sp, #8
 8000fbe:	60f8      	str	r0, [r7, #12]
 8000fc0:	60b9      	str	r1, [r7, #8]
 8000fc2:	607a      	str	r2, [r7, #4]
	int size;
	size = snprintf(h_shell->print_buffer, BUFFER_SIZE, "Fonction test appelee avec %d argument(s)\r\n", argc);
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	f503 7041 	add.w	r0, r3, #772	@ 0x304
 8000fca:	68bb      	ldr	r3, [r7, #8]
 8000fcc:	4a1c      	ldr	r2, [pc, #112]	@ (8001040 <ma_fonction_test+0x88>)
 8000fce:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000fd2:	f004 feb7 	bl	8005d44 <sniprintf>
 8000fd6:	6138      	str	r0, [r7, #16]
	h_shell->drv.transmit(h_shell->print_buffer, size);
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	f8d3 3504 	ldr.w	r3, [r3, #1284]	@ 0x504
 8000fde:	68fa      	ldr	r2, [r7, #12]
 8000fe0:	f502 7241 	add.w	r2, r2, #772	@ 0x304
 8000fe4:	6939      	ldr	r1, [r7, #16]
 8000fe6:	b289      	uxth	r1, r1
 8000fe8:	4610      	mov	r0, r2
 8000fea:	4798      	blx	r3

	for(int i = 0; i < argc; i++) {
 8000fec:	2300      	movs	r3, #0
 8000fee:	617b      	str	r3, [r7, #20]
 8000ff0:	e01c      	b.n	800102c <ma_fonction_test+0x74>
		size = snprintf(h_shell->print_buffer, BUFFER_SIZE, "argv[%d] = %s\r\n", i, argv[i]);
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	f503 7041 	add.w	r0, r3, #772	@ 0x304
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	009b      	lsls	r3, r3, #2
 8000ffc:	687a      	ldr	r2, [r7, #4]
 8000ffe:	4413      	add	r3, r2
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	9300      	str	r3, [sp, #0]
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	4a0f      	ldr	r2, [pc, #60]	@ (8001044 <ma_fonction_test+0x8c>)
 8001008:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800100c:	f004 fe9a 	bl	8005d44 <sniprintf>
 8001010:	6138      	str	r0, [r7, #16]
		h_shell->drv.transmit(h_shell->print_buffer, size);
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	f8d3 3504 	ldr.w	r3, [r3, #1284]	@ 0x504
 8001018:	68fa      	ldr	r2, [r7, #12]
 800101a:	f502 7241 	add.w	r2, r2, #772	@ 0x304
 800101e:	6939      	ldr	r1, [r7, #16]
 8001020:	b289      	uxth	r1, r1
 8001022:	4610      	mov	r0, r2
 8001024:	4798      	blx	r3
	for(int i = 0; i < argc; i++) {
 8001026:	697b      	ldr	r3, [r7, #20]
 8001028:	3301      	adds	r3, #1
 800102a:	617b      	str	r3, [r7, #20]
 800102c:	697a      	ldr	r2, [r7, #20]
 800102e:	68bb      	ldr	r3, [r7, #8]
 8001030:	429a      	cmp	r2, r3
 8001032:	dbde      	blt.n	8000ff2 <ma_fonction_test+0x3a>
	}

	return 0;
 8001034:	2300      	movs	r3, #0
}
 8001036:	4618      	mov	r0, r3
 8001038:	3718      	adds	r7, #24
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	08006e38 	.word	0x08006e38
 8001044:	08006e64 	.word	0x08006e64

08001048 <shellTask>:

void shellTask(void * pvParameters)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
	shell_run(&mon_shell);
 8001050:	4803      	ldr	r0, [pc, #12]	@ (8001060 <shellTask+0x18>)
 8001052:	f004 fc31 	bl	80058b8 <shell_run>
}
 8001056:	bf00      	nop
 8001058:	3708      	adds	r7, #8
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	200003e0 	.word	0x200003e0

08001064 <led_shell_func>:

int led_shell_func(h_shell_t * h_shell, int argc, char ** argv)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b088      	sub	sp, #32
 8001068:	af02      	add	r7, sp, #8
 800106a:	60f8      	str	r0, [r7, #12]
 800106c:	60b9      	str	r1, [r7, #8]
 800106e:	607a      	str	r2, [r7, #4]
	if (argc < 2)
 8001070:	68bb      	ldr	r3, [r7, #8]
 8001072:	2b01      	cmp	r3, #1
 8001074:	dc16      	bgt.n	80010a4 <led_shell_func+0x40>
	{
		int len = snprintf(h_shell->print_buffer, BUFFER_SIZE, "Usage: l <periode_ms>\r\n");
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	f503 7341 	add.w	r3, r3, #772	@ 0x304
 800107c:	4a28      	ldr	r2, [pc, #160]	@ (8001120 <led_shell_func+0xbc>)
 800107e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001082:	4618      	mov	r0, r3
 8001084:	f004 fe5e 	bl	8005d44 <sniprintf>
 8001088:	6138      	str	r0, [r7, #16]
		h_shell->drv.transmit(h_shell->print_buffer, len);
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	f8d3 3504 	ldr.w	r3, [r3, #1284]	@ 0x504
 8001090:	68fa      	ldr	r2, [r7, #12]
 8001092:	f502 7241 	add.w	r2, r2, #772	@ 0x304
 8001096:	6939      	ldr	r1, [r7, #16]
 8001098:	b289      	uxth	r1, r1
 800109a:	4610      	mov	r0, r2
 800109c:	4798      	blx	r3
		return -1;
 800109e:	f04f 33ff 	mov.w	r3, #4294967295
 80010a2:	e039      	b.n	8001118 <led_shell_func+0xb4>
	}

	led_period_ms = atoi(argv[1]);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	3304      	adds	r3, #4
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	4618      	mov	r0, r3
 80010ac:	f004 fc90 	bl	80059d0 <atoi>
 80010b0:	4603      	mov	r3, r0
 80010b2:	461a      	mov	r2, r3
 80010b4:	4b1b      	ldr	r3, [pc, #108]	@ (8001124 <led_shell_func+0xc0>)
 80010b6:	601a      	str	r2, [r3, #0]

	if (led_period_ms > 0)
 80010b8:	4b1a      	ldr	r3, [pc, #104]	@ (8001124 <led_shell_func+0xc0>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d00c      	beq.n	80010da <led_shell_func+0x76>
	{
		if (eTaskGetState(ledTaskHandle) == eSuspended)
 80010c0:	4b19      	ldr	r3, [pc, #100]	@ (8001128 <led_shell_func+0xc4>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4618      	mov	r0, r3
 80010c6:	f003 f93b 	bl	8004340 <eTaskGetState>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b03      	cmp	r3, #3
 80010ce:	d104      	bne.n	80010da <led_shell_func+0x76>
		{
			vTaskResume(ledTaskHandle);
 80010d0:	4b15      	ldr	r3, [pc, #84]	@ (8001128 <led_shell_func+0xc4>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4618      	mov	r0, r3
 80010d6:	f003 fa67 	bl	80045a8 <vTaskResume>
		}
	}

	int len = snprintf(h_shell->print_buffer, BUFFER_SIZE,
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	f503 7041 	add.w	r0, r3, #772	@ 0x304
			"Clignotement LED %s (periode = %lu ms)\r\n",
			led_period_ms == 0 ? "désactivé" : "activé", led_period_ms);
 80010e0:	4b10      	ldr	r3, [pc, #64]	@ (8001124 <led_shell_func+0xc0>)
 80010e2:	681b      	ldr	r3, [r3, #0]
	int len = snprintf(h_shell->print_buffer, BUFFER_SIZE,
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d101      	bne.n	80010ec <led_shell_func+0x88>
 80010e8:	4a10      	ldr	r2, [pc, #64]	@ (800112c <led_shell_func+0xc8>)
 80010ea:	e000      	b.n	80010ee <led_shell_func+0x8a>
 80010ec:	4a10      	ldr	r2, [pc, #64]	@ (8001130 <led_shell_func+0xcc>)
 80010ee:	4b0d      	ldr	r3, [pc, #52]	@ (8001124 <led_shell_func+0xc0>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	9300      	str	r3, [sp, #0]
 80010f4:	4613      	mov	r3, r2
 80010f6:	4a0f      	ldr	r2, [pc, #60]	@ (8001134 <led_shell_func+0xd0>)
 80010f8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80010fc:	f004 fe22 	bl	8005d44 <sniprintf>
 8001100:	6178      	str	r0, [r7, #20]
	h_shell->drv.transmit(h_shell->print_buffer, len);
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	f8d3 3504 	ldr.w	r3, [r3, #1284]	@ 0x504
 8001108:	68fa      	ldr	r2, [r7, #12]
 800110a:	f502 7241 	add.w	r2, r2, #772	@ 0x304
 800110e:	6979      	ldr	r1, [r7, #20]
 8001110:	b289      	uxth	r1, r1
 8001112:	4610      	mov	r0, r2
 8001114:	4798      	blx	r3

	return 0;
 8001116:	2300      	movs	r3, #0
}
 8001118:	4618      	mov	r0, r3
 800111a:	3718      	adds	r7, #24
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}
 8001120:	08006e74 	.word	0x08006e74
 8001124:	200008f0 	.word	0x200008f0
 8001128:	200008ec 	.word	0x200008ec
 800112c:	08006e8c 	.word	0x08006e8c
 8001130:	08006e98 	.word	0x08006e98
 8001134:	08006ea0 	.word	0x08006ea0

08001138 <spamTask>:

void spamTask(void *pvParameters)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
	while (1)
	{
		if (spam_count > 0)
 8001140:	4b08      	ldr	r3, [pc, #32]	@ (8001164 <spamTask+0x2c>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d008      	beq.n	800115a <spamTask+0x22>
		{
			printf("%s\r\n", spam_msg);
 8001148:	4907      	ldr	r1, [pc, #28]	@ (8001168 <spamTask+0x30>)
 800114a:	4808      	ldr	r0, [pc, #32]	@ (800116c <spamTask+0x34>)
 800114c:	f004 fd8a 	bl	8005c64 <iprintf>
			spam_count--;
 8001150:	4b04      	ldr	r3, [pc, #16]	@ (8001164 <spamTask+0x2c>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	3b01      	subs	r3, #1
 8001156:	4a03      	ldr	r2, [pc, #12]	@ (8001164 <spamTask+0x2c>)
 8001158:	6013      	str	r3, [r2, #0]
		}
		vTaskDelay(pdMS_TO_TICKS(200));
 800115a:	20c8      	movs	r0, #200	@ 0xc8
 800115c:	f003 f8b8 	bl	80042d0 <vTaskDelay>
		if (spam_count > 0)
 8001160:	e7ee      	b.n	8001140 <spamTask+0x8>
 8001162:	bf00      	nop
 8001164:	200008f4 	.word	0x200008f4
 8001168:	20000000 	.word	0x20000000
 800116c:	08006ecc 	.word	0x08006ecc

08001170 <spam_shell_func>:
	}
}

int spam_shell_func(h_shell_t * h_shell, int argc, char ** argv)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b088      	sub	sp, #32
 8001174:	af02      	add	r7, sp, #8
 8001176:	60f8      	str	r0, [r7, #12]
 8001178:	60b9      	str	r1, [r7, #8]
 800117a:	607a      	str	r2, [r7, #4]
	if (argc < 3)
 800117c:	68bb      	ldr	r3, [r7, #8]
 800117e:	2b02      	cmp	r3, #2
 8001180:	dc16      	bgt.n	80011b0 <spam_shell_func+0x40>
	{
		int len = snprintf(h_shell->print_buffer, BUFFER_SIZE,
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	f503 7341 	add.w	r3, r3, #772	@ 0x304
 8001188:	4a22      	ldr	r2, [pc, #136]	@ (8001214 <spam_shell_func+0xa4>)
 800118a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800118e:	4618      	mov	r0, r3
 8001190:	f004 fdd8 	bl	8005d44 <sniprintf>
 8001194:	6138      	str	r0, [r7, #16]
				"Usage: s <message> <nombre>\r\n");
		h_shell->drv.transmit(h_shell->print_buffer, len);
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	f8d3 3504 	ldr.w	r3, [r3, #1284]	@ 0x504
 800119c:	68fa      	ldr	r2, [r7, #12]
 800119e:	f502 7241 	add.w	r2, r2, #772	@ 0x304
 80011a2:	6939      	ldr	r1, [r7, #16]
 80011a4:	b289      	uxth	r1, r1
 80011a6:	4610      	mov	r0, r2
 80011a8:	4798      	blx	r3
		return -1;
 80011aa:	f04f 33ff 	mov.w	r3, #4294967295
 80011ae:	e02d      	b.n	800120c <spam_shell_func+0x9c>
	}

	strncpy(spam_msg, argv[1], BUFFER_SIZE - 1);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	3304      	adds	r3, #4
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	22ff      	movs	r2, #255	@ 0xff
 80011b8:	4619      	mov	r1, r3
 80011ba:	4817      	ldr	r0, [pc, #92]	@ (8001218 <spam_shell_func+0xa8>)
 80011bc:	f004 fed8 	bl	8005f70 <strncpy>
	spam_msg[BUFFER_SIZE - 1] = '\0';
 80011c0:	4b15      	ldr	r3, [pc, #84]	@ (8001218 <spam_shell_func+0xa8>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	f883 20ff 	strb.w	r2, [r3, #255]	@ 0xff
	spam_count = atoi(argv[2]);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	3308      	adds	r3, #8
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	4618      	mov	r0, r3
 80011d0:	f004 fbfe 	bl	80059d0 <atoi>
 80011d4:	4603      	mov	r3, r0
 80011d6:	461a      	mov	r2, r3
 80011d8:	4b10      	ldr	r3, [pc, #64]	@ (800121c <spam_shell_func+0xac>)
 80011da:	601a      	str	r2, [r3, #0]

	int len = snprintf(h_shell->print_buffer, BUFFER_SIZE,
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	f503 7041 	add.w	r0, r3, #772	@ 0x304
 80011e2:	4b0e      	ldr	r3, [pc, #56]	@ (800121c <spam_shell_func+0xac>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	9300      	str	r3, [sp, #0]
 80011e8:	4b0b      	ldr	r3, [pc, #44]	@ (8001218 <spam_shell_func+0xa8>)
 80011ea:	4a0d      	ldr	r2, [pc, #52]	@ (8001220 <spam_shell_func+0xb0>)
 80011ec:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80011f0:	f004 fda8 	bl	8005d44 <sniprintf>
 80011f4:	6178      	str	r0, [r7, #20]
			"Spam lancé : %s x %lu\r\n", spam_msg, spam_count);
	h_shell->drv.transmit(h_shell->print_buffer, len);
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	f8d3 3504 	ldr.w	r3, [r3, #1284]	@ 0x504
 80011fc:	68fa      	ldr	r2, [r7, #12]
 80011fe:	f502 7241 	add.w	r2, r2, #772	@ 0x304
 8001202:	6979      	ldr	r1, [r7, #20]
 8001204:	b289      	uxth	r1, r1
 8001206:	4610      	mov	r0, r2
 8001208:	4798      	blx	r3

	return 0;
 800120a:	2300      	movs	r3, #0
}
 800120c:	4618      	mov	r0, r3
 800120e:	3718      	adds	r7, #24
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	08006ed4 	.word	0x08006ed4
 8001218:	20000000 	.word	0x20000000
 800121c:	200008f4 	.word	0x200008f4
 8001220:	08006ef4 	.word	0x08006ef4

08001224 <vApplicationStackOverflowHook>:
        vTaskDelay(pdMS_TO_TICKS(1000));
    }
}*/

void vApplicationStackOverflowHook(TaskHandle_t xTask, char *pcTaskName)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b09c      	sub	sp, #112	@ 0x70
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
 800122c:	6039      	str	r1, [r7, #0]
    char msg[100];
    int size = snprintf(msg, sizeof(msg), "\r\n[ERROR] Stack overflow detecté dans la tâche : %s\r\n", pcTaskName);
 800122e:	f107 0008 	add.w	r0, r7, #8
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	4a0f      	ldr	r2, [pc, #60]	@ (8001274 <vApplicationStackOverflowHook+0x50>)
 8001236:	2164      	movs	r1, #100	@ 0x64
 8001238:	f004 fd84 	bl	8005d44 <sniprintf>
 800123c:	66f8      	str	r0, [r7, #108]	@ 0x6c
    HAL_UART_Transmit(&huart1, (uint8_t *)msg, size, HAL_MAX_DELAY);
 800123e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001240:	b29a      	uxth	r2, r3
 8001242:	f107 0108 	add.w	r1, r7, #8
 8001246:	f04f 33ff 	mov.w	r3, #4294967295
 800124a:	480b      	ldr	r0, [pc, #44]	@ (8001278 <vApplicationStackOverflowHook+0x54>)
 800124c:	f001 ffe6 	bl	800321c <HAL_UART_Transmit>

    HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8001250:	2201      	movs	r2, #1
 8001252:	2102      	movs	r1, #2
 8001254:	4809      	ldr	r0, [pc, #36]	@ (800127c <vApplicationStackOverflowHook+0x58>)
 8001256:	f000 fe85 	bl	8001f64 <HAL_GPIO_WritePin>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800125a:	b672      	cpsid	i
}
 800125c:	bf00      	nop

    __disable_irq();

    while (1)
    {
        HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800125e:	2102      	movs	r1, #2
 8001260:	4806      	ldr	r0, [pc, #24]	@ (800127c <vApplicationStackOverflowHook+0x58>)
 8001262:	f000 fe98 	bl	8001f96 <HAL_GPIO_TogglePin>
        HAL_Delay(1000);
 8001266:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800126a:	f000 fbad 	bl	80019c8 <HAL_Delay>
        HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800126e:	bf00      	nop
 8001270:	e7f5      	b.n	800125e <vApplicationStackOverflowHook+0x3a>
 8001272:	bf00      	nop
 8001274:	08006f10 	.word	0x08006f10
 8001278:	20000900 	.word	0x20000900
 800127c:	40022000 	.word	0x40022000

08001280 <recursive_overflow>:
    }
}

void recursive_overflow(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b09a      	sub	sp, #104	@ 0x68
 8001284:	af00      	add	r7, sp, #0
    char buffer[100];
    (void)buffer;
    recursive_overflow();
 8001286:	f7ff fffb 	bl	8001280 <recursive_overflow>
}
 800128a:	bf00      	nop
 800128c:	3768      	adds	r7, #104	@ 0x68
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}

08001292 <dummyTask>:

void dummyTask(void *pvParameters)
{
 8001292:	b580      	push	{r7, lr}
 8001294:	b082      	sub	sp, #8
 8001296:	af00      	add	r7, sp, #0
 8001298:	6078      	str	r0, [r7, #4]
    recursive_overflow();
 800129a:	f7ff fff1 	bl	8001280 <recursive_overflow>
}
 800129e:	bf00      	nop
 80012a0:	3708      	adds	r7, #8
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
	...

080012a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012ae:	f000 fb2e 	bl	800190e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012b2:	f000 f8d5 	bl	8001460 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012b6:	f7ff f9cf 	bl	8000658 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80012ba:	f000 fa4d 	bl	8001758 <MX_USART1_UART_Init>
	configASSERT(pdPASS == ret);
	ret = xTaskCreate(task_bug, "Tache 2", STACK_SIZE, \
			(void *) TASK2_DELAY, TASK2_PRIORITY, NULL);
	configASSERT(pdPASS == ret);*/

	mon_shell.drv.receive = drv_uart1_receive;
 80012be:	4b4e      	ldr	r3, [pc, #312]	@ (80013f8 <main+0x150>)
 80012c0:	4a4e      	ldr	r2, [pc, #312]	@ (80013fc <main+0x154>)
 80012c2:	f8c3 2508 	str.w	r2, [r3, #1288]	@ 0x508
	mon_shell.drv.transmit = drv_uart1_transmit;
 80012c6:	4b4c      	ldr	r3, [pc, #304]	@ (80013f8 <main+0x150>)
 80012c8:	4a4d      	ldr	r2, [pc, #308]	@ (8001400 <main+0x158>)
 80012ca:	f8c3 2504 	str.w	r2, [r3, #1284]	@ 0x504

	shell_init(&mon_shell);
 80012ce:	484a      	ldr	r0, [pc, #296]	@ (80013f8 <main+0x150>)
 80012d0:	f004 fa02 	bl	80056d8 <shell_init>
	if (shell_add(&mon_shell, 't', ma_fonction_test, "Fonction test utilisateur") != 0) {
 80012d4:	4b4b      	ldr	r3, [pc, #300]	@ (8001404 <main+0x15c>)
 80012d6:	4a4c      	ldr	r2, [pc, #304]	@ (8001408 <main+0x160>)
 80012d8:	2174      	movs	r1, #116	@ 0x74
 80012da:	4847      	ldr	r0, [pc, #284]	@ (80013f8 <main+0x150>)
 80012dc:	f004 fa40 	bl	8005760 <shell_add>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d004      	beq.n	80012f0 <main+0x48>
	    printf("Erreur ajout commande shell t\r\n");
 80012e6:	4849      	ldr	r0, [pc, #292]	@ (800140c <main+0x164>)
 80012e8:	f004 fd24 	bl	8005d34 <puts>
	    Error_Handler();
 80012ec:	f000 f928 	bl	8001540 <Error_Handler>
	}
	if (xTaskCreate(shellTask, "Shell", 512, NULL, 1, NULL) != pdPASS) {
 80012f0:	2300      	movs	r3, #0
 80012f2:	9301      	str	r3, [sp, #4]
 80012f4:	2301      	movs	r3, #1
 80012f6:	9300      	str	r3, [sp, #0]
 80012f8:	2300      	movs	r3, #0
 80012fa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80012fe:	4944      	ldr	r1, [pc, #272]	@ (8001410 <main+0x168>)
 8001300:	4844      	ldr	r0, [pc, #272]	@ (8001414 <main+0x16c>)
 8001302:	f002 fea4 	bl	800404e <xTaskCreate>
 8001306:	4603      	mov	r3, r0
 8001308:	2b01      	cmp	r3, #1
 800130a:	d004      	beq.n	8001316 <main+0x6e>
	    	printf("Erreur création tâche Shell\r\n");
 800130c:	4842      	ldr	r0, [pc, #264]	@ (8001418 <main+0x170>)
 800130e:	f004 fd11 	bl	8005d34 <puts>
	    	Error_Handler();
 8001312:	f000 f915 	bl	8001540 <Error_Handler>
		}
	if (xTaskCreate(LedTask, "LED Task", 128, NULL, 1, &ledTaskHandle) != pdPASS) {
 8001316:	4b41      	ldr	r3, [pc, #260]	@ (800141c <main+0x174>)
 8001318:	9301      	str	r3, [sp, #4]
 800131a:	2301      	movs	r3, #1
 800131c:	9300      	str	r3, [sp, #0]
 800131e:	2300      	movs	r3, #0
 8001320:	2280      	movs	r2, #128	@ 0x80
 8001322:	493f      	ldr	r1, [pc, #252]	@ (8001420 <main+0x178>)
 8001324:	483f      	ldr	r0, [pc, #252]	@ (8001424 <main+0x17c>)
 8001326:	f002 fe92 	bl	800404e <xTaskCreate>
 800132a:	4603      	mov	r3, r0
 800132c:	2b01      	cmp	r3, #1
 800132e:	d004      	beq.n	800133a <main+0x92>
	    	printf("Erreur création tâche LED Task\r\n");
 8001330:	483d      	ldr	r0, [pc, #244]	@ (8001428 <main+0x180>)
 8001332:	f004 fcff 	bl	8005d34 <puts>
	    	Error_Handler();
 8001336:	f000 f903 	bl	8001540 <Error_Handler>
		}
	if (shell_add(&mon_shell, 'l', led_shell_func, "Contrôle de la LED") != 0) {
 800133a:	4b3c      	ldr	r3, [pc, #240]	@ (800142c <main+0x184>)
 800133c:	4a3c      	ldr	r2, [pc, #240]	@ (8001430 <main+0x188>)
 800133e:	216c      	movs	r1, #108	@ 0x6c
 8001340:	482d      	ldr	r0, [pc, #180]	@ (80013f8 <main+0x150>)
 8001342:	f004 fa0d 	bl	8005760 <shell_add>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	d004      	beq.n	8001356 <main+0xae>
	    printf("Erreur ajout commande shell t\r\n");
 800134c:	482f      	ldr	r0, [pc, #188]	@ (800140c <main+0x164>)
 800134e:	f004 fcf1 	bl	8005d34 <puts>
	    Error_Handler();
 8001352:	f000 f8f5 	bl	8001540 <Error_Handler>
	}

	if (xTaskCreate(spamTask, "Spam", 256, NULL, 1, &spamTaskHandle) != pdPASS) {
 8001356:	4b37      	ldr	r3, [pc, #220]	@ (8001434 <main+0x18c>)
 8001358:	9301      	str	r3, [sp, #4]
 800135a:	2301      	movs	r3, #1
 800135c:	9300      	str	r3, [sp, #0]
 800135e:	2300      	movs	r3, #0
 8001360:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001364:	4934      	ldr	r1, [pc, #208]	@ (8001438 <main+0x190>)
 8001366:	4835      	ldr	r0, [pc, #212]	@ (800143c <main+0x194>)
 8001368:	f002 fe71 	bl	800404e <xTaskCreate>
 800136c:	4603      	mov	r3, r0
 800136e:	2b01      	cmp	r3, #1
 8001370:	d004      	beq.n	800137c <main+0xd4>
	    	printf("Erreur création tâche Spam\r\n");
 8001372:	4833      	ldr	r0, [pc, #204]	@ (8001440 <main+0x198>)
 8001374:	f004 fcde 	bl	8005d34 <puts>
	    	Error_Handler();
 8001378:	f000 f8e2 	bl	8001540 <Error_Handler>
		}
	if (shell_add(&mon_shell, 's', spam_shell_func, "Affiche un message plusieurs fois") != 0) {
 800137c:	4b31      	ldr	r3, [pc, #196]	@ (8001444 <main+0x19c>)
 800137e:	4a32      	ldr	r2, [pc, #200]	@ (8001448 <main+0x1a0>)
 8001380:	2173      	movs	r1, #115	@ 0x73
 8001382:	481d      	ldr	r0, [pc, #116]	@ (80013f8 <main+0x150>)
 8001384:	f004 f9ec 	bl	8005760 <shell_add>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d004      	beq.n	8001398 <main+0xf0>
	    printf("Erreur ajout commande shell t\r\n");
 800138e:	481f      	ldr	r0, [pc, #124]	@ (800140c <main+0x164>)
 8001390:	f004 fcd0 	bl	8005d34 <puts>
	    Error_Handler();
 8001394:	f000 f8d4 	bl	8001540 <Error_Handler>
	        printf("Erreur creation tache dummy %d\r\n", i);
	        Error_Handler();
	    }
	}*/

	if (xTaskCreate(dummyTask, "Dummy", 64, NULL, 1, NULL) != pdPASS) {
 8001398:	2300      	movs	r3, #0
 800139a:	9301      	str	r3, [sp, #4]
 800139c:	2301      	movs	r3, #1
 800139e:	9300      	str	r3, [sp, #0]
 80013a0:	2300      	movs	r3, #0
 80013a2:	2240      	movs	r2, #64	@ 0x40
 80013a4:	4929      	ldr	r1, [pc, #164]	@ (800144c <main+0x1a4>)
 80013a6:	482a      	ldr	r0, [pc, #168]	@ (8001450 <main+0x1a8>)
 80013a8:	f002 fe51 	bl	800404e <xTaskCreate>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b01      	cmp	r3, #1
 80013b0:	d004      	beq.n	80013bc <main+0x114>
	    printf("Erreur création tâche Dummy\r\n");
 80013b2:	4828      	ldr	r0, [pc, #160]	@ (8001454 <main+0x1ac>)
 80013b4:	f004 fcbe 	bl	8005d34 <puts>
	    Error_Handler();
 80013b8:	f000 f8c2 	bl	8001540 <Error_Handler>
	}

	vTaskStartScheduler();
 80013bc:	f003 f954 	bl	8004668 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 80013c0:	f7ff f926 	bl	8000610 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80013c4:	f002 fcc2 	bl	8003d4c <osKernelStart>
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		//HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
		//HAL_Delay(100);
		if (HAL_GPIO_ReadPin(BUTTON_GPIO_Port, BUTTON_Pin) == GPIO_PIN_SET) {
 80013c8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80013cc:	4822      	ldr	r0, [pc, #136]	@ (8001458 <main+0x1b0>)
 80013ce:	f000 fdb1 	bl	8001f34 <HAL_GPIO_ReadPin>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b01      	cmp	r3, #1
 80013d6:	d105      	bne.n	80013e4 <main+0x13c>
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);  // Allume la LED
 80013d8:	2201      	movs	r2, #1
 80013da:	2102      	movs	r1, #2
 80013dc:	481e      	ldr	r0, [pc, #120]	@ (8001458 <main+0x1b0>)
 80013de:	f000 fdc1 	bl	8001f64 <HAL_GPIO_WritePin>
 80013e2:	e004      	b.n	80013ee <main+0x146>
		} else {
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);  // Éteint la LED
 80013e4:	2200      	movs	r2, #0
 80013e6:	2102      	movs	r1, #2
 80013e8:	481b      	ldr	r0, [pc, #108]	@ (8001458 <main+0x1b0>)
 80013ea:	f000 fdbb 	bl	8001f64 <HAL_GPIO_WritePin>
		}
		printf("Test printf bien\r\n");
 80013ee:	481b      	ldr	r0, [pc, #108]	@ (800145c <main+0x1b4>)
 80013f0:	f004 fca0 	bl	8005d34 <puts>
		if (HAL_GPIO_ReadPin(BUTTON_GPIO_Port, BUTTON_Pin) == GPIO_PIN_SET) {
 80013f4:	e7e8      	b.n	80013c8 <main+0x120>
 80013f6:	bf00      	nop
 80013f8:	200003e0 	.word	0x200003e0
 80013fc:	08005591 	.word	0x08005591
 8001400:	080055b9 	.word	0x080055b9
 8001404:	08006f48 	.word	0x08006f48
 8001408:	08000fb9 	.word	0x08000fb9
 800140c:	08006f64 	.word	0x08006f64
 8001410:	08006f84 	.word	0x08006f84
 8001414:	08001049 	.word	0x08001049
 8001418:	08006f8c 	.word	0x08006f8c
 800141c:	200008ec 	.word	0x200008ec
 8001420:	08006fac 	.word	0x08006fac
 8001424:	08000f65 	.word	0x08000f65
 8001428:	08006fb8 	.word	0x08006fb8
 800142c:	08006fdc 	.word	0x08006fdc
 8001430:	08001065 	.word	0x08001065
 8001434:	200008f8 	.word	0x200008f8
 8001438:	08006ff0 	.word	0x08006ff0
 800143c:	08001139 	.word	0x08001139
 8001440:	08006ff8 	.word	0x08006ff8
 8001444:	08007018 	.word	0x08007018
 8001448:	08001171 	.word	0x08001171
 800144c:	0800703c 	.word	0x0800703c
 8001450:	08001293 	.word	0x08001293
 8001454:	08007044 	.word	0x08007044
 8001458:	40022000 	.word	0x40022000
 800145c:	08007064 	.word	0x08007064

08001460 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b094      	sub	sp, #80	@ 0x50
 8001464:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001466:	f107 0320 	add.w	r3, r7, #32
 800146a:	2230      	movs	r2, #48	@ 0x30
 800146c:	2100      	movs	r1, #0
 800146e:	4618      	mov	r0, r3
 8001470:	f004 fd76 	bl	8005f60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001474:	f107 030c 	add.w	r3, r7, #12
 8001478:	2200      	movs	r2, #0
 800147a:	601a      	str	r2, [r3, #0]
 800147c:	605a      	str	r2, [r3, #4]
 800147e:	609a      	str	r2, [r3, #8]
 8001480:	60da      	str	r2, [r3, #12]
 8001482:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001484:	f000 fda2 	bl	8001fcc <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001488:	4b2b      	ldr	r3, [pc, #172]	@ (8001538 <SystemClock_Config+0xd8>)
 800148a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800148c:	4a2a      	ldr	r2, [pc, #168]	@ (8001538 <SystemClock_Config+0xd8>)
 800148e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001492:	6413      	str	r3, [r2, #64]	@ 0x40
 8001494:	4b28      	ldr	r3, [pc, #160]	@ (8001538 <SystemClock_Config+0xd8>)
 8001496:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001498:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800149c:	60bb      	str	r3, [r7, #8]
 800149e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014a0:	4b26      	ldr	r3, [pc, #152]	@ (800153c <SystemClock_Config+0xdc>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4a25      	ldr	r2, [pc, #148]	@ (800153c <SystemClock_Config+0xdc>)
 80014a6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80014aa:	6013      	str	r3, [r2, #0]
 80014ac:	4b23      	ldr	r3, [pc, #140]	@ (800153c <SystemClock_Config+0xdc>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80014b4:	607b      	str	r3, [r7, #4]
 80014b6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80014b8:	2301      	movs	r3, #1
 80014ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80014bc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80014c0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014c2:	2302      	movs	r3, #2
 80014c4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014c6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80014ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80014cc:	2319      	movs	r3, #25
 80014ce:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 432;
 80014d0:	f44f 73d8 	mov.w	r3, #432	@ 0x1b0
 80014d4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80014d6:	2302      	movs	r3, #2
 80014d8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80014da:	2302      	movs	r3, #2
 80014dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014de:	f107 0320 	add.w	r3, r7, #32
 80014e2:	4618      	mov	r0, r3
 80014e4:	f000 fdd2 	bl	800208c <HAL_RCC_OscConfig>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d001      	beq.n	80014f2 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80014ee:	f000 f827 	bl	8001540 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80014f2:	f000 fd7b 	bl	8001fec <HAL_PWREx_EnableOverDrive>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d001      	beq.n	8001500 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80014fc:	f000 f820 	bl	8001540 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001500:	230f      	movs	r3, #15
 8001502:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001504:	2302      	movs	r3, #2
 8001506:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001508:	2300      	movs	r3, #0
 800150a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800150c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001510:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001512:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001516:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001518:	f107 030c 	add.w	r3, r7, #12
 800151c:	2107      	movs	r1, #7
 800151e:	4618      	mov	r0, r3
 8001520:	f001 f858 	bl	80025d4 <HAL_RCC_ClockConfig>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d001      	beq.n	800152e <SystemClock_Config+0xce>
  {
    Error_Handler();
 800152a:	f000 f809 	bl	8001540 <Error_Handler>
  }
}
 800152e:	bf00      	nop
 8001530:	3750      	adds	r7, #80	@ 0x50
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	40023800 	.word	0x40023800
 800153c:	40007000 	.word	0x40007000

08001540 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001544:	b672      	cpsid	i
}
 8001546:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001548:	bf00      	nop
 800154a:	e7fd      	b.n	8001548 <Error_Handler+0x8>

0800154c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b082      	sub	sp, #8
 8001550:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001552:	4b11      	ldr	r3, [pc, #68]	@ (8001598 <HAL_MspInit+0x4c>)
 8001554:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001556:	4a10      	ldr	r2, [pc, #64]	@ (8001598 <HAL_MspInit+0x4c>)
 8001558:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800155c:	6413      	str	r3, [r2, #64]	@ 0x40
 800155e:	4b0e      	ldr	r3, [pc, #56]	@ (8001598 <HAL_MspInit+0x4c>)
 8001560:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001562:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001566:	607b      	str	r3, [r7, #4]
 8001568:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800156a:	4b0b      	ldr	r3, [pc, #44]	@ (8001598 <HAL_MspInit+0x4c>)
 800156c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800156e:	4a0a      	ldr	r2, [pc, #40]	@ (8001598 <HAL_MspInit+0x4c>)
 8001570:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001574:	6453      	str	r3, [r2, #68]	@ 0x44
 8001576:	4b08      	ldr	r3, [pc, #32]	@ (8001598 <HAL_MspInit+0x4c>)
 8001578:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800157a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800157e:	603b      	str	r3, [r7, #0]
 8001580:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001582:	2200      	movs	r2, #0
 8001584:	210f      	movs	r1, #15
 8001586:	f06f 0001 	mvn.w	r0, #1
 800158a:	f000 fafe 	bl	8001b8a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800158e:	bf00      	nop
 8001590:	3708      	adds	r7, #8
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	40023800 	.word	0x40023800

0800159c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800159c:	b480      	push	{r7}
 800159e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80015a0:	bf00      	nop
 80015a2:	e7fd      	b.n	80015a0 <NMI_Handler+0x4>

080015a4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015a8:	bf00      	nop
 80015aa:	e7fd      	b.n	80015a8 <HardFault_Handler+0x4>

080015ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015b0:	bf00      	nop
 80015b2:	e7fd      	b.n	80015b0 <MemManage_Handler+0x4>

080015b4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015b8:	bf00      	nop
 80015ba:	e7fd      	b.n	80015b8 <BusFault_Handler+0x4>

080015bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015c0:	bf00      	nop
 80015c2:	e7fd      	b.n	80015c0 <UsageFault_Handler+0x4>

080015c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015c8:	bf00      	nop
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr

080015d2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015d2:	b580      	push	{r7, lr}
 80015d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015d6:	f000 f9d7 	bl	8001988 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80015da:	f003 fb71 	bl	8004cc0 <xTaskGetSchedulerState>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b01      	cmp	r3, #1
 80015e2:	d001      	beq.n	80015e8 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80015e4:	f003 fd98 	bl	8005118 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015e8:	bf00      	nop
 80015ea:	bd80      	pop	{r7, pc}

080015ec <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b086      	sub	sp, #24
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	60f8      	str	r0, [r7, #12]
 80015f4:	60b9      	str	r1, [r7, #8]
 80015f6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015f8:	2300      	movs	r3, #0
 80015fa:	617b      	str	r3, [r7, #20]
 80015fc:	e00a      	b.n	8001614 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80015fe:	f3af 8000 	nop.w
 8001602:	4601      	mov	r1, r0
 8001604:	68bb      	ldr	r3, [r7, #8]
 8001606:	1c5a      	adds	r2, r3, #1
 8001608:	60ba      	str	r2, [r7, #8]
 800160a:	b2ca      	uxtb	r2, r1
 800160c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800160e:	697b      	ldr	r3, [r7, #20]
 8001610:	3301      	adds	r3, #1
 8001612:	617b      	str	r3, [r7, #20]
 8001614:	697a      	ldr	r2, [r7, #20]
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	429a      	cmp	r2, r3
 800161a:	dbf0      	blt.n	80015fe <_read+0x12>
  }

  return len;
 800161c:	687b      	ldr	r3, [r7, #4]
}
 800161e:	4618      	mov	r0, r3
 8001620:	3718      	adds	r7, #24
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}

08001626 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001626:	b580      	push	{r7, lr}
 8001628:	b086      	sub	sp, #24
 800162a:	af00      	add	r7, sp, #0
 800162c:	60f8      	str	r0, [r7, #12]
 800162e:	60b9      	str	r1, [r7, #8]
 8001630:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001632:	2300      	movs	r3, #0
 8001634:	617b      	str	r3, [r7, #20]
 8001636:	e009      	b.n	800164c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001638:	68bb      	ldr	r3, [r7, #8]
 800163a:	1c5a      	adds	r2, r3, #1
 800163c:	60ba      	str	r2, [r7, #8]
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	4618      	mov	r0, r3
 8001642:	f7ff fc7d 	bl	8000f40 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001646:	697b      	ldr	r3, [r7, #20]
 8001648:	3301      	adds	r3, #1
 800164a:	617b      	str	r3, [r7, #20]
 800164c:	697a      	ldr	r2, [r7, #20]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	429a      	cmp	r2, r3
 8001652:	dbf1      	blt.n	8001638 <_write+0x12>
  }
  return len;
 8001654:	687b      	ldr	r3, [r7, #4]
}
 8001656:	4618      	mov	r0, r3
 8001658:	3718      	adds	r7, #24
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}

0800165e <_close>:

int _close(int file)
{
 800165e:	b480      	push	{r7}
 8001660:	b083      	sub	sp, #12
 8001662:	af00      	add	r7, sp, #0
 8001664:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001666:	f04f 33ff 	mov.w	r3, #4294967295
}
 800166a:	4618      	mov	r0, r3
 800166c:	370c      	adds	r7, #12
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr

08001676 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001676:	b480      	push	{r7}
 8001678:	b083      	sub	sp, #12
 800167a:	af00      	add	r7, sp, #0
 800167c:	6078      	str	r0, [r7, #4]
 800167e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001686:	605a      	str	r2, [r3, #4]
  return 0;
 8001688:	2300      	movs	r3, #0
}
 800168a:	4618      	mov	r0, r3
 800168c:	370c      	adds	r7, #12
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr

08001696 <_isatty>:

int _isatty(int file)
{
 8001696:	b480      	push	{r7}
 8001698:	b083      	sub	sp, #12
 800169a:	af00      	add	r7, sp, #0
 800169c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800169e:	2301      	movs	r3, #1
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	370c      	adds	r7, #12
 80016a4:	46bd      	mov	sp, r7
 80016a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016aa:	4770      	bx	lr

080016ac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b085      	sub	sp, #20
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	60f8      	str	r0, [r7, #12]
 80016b4:	60b9      	str	r1, [r7, #8]
 80016b6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80016b8:	2300      	movs	r3, #0
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	3714      	adds	r7, #20
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr
	...

080016c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b086      	sub	sp, #24
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016d0:	4a14      	ldr	r2, [pc, #80]	@ (8001724 <_sbrk+0x5c>)
 80016d2:	4b15      	ldr	r3, [pc, #84]	@ (8001728 <_sbrk+0x60>)
 80016d4:	1ad3      	subs	r3, r2, r3
 80016d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016dc:	4b13      	ldr	r3, [pc, #76]	@ (800172c <_sbrk+0x64>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d102      	bne.n	80016ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016e4:	4b11      	ldr	r3, [pc, #68]	@ (800172c <_sbrk+0x64>)
 80016e6:	4a12      	ldr	r2, [pc, #72]	@ (8001730 <_sbrk+0x68>)
 80016e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016ea:	4b10      	ldr	r3, [pc, #64]	@ (800172c <_sbrk+0x64>)
 80016ec:	681a      	ldr	r2, [r3, #0]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	4413      	add	r3, r2
 80016f2:	693a      	ldr	r2, [r7, #16]
 80016f4:	429a      	cmp	r2, r3
 80016f6:	d207      	bcs.n	8001708 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016f8:	f004 fc94 	bl	8006024 <__errno>
 80016fc:	4603      	mov	r3, r0
 80016fe:	220c      	movs	r2, #12
 8001700:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001702:	f04f 33ff 	mov.w	r3, #4294967295
 8001706:	e009      	b.n	800171c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001708:	4b08      	ldr	r3, [pc, #32]	@ (800172c <_sbrk+0x64>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800170e:	4b07      	ldr	r3, [pc, #28]	@ (800172c <_sbrk+0x64>)
 8001710:	681a      	ldr	r2, [r3, #0]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	4413      	add	r3, r2
 8001716:	4a05      	ldr	r2, [pc, #20]	@ (800172c <_sbrk+0x64>)
 8001718:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800171a:	68fb      	ldr	r3, [r7, #12]
}
 800171c:	4618      	mov	r0, r3
 800171e:	3718      	adds	r7, #24
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}
 8001724:	20050000 	.word	0x20050000
 8001728:	00000400 	.word	0x00000400
 800172c:	200008fc 	.word	0x200008fc
 8001730:	20004828 	.word	0x20004828

08001734 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001738:	4b06      	ldr	r3, [pc, #24]	@ (8001754 <SystemInit+0x20>)
 800173a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800173e:	4a05      	ldr	r2, [pc, #20]	@ (8001754 <SystemInit+0x20>)
 8001740:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001744:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001748:	bf00      	nop
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr
 8001752:	bf00      	nop
 8001754:	e000ed00 	.word	0xe000ed00

08001758 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800175c:	4b14      	ldr	r3, [pc, #80]	@ (80017b0 <MX_USART1_UART_Init+0x58>)
 800175e:	4a15      	ldr	r2, [pc, #84]	@ (80017b4 <MX_USART1_UART_Init+0x5c>)
 8001760:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001762:	4b13      	ldr	r3, [pc, #76]	@ (80017b0 <MX_USART1_UART_Init+0x58>)
 8001764:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001768:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800176a:	4b11      	ldr	r3, [pc, #68]	@ (80017b0 <MX_USART1_UART_Init+0x58>)
 800176c:	2200      	movs	r2, #0
 800176e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001770:	4b0f      	ldr	r3, [pc, #60]	@ (80017b0 <MX_USART1_UART_Init+0x58>)
 8001772:	2200      	movs	r2, #0
 8001774:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001776:	4b0e      	ldr	r3, [pc, #56]	@ (80017b0 <MX_USART1_UART_Init+0x58>)
 8001778:	2200      	movs	r2, #0
 800177a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800177c:	4b0c      	ldr	r3, [pc, #48]	@ (80017b0 <MX_USART1_UART_Init+0x58>)
 800177e:	220c      	movs	r2, #12
 8001780:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001782:	4b0b      	ldr	r3, [pc, #44]	@ (80017b0 <MX_USART1_UART_Init+0x58>)
 8001784:	2200      	movs	r2, #0
 8001786:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001788:	4b09      	ldr	r3, [pc, #36]	@ (80017b0 <MX_USART1_UART_Init+0x58>)
 800178a:	2200      	movs	r2, #0
 800178c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800178e:	4b08      	ldr	r3, [pc, #32]	@ (80017b0 <MX_USART1_UART_Init+0x58>)
 8001790:	2200      	movs	r2, #0
 8001792:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001794:	4b06      	ldr	r3, [pc, #24]	@ (80017b0 <MX_USART1_UART_Init+0x58>)
 8001796:	2200      	movs	r2, #0
 8001798:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800179a:	4805      	ldr	r0, [pc, #20]	@ (80017b0 <MX_USART1_UART_Init+0x58>)
 800179c:	f001 fcf0 	bl	8003180 <HAL_UART_Init>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d001      	beq.n	80017aa <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80017a6:	f7ff fecb 	bl	8001540 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80017aa:	bf00      	nop
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	20000900 	.word	0x20000900
 80017b4:	40011000 	.word	0x40011000

080017b8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b0ac      	sub	sp, #176	@ 0xb0
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017c0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80017c4:	2200      	movs	r2, #0
 80017c6:	601a      	str	r2, [r3, #0]
 80017c8:	605a      	str	r2, [r3, #4]
 80017ca:	609a      	str	r2, [r3, #8]
 80017cc:	60da      	str	r2, [r3, #12]
 80017ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80017d0:	f107 0318 	add.w	r3, r7, #24
 80017d4:	2284      	movs	r2, #132	@ 0x84
 80017d6:	2100      	movs	r1, #0
 80017d8:	4618      	mov	r0, r3
 80017da:	f004 fbc1 	bl	8005f60 <memset>
  if(uartHandle->Instance==USART1)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4a32      	ldr	r2, [pc, #200]	@ (80018ac <HAL_UART_MspInit+0xf4>)
 80017e4:	4293      	cmp	r3, r2
 80017e6:	d15c      	bne.n	80018a2 <HAL_UART_MspInit+0xea>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80017e8:	2340      	movs	r3, #64	@ 0x40
 80017ea:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80017ec:	2300      	movs	r3, #0
 80017ee:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017f0:	f107 0318 	add.w	r3, r7, #24
 80017f4:	4618      	mov	r0, r3
 80017f6:	f001 f8d3 	bl	80029a0 <HAL_RCCEx_PeriphCLKConfig>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d001      	beq.n	8001804 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001800:	f7ff fe9e 	bl	8001540 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001804:	4b2a      	ldr	r3, [pc, #168]	@ (80018b0 <HAL_UART_MspInit+0xf8>)
 8001806:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001808:	4a29      	ldr	r2, [pc, #164]	@ (80018b0 <HAL_UART_MspInit+0xf8>)
 800180a:	f043 0310 	orr.w	r3, r3, #16
 800180e:	6453      	str	r3, [r2, #68]	@ 0x44
 8001810:	4b27      	ldr	r3, [pc, #156]	@ (80018b0 <HAL_UART_MspInit+0xf8>)
 8001812:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001814:	f003 0310 	and.w	r3, r3, #16
 8001818:	617b      	str	r3, [r7, #20]
 800181a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800181c:	4b24      	ldr	r3, [pc, #144]	@ (80018b0 <HAL_UART_MspInit+0xf8>)
 800181e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001820:	4a23      	ldr	r2, [pc, #140]	@ (80018b0 <HAL_UART_MspInit+0xf8>)
 8001822:	f043 0302 	orr.w	r3, r3, #2
 8001826:	6313      	str	r3, [r2, #48]	@ 0x30
 8001828:	4b21      	ldr	r3, [pc, #132]	@ (80018b0 <HAL_UART_MspInit+0xf8>)
 800182a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800182c:	f003 0302 	and.w	r3, r3, #2
 8001830:	613b      	str	r3, [r7, #16]
 8001832:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001834:	4b1e      	ldr	r3, [pc, #120]	@ (80018b0 <HAL_UART_MspInit+0xf8>)
 8001836:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001838:	4a1d      	ldr	r2, [pc, #116]	@ (80018b0 <HAL_UART_MspInit+0xf8>)
 800183a:	f043 0301 	orr.w	r3, r3, #1
 800183e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001840:	4b1b      	ldr	r3, [pc, #108]	@ (80018b0 <HAL_UART_MspInit+0xf8>)
 8001842:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001844:	f003 0301 	and.w	r3, r3, #1
 8001848:	60fb      	str	r3, [r7, #12]
 800184a:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 800184c:	2380      	movs	r3, #128	@ 0x80
 800184e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001852:	2302      	movs	r3, #2
 8001854:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001858:	2300      	movs	r3, #0
 800185a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800185e:	2300      	movs	r3, #0
 8001860:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001864:	2307      	movs	r3, #7
 8001866:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 800186a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800186e:	4619      	mov	r1, r3
 8001870:	4810      	ldr	r0, [pc, #64]	@ (80018b4 <HAL_UART_MspInit+0xfc>)
 8001872:	f000 f9b3 	bl	8001bdc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8001876:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800187a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800187e:	2302      	movs	r3, #2
 8001880:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001884:	2300      	movs	r3, #0
 8001886:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800188a:	2300      	movs	r3, #0
 800188c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001890:	2307      	movs	r3, #7
 8001892:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8001896:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800189a:	4619      	mov	r1, r3
 800189c:	4806      	ldr	r0, [pc, #24]	@ (80018b8 <HAL_UART_MspInit+0x100>)
 800189e:	f000 f99d 	bl	8001bdc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80018a2:	bf00      	nop
 80018a4:	37b0      	adds	r7, #176	@ 0xb0
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	40011000 	.word	0x40011000
 80018b0:	40023800 	.word	0x40023800
 80018b4:	40020400 	.word	0x40020400
 80018b8:	40020000 	.word	0x40020000

080018bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80018bc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80018f4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 80018c0:	f7ff ff38 	bl	8001734 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80018c4:	480c      	ldr	r0, [pc, #48]	@ (80018f8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80018c6:	490d      	ldr	r1, [pc, #52]	@ (80018fc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80018c8:	4a0d      	ldr	r2, [pc, #52]	@ (8001900 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80018ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018cc:	e002      	b.n	80018d4 <LoopCopyDataInit>

080018ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018d2:	3304      	adds	r3, #4

080018d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018d8:	d3f9      	bcc.n	80018ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018da:	4a0a      	ldr	r2, [pc, #40]	@ (8001904 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80018dc:	4c0a      	ldr	r4, [pc, #40]	@ (8001908 <LoopFillZerobss+0x22>)
  movs r3, #0
 80018de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018e0:	e001      	b.n	80018e6 <LoopFillZerobss>

080018e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018e4:	3204      	adds	r2, #4

080018e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018e8:	d3fb      	bcc.n	80018e2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80018ea:	f004 fba1 	bl	8006030 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018ee:	f7ff fcdb 	bl	80012a8 <main>
  bx  lr    
 80018f2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80018f4:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80018f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018fc:	2000016c 	.word	0x2000016c
  ldr r2, =_sidata
 8001900:	080072a0 	.word	0x080072a0
  ldr r2, =_sbss
 8001904:	2000016c 	.word	0x2000016c
  ldr r4, =_ebss
 8001908:	20004824 	.word	0x20004824

0800190c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800190c:	e7fe      	b.n	800190c <ADC_IRQHandler>

0800190e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800190e:	b580      	push	{r7, lr}
 8001910:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001912:	2003      	movs	r0, #3
 8001914:	f000 f92e 	bl	8001b74 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001918:	200f      	movs	r0, #15
 800191a:	f000 f805 	bl	8001928 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800191e:	f7ff fe15 	bl	800154c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001922:	2300      	movs	r3, #0
}
 8001924:	4618      	mov	r0, r3
 8001926:	bd80      	pop	{r7, pc}

08001928 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b082      	sub	sp, #8
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001930:	4b12      	ldr	r3, [pc, #72]	@ (800197c <HAL_InitTick+0x54>)
 8001932:	681a      	ldr	r2, [r3, #0]
 8001934:	4b12      	ldr	r3, [pc, #72]	@ (8001980 <HAL_InitTick+0x58>)
 8001936:	781b      	ldrb	r3, [r3, #0]
 8001938:	4619      	mov	r1, r3
 800193a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800193e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001942:	fbb2 f3f3 	udiv	r3, r2, r3
 8001946:	4618      	mov	r0, r3
 8001948:	f000 f93b 	bl	8001bc2 <HAL_SYSTICK_Config>
 800194c:	4603      	mov	r3, r0
 800194e:	2b00      	cmp	r3, #0
 8001950:	d001      	beq.n	8001956 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001952:	2301      	movs	r3, #1
 8001954:	e00e      	b.n	8001974 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2b0f      	cmp	r3, #15
 800195a:	d80a      	bhi.n	8001972 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800195c:	2200      	movs	r2, #0
 800195e:	6879      	ldr	r1, [r7, #4]
 8001960:	f04f 30ff 	mov.w	r0, #4294967295
 8001964:	f000 f911 	bl	8001b8a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001968:	4a06      	ldr	r2, [pc, #24]	@ (8001984 <HAL_InitTick+0x5c>)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800196e:	2300      	movs	r3, #0
 8001970:	e000      	b.n	8001974 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001972:	2301      	movs	r3, #1
}
 8001974:	4618      	mov	r0, r3
 8001976:	3708      	adds	r7, #8
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}
 800197c:	20000100 	.word	0x20000100
 8001980:	20000108 	.word	0x20000108
 8001984:	20000104 	.word	0x20000104

08001988 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001988:	b480      	push	{r7}
 800198a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800198c:	4b06      	ldr	r3, [pc, #24]	@ (80019a8 <HAL_IncTick+0x20>)
 800198e:	781b      	ldrb	r3, [r3, #0]
 8001990:	461a      	mov	r2, r3
 8001992:	4b06      	ldr	r3, [pc, #24]	@ (80019ac <HAL_IncTick+0x24>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4413      	add	r3, r2
 8001998:	4a04      	ldr	r2, [pc, #16]	@ (80019ac <HAL_IncTick+0x24>)
 800199a:	6013      	str	r3, [r2, #0]
}
 800199c:	bf00      	nop
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr
 80019a6:	bf00      	nop
 80019a8:	20000108 	.word	0x20000108
 80019ac:	20000988 	.word	0x20000988

080019b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019b0:	b480      	push	{r7}
 80019b2:	af00      	add	r7, sp, #0
  return uwTick;
 80019b4:	4b03      	ldr	r3, [pc, #12]	@ (80019c4 <HAL_GetTick+0x14>)
 80019b6:	681b      	ldr	r3, [r3, #0]
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr
 80019c2:	bf00      	nop
 80019c4:	20000988 	.word	0x20000988

080019c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b084      	sub	sp, #16
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019d0:	f7ff ffee 	bl	80019b0 <HAL_GetTick>
 80019d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019e0:	d005      	beq.n	80019ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019e2:	4b0a      	ldr	r3, [pc, #40]	@ (8001a0c <HAL_Delay+0x44>)
 80019e4:	781b      	ldrb	r3, [r3, #0]
 80019e6:	461a      	mov	r2, r3
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	4413      	add	r3, r2
 80019ec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80019ee:	bf00      	nop
 80019f0:	f7ff ffde 	bl	80019b0 <HAL_GetTick>
 80019f4:	4602      	mov	r2, r0
 80019f6:	68bb      	ldr	r3, [r7, #8]
 80019f8:	1ad3      	subs	r3, r2, r3
 80019fa:	68fa      	ldr	r2, [r7, #12]
 80019fc:	429a      	cmp	r2, r3
 80019fe:	d8f7      	bhi.n	80019f0 <HAL_Delay+0x28>
  {
  }
}
 8001a00:	bf00      	nop
 8001a02:	bf00      	nop
 8001a04:	3710      	adds	r7, #16
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	20000108 	.word	0x20000108

08001a10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b085      	sub	sp, #20
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	f003 0307 	and.w	r3, r3, #7
 8001a1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a20:	4b0b      	ldr	r3, [pc, #44]	@ (8001a50 <__NVIC_SetPriorityGrouping+0x40>)
 8001a22:	68db      	ldr	r3, [r3, #12]
 8001a24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a26:	68ba      	ldr	r2, [r7, #8]
 8001a28:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a34:	68bb      	ldr	r3, [r7, #8]
 8001a36:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001a38:	4b06      	ldr	r3, [pc, #24]	@ (8001a54 <__NVIC_SetPriorityGrouping+0x44>)
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a3e:	4a04      	ldr	r2, [pc, #16]	@ (8001a50 <__NVIC_SetPriorityGrouping+0x40>)
 8001a40:	68bb      	ldr	r3, [r7, #8]
 8001a42:	60d3      	str	r3, [r2, #12]
}
 8001a44:	bf00      	nop
 8001a46:	3714      	adds	r7, #20
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4e:	4770      	bx	lr
 8001a50:	e000ed00 	.word	0xe000ed00
 8001a54:	05fa0000 	.word	0x05fa0000

08001a58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a5c:	4b04      	ldr	r3, [pc, #16]	@ (8001a70 <__NVIC_GetPriorityGrouping+0x18>)
 8001a5e:	68db      	ldr	r3, [r3, #12]
 8001a60:	0a1b      	lsrs	r3, r3, #8
 8001a62:	f003 0307 	and.w	r3, r3, #7
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6e:	4770      	bx	lr
 8001a70:	e000ed00 	.word	0xe000ed00

08001a74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b083      	sub	sp, #12
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	6039      	str	r1, [r7, #0]
 8001a7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	db0a      	blt.n	8001a9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	b2da      	uxtb	r2, r3
 8001a8c:	490c      	ldr	r1, [pc, #48]	@ (8001ac0 <__NVIC_SetPriority+0x4c>)
 8001a8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a92:	0112      	lsls	r2, r2, #4
 8001a94:	b2d2      	uxtb	r2, r2
 8001a96:	440b      	add	r3, r1
 8001a98:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a9c:	e00a      	b.n	8001ab4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	b2da      	uxtb	r2, r3
 8001aa2:	4908      	ldr	r1, [pc, #32]	@ (8001ac4 <__NVIC_SetPriority+0x50>)
 8001aa4:	79fb      	ldrb	r3, [r7, #7]
 8001aa6:	f003 030f 	and.w	r3, r3, #15
 8001aaa:	3b04      	subs	r3, #4
 8001aac:	0112      	lsls	r2, r2, #4
 8001aae:	b2d2      	uxtb	r2, r2
 8001ab0:	440b      	add	r3, r1
 8001ab2:	761a      	strb	r2, [r3, #24]
}
 8001ab4:	bf00      	nop
 8001ab6:	370c      	adds	r7, #12
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr
 8001ac0:	e000e100 	.word	0xe000e100
 8001ac4:	e000ed00 	.word	0xe000ed00

08001ac8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b089      	sub	sp, #36	@ 0x24
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	60f8      	str	r0, [r7, #12]
 8001ad0:	60b9      	str	r1, [r7, #8]
 8001ad2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	f003 0307 	and.w	r3, r3, #7
 8001ada:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001adc:	69fb      	ldr	r3, [r7, #28]
 8001ade:	f1c3 0307 	rsb	r3, r3, #7
 8001ae2:	2b04      	cmp	r3, #4
 8001ae4:	bf28      	it	cs
 8001ae6:	2304      	movcs	r3, #4
 8001ae8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001aea:	69fb      	ldr	r3, [r7, #28]
 8001aec:	3304      	adds	r3, #4
 8001aee:	2b06      	cmp	r3, #6
 8001af0:	d902      	bls.n	8001af8 <NVIC_EncodePriority+0x30>
 8001af2:	69fb      	ldr	r3, [r7, #28]
 8001af4:	3b03      	subs	r3, #3
 8001af6:	e000      	b.n	8001afa <NVIC_EncodePriority+0x32>
 8001af8:	2300      	movs	r3, #0
 8001afa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001afc:	f04f 32ff 	mov.w	r2, #4294967295
 8001b00:	69bb      	ldr	r3, [r7, #24]
 8001b02:	fa02 f303 	lsl.w	r3, r2, r3
 8001b06:	43da      	mvns	r2, r3
 8001b08:	68bb      	ldr	r3, [r7, #8]
 8001b0a:	401a      	ands	r2, r3
 8001b0c:	697b      	ldr	r3, [r7, #20]
 8001b0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b10:	f04f 31ff 	mov.w	r1, #4294967295
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	fa01 f303 	lsl.w	r3, r1, r3
 8001b1a:	43d9      	mvns	r1, r3
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b20:	4313      	orrs	r3, r2
         );
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	3724      	adds	r7, #36	@ 0x24
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr
	...

08001b30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b082      	sub	sp, #8
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	3b01      	subs	r3, #1
 8001b3c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001b40:	d301      	bcc.n	8001b46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b42:	2301      	movs	r3, #1
 8001b44:	e00f      	b.n	8001b66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b46:	4a0a      	ldr	r2, [pc, #40]	@ (8001b70 <SysTick_Config+0x40>)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	3b01      	subs	r3, #1
 8001b4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b4e:	210f      	movs	r1, #15
 8001b50:	f04f 30ff 	mov.w	r0, #4294967295
 8001b54:	f7ff ff8e 	bl	8001a74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b58:	4b05      	ldr	r3, [pc, #20]	@ (8001b70 <SysTick_Config+0x40>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b5e:	4b04      	ldr	r3, [pc, #16]	@ (8001b70 <SysTick_Config+0x40>)
 8001b60:	2207      	movs	r2, #7
 8001b62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b64:	2300      	movs	r3, #0
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	3708      	adds	r7, #8
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	e000e010 	.word	0xe000e010

08001b74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b082      	sub	sp, #8
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b7c:	6878      	ldr	r0, [r7, #4]
 8001b7e:	f7ff ff47 	bl	8001a10 <__NVIC_SetPriorityGrouping>
}
 8001b82:	bf00      	nop
 8001b84:	3708      	adds	r7, #8
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}

08001b8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b8a:	b580      	push	{r7, lr}
 8001b8c:	b086      	sub	sp, #24
 8001b8e:	af00      	add	r7, sp, #0
 8001b90:	4603      	mov	r3, r0
 8001b92:	60b9      	str	r1, [r7, #8]
 8001b94:	607a      	str	r2, [r7, #4]
 8001b96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b9c:	f7ff ff5c 	bl	8001a58 <__NVIC_GetPriorityGrouping>
 8001ba0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ba2:	687a      	ldr	r2, [r7, #4]
 8001ba4:	68b9      	ldr	r1, [r7, #8]
 8001ba6:	6978      	ldr	r0, [r7, #20]
 8001ba8:	f7ff ff8e 	bl	8001ac8 <NVIC_EncodePriority>
 8001bac:	4602      	mov	r2, r0
 8001bae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bb2:	4611      	mov	r1, r2
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f7ff ff5d 	bl	8001a74 <__NVIC_SetPriority>
}
 8001bba:	bf00      	nop
 8001bbc:	3718      	adds	r7, #24
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}

08001bc2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bc2:	b580      	push	{r7, lr}
 8001bc4:	b082      	sub	sp, #8
 8001bc6:	af00      	add	r7, sp, #0
 8001bc8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bca:	6878      	ldr	r0, [r7, #4]
 8001bcc:	f7ff ffb0 	bl	8001b30 <SysTick_Config>
 8001bd0:	4603      	mov	r3, r0
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	3708      	adds	r7, #8
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
	...

08001bdc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b089      	sub	sp, #36	@ 0x24
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
 8001be4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001be6:	2300      	movs	r3, #0
 8001be8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001bea:	2300      	movs	r3, #0
 8001bec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	61fb      	str	r3, [r7, #28]
 8001bfa:	e175      	b.n	8001ee8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	69fb      	ldr	r3, [r7, #28]
 8001c00:	fa02 f303 	lsl.w	r3, r2, r3
 8001c04:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	697a      	ldr	r2, [r7, #20]
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8001c10:	693a      	ldr	r2, [r7, #16]
 8001c12:	697b      	ldr	r3, [r7, #20]
 8001c14:	429a      	cmp	r2, r3
 8001c16:	f040 8164 	bne.w	8001ee2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	f003 0303 	and.w	r3, r3, #3
 8001c22:	2b01      	cmp	r3, #1
 8001c24:	d005      	beq.n	8001c32 <HAL_GPIO_Init+0x56>
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	f003 0303 	and.w	r3, r3, #3
 8001c2e:	2b02      	cmp	r3, #2
 8001c30:	d130      	bne.n	8001c94 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	689b      	ldr	r3, [r3, #8]
 8001c36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001c38:	69fb      	ldr	r3, [r7, #28]
 8001c3a:	005b      	lsls	r3, r3, #1
 8001c3c:	2203      	movs	r2, #3
 8001c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c42:	43db      	mvns	r3, r3
 8001c44:	69ba      	ldr	r2, [r7, #24]
 8001c46:	4013      	ands	r3, r2
 8001c48:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	68da      	ldr	r2, [r3, #12]
 8001c4e:	69fb      	ldr	r3, [r7, #28]
 8001c50:	005b      	lsls	r3, r3, #1
 8001c52:	fa02 f303 	lsl.w	r3, r2, r3
 8001c56:	69ba      	ldr	r2, [r7, #24]
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	69ba      	ldr	r2, [r7, #24]
 8001c60:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c68:	2201      	movs	r2, #1
 8001c6a:	69fb      	ldr	r3, [r7, #28]
 8001c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c70:	43db      	mvns	r3, r3
 8001c72:	69ba      	ldr	r2, [r7, #24]
 8001c74:	4013      	ands	r3, r2
 8001c76:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	091b      	lsrs	r3, r3, #4
 8001c7e:	f003 0201 	and.w	r2, r3, #1
 8001c82:	69fb      	ldr	r3, [r7, #28]
 8001c84:	fa02 f303 	lsl.w	r3, r2, r3
 8001c88:	69ba      	ldr	r2, [r7, #24]
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	69ba      	ldr	r2, [r7, #24]
 8001c92:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	f003 0303 	and.w	r3, r3, #3
 8001c9c:	2b03      	cmp	r3, #3
 8001c9e:	d017      	beq.n	8001cd0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	68db      	ldr	r3, [r3, #12]
 8001ca4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001ca6:	69fb      	ldr	r3, [r7, #28]
 8001ca8:	005b      	lsls	r3, r3, #1
 8001caa:	2203      	movs	r2, #3
 8001cac:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb0:	43db      	mvns	r3, r3
 8001cb2:	69ba      	ldr	r2, [r7, #24]
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	689a      	ldr	r2, [r3, #8]
 8001cbc:	69fb      	ldr	r3, [r7, #28]
 8001cbe:	005b      	lsls	r3, r3, #1
 8001cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc4:	69ba      	ldr	r2, [r7, #24]
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	69ba      	ldr	r2, [r7, #24]
 8001cce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	f003 0303 	and.w	r3, r3, #3
 8001cd8:	2b02      	cmp	r3, #2
 8001cda:	d123      	bne.n	8001d24 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001cdc:	69fb      	ldr	r3, [r7, #28]
 8001cde:	08da      	lsrs	r2, r3, #3
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	3208      	adds	r2, #8
 8001ce4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ce8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001cea:	69fb      	ldr	r3, [r7, #28]
 8001cec:	f003 0307 	and.w	r3, r3, #7
 8001cf0:	009b      	lsls	r3, r3, #2
 8001cf2:	220f      	movs	r2, #15
 8001cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf8:	43db      	mvns	r3, r3
 8001cfa:	69ba      	ldr	r2, [r7, #24]
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	691a      	ldr	r2, [r3, #16]
 8001d04:	69fb      	ldr	r3, [r7, #28]
 8001d06:	f003 0307 	and.w	r3, r3, #7
 8001d0a:	009b      	lsls	r3, r3, #2
 8001d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d10:	69ba      	ldr	r2, [r7, #24]
 8001d12:	4313      	orrs	r3, r2
 8001d14:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001d16:	69fb      	ldr	r3, [r7, #28]
 8001d18:	08da      	lsrs	r2, r3, #3
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	3208      	adds	r2, #8
 8001d1e:	69b9      	ldr	r1, [r7, #24]
 8001d20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001d2a:	69fb      	ldr	r3, [r7, #28]
 8001d2c:	005b      	lsls	r3, r3, #1
 8001d2e:	2203      	movs	r2, #3
 8001d30:	fa02 f303 	lsl.w	r3, r2, r3
 8001d34:	43db      	mvns	r3, r3
 8001d36:	69ba      	ldr	r2, [r7, #24]
 8001d38:	4013      	ands	r3, r2
 8001d3a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	f003 0203 	and.w	r2, r3, #3
 8001d44:	69fb      	ldr	r3, [r7, #28]
 8001d46:	005b      	lsls	r3, r3, #1
 8001d48:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4c:	69ba      	ldr	r2, [r7, #24]
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	69ba      	ldr	r2, [r7, #24]
 8001d56:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	f000 80be 	beq.w	8001ee2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d66:	4b66      	ldr	r3, [pc, #408]	@ (8001f00 <HAL_GPIO_Init+0x324>)
 8001d68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d6a:	4a65      	ldr	r2, [pc, #404]	@ (8001f00 <HAL_GPIO_Init+0x324>)
 8001d6c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d70:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d72:	4b63      	ldr	r3, [pc, #396]	@ (8001f00 <HAL_GPIO_Init+0x324>)
 8001d74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d76:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d7a:	60fb      	str	r3, [r7, #12]
 8001d7c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001d7e:	4a61      	ldr	r2, [pc, #388]	@ (8001f04 <HAL_GPIO_Init+0x328>)
 8001d80:	69fb      	ldr	r3, [r7, #28]
 8001d82:	089b      	lsrs	r3, r3, #2
 8001d84:	3302      	adds	r3, #2
 8001d86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001d8c:	69fb      	ldr	r3, [r7, #28]
 8001d8e:	f003 0303 	and.w	r3, r3, #3
 8001d92:	009b      	lsls	r3, r3, #2
 8001d94:	220f      	movs	r2, #15
 8001d96:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9a:	43db      	mvns	r3, r3
 8001d9c:	69ba      	ldr	r2, [r7, #24]
 8001d9e:	4013      	ands	r3, r2
 8001da0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	4a58      	ldr	r2, [pc, #352]	@ (8001f08 <HAL_GPIO_Init+0x32c>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d037      	beq.n	8001e1a <HAL_GPIO_Init+0x23e>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	4a57      	ldr	r2, [pc, #348]	@ (8001f0c <HAL_GPIO_Init+0x330>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d031      	beq.n	8001e16 <HAL_GPIO_Init+0x23a>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	4a56      	ldr	r2, [pc, #344]	@ (8001f10 <HAL_GPIO_Init+0x334>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d02b      	beq.n	8001e12 <HAL_GPIO_Init+0x236>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	4a55      	ldr	r2, [pc, #340]	@ (8001f14 <HAL_GPIO_Init+0x338>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d025      	beq.n	8001e0e <HAL_GPIO_Init+0x232>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	4a54      	ldr	r2, [pc, #336]	@ (8001f18 <HAL_GPIO_Init+0x33c>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d01f      	beq.n	8001e0a <HAL_GPIO_Init+0x22e>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	4a53      	ldr	r2, [pc, #332]	@ (8001f1c <HAL_GPIO_Init+0x340>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d019      	beq.n	8001e06 <HAL_GPIO_Init+0x22a>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	4a52      	ldr	r2, [pc, #328]	@ (8001f20 <HAL_GPIO_Init+0x344>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d013      	beq.n	8001e02 <HAL_GPIO_Init+0x226>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	4a51      	ldr	r2, [pc, #324]	@ (8001f24 <HAL_GPIO_Init+0x348>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d00d      	beq.n	8001dfe <HAL_GPIO_Init+0x222>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	4a50      	ldr	r2, [pc, #320]	@ (8001f28 <HAL_GPIO_Init+0x34c>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d007      	beq.n	8001dfa <HAL_GPIO_Init+0x21e>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	4a4f      	ldr	r2, [pc, #316]	@ (8001f2c <HAL_GPIO_Init+0x350>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d101      	bne.n	8001df6 <HAL_GPIO_Init+0x21a>
 8001df2:	2309      	movs	r3, #9
 8001df4:	e012      	b.n	8001e1c <HAL_GPIO_Init+0x240>
 8001df6:	230a      	movs	r3, #10
 8001df8:	e010      	b.n	8001e1c <HAL_GPIO_Init+0x240>
 8001dfa:	2308      	movs	r3, #8
 8001dfc:	e00e      	b.n	8001e1c <HAL_GPIO_Init+0x240>
 8001dfe:	2307      	movs	r3, #7
 8001e00:	e00c      	b.n	8001e1c <HAL_GPIO_Init+0x240>
 8001e02:	2306      	movs	r3, #6
 8001e04:	e00a      	b.n	8001e1c <HAL_GPIO_Init+0x240>
 8001e06:	2305      	movs	r3, #5
 8001e08:	e008      	b.n	8001e1c <HAL_GPIO_Init+0x240>
 8001e0a:	2304      	movs	r3, #4
 8001e0c:	e006      	b.n	8001e1c <HAL_GPIO_Init+0x240>
 8001e0e:	2303      	movs	r3, #3
 8001e10:	e004      	b.n	8001e1c <HAL_GPIO_Init+0x240>
 8001e12:	2302      	movs	r3, #2
 8001e14:	e002      	b.n	8001e1c <HAL_GPIO_Init+0x240>
 8001e16:	2301      	movs	r3, #1
 8001e18:	e000      	b.n	8001e1c <HAL_GPIO_Init+0x240>
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	69fa      	ldr	r2, [r7, #28]
 8001e1e:	f002 0203 	and.w	r2, r2, #3
 8001e22:	0092      	lsls	r2, r2, #2
 8001e24:	4093      	lsls	r3, r2
 8001e26:	69ba      	ldr	r2, [r7, #24]
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001e2c:	4935      	ldr	r1, [pc, #212]	@ (8001f04 <HAL_GPIO_Init+0x328>)
 8001e2e:	69fb      	ldr	r3, [r7, #28]
 8001e30:	089b      	lsrs	r3, r3, #2
 8001e32:	3302      	adds	r3, #2
 8001e34:	69ba      	ldr	r2, [r7, #24]
 8001e36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e3a:	4b3d      	ldr	r3, [pc, #244]	@ (8001f30 <HAL_GPIO_Init+0x354>)
 8001e3c:	689b      	ldr	r3, [r3, #8]
 8001e3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e40:	693b      	ldr	r3, [r7, #16]
 8001e42:	43db      	mvns	r3, r3
 8001e44:	69ba      	ldr	r2, [r7, #24]
 8001e46:	4013      	ands	r3, r2
 8001e48:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d003      	beq.n	8001e5e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001e56:	69ba      	ldr	r2, [r7, #24]
 8001e58:	693b      	ldr	r3, [r7, #16]
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e5e:	4a34      	ldr	r2, [pc, #208]	@ (8001f30 <HAL_GPIO_Init+0x354>)
 8001e60:	69bb      	ldr	r3, [r7, #24]
 8001e62:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e64:	4b32      	ldr	r3, [pc, #200]	@ (8001f30 <HAL_GPIO_Init+0x354>)
 8001e66:	68db      	ldr	r3, [r3, #12]
 8001e68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e6a:	693b      	ldr	r3, [r7, #16]
 8001e6c:	43db      	mvns	r3, r3
 8001e6e:	69ba      	ldr	r2, [r7, #24]
 8001e70:	4013      	ands	r3, r2
 8001e72:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d003      	beq.n	8001e88 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001e80:	69ba      	ldr	r2, [r7, #24]
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	4313      	orrs	r3, r2
 8001e86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e88:	4a29      	ldr	r2, [pc, #164]	@ (8001f30 <HAL_GPIO_Init+0x354>)
 8001e8a:	69bb      	ldr	r3, [r7, #24]
 8001e8c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e8e:	4b28      	ldr	r3, [pc, #160]	@ (8001f30 <HAL_GPIO_Init+0x354>)
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e94:	693b      	ldr	r3, [r7, #16]
 8001e96:	43db      	mvns	r3, r3
 8001e98:	69ba      	ldr	r2, [r7, #24]
 8001e9a:	4013      	ands	r3, r2
 8001e9c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d003      	beq.n	8001eb2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001eaa:	69ba      	ldr	r2, [r7, #24]
 8001eac:	693b      	ldr	r3, [r7, #16]
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001eb2:	4a1f      	ldr	r2, [pc, #124]	@ (8001f30 <HAL_GPIO_Init+0x354>)
 8001eb4:	69bb      	ldr	r3, [r7, #24]
 8001eb6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001eb8:	4b1d      	ldr	r3, [pc, #116]	@ (8001f30 <HAL_GPIO_Init+0x354>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	43db      	mvns	r3, r3
 8001ec2:	69ba      	ldr	r2, [r7, #24]
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d003      	beq.n	8001edc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001ed4:	69ba      	ldr	r2, [r7, #24]
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001edc:	4a14      	ldr	r2, [pc, #80]	@ (8001f30 <HAL_GPIO_Init+0x354>)
 8001ede:	69bb      	ldr	r3, [r7, #24]
 8001ee0:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8001ee2:	69fb      	ldr	r3, [r7, #28]
 8001ee4:	3301      	adds	r3, #1
 8001ee6:	61fb      	str	r3, [r7, #28]
 8001ee8:	69fb      	ldr	r3, [r7, #28]
 8001eea:	2b0f      	cmp	r3, #15
 8001eec:	f67f ae86 	bls.w	8001bfc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001ef0:	bf00      	nop
 8001ef2:	bf00      	nop
 8001ef4:	3724      	adds	r7, #36	@ 0x24
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efc:	4770      	bx	lr
 8001efe:	bf00      	nop
 8001f00:	40023800 	.word	0x40023800
 8001f04:	40013800 	.word	0x40013800
 8001f08:	40020000 	.word	0x40020000
 8001f0c:	40020400 	.word	0x40020400
 8001f10:	40020800 	.word	0x40020800
 8001f14:	40020c00 	.word	0x40020c00
 8001f18:	40021000 	.word	0x40021000
 8001f1c:	40021400 	.word	0x40021400
 8001f20:	40021800 	.word	0x40021800
 8001f24:	40021c00 	.word	0x40021c00
 8001f28:	40022000 	.word	0x40022000
 8001f2c:	40022400 	.word	0x40022400
 8001f30:	40013c00 	.word	0x40013c00

08001f34 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b085      	sub	sp, #20
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
 8001f3c:	460b      	mov	r3, r1
 8001f3e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	691a      	ldr	r2, [r3, #16]
 8001f44:	887b      	ldrh	r3, [r7, #2]
 8001f46:	4013      	ands	r3, r2
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d002      	beq.n	8001f52 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	73fb      	strb	r3, [r7, #15]
 8001f50:	e001      	b.n	8001f56 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001f52:	2300      	movs	r3, #0
 8001f54:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001f56:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	3714      	adds	r7, #20
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr

08001f64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b083      	sub	sp, #12
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
 8001f6c:	460b      	mov	r3, r1
 8001f6e:	807b      	strh	r3, [r7, #2]
 8001f70:	4613      	mov	r3, r2
 8001f72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f74:	787b      	ldrb	r3, [r7, #1]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d003      	beq.n	8001f82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f7a:	887a      	ldrh	r2, [r7, #2]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001f80:	e003      	b.n	8001f8a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001f82:	887b      	ldrh	r3, [r7, #2]
 8001f84:	041a      	lsls	r2, r3, #16
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	619a      	str	r2, [r3, #24]
}
 8001f8a:	bf00      	nop
 8001f8c:	370c      	adds	r7, #12
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f94:	4770      	bx	lr

08001f96 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001f96:	b480      	push	{r7}
 8001f98:	b085      	sub	sp, #20
 8001f9a:	af00      	add	r7, sp, #0
 8001f9c:	6078      	str	r0, [r7, #4]
 8001f9e:	460b      	mov	r3, r1
 8001fa0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	695b      	ldr	r3, [r3, #20]
 8001fa6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001fa8:	887a      	ldrh	r2, [r7, #2]
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	4013      	ands	r3, r2
 8001fae:	041a      	lsls	r2, r3, #16
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	43d9      	mvns	r1, r3
 8001fb4:	887b      	ldrh	r3, [r7, #2]
 8001fb6:	400b      	ands	r3, r1
 8001fb8:	431a      	orrs	r2, r3
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	619a      	str	r2, [r3, #24]
}
 8001fbe:	bf00      	nop
 8001fc0:	3714      	adds	r7, #20
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr
	...

08001fcc <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001fd0:	4b05      	ldr	r3, [pc, #20]	@ (8001fe8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a04      	ldr	r2, [pc, #16]	@ (8001fe8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001fd6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fda:	6013      	str	r3, [r2, #0]
}
 8001fdc:	bf00      	nop
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe4:	4770      	bx	lr
 8001fe6:	bf00      	nop
 8001fe8:	40007000 	.word	0x40007000

08001fec <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b082      	sub	sp, #8
 8001ff0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001ff6:	4b23      	ldr	r3, [pc, #140]	@ (8002084 <HAL_PWREx_EnableOverDrive+0x98>)
 8001ff8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ffa:	4a22      	ldr	r2, [pc, #136]	@ (8002084 <HAL_PWREx_EnableOverDrive+0x98>)
 8001ffc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002000:	6413      	str	r3, [r2, #64]	@ 0x40
 8002002:	4b20      	ldr	r3, [pc, #128]	@ (8002084 <HAL_PWREx_EnableOverDrive+0x98>)
 8002004:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002006:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800200a:	603b      	str	r3, [r7, #0]
 800200c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800200e:	4b1e      	ldr	r3, [pc, #120]	@ (8002088 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a1d      	ldr	r2, [pc, #116]	@ (8002088 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002014:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002018:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800201a:	f7ff fcc9 	bl	80019b0 <HAL_GetTick>
 800201e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002020:	e009      	b.n	8002036 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002022:	f7ff fcc5 	bl	80019b0 <HAL_GetTick>
 8002026:	4602      	mov	r2, r0
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	1ad3      	subs	r3, r2, r3
 800202c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002030:	d901      	bls.n	8002036 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002032:	2303      	movs	r3, #3
 8002034:	e022      	b.n	800207c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002036:	4b14      	ldr	r3, [pc, #80]	@ (8002088 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800203e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002042:	d1ee      	bne.n	8002022 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002044:	4b10      	ldr	r3, [pc, #64]	@ (8002088 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a0f      	ldr	r2, [pc, #60]	@ (8002088 <HAL_PWREx_EnableOverDrive+0x9c>)
 800204a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800204e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002050:	f7ff fcae 	bl	80019b0 <HAL_GetTick>
 8002054:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002056:	e009      	b.n	800206c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002058:	f7ff fcaa 	bl	80019b0 <HAL_GetTick>
 800205c:	4602      	mov	r2, r0
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	1ad3      	subs	r3, r2, r3
 8002062:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002066:	d901      	bls.n	800206c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002068:	2303      	movs	r3, #3
 800206a:	e007      	b.n	800207c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800206c:	4b06      	ldr	r3, [pc, #24]	@ (8002088 <HAL_PWREx_EnableOverDrive+0x9c>)
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002074:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002078:	d1ee      	bne.n	8002058 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800207a:	2300      	movs	r3, #0
}
 800207c:	4618      	mov	r0, r3
 800207e:	3708      	adds	r7, #8
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}
 8002084:	40023800 	.word	0x40023800
 8002088:	40007000 	.word	0x40007000

0800208c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b086      	sub	sp, #24
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002094:	2300      	movs	r3, #0
 8002096:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d101      	bne.n	80020a2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	e291      	b.n	80025c6 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f003 0301 	and.w	r3, r3, #1
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	f000 8087 	beq.w	80021be <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80020b0:	4b96      	ldr	r3, [pc, #600]	@ (800230c <HAL_RCC_OscConfig+0x280>)
 80020b2:	689b      	ldr	r3, [r3, #8]
 80020b4:	f003 030c 	and.w	r3, r3, #12
 80020b8:	2b04      	cmp	r3, #4
 80020ba:	d00c      	beq.n	80020d6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80020bc:	4b93      	ldr	r3, [pc, #588]	@ (800230c <HAL_RCC_OscConfig+0x280>)
 80020be:	689b      	ldr	r3, [r3, #8]
 80020c0:	f003 030c 	and.w	r3, r3, #12
 80020c4:	2b08      	cmp	r3, #8
 80020c6:	d112      	bne.n	80020ee <HAL_RCC_OscConfig+0x62>
 80020c8:	4b90      	ldr	r3, [pc, #576]	@ (800230c <HAL_RCC_OscConfig+0x280>)
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80020d0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80020d4:	d10b      	bne.n	80020ee <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020d6:	4b8d      	ldr	r3, [pc, #564]	@ (800230c <HAL_RCC_OscConfig+0x280>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d06c      	beq.n	80021bc <HAL_RCC_OscConfig+0x130>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d168      	bne.n	80021bc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
 80020ec:	e26b      	b.n	80025c6 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80020f6:	d106      	bne.n	8002106 <HAL_RCC_OscConfig+0x7a>
 80020f8:	4b84      	ldr	r3, [pc, #528]	@ (800230c <HAL_RCC_OscConfig+0x280>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a83      	ldr	r2, [pc, #524]	@ (800230c <HAL_RCC_OscConfig+0x280>)
 80020fe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002102:	6013      	str	r3, [r2, #0]
 8002104:	e02e      	b.n	8002164 <HAL_RCC_OscConfig+0xd8>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d10c      	bne.n	8002128 <HAL_RCC_OscConfig+0x9c>
 800210e:	4b7f      	ldr	r3, [pc, #508]	@ (800230c <HAL_RCC_OscConfig+0x280>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4a7e      	ldr	r2, [pc, #504]	@ (800230c <HAL_RCC_OscConfig+0x280>)
 8002114:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002118:	6013      	str	r3, [r2, #0]
 800211a:	4b7c      	ldr	r3, [pc, #496]	@ (800230c <HAL_RCC_OscConfig+0x280>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4a7b      	ldr	r2, [pc, #492]	@ (800230c <HAL_RCC_OscConfig+0x280>)
 8002120:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002124:	6013      	str	r3, [r2, #0]
 8002126:	e01d      	b.n	8002164 <HAL_RCC_OscConfig+0xd8>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002130:	d10c      	bne.n	800214c <HAL_RCC_OscConfig+0xc0>
 8002132:	4b76      	ldr	r3, [pc, #472]	@ (800230c <HAL_RCC_OscConfig+0x280>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a75      	ldr	r2, [pc, #468]	@ (800230c <HAL_RCC_OscConfig+0x280>)
 8002138:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800213c:	6013      	str	r3, [r2, #0]
 800213e:	4b73      	ldr	r3, [pc, #460]	@ (800230c <HAL_RCC_OscConfig+0x280>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a72      	ldr	r2, [pc, #456]	@ (800230c <HAL_RCC_OscConfig+0x280>)
 8002144:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002148:	6013      	str	r3, [r2, #0]
 800214a:	e00b      	b.n	8002164 <HAL_RCC_OscConfig+0xd8>
 800214c:	4b6f      	ldr	r3, [pc, #444]	@ (800230c <HAL_RCC_OscConfig+0x280>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a6e      	ldr	r2, [pc, #440]	@ (800230c <HAL_RCC_OscConfig+0x280>)
 8002152:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002156:	6013      	str	r3, [r2, #0]
 8002158:	4b6c      	ldr	r3, [pc, #432]	@ (800230c <HAL_RCC_OscConfig+0x280>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a6b      	ldr	r2, [pc, #428]	@ (800230c <HAL_RCC_OscConfig+0x280>)
 800215e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002162:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d013      	beq.n	8002194 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800216c:	f7ff fc20 	bl	80019b0 <HAL_GetTick>
 8002170:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002172:	e008      	b.n	8002186 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002174:	f7ff fc1c 	bl	80019b0 <HAL_GetTick>
 8002178:	4602      	mov	r2, r0
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	1ad3      	subs	r3, r2, r3
 800217e:	2b64      	cmp	r3, #100	@ 0x64
 8002180:	d901      	bls.n	8002186 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002182:	2303      	movs	r3, #3
 8002184:	e21f      	b.n	80025c6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002186:	4b61      	ldr	r3, [pc, #388]	@ (800230c <HAL_RCC_OscConfig+0x280>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800218e:	2b00      	cmp	r3, #0
 8002190:	d0f0      	beq.n	8002174 <HAL_RCC_OscConfig+0xe8>
 8002192:	e014      	b.n	80021be <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002194:	f7ff fc0c 	bl	80019b0 <HAL_GetTick>
 8002198:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800219a:	e008      	b.n	80021ae <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800219c:	f7ff fc08 	bl	80019b0 <HAL_GetTick>
 80021a0:	4602      	mov	r2, r0
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	1ad3      	subs	r3, r2, r3
 80021a6:	2b64      	cmp	r3, #100	@ 0x64
 80021a8:	d901      	bls.n	80021ae <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80021aa:	2303      	movs	r3, #3
 80021ac:	e20b      	b.n	80025c6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021ae:	4b57      	ldr	r3, [pc, #348]	@ (800230c <HAL_RCC_OscConfig+0x280>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d1f0      	bne.n	800219c <HAL_RCC_OscConfig+0x110>
 80021ba:	e000      	b.n	80021be <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f003 0302 	and.w	r3, r3, #2
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d069      	beq.n	800229e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80021ca:	4b50      	ldr	r3, [pc, #320]	@ (800230c <HAL_RCC_OscConfig+0x280>)
 80021cc:	689b      	ldr	r3, [r3, #8]
 80021ce:	f003 030c 	and.w	r3, r3, #12
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d00b      	beq.n	80021ee <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80021d6:	4b4d      	ldr	r3, [pc, #308]	@ (800230c <HAL_RCC_OscConfig+0x280>)
 80021d8:	689b      	ldr	r3, [r3, #8]
 80021da:	f003 030c 	and.w	r3, r3, #12
 80021de:	2b08      	cmp	r3, #8
 80021e0:	d11c      	bne.n	800221c <HAL_RCC_OscConfig+0x190>
 80021e2:	4b4a      	ldr	r3, [pc, #296]	@ (800230c <HAL_RCC_OscConfig+0x280>)
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d116      	bne.n	800221c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021ee:	4b47      	ldr	r3, [pc, #284]	@ (800230c <HAL_RCC_OscConfig+0x280>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f003 0302 	and.w	r3, r3, #2
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d005      	beq.n	8002206 <HAL_RCC_OscConfig+0x17a>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	68db      	ldr	r3, [r3, #12]
 80021fe:	2b01      	cmp	r3, #1
 8002200:	d001      	beq.n	8002206 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002202:	2301      	movs	r3, #1
 8002204:	e1df      	b.n	80025c6 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002206:	4b41      	ldr	r3, [pc, #260]	@ (800230c <HAL_RCC_OscConfig+0x280>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	691b      	ldr	r3, [r3, #16]
 8002212:	00db      	lsls	r3, r3, #3
 8002214:	493d      	ldr	r1, [pc, #244]	@ (800230c <HAL_RCC_OscConfig+0x280>)
 8002216:	4313      	orrs	r3, r2
 8002218:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800221a:	e040      	b.n	800229e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	68db      	ldr	r3, [r3, #12]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d023      	beq.n	800226c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002224:	4b39      	ldr	r3, [pc, #228]	@ (800230c <HAL_RCC_OscConfig+0x280>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a38      	ldr	r2, [pc, #224]	@ (800230c <HAL_RCC_OscConfig+0x280>)
 800222a:	f043 0301 	orr.w	r3, r3, #1
 800222e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002230:	f7ff fbbe 	bl	80019b0 <HAL_GetTick>
 8002234:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002236:	e008      	b.n	800224a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002238:	f7ff fbba 	bl	80019b0 <HAL_GetTick>
 800223c:	4602      	mov	r2, r0
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	1ad3      	subs	r3, r2, r3
 8002242:	2b02      	cmp	r3, #2
 8002244:	d901      	bls.n	800224a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002246:	2303      	movs	r3, #3
 8002248:	e1bd      	b.n	80025c6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800224a:	4b30      	ldr	r3, [pc, #192]	@ (800230c <HAL_RCC_OscConfig+0x280>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f003 0302 	and.w	r3, r3, #2
 8002252:	2b00      	cmp	r3, #0
 8002254:	d0f0      	beq.n	8002238 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002256:	4b2d      	ldr	r3, [pc, #180]	@ (800230c <HAL_RCC_OscConfig+0x280>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	691b      	ldr	r3, [r3, #16]
 8002262:	00db      	lsls	r3, r3, #3
 8002264:	4929      	ldr	r1, [pc, #164]	@ (800230c <HAL_RCC_OscConfig+0x280>)
 8002266:	4313      	orrs	r3, r2
 8002268:	600b      	str	r3, [r1, #0]
 800226a:	e018      	b.n	800229e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800226c:	4b27      	ldr	r3, [pc, #156]	@ (800230c <HAL_RCC_OscConfig+0x280>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a26      	ldr	r2, [pc, #152]	@ (800230c <HAL_RCC_OscConfig+0x280>)
 8002272:	f023 0301 	bic.w	r3, r3, #1
 8002276:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002278:	f7ff fb9a 	bl	80019b0 <HAL_GetTick>
 800227c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800227e:	e008      	b.n	8002292 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002280:	f7ff fb96 	bl	80019b0 <HAL_GetTick>
 8002284:	4602      	mov	r2, r0
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	1ad3      	subs	r3, r2, r3
 800228a:	2b02      	cmp	r3, #2
 800228c:	d901      	bls.n	8002292 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800228e:	2303      	movs	r3, #3
 8002290:	e199      	b.n	80025c6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002292:	4b1e      	ldr	r3, [pc, #120]	@ (800230c <HAL_RCC_OscConfig+0x280>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f003 0302 	and.w	r3, r3, #2
 800229a:	2b00      	cmp	r3, #0
 800229c:	d1f0      	bne.n	8002280 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 0308 	and.w	r3, r3, #8
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d038      	beq.n	800231c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	695b      	ldr	r3, [r3, #20]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d019      	beq.n	80022e6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022b2:	4b16      	ldr	r3, [pc, #88]	@ (800230c <HAL_RCC_OscConfig+0x280>)
 80022b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80022b6:	4a15      	ldr	r2, [pc, #84]	@ (800230c <HAL_RCC_OscConfig+0x280>)
 80022b8:	f043 0301 	orr.w	r3, r3, #1
 80022bc:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022be:	f7ff fb77 	bl	80019b0 <HAL_GetTick>
 80022c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022c4:	e008      	b.n	80022d8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022c6:	f7ff fb73 	bl	80019b0 <HAL_GetTick>
 80022ca:	4602      	mov	r2, r0
 80022cc:	693b      	ldr	r3, [r7, #16]
 80022ce:	1ad3      	subs	r3, r2, r3
 80022d0:	2b02      	cmp	r3, #2
 80022d2:	d901      	bls.n	80022d8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80022d4:	2303      	movs	r3, #3
 80022d6:	e176      	b.n	80025c6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022d8:	4b0c      	ldr	r3, [pc, #48]	@ (800230c <HAL_RCC_OscConfig+0x280>)
 80022da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80022dc:	f003 0302 	and.w	r3, r3, #2
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d0f0      	beq.n	80022c6 <HAL_RCC_OscConfig+0x23a>
 80022e4:	e01a      	b.n	800231c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022e6:	4b09      	ldr	r3, [pc, #36]	@ (800230c <HAL_RCC_OscConfig+0x280>)
 80022e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80022ea:	4a08      	ldr	r2, [pc, #32]	@ (800230c <HAL_RCC_OscConfig+0x280>)
 80022ec:	f023 0301 	bic.w	r3, r3, #1
 80022f0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022f2:	f7ff fb5d 	bl	80019b0 <HAL_GetTick>
 80022f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022f8:	e00a      	b.n	8002310 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022fa:	f7ff fb59 	bl	80019b0 <HAL_GetTick>
 80022fe:	4602      	mov	r2, r0
 8002300:	693b      	ldr	r3, [r7, #16]
 8002302:	1ad3      	subs	r3, r2, r3
 8002304:	2b02      	cmp	r3, #2
 8002306:	d903      	bls.n	8002310 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002308:	2303      	movs	r3, #3
 800230a:	e15c      	b.n	80025c6 <HAL_RCC_OscConfig+0x53a>
 800230c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002310:	4b91      	ldr	r3, [pc, #580]	@ (8002558 <HAL_RCC_OscConfig+0x4cc>)
 8002312:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002314:	f003 0302 	and.w	r3, r3, #2
 8002318:	2b00      	cmp	r3, #0
 800231a:	d1ee      	bne.n	80022fa <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f003 0304 	and.w	r3, r3, #4
 8002324:	2b00      	cmp	r3, #0
 8002326:	f000 80a4 	beq.w	8002472 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800232a:	4b8b      	ldr	r3, [pc, #556]	@ (8002558 <HAL_RCC_OscConfig+0x4cc>)
 800232c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800232e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002332:	2b00      	cmp	r3, #0
 8002334:	d10d      	bne.n	8002352 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002336:	4b88      	ldr	r3, [pc, #544]	@ (8002558 <HAL_RCC_OscConfig+0x4cc>)
 8002338:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800233a:	4a87      	ldr	r2, [pc, #540]	@ (8002558 <HAL_RCC_OscConfig+0x4cc>)
 800233c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002340:	6413      	str	r3, [r2, #64]	@ 0x40
 8002342:	4b85      	ldr	r3, [pc, #532]	@ (8002558 <HAL_RCC_OscConfig+0x4cc>)
 8002344:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002346:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800234a:	60bb      	str	r3, [r7, #8]
 800234c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800234e:	2301      	movs	r3, #1
 8002350:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002352:	4b82      	ldr	r3, [pc, #520]	@ (800255c <HAL_RCC_OscConfig+0x4d0>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800235a:	2b00      	cmp	r3, #0
 800235c:	d118      	bne.n	8002390 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800235e:	4b7f      	ldr	r3, [pc, #508]	@ (800255c <HAL_RCC_OscConfig+0x4d0>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a7e      	ldr	r2, [pc, #504]	@ (800255c <HAL_RCC_OscConfig+0x4d0>)
 8002364:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002368:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800236a:	f7ff fb21 	bl	80019b0 <HAL_GetTick>
 800236e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002370:	e008      	b.n	8002384 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002372:	f7ff fb1d 	bl	80019b0 <HAL_GetTick>
 8002376:	4602      	mov	r2, r0
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	1ad3      	subs	r3, r2, r3
 800237c:	2b64      	cmp	r3, #100	@ 0x64
 800237e:	d901      	bls.n	8002384 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002380:	2303      	movs	r3, #3
 8002382:	e120      	b.n	80025c6 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002384:	4b75      	ldr	r3, [pc, #468]	@ (800255c <HAL_RCC_OscConfig+0x4d0>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800238c:	2b00      	cmp	r3, #0
 800238e:	d0f0      	beq.n	8002372 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	2b01      	cmp	r3, #1
 8002396:	d106      	bne.n	80023a6 <HAL_RCC_OscConfig+0x31a>
 8002398:	4b6f      	ldr	r3, [pc, #444]	@ (8002558 <HAL_RCC_OscConfig+0x4cc>)
 800239a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800239c:	4a6e      	ldr	r2, [pc, #440]	@ (8002558 <HAL_RCC_OscConfig+0x4cc>)
 800239e:	f043 0301 	orr.w	r3, r3, #1
 80023a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80023a4:	e02d      	b.n	8002402 <HAL_RCC_OscConfig+0x376>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	689b      	ldr	r3, [r3, #8]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d10c      	bne.n	80023c8 <HAL_RCC_OscConfig+0x33c>
 80023ae:	4b6a      	ldr	r3, [pc, #424]	@ (8002558 <HAL_RCC_OscConfig+0x4cc>)
 80023b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023b2:	4a69      	ldr	r2, [pc, #420]	@ (8002558 <HAL_RCC_OscConfig+0x4cc>)
 80023b4:	f023 0301 	bic.w	r3, r3, #1
 80023b8:	6713      	str	r3, [r2, #112]	@ 0x70
 80023ba:	4b67      	ldr	r3, [pc, #412]	@ (8002558 <HAL_RCC_OscConfig+0x4cc>)
 80023bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023be:	4a66      	ldr	r2, [pc, #408]	@ (8002558 <HAL_RCC_OscConfig+0x4cc>)
 80023c0:	f023 0304 	bic.w	r3, r3, #4
 80023c4:	6713      	str	r3, [r2, #112]	@ 0x70
 80023c6:	e01c      	b.n	8002402 <HAL_RCC_OscConfig+0x376>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	2b05      	cmp	r3, #5
 80023ce:	d10c      	bne.n	80023ea <HAL_RCC_OscConfig+0x35e>
 80023d0:	4b61      	ldr	r3, [pc, #388]	@ (8002558 <HAL_RCC_OscConfig+0x4cc>)
 80023d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023d4:	4a60      	ldr	r2, [pc, #384]	@ (8002558 <HAL_RCC_OscConfig+0x4cc>)
 80023d6:	f043 0304 	orr.w	r3, r3, #4
 80023da:	6713      	str	r3, [r2, #112]	@ 0x70
 80023dc:	4b5e      	ldr	r3, [pc, #376]	@ (8002558 <HAL_RCC_OscConfig+0x4cc>)
 80023de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023e0:	4a5d      	ldr	r2, [pc, #372]	@ (8002558 <HAL_RCC_OscConfig+0x4cc>)
 80023e2:	f043 0301 	orr.w	r3, r3, #1
 80023e6:	6713      	str	r3, [r2, #112]	@ 0x70
 80023e8:	e00b      	b.n	8002402 <HAL_RCC_OscConfig+0x376>
 80023ea:	4b5b      	ldr	r3, [pc, #364]	@ (8002558 <HAL_RCC_OscConfig+0x4cc>)
 80023ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023ee:	4a5a      	ldr	r2, [pc, #360]	@ (8002558 <HAL_RCC_OscConfig+0x4cc>)
 80023f0:	f023 0301 	bic.w	r3, r3, #1
 80023f4:	6713      	str	r3, [r2, #112]	@ 0x70
 80023f6:	4b58      	ldr	r3, [pc, #352]	@ (8002558 <HAL_RCC_OscConfig+0x4cc>)
 80023f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023fa:	4a57      	ldr	r2, [pc, #348]	@ (8002558 <HAL_RCC_OscConfig+0x4cc>)
 80023fc:	f023 0304 	bic.w	r3, r3, #4
 8002400:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d015      	beq.n	8002436 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800240a:	f7ff fad1 	bl	80019b0 <HAL_GetTick>
 800240e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002410:	e00a      	b.n	8002428 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002412:	f7ff facd 	bl	80019b0 <HAL_GetTick>
 8002416:	4602      	mov	r2, r0
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	1ad3      	subs	r3, r2, r3
 800241c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002420:	4293      	cmp	r3, r2
 8002422:	d901      	bls.n	8002428 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002424:	2303      	movs	r3, #3
 8002426:	e0ce      	b.n	80025c6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002428:	4b4b      	ldr	r3, [pc, #300]	@ (8002558 <HAL_RCC_OscConfig+0x4cc>)
 800242a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800242c:	f003 0302 	and.w	r3, r3, #2
 8002430:	2b00      	cmp	r3, #0
 8002432:	d0ee      	beq.n	8002412 <HAL_RCC_OscConfig+0x386>
 8002434:	e014      	b.n	8002460 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002436:	f7ff fabb 	bl	80019b0 <HAL_GetTick>
 800243a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800243c:	e00a      	b.n	8002454 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800243e:	f7ff fab7 	bl	80019b0 <HAL_GetTick>
 8002442:	4602      	mov	r2, r0
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	1ad3      	subs	r3, r2, r3
 8002448:	f241 3288 	movw	r2, #5000	@ 0x1388
 800244c:	4293      	cmp	r3, r2
 800244e:	d901      	bls.n	8002454 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002450:	2303      	movs	r3, #3
 8002452:	e0b8      	b.n	80025c6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002454:	4b40      	ldr	r3, [pc, #256]	@ (8002558 <HAL_RCC_OscConfig+0x4cc>)
 8002456:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002458:	f003 0302 	and.w	r3, r3, #2
 800245c:	2b00      	cmp	r3, #0
 800245e:	d1ee      	bne.n	800243e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002460:	7dfb      	ldrb	r3, [r7, #23]
 8002462:	2b01      	cmp	r3, #1
 8002464:	d105      	bne.n	8002472 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002466:	4b3c      	ldr	r3, [pc, #240]	@ (8002558 <HAL_RCC_OscConfig+0x4cc>)
 8002468:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800246a:	4a3b      	ldr	r2, [pc, #236]	@ (8002558 <HAL_RCC_OscConfig+0x4cc>)
 800246c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002470:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	699b      	ldr	r3, [r3, #24]
 8002476:	2b00      	cmp	r3, #0
 8002478:	f000 80a4 	beq.w	80025c4 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800247c:	4b36      	ldr	r3, [pc, #216]	@ (8002558 <HAL_RCC_OscConfig+0x4cc>)
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	f003 030c 	and.w	r3, r3, #12
 8002484:	2b08      	cmp	r3, #8
 8002486:	d06b      	beq.n	8002560 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	699b      	ldr	r3, [r3, #24]
 800248c:	2b02      	cmp	r3, #2
 800248e:	d149      	bne.n	8002524 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002490:	4b31      	ldr	r3, [pc, #196]	@ (8002558 <HAL_RCC_OscConfig+0x4cc>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a30      	ldr	r2, [pc, #192]	@ (8002558 <HAL_RCC_OscConfig+0x4cc>)
 8002496:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800249a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800249c:	f7ff fa88 	bl	80019b0 <HAL_GetTick>
 80024a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024a2:	e008      	b.n	80024b6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024a4:	f7ff fa84 	bl	80019b0 <HAL_GetTick>
 80024a8:	4602      	mov	r2, r0
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	1ad3      	subs	r3, r2, r3
 80024ae:	2b02      	cmp	r3, #2
 80024b0:	d901      	bls.n	80024b6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80024b2:	2303      	movs	r3, #3
 80024b4:	e087      	b.n	80025c6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024b6:	4b28      	ldr	r3, [pc, #160]	@ (8002558 <HAL_RCC_OscConfig+0x4cc>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d1f0      	bne.n	80024a4 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	69da      	ldr	r2, [r3, #28]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6a1b      	ldr	r3, [r3, #32]
 80024ca:	431a      	orrs	r2, r3
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024d0:	019b      	lsls	r3, r3, #6
 80024d2:	431a      	orrs	r2, r3
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024d8:	085b      	lsrs	r3, r3, #1
 80024da:	3b01      	subs	r3, #1
 80024dc:	041b      	lsls	r3, r3, #16
 80024de:	431a      	orrs	r2, r3
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024e4:	061b      	lsls	r3, r3, #24
 80024e6:	4313      	orrs	r3, r2
 80024e8:	4a1b      	ldr	r2, [pc, #108]	@ (8002558 <HAL_RCC_OscConfig+0x4cc>)
 80024ea:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80024ee:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024f0:	4b19      	ldr	r3, [pc, #100]	@ (8002558 <HAL_RCC_OscConfig+0x4cc>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a18      	ldr	r2, [pc, #96]	@ (8002558 <HAL_RCC_OscConfig+0x4cc>)
 80024f6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80024fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024fc:	f7ff fa58 	bl	80019b0 <HAL_GetTick>
 8002500:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002502:	e008      	b.n	8002516 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002504:	f7ff fa54 	bl	80019b0 <HAL_GetTick>
 8002508:	4602      	mov	r2, r0
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	1ad3      	subs	r3, r2, r3
 800250e:	2b02      	cmp	r3, #2
 8002510:	d901      	bls.n	8002516 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002512:	2303      	movs	r3, #3
 8002514:	e057      	b.n	80025c6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002516:	4b10      	ldr	r3, [pc, #64]	@ (8002558 <HAL_RCC_OscConfig+0x4cc>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800251e:	2b00      	cmp	r3, #0
 8002520:	d0f0      	beq.n	8002504 <HAL_RCC_OscConfig+0x478>
 8002522:	e04f      	b.n	80025c4 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002524:	4b0c      	ldr	r3, [pc, #48]	@ (8002558 <HAL_RCC_OscConfig+0x4cc>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a0b      	ldr	r2, [pc, #44]	@ (8002558 <HAL_RCC_OscConfig+0x4cc>)
 800252a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800252e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002530:	f7ff fa3e 	bl	80019b0 <HAL_GetTick>
 8002534:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002536:	e008      	b.n	800254a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002538:	f7ff fa3a 	bl	80019b0 <HAL_GetTick>
 800253c:	4602      	mov	r2, r0
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	1ad3      	subs	r3, r2, r3
 8002542:	2b02      	cmp	r3, #2
 8002544:	d901      	bls.n	800254a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8002546:	2303      	movs	r3, #3
 8002548:	e03d      	b.n	80025c6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800254a:	4b03      	ldr	r3, [pc, #12]	@ (8002558 <HAL_RCC_OscConfig+0x4cc>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002552:	2b00      	cmp	r3, #0
 8002554:	d1f0      	bne.n	8002538 <HAL_RCC_OscConfig+0x4ac>
 8002556:	e035      	b.n	80025c4 <HAL_RCC_OscConfig+0x538>
 8002558:	40023800 	.word	0x40023800
 800255c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002560:	4b1b      	ldr	r3, [pc, #108]	@ (80025d0 <HAL_RCC_OscConfig+0x544>)
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	699b      	ldr	r3, [r3, #24]
 800256a:	2b01      	cmp	r3, #1
 800256c:	d028      	beq.n	80025c0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002578:	429a      	cmp	r2, r3
 800257a:	d121      	bne.n	80025c0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002586:	429a      	cmp	r2, r3
 8002588:	d11a      	bne.n	80025c0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800258a:	68fa      	ldr	r2, [r7, #12]
 800258c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002590:	4013      	ands	r3, r2
 8002592:	687a      	ldr	r2, [r7, #4]
 8002594:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002596:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002598:	4293      	cmp	r3, r2
 800259a:	d111      	bne.n	80025c0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025a6:	085b      	lsrs	r3, r3, #1
 80025a8:	3b01      	subs	r3, #1
 80025aa:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80025ac:	429a      	cmp	r2, r3
 80025ae:	d107      	bne.n	80025c0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025ba:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80025bc:	429a      	cmp	r2, r3
 80025be:	d001      	beq.n	80025c4 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80025c0:	2301      	movs	r3, #1
 80025c2:	e000      	b.n	80025c6 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80025c4:	2300      	movs	r3, #0
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	3718      	adds	r7, #24
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	bf00      	nop
 80025d0:	40023800 	.word	0x40023800

080025d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b084      	sub	sp, #16
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
 80025dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80025de:	2300      	movs	r3, #0
 80025e0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d101      	bne.n	80025ec <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80025e8:	2301      	movs	r3, #1
 80025ea:	e0d0      	b.n	800278e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80025ec:	4b6a      	ldr	r3, [pc, #424]	@ (8002798 <HAL_RCC_ClockConfig+0x1c4>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f003 030f 	and.w	r3, r3, #15
 80025f4:	683a      	ldr	r2, [r7, #0]
 80025f6:	429a      	cmp	r2, r3
 80025f8:	d910      	bls.n	800261c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025fa:	4b67      	ldr	r3, [pc, #412]	@ (8002798 <HAL_RCC_ClockConfig+0x1c4>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f023 020f 	bic.w	r2, r3, #15
 8002602:	4965      	ldr	r1, [pc, #404]	@ (8002798 <HAL_RCC_ClockConfig+0x1c4>)
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	4313      	orrs	r3, r2
 8002608:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800260a:	4b63      	ldr	r3, [pc, #396]	@ (8002798 <HAL_RCC_ClockConfig+0x1c4>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f003 030f 	and.w	r3, r3, #15
 8002612:	683a      	ldr	r2, [r7, #0]
 8002614:	429a      	cmp	r2, r3
 8002616:	d001      	beq.n	800261c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002618:	2301      	movs	r3, #1
 800261a:	e0b8      	b.n	800278e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f003 0302 	and.w	r3, r3, #2
 8002624:	2b00      	cmp	r3, #0
 8002626:	d020      	beq.n	800266a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f003 0304 	and.w	r3, r3, #4
 8002630:	2b00      	cmp	r3, #0
 8002632:	d005      	beq.n	8002640 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002634:	4b59      	ldr	r3, [pc, #356]	@ (800279c <HAL_RCC_ClockConfig+0x1c8>)
 8002636:	689b      	ldr	r3, [r3, #8]
 8002638:	4a58      	ldr	r2, [pc, #352]	@ (800279c <HAL_RCC_ClockConfig+0x1c8>)
 800263a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800263e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f003 0308 	and.w	r3, r3, #8
 8002648:	2b00      	cmp	r3, #0
 800264a:	d005      	beq.n	8002658 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800264c:	4b53      	ldr	r3, [pc, #332]	@ (800279c <HAL_RCC_ClockConfig+0x1c8>)
 800264e:	689b      	ldr	r3, [r3, #8]
 8002650:	4a52      	ldr	r2, [pc, #328]	@ (800279c <HAL_RCC_ClockConfig+0x1c8>)
 8002652:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002656:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002658:	4b50      	ldr	r3, [pc, #320]	@ (800279c <HAL_RCC_ClockConfig+0x1c8>)
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	689b      	ldr	r3, [r3, #8]
 8002664:	494d      	ldr	r1, [pc, #308]	@ (800279c <HAL_RCC_ClockConfig+0x1c8>)
 8002666:	4313      	orrs	r3, r2
 8002668:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f003 0301 	and.w	r3, r3, #1
 8002672:	2b00      	cmp	r3, #0
 8002674:	d040      	beq.n	80026f8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	2b01      	cmp	r3, #1
 800267c:	d107      	bne.n	800268e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800267e:	4b47      	ldr	r3, [pc, #284]	@ (800279c <HAL_RCC_ClockConfig+0x1c8>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002686:	2b00      	cmp	r3, #0
 8002688:	d115      	bne.n	80026b6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	e07f      	b.n	800278e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	2b02      	cmp	r3, #2
 8002694:	d107      	bne.n	80026a6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002696:	4b41      	ldr	r3, [pc, #260]	@ (800279c <HAL_RCC_ClockConfig+0x1c8>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d109      	bne.n	80026b6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
 80026a4:	e073      	b.n	800278e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026a6:	4b3d      	ldr	r3, [pc, #244]	@ (800279c <HAL_RCC_ClockConfig+0x1c8>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f003 0302 	and.w	r3, r3, #2
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d101      	bne.n	80026b6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	e06b      	b.n	800278e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026b6:	4b39      	ldr	r3, [pc, #228]	@ (800279c <HAL_RCC_ClockConfig+0x1c8>)
 80026b8:	689b      	ldr	r3, [r3, #8]
 80026ba:	f023 0203 	bic.w	r2, r3, #3
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	4936      	ldr	r1, [pc, #216]	@ (800279c <HAL_RCC_ClockConfig+0x1c8>)
 80026c4:	4313      	orrs	r3, r2
 80026c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026c8:	f7ff f972 	bl	80019b0 <HAL_GetTick>
 80026cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026ce:	e00a      	b.n	80026e6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026d0:	f7ff f96e 	bl	80019b0 <HAL_GetTick>
 80026d4:	4602      	mov	r2, r0
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	1ad3      	subs	r3, r2, r3
 80026da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026de:	4293      	cmp	r3, r2
 80026e0:	d901      	bls.n	80026e6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80026e2:	2303      	movs	r3, #3
 80026e4:	e053      	b.n	800278e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026e6:	4b2d      	ldr	r3, [pc, #180]	@ (800279c <HAL_RCC_ClockConfig+0x1c8>)
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	f003 020c 	and.w	r2, r3, #12
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	009b      	lsls	r3, r3, #2
 80026f4:	429a      	cmp	r2, r3
 80026f6:	d1eb      	bne.n	80026d0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80026f8:	4b27      	ldr	r3, [pc, #156]	@ (8002798 <HAL_RCC_ClockConfig+0x1c4>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f003 030f 	and.w	r3, r3, #15
 8002700:	683a      	ldr	r2, [r7, #0]
 8002702:	429a      	cmp	r2, r3
 8002704:	d210      	bcs.n	8002728 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002706:	4b24      	ldr	r3, [pc, #144]	@ (8002798 <HAL_RCC_ClockConfig+0x1c4>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f023 020f 	bic.w	r2, r3, #15
 800270e:	4922      	ldr	r1, [pc, #136]	@ (8002798 <HAL_RCC_ClockConfig+0x1c4>)
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	4313      	orrs	r3, r2
 8002714:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002716:	4b20      	ldr	r3, [pc, #128]	@ (8002798 <HAL_RCC_ClockConfig+0x1c4>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f003 030f 	and.w	r3, r3, #15
 800271e:	683a      	ldr	r2, [r7, #0]
 8002720:	429a      	cmp	r2, r3
 8002722:	d001      	beq.n	8002728 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002724:	2301      	movs	r3, #1
 8002726:	e032      	b.n	800278e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f003 0304 	and.w	r3, r3, #4
 8002730:	2b00      	cmp	r3, #0
 8002732:	d008      	beq.n	8002746 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002734:	4b19      	ldr	r3, [pc, #100]	@ (800279c <HAL_RCC_ClockConfig+0x1c8>)
 8002736:	689b      	ldr	r3, [r3, #8]
 8002738:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	68db      	ldr	r3, [r3, #12]
 8002740:	4916      	ldr	r1, [pc, #88]	@ (800279c <HAL_RCC_ClockConfig+0x1c8>)
 8002742:	4313      	orrs	r3, r2
 8002744:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f003 0308 	and.w	r3, r3, #8
 800274e:	2b00      	cmp	r3, #0
 8002750:	d009      	beq.n	8002766 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002752:	4b12      	ldr	r3, [pc, #72]	@ (800279c <HAL_RCC_ClockConfig+0x1c8>)
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	691b      	ldr	r3, [r3, #16]
 800275e:	00db      	lsls	r3, r3, #3
 8002760:	490e      	ldr	r1, [pc, #56]	@ (800279c <HAL_RCC_ClockConfig+0x1c8>)
 8002762:	4313      	orrs	r3, r2
 8002764:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002766:	f000 f821 	bl	80027ac <HAL_RCC_GetSysClockFreq>
 800276a:	4602      	mov	r2, r0
 800276c:	4b0b      	ldr	r3, [pc, #44]	@ (800279c <HAL_RCC_ClockConfig+0x1c8>)
 800276e:	689b      	ldr	r3, [r3, #8]
 8002770:	091b      	lsrs	r3, r3, #4
 8002772:	f003 030f 	and.w	r3, r3, #15
 8002776:	490a      	ldr	r1, [pc, #40]	@ (80027a0 <HAL_RCC_ClockConfig+0x1cc>)
 8002778:	5ccb      	ldrb	r3, [r1, r3]
 800277a:	fa22 f303 	lsr.w	r3, r2, r3
 800277e:	4a09      	ldr	r2, [pc, #36]	@ (80027a4 <HAL_RCC_ClockConfig+0x1d0>)
 8002780:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002782:	4b09      	ldr	r3, [pc, #36]	@ (80027a8 <HAL_RCC_ClockConfig+0x1d4>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4618      	mov	r0, r3
 8002788:	f7ff f8ce 	bl	8001928 <HAL_InitTick>

  return HAL_OK;
 800278c:	2300      	movs	r3, #0
}
 800278e:	4618      	mov	r0, r3
 8002790:	3710      	adds	r7, #16
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}
 8002796:	bf00      	nop
 8002798:	40023c00 	.word	0x40023c00
 800279c:	40023800 	.word	0x40023800
 80027a0:	0800713c 	.word	0x0800713c
 80027a4:	20000100 	.word	0x20000100
 80027a8:	20000104 	.word	0x20000104

080027ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80027b0:	b090      	sub	sp, #64	@ 0x40
 80027b2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80027b4:	2300      	movs	r3, #0
 80027b6:	637b      	str	r3, [r7, #52]	@ 0x34
 80027b8:	2300      	movs	r3, #0
 80027ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80027bc:	2300      	movs	r3, #0
 80027be:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 80027c0:	2300      	movs	r3, #0
 80027c2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80027c4:	4b59      	ldr	r3, [pc, #356]	@ (800292c <HAL_RCC_GetSysClockFreq+0x180>)
 80027c6:	689b      	ldr	r3, [r3, #8]
 80027c8:	f003 030c 	and.w	r3, r3, #12
 80027cc:	2b08      	cmp	r3, #8
 80027ce:	d00d      	beq.n	80027ec <HAL_RCC_GetSysClockFreq+0x40>
 80027d0:	2b08      	cmp	r3, #8
 80027d2:	f200 80a1 	bhi.w	8002918 <HAL_RCC_GetSysClockFreq+0x16c>
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d002      	beq.n	80027e0 <HAL_RCC_GetSysClockFreq+0x34>
 80027da:	2b04      	cmp	r3, #4
 80027dc:	d003      	beq.n	80027e6 <HAL_RCC_GetSysClockFreq+0x3a>
 80027de:	e09b      	b.n	8002918 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80027e0:	4b53      	ldr	r3, [pc, #332]	@ (8002930 <HAL_RCC_GetSysClockFreq+0x184>)
 80027e2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80027e4:	e09b      	b.n	800291e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80027e6:	4b53      	ldr	r3, [pc, #332]	@ (8002934 <HAL_RCC_GetSysClockFreq+0x188>)
 80027e8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80027ea:	e098      	b.n	800291e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80027ec:	4b4f      	ldr	r3, [pc, #316]	@ (800292c <HAL_RCC_GetSysClockFreq+0x180>)
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80027f4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80027f6:	4b4d      	ldr	r3, [pc, #308]	@ (800292c <HAL_RCC_GetSysClockFreq+0x180>)
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d028      	beq.n	8002854 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002802:	4b4a      	ldr	r3, [pc, #296]	@ (800292c <HAL_RCC_GetSysClockFreq+0x180>)
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	099b      	lsrs	r3, r3, #6
 8002808:	2200      	movs	r2, #0
 800280a:	623b      	str	r3, [r7, #32]
 800280c:	627a      	str	r2, [r7, #36]	@ 0x24
 800280e:	6a3b      	ldr	r3, [r7, #32]
 8002810:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002814:	2100      	movs	r1, #0
 8002816:	4b47      	ldr	r3, [pc, #284]	@ (8002934 <HAL_RCC_GetSysClockFreq+0x188>)
 8002818:	fb03 f201 	mul.w	r2, r3, r1
 800281c:	2300      	movs	r3, #0
 800281e:	fb00 f303 	mul.w	r3, r0, r3
 8002822:	4413      	add	r3, r2
 8002824:	4a43      	ldr	r2, [pc, #268]	@ (8002934 <HAL_RCC_GetSysClockFreq+0x188>)
 8002826:	fba0 1202 	umull	r1, r2, r0, r2
 800282a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800282c:	460a      	mov	r2, r1
 800282e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002830:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002832:	4413      	add	r3, r2
 8002834:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002836:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002838:	2200      	movs	r2, #0
 800283a:	61bb      	str	r3, [r7, #24]
 800283c:	61fa      	str	r2, [r7, #28]
 800283e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002842:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002846:	f7fd fd33 	bl	80002b0 <__aeabi_uldivmod>
 800284a:	4602      	mov	r2, r0
 800284c:	460b      	mov	r3, r1
 800284e:	4613      	mov	r3, r2
 8002850:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002852:	e053      	b.n	80028fc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002854:	4b35      	ldr	r3, [pc, #212]	@ (800292c <HAL_RCC_GetSysClockFreq+0x180>)
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	099b      	lsrs	r3, r3, #6
 800285a:	2200      	movs	r2, #0
 800285c:	613b      	str	r3, [r7, #16]
 800285e:	617a      	str	r2, [r7, #20]
 8002860:	693b      	ldr	r3, [r7, #16]
 8002862:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002866:	f04f 0b00 	mov.w	fp, #0
 800286a:	4652      	mov	r2, sl
 800286c:	465b      	mov	r3, fp
 800286e:	f04f 0000 	mov.w	r0, #0
 8002872:	f04f 0100 	mov.w	r1, #0
 8002876:	0159      	lsls	r1, r3, #5
 8002878:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800287c:	0150      	lsls	r0, r2, #5
 800287e:	4602      	mov	r2, r0
 8002880:	460b      	mov	r3, r1
 8002882:	ebb2 080a 	subs.w	r8, r2, sl
 8002886:	eb63 090b 	sbc.w	r9, r3, fp
 800288a:	f04f 0200 	mov.w	r2, #0
 800288e:	f04f 0300 	mov.w	r3, #0
 8002892:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002896:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800289a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800289e:	ebb2 0408 	subs.w	r4, r2, r8
 80028a2:	eb63 0509 	sbc.w	r5, r3, r9
 80028a6:	f04f 0200 	mov.w	r2, #0
 80028aa:	f04f 0300 	mov.w	r3, #0
 80028ae:	00eb      	lsls	r3, r5, #3
 80028b0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80028b4:	00e2      	lsls	r2, r4, #3
 80028b6:	4614      	mov	r4, r2
 80028b8:	461d      	mov	r5, r3
 80028ba:	eb14 030a 	adds.w	r3, r4, sl
 80028be:	603b      	str	r3, [r7, #0]
 80028c0:	eb45 030b 	adc.w	r3, r5, fp
 80028c4:	607b      	str	r3, [r7, #4]
 80028c6:	f04f 0200 	mov.w	r2, #0
 80028ca:	f04f 0300 	mov.w	r3, #0
 80028ce:	e9d7 4500 	ldrd	r4, r5, [r7]
 80028d2:	4629      	mov	r1, r5
 80028d4:	028b      	lsls	r3, r1, #10
 80028d6:	4621      	mov	r1, r4
 80028d8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80028dc:	4621      	mov	r1, r4
 80028de:	028a      	lsls	r2, r1, #10
 80028e0:	4610      	mov	r0, r2
 80028e2:	4619      	mov	r1, r3
 80028e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80028e6:	2200      	movs	r2, #0
 80028e8:	60bb      	str	r3, [r7, #8]
 80028ea:	60fa      	str	r2, [r7, #12]
 80028ec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80028f0:	f7fd fcde 	bl	80002b0 <__aeabi_uldivmod>
 80028f4:	4602      	mov	r2, r0
 80028f6:	460b      	mov	r3, r1
 80028f8:	4613      	mov	r3, r2
 80028fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80028fc:	4b0b      	ldr	r3, [pc, #44]	@ (800292c <HAL_RCC_GetSysClockFreq+0x180>)
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	0c1b      	lsrs	r3, r3, #16
 8002902:	f003 0303 	and.w	r3, r3, #3
 8002906:	3301      	adds	r3, #1
 8002908:	005b      	lsls	r3, r3, #1
 800290a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800290c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800290e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002910:	fbb2 f3f3 	udiv	r3, r2, r3
 8002914:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002916:	e002      	b.n	800291e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002918:	4b05      	ldr	r3, [pc, #20]	@ (8002930 <HAL_RCC_GetSysClockFreq+0x184>)
 800291a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800291c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800291e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002920:	4618      	mov	r0, r3
 8002922:	3740      	adds	r7, #64	@ 0x40
 8002924:	46bd      	mov	sp, r7
 8002926:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800292a:	bf00      	nop
 800292c:	40023800 	.word	0x40023800
 8002930:	00f42400 	.word	0x00f42400
 8002934:	017d7840 	.word	0x017d7840

08002938 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002938:	b480      	push	{r7}
 800293a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800293c:	4b03      	ldr	r3, [pc, #12]	@ (800294c <HAL_RCC_GetHCLKFreq+0x14>)
 800293e:	681b      	ldr	r3, [r3, #0]
}
 8002940:	4618      	mov	r0, r3
 8002942:	46bd      	mov	sp, r7
 8002944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002948:	4770      	bx	lr
 800294a:	bf00      	nop
 800294c:	20000100 	.word	0x20000100

08002950 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002954:	f7ff fff0 	bl	8002938 <HAL_RCC_GetHCLKFreq>
 8002958:	4602      	mov	r2, r0
 800295a:	4b05      	ldr	r3, [pc, #20]	@ (8002970 <HAL_RCC_GetPCLK1Freq+0x20>)
 800295c:	689b      	ldr	r3, [r3, #8]
 800295e:	0a9b      	lsrs	r3, r3, #10
 8002960:	f003 0307 	and.w	r3, r3, #7
 8002964:	4903      	ldr	r1, [pc, #12]	@ (8002974 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002966:	5ccb      	ldrb	r3, [r1, r3]
 8002968:	fa22 f303 	lsr.w	r3, r2, r3
}
 800296c:	4618      	mov	r0, r3
 800296e:	bd80      	pop	{r7, pc}
 8002970:	40023800 	.word	0x40023800
 8002974:	0800714c 	.word	0x0800714c

08002978 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800297c:	f7ff ffdc 	bl	8002938 <HAL_RCC_GetHCLKFreq>
 8002980:	4602      	mov	r2, r0
 8002982:	4b05      	ldr	r3, [pc, #20]	@ (8002998 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002984:	689b      	ldr	r3, [r3, #8]
 8002986:	0b5b      	lsrs	r3, r3, #13
 8002988:	f003 0307 	and.w	r3, r3, #7
 800298c:	4903      	ldr	r1, [pc, #12]	@ (800299c <HAL_RCC_GetPCLK2Freq+0x24>)
 800298e:	5ccb      	ldrb	r3, [r1, r3]
 8002990:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002994:	4618      	mov	r0, r3
 8002996:	bd80      	pop	{r7, pc}
 8002998:	40023800 	.word	0x40023800
 800299c:	0800714c 	.word	0x0800714c

080029a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b088      	sub	sp, #32
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80029a8:	2300      	movs	r3, #0
 80029aa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80029ac:	2300      	movs	r3, #0
 80029ae:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80029b0:	2300      	movs	r3, #0
 80029b2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80029b4:	2300      	movs	r3, #0
 80029b6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80029b8:	2300      	movs	r3, #0
 80029ba:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f003 0301 	and.w	r3, r3, #1
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d012      	beq.n	80029ee <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80029c8:	4b69      	ldr	r3, [pc, #420]	@ (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	4a68      	ldr	r2, [pc, #416]	@ (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029ce:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80029d2:	6093      	str	r3, [r2, #8]
 80029d4:	4b66      	ldr	r3, [pc, #408]	@ (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029d6:	689a      	ldr	r2, [r3, #8]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029dc:	4964      	ldr	r1, [pc, #400]	@ (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029de:	4313      	orrs	r3, r2
 80029e0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d101      	bne.n	80029ee <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80029ea:	2301      	movs	r3, #1
 80029ec:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d017      	beq.n	8002a2a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80029fa:	4b5d      	ldr	r3, [pc, #372]	@ (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002a00:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a08:	4959      	ldr	r1, [pc, #356]	@ (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a14:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002a18:	d101      	bne.n	8002a1e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d101      	bne.n	8002a2a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002a26:	2301      	movs	r3, #1
 8002a28:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d017      	beq.n	8002a66 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002a36:	4b4e      	ldr	r3, [pc, #312]	@ (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a38:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002a3c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a44:	494a      	ldr	r1, [pc, #296]	@ (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a46:	4313      	orrs	r3, r2
 8002a48:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a50:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002a54:	d101      	bne.n	8002a5a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002a56:	2301      	movs	r3, #1
 8002a58:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d101      	bne.n	8002a66 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002a62:	2301      	movs	r3, #1
 8002a64:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d001      	beq.n	8002a76 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002a72:	2301      	movs	r3, #1
 8002a74:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f003 0320 	and.w	r3, r3, #32
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	f000 808b 	beq.w	8002b9a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002a84:	4b3a      	ldr	r3, [pc, #232]	@ (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a88:	4a39      	ldr	r2, [pc, #228]	@ (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a8a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a8e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a90:	4b37      	ldr	r3, [pc, #220]	@ (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a94:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a98:	60bb      	str	r3, [r7, #8]
 8002a9a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002a9c:	4b35      	ldr	r3, [pc, #212]	@ (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a34      	ldr	r2, [pc, #208]	@ (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002aa2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002aa6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002aa8:	f7fe ff82 	bl	80019b0 <HAL_GetTick>
 8002aac:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002aae:	e008      	b.n	8002ac2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ab0:	f7fe ff7e 	bl	80019b0 <HAL_GetTick>
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	1ad3      	subs	r3, r2, r3
 8002aba:	2b64      	cmp	r3, #100	@ 0x64
 8002abc:	d901      	bls.n	8002ac2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002abe:	2303      	movs	r3, #3
 8002ac0:	e357      	b.n	8003172 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002ac2:	4b2c      	ldr	r3, [pc, #176]	@ (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d0f0      	beq.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002ace:	4b28      	ldr	r3, [pc, #160]	@ (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ad0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ad2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002ad6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002ad8:	693b      	ldr	r3, [r7, #16]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d035      	beq.n	8002b4a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ae2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002ae6:	693a      	ldr	r2, [r7, #16]
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	d02e      	beq.n	8002b4a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002aec:	4b20      	ldr	r3, [pc, #128]	@ (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002aee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002af0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002af4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002af6:	4b1e      	ldr	r3, [pc, #120]	@ (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002af8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002afa:	4a1d      	ldr	r2, [pc, #116]	@ (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002afc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b00:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002b02:	4b1b      	ldr	r3, [pc, #108]	@ (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b06:	4a1a      	ldr	r2, [pc, #104]	@ (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b08:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b0c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002b0e:	4a18      	ldr	r2, [pc, #96]	@ (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b10:	693b      	ldr	r3, [r7, #16]
 8002b12:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002b14:	4b16      	ldr	r3, [pc, #88]	@ (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b18:	f003 0301 	and.w	r3, r3, #1
 8002b1c:	2b01      	cmp	r3, #1
 8002b1e:	d114      	bne.n	8002b4a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b20:	f7fe ff46 	bl	80019b0 <HAL_GetTick>
 8002b24:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b26:	e00a      	b.n	8002b3e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b28:	f7fe ff42 	bl	80019b0 <HAL_GetTick>
 8002b2c:	4602      	mov	r2, r0
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	1ad3      	subs	r3, r2, r3
 8002b32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d901      	bls.n	8002b3e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002b3a:	2303      	movs	r3, #3
 8002b3c:	e319      	b.n	8003172 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b3e:	4b0c      	ldr	r3, [pc, #48]	@ (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b42:	f003 0302 	and.w	r3, r3, #2
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d0ee      	beq.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b4e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002b52:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002b56:	d111      	bne.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002b58:	4b05      	ldr	r3, [pc, #20]	@ (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002b64:	4b04      	ldr	r3, [pc, #16]	@ (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002b66:	400b      	ands	r3, r1
 8002b68:	4901      	ldr	r1, [pc, #4]	@ (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	608b      	str	r3, [r1, #8]
 8002b6e:	e00b      	b.n	8002b88 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002b70:	40023800 	.word	0x40023800
 8002b74:	40007000 	.word	0x40007000
 8002b78:	0ffffcff 	.word	0x0ffffcff
 8002b7c:	4baa      	ldr	r3, [pc, #680]	@ (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	4aa9      	ldr	r2, [pc, #676]	@ (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b82:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8002b86:	6093      	str	r3, [r2, #8]
 8002b88:	4ba7      	ldr	r3, [pc, #668]	@ (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b8a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b94:	49a4      	ldr	r1, [pc, #656]	@ (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b96:	4313      	orrs	r3, r2
 8002b98:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f003 0310 	and.w	r3, r3, #16
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d010      	beq.n	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002ba6:	4ba0      	ldr	r3, [pc, #640]	@ (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ba8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002bac:	4a9e      	ldr	r2, [pc, #632]	@ (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002bae:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002bb2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002bb6:	4b9c      	ldr	r3, [pc, #624]	@ (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002bb8:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bc0:	4999      	ldr	r1, [pc, #612]	@ (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d00a      	beq.n	8002bea <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002bd4:	4b94      	ldr	r3, [pc, #592]	@ (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002bd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bda:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002be2:	4991      	ldr	r1, [pc, #580]	@ (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002be4:	4313      	orrs	r3, r2
 8002be6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d00a      	beq.n	8002c0c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002bf6:	4b8c      	ldr	r3, [pc, #560]	@ (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002bf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bfc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002c04:	4988      	ldr	r1, [pc, #544]	@ (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c06:	4313      	orrs	r3, r2
 8002c08:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d00a      	beq.n	8002c2e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002c18:	4b83      	ldr	r3, [pc, #524]	@ (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c1e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002c26:	4980      	ldr	r1, [pc, #512]	@ (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d00a      	beq.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002c3a:	4b7b      	ldr	r3, [pc, #492]	@ (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c40:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c48:	4977      	ldr	r1, [pc, #476]	@ (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d00a      	beq.n	8002c72 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002c5c:	4b72      	ldr	r3, [pc, #456]	@ (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c62:	f023 0203 	bic.w	r2, r3, #3
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c6a:	496f      	ldr	r1, [pc, #444]	@ (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d00a      	beq.n	8002c94 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002c7e:	4b6a      	ldr	r3, [pc, #424]	@ (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c84:	f023 020c 	bic.w	r2, r3, #12
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c8c:	4966      	ldr	r1, [pc, #408]	@ (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d00a      	beq.n	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002ca0:	4b61      	ldr	r3, [pc, #388]	@ (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ca2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ca6:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002cae:	495e      	ldr	r1, [pc, #376]	@ (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d00a      	beq.n	8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002cc2:	4b59      	ldr	r3, [pc, #356]	@ (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002cc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cc8:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002cd0:	4955      	ldr	r1, [pc, #340]	@ (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d00a      	beq.n	8002cfa <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002ce4:	4b50      	ldr	r3, [pc, #320]	@ (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ce6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cea:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cf2:	494d      	ldr	r1, [pc, #308]	@ (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d00a      	beq.n	8002d1c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002d06:	4b48      	ldr	r3, [pc, #288]	@ (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d08:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d0c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d14:	4944      	ldr	r1, [pc, #272]	@ (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d16:	4313      	orrs	r3, r2
 8002d18:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d00a      	beq.n	8002d3e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002d28:	4b3f      	ldr	r3, [pc, #252]	@ (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d2e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d36:	493c      	ldr	r1, [pc, #240]	@ (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d00a      	beq.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002d4a:	4b37      	ldr	r3, [pc, #220]	@ (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d50:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d58:	4933      	ldr	r1, [pc, #204]	@ (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d00a      	beq.n	8002d82 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002d6c:	4b2e      	ldr	r3, [pc, #184]	@ (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d72:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002d7a:	492b      	ldr	r1, [pc, #172]	@ (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d011      	beq.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002d8e:	4b26      	ldr	r3, [pc, #152]	@ (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d94:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002d9c:	4922      	ldr	r1, [pc, #136]	@ (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002da8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002dac:	d101      	bne.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002dae:	2301      	movs	r3, #1
 8002db0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f003 0308 	and.w	r3, r3, #8
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d001      	beq.n	8002dc2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d00a      	beq.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002dce:	4b16      	ldr	r3, [pc, #88]	@ (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002dd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002dd4:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ddc:	4912      	ldr	r1, [pc, #72]	@ (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002dde:	4313      	orrs	r3, r2
 8002de0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d00b      	beq.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002df0:	4b0d      	ldr	r3, [pc, #52]	@ (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002df2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002df6:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002e00:	4909      	ldr	r1, [pc, #36]	@ (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e02:	4313      	orrs	r3, r2
 8002e04:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002e08:	69fb      	ldr	r3, [r7, #28]
 8002e0a:	2b01      	cmp	r3, #1
 8002e0c:	d006      	beq.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	f000 80d9 	beq.w	8002fce <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002e1c:	4b02      	ldr	r3, [pc, #8]	@ (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a01      	ldr	r2, [pc, #4]	@ (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e22:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002e26:	e001      	b.n	8002e2c <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8002e28:	40023800 	.word	0x40023800
 8002e2c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e2e:	f7fe fdbf 	bl	80019b0 <HAL_GetTick>
 8002e32:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002e34:	e008      	b.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002e36:	f7fe fdbb 	bl	80019b0 <HAL_GetTick>
 8002e3a:	4602      	mov	r2, r0
 8002e3c:	697b      	ldr	r3, [r7, #20]
 8002e3e:	1ad3      	subs	r3, r2, r3
 8002e40:	2b64      	cmp	r3, #100	@ 0x64
 8002e42:	d901      	bls.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002e44:	2303      	movs	r3, #3
 8002e46:	e194      	b.n	8003172 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002e48:	4b6c      	ldr	r3, [pc, #432]	@ (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d1f0      	bne.n	8002e36 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f003 0301 	and.w	r3, r3, #1
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d021      	beq.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d11d      	bne.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002e68:	4b64      	ldr	r3, [pc, #400]	@ (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002e6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002e6e:	0c1b      	lsrs	r3, r3, #16
 8002e70:	f003 0303 	and.w	r3, r3, #3
 8002e74:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002e76:	4b61      	ldr	r3, [pc, #388]	@ (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002e78:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002e7c:	0e1b      	lsrs	r3, r3, #24
 8002e7e:	f003 030f 	and.w	r3, r3, #15
 8002e82:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	019a      	lsls	r2, r3, #6
 8002e8a:	693b      	ldr	r3, [r7, #16]
 8002e8c:	041b      	lsls	r3, r3, #16
 8002e8e:	431a      	orrs	r2, r3
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	061b      	lsls	r3, r3, #24
 8002e94:	431a      	orrs	r2, r3
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	689b      	ldr	r3, [r3, #8]
 8002e9a:	071b      	lsls	r3, r3, #28
 8002e9c:	4957      	ldr	r1, [pc, #348]	@ (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d004      	beq.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002eb4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002eb8:	d00a      	beq.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d02e      	beq.n	8002f24 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002ece:	d129      	bne.n	8002f24 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002ed0:	4b4a      	ldr	r3, [pc, #296]	@ (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ed2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002ed6:	0c1b      	lsrs	r3, r3, #16
 8002ed8:	f003 0303 	and.w	r3, r3, #3
 8002edc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002ede:	4b47      	ldr	r3, [pc, #284]	@ (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ee0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002ee4:	0f1b      	lsrs	r3, r3, #28
 8002ee6:	f003 0307 	and.w	r3, r3, #7
 8002eea:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	019a      	lsls	r2, r3, #6
 8002ef2:	693b      	ldr	r3, [r7, #16]
 8002ef4:	041b      	lsls	r3, r3, #16
 8002ef6:	431a      	orrs	r2, r3
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	68db      	ldr	r3, [r3, #12]
 8002efc:	061b      	lsls	r3, r3, #24
 8002efe:	431a      	orrs	r2, r3
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	071b      	lsls	r3, r3, #28
 8002f04:	493d      	ldr	r1, [pc, #244]	@ (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f06:	4313      	orrs	r3, r2
 8002f08:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002f0c:	4b3b      	ldr	r3, [pc, #236]	@ (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002f12:	f023 021f 	bic.w	r2, r3, #31
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f1a:	3b01      	subs	r3, #1
 8002f1c:	4937      	ldr	r1, [pc, #220]	@ (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d01d      	beq.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002f30:	4b32      	ldr	r3, [pc, #200]	@ (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f32:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002f36:	0e1b      	lsrs	r3, r3, #24
 8002f38:	f003 030f 	and.w	r3, r3, #15
 8002f3c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002f3e:	4b2f      	ldr	r3, [pc, #188]	@ (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f40:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002f44:	0f1b      	lsrs	r3, r3, #28
 8002f46:	f003 0307 	and.w	r3, r3, #7
 8002f4a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	019a      	lsls	r2, r3, #6
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	691b      	ldr	r3, [r3, #16]
 8002f56:	041b      	lsls	r3, r3, #16
 8002f58:	431a      	orrs	r2, r3
 8002f5a:	693b      	ldr	r3, [r7, #16]
 8002f5c:	061b      	lsls	r3, r3, #24
 8002f5e:	431a      	orrs	r2, r3
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	071b      	lsls	r3, r3, #28
 8002f64:	4925      	ldr	r1, [pc, #148]	@ (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f66:	4313      	orrs	r3, r2
 8002f68:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d011      	beq.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	019a      	lsls	r2, r3, #6
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	691b      	ldr	r3, [r3, #16]
 8002f82:	041b      	lsls	r3, r3, #16
 8002f84:	431a      	orrs	r2, r3
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	68db      	ldr	r3, [r3, #12]
 8002f8a:	061b      	lsls	r3, r3, #24
 8002f8c:	431a      	orrs	r2, r3
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	689b      	ldr	r3, [r3, #8]
 8002f92:	071b      	lsls	r3, r3, #28
 8002f94:	4919      	ldr	r1, [pc, #100]	@ (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f96:	4313      	orrs	r3, r2
 8002f98:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002f9c:	4b17      	ldr	r3, [pc, #92]	@ (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a16      	ldr	r2, [pc, #88]	@ (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002fa2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002fa6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002fa8:	f7fe fd02 	bl	80019b0 <HAL_GetTick>
 8002fac:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002fae:	e008      	b.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002fb0:	f7fe fcfe 	bl	80019b0 <HAL_GetTick>
 8002fb4:	4602      	mov	r2, r0
 8002fb6:	697b      	ldr	r3, [r7, #20]
 8002fb8:	1ad3      	subs	r3, r2, r3
 8002fba:	2b64      	cmp	r3, #100	@ 0x64
 8002fbc:	d901      	bls.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002fbe:	2303      	movs	r3, #3
 8002fc0:	e0d7      	b.n	8003172 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002fc2:	4b0e      	ldr	r3, [pc, #56]	@ (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d0f0      	beq.n	8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002fce:	69bb      	ldr	r3, [r7, #24]
 8002fd0:	2b01      	cmp	r3, #1
 8002fd2:	f040 80cd 	bne.w	8003170 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002fd6:	4b09      	ldr	r3, [pc, #36]	@ (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a08      	ldr	r2, [pc, #32]	@ (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002fdc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002fe0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002fe2:	f7fe fce5 	bl	80019b0 <HAL_GetTick>
 8002fe6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002fe8:	e00a      	b.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002fea:	f7fe fce1 	bl	80019b0 <HAL_GetTick>
 8002fee:	4602      	mov	r2, r0
 8002ff0:	697b      	ldr	r3, [r7, #20]
 8002ff2:	1ad3      	subs	r3, r2, r3
 8002ff4:	2b64      	cmp	r3, #100	@ 0x64
 8002ff6:	d903      	bls.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002ff8:	2303      	movs	r3, #3
 8002ffa:	e0ba      	b.n	8003172 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8002ffc:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003000:	4b5e      	ldr	r3, [pc, #376]	@ (800317c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003008:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800300c:	d0ed      	beq.n	8002fea <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003016:	2b00      	cmp	r3, #0
 8003018:	d003      	beq.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800301e:	2b00      	cmp	r3, #0
 8003020:	d009      	beq.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800302a:	2b00      	cmp	r3, #0
 800302c:	d02e      	beq.n	800308c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003032:	2b00      	cmp	r3, #0
 8003034:	d12a      	bne.n	800308c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003036:	4b51      	ldr	r3, [pc, #324]	@ (800317c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003038:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800303c:	0c1b      	lsrs	r3, r3, #16
 800303e:	f003 0303 	and.w	r3, r3, #3
 8003042:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003044:	4b4d      	ldr	r3, [pc, #308]	@ (800317c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003046:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800304a:	0f1b      	lsrs	r3, r3, #28
 800304c:	f003 0307 	and.w	r3, r3, #7
 8003050:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	695b      	ldr	r3, [r3, #20]
 8003056:	019a      	lsls	r2, r3, #6
 8003058:	693b      	ldr	r3, [r7, #16]
 800305a:	041b      	lsls	r3, r3, #16
 800305c:	431a      	orrs	r2, r3
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	699b      	ldr	r3, [r3, #24]
 8003062:	061b      	lsls	r3, r3, #24
 8003064:	431a      	orrs	r2, r3
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	071b      	lsls	r3, r3, #28
 800306a:	4944      	ldr	r1, [pc, #272]	@ (800317c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800306c:	4313      	orrs	r3, r2
 800306e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003072:	4b42      	ldr	r3, [pc, #264]	@ (800317c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003074:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003078:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003080:	3b01      	subs	r3, #1
 8003082:	021b      	lsls	r3, r3, #8
 8003084:	493d      	ldr	r1, [pc, #244]	@ (800317c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003086:	4313      	orrs	r3, r2
 8003088:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003094:	2b00      	cmp	r3, #0
 8003096:	d022      	beq.n	80030de <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800309c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80030a0:	d11d      	bne.n	80030de <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80030a2:	4b36      	ldr	r3, [pc, #216]	@ (800317c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80030a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030a8:	0e1b      	lsrs	r3, r3, #24
 80030aa:	f003 030f 	and.w	r3, r3, #15
 80030ae:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80030b0:	4b32      	ldr	r3, [pc, #200]	@ (800317c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80030b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030b6:	0f1b      	lsrs	r3, r3, #28
 80030b8:	f003 0307 	and.w	r3, r3, #7
 80030bc:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	695b      	ldr	r3, [r3, #20]
 80030c2:	019a      	lsls	r2, r3, #6
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6a1b      	ldr	r3, [r3, #32]
 80030c8:	041b      	lsls	r3, r3, #16
 80030ca:	431a      	orrs	r2, r3
 80030cc:	693b      	ldr	r3, [r7, #16]
 80030ce:	061b      	lsls	r3, r3, #24
 80030d0:	431a      	orrs	r2, r3
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	071b      	lsls	r3, r3, #28
 80030d6:	4929      	ldr	r1, [pc, #164]	@ (800317c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80030d8:	4313      	orrs	r3, r2
 80030da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f003 0308 	and.w	r3, r3, #8
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d028      	beq.n	800313c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80030ea:	4b24      	ldr	r3, [pc, #144]	@ (800317c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80030ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030f0:	0e1b      	lsrs	r3, r3, #24
 80030f2:	f003 030f 	and.w	r3, r3, #15
 80030f6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80030f8:	4b20      	ldr	r3, [pc, #128]	@ (800317c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80030fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030fe:	0c1b      	lsrs	r3, r3, #16
 8003100:	f003 0303 	and.w	r3, r3, #3
 8003104:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	695b      	ldr	r3, [r3, #20]
 800310a:	019a      	lsls	r2, r3, #6
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	041b      	lsls	r3, r3, #16
 8003110:	431a      	orrs	r2, r3
 8003112:	693b      	ldr	r3, [r7, #16]
 8003114:	061b      	lsls	r3, r3, #24
 8003116:	431a      	orrs	r2, r3
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	69db      	ldr	r3, [r3, #28]
 800311c:	071b      	lsls	r3, r3, #28
 800311e:	4917      	ldr	r1, [pc, #92]	@ (800317c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003120:	4313      	orrs	r3, r2
 8003122:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003126:	4b15      	ldr	r3, [pc, #84]	@ (800317c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003128:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800312c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003134:	4911      	ldr	r1, [pc, #68]	@ (800317c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003136:	4313      	orrs	r3, r2
 8003138:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800313c:	4b0f      	ldr	r3, [pc, #60]	@ (800317c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a0e      	ldr	r2, [pc, #56]	@ (800317c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003142:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003146:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003148:	f7fe fc32 	bl	80019b0 <HAL_GetTick>
 800314c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800314e:	e008      	b.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003150:	f7fe fc2e 	bl	80019b0 <HAL_GetTick>
 8003154:	4602      	mov	r2, r0
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	1ad3      	subs	r3, r2, r3
 800315a:	2b64      	cmp	r3, #100	@ 0x64
 800315c:	d901      	bls.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800315e:	2303      	movs	r3, #3
 8003160:	e007      	b.n	8003172 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003162:	4b06      	ldr	r3, [pc, #24]	@ (800317c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800316a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800316e:	d1ef      	bne.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8003170:	2300      	movs	r3, #0
}
 8003172:	4618      	mov	r0, r3
 8003174:	3720      	adds	r7, #32
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}
 800317a:	bf00      	nop
 800317c:	40023800 	.word	0x40023800

08003180 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b082      	sub	sp, #8
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d101      	bne.n	8003192 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800318e:	2301      	movs	r3, #1
 8003190:	e040      	b.n	8003214 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003196:	2b00      	cmp	r3, #0
 8003198:	d106      	bne.n	80031a8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2200      	movs	r2, #0
 800319e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80031a2:	6878      	ldr	r0, [r7, #4]
 80031a4:	f7fe fb08 	bl	80017b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2224      	movs	r2, #36	@ 0x24
 80031ac:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	681a      	ldr	r2, [r3, #0]
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f022 0201 	bic.w	r2, r2, #1
 80031bc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d002      	beq.n	80031cc <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80031c6:	6878      	ldr	r0, [r7, #4]
 80031c8:	f000 fbde 	bl	8003988 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80031cc:	6878      	ldr	r0, [r7, #4]
 80031ce:	f000 f977 	bl	80034c0 <UART_SetConfig>
 80031d2:	4603      	mov	r3, r0
 80031d4:	2b01      	cmp	r3, #1
 80031d6:	d101      	bne.n	80031dc <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80031d8:	2301      	movs	r3, #1
 80031da:	e01b      	b.n	8003214 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	685a      	ldr	r2, [r3, #4]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80031ea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	689a      	ldr	r2, [r3, #8]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80031fa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	681a      	ldr	r2, [r3, #0]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f042 0201 	orr.w	r2, r2, #1
 800320a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800320c:	6878      	ldr	r0, [r7, #4]
 800320e:	f000 fc5d 	bl	8003acc <UART_CheckIdleState>
 8003212:	4603      	mov	r3, r0
}
 8003214:	4618      	mov	r0, r3
 8003216:	3708      	adds	r7, #8
 8003218:	46bd      	mov	sp, r7
 800321a:	bd80      	pop	{r7, pc}

0800321c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b08a      	sub	sp, #40	@ 0x28
 8003220:	af02      	add	r7, sp, #8
 8003222:	60f8      	str	r0, [r7, #12]
 8003224:	60b9      	str	r1, [r7, #8]
 8003226:	603b      	str	r3, [r7, #0]
 8003228:	4613      	mov	r3, r2
 800322a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003230:	2b20      	cmp	r3, #32
 8003232:	d177      	bne.n	8003324 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d002      	beq.n	8003240 <HAL_UART_Transmit+0x24>
 800323a:	88fb      	ldrh	r3, [r7, #6]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d101      	bne.n	8003244 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003240:	2301      	movs	r3, #1
 8003242:	e070      	b.n	8003326 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	2200      	movs	r2, #0
 8003248:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	2221      	movs	r2, #33	@ 0x21
 8003250:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003252:	f7fe fbad 	bl	80019b0 <HAL_GetTick>
 8003256:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	88fa      	ldrh	r2, [r7, #6]
 800325c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	88fa      	ldrh	r2, [r7, #6]
 8003264:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003270:	d108      	bne.n	8003284 <HAL_UART_Transmit+0x68>
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	691b      	ldr	r3, [r3, #16]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d104      	bne.n	8003284 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800327a:	2300      	movs	r3, #0
 800327c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800327e:	68bb      	ldr	r3, [r7, #8]
 8003280:	61bb      	str	r3, [r7, #24]
 8003282:	e003      	b.n	800328c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003288:	2300      	movs	r3, #0
 800328a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800328c:	e02f      	b.n	80032ee <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	9300      	str	r3, [sp, #0]
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	2200      	movs	r2, #0
 8003296:	2180      	movs	r1, #128	@ 0x80
 8003298:	68f8      	ldr	r0, [r7, #12]
 800329a:	f000 fc6e 	bl	8003b7a <UART_WaitOnFlagUntilTimeout>
 800329e:	4603      	mov	r3, r0
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d004      	beq.n	80032ae <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	2220      	movs	r2, #32
 80032a8:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80032aa:	2303      	movs	r3, #3
 80032ac:	e03b      	b.n	8003326 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80032ae:	69fb      	ldr	r3, [r7, #28]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d10b      	bne.n	80032cc <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80032b4:	69bb      	ldr	r3, [r7, #24]
 80032b6:	881b      	ldrh	r3, [r3, #0]
 80032b8:	461a      	mov	r2, r3
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80032c2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80032c4:	69bb      	ldr	r3, [r7, #24]
 80032c6:	3302      	adds	r3, #2
 80032c8:	61bb      	str	r3, [r7, #24]
 80032ca:	e007      	b.n	80032dc <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80032cc:	69fb      	ldr	r3, [r7, #28]
 80032ce:	781a      	ldrb	r2, [r3, #0]
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80032d6:	69fb      	ldr	r3, [r7, #28]
 80032d8:	3301      	adds	r3, #1
 80032da:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80032e2:	b29b      	uxth	r3, r3
 80032e4:	3b01      	subs	r3, #1
 80032e6:	b29a      	uxth	r2, r3
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80032f4:	b29b      	uxth	r3, r3
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d1c9      	bne.n	800328e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	9300      	str	r3, [sp, #0]
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	2200      	movs	r2, #0
 8003302:	2140      	movs	r1, #64	@ 0x40
 8003304:	68f8      	ldr	r0, [r7, #12]
 8003306:	f000 fc38 	bl	8003b7a <UART_WaitOnFlagUntilTimeout>
 800330a:	4603      	mov	r3, r0
 800330c:	2b00      	cmp	r3, #0
 800330e:	d004      	beq.n	800331a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	2220      	movs	r2, #32
 8003314:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8003316:	2303      	movs	r3, #3
 8003318:	e005      	b.n	8003326 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	2220      	movs	r2, #32
 800331e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003320:	2300      	movs	r3, #0
 8003322:	e000      	b.n	8003326 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003324:	2302      	movs	r3, #2
  }
}
 8003326:	4618      	mov	r0, r3
 8003328:	3720      	adds	r7, #32
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}

0800332e <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800332e:	b580      	push	{r7, lr}
 8003330:	b08a      	sub	sp, #40	@ 0x28
 8003332:	af02      	add	r7, sp, #8
 8003334:	60f8      	str	r0, [r7, #12]
 8003336:	60b9      	str	r1, [r7, #8]
 8003338:	603b      	str	r3, [r7, #0]
 800333a:	4613      	mov	r3, r2
 800333c:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003344:	2b20      	cmp	r3, #32
 8003346:	f040 80b5 	bne.w	80034b4 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d002      	beq.n	8003356 <HAL_UART_Receive+0x28>
 8003350:	88fb      	ldrh	r3, [r7, #6]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d101      	bne.n	800335a <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	e0ad      	b.n	80034b6 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	2200      	movs	r2, #0
 800335e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	2222      	movs	r2, #34	@ 0x22
 8003366:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	2200      	movs	r2, #0
 800336e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003370:	f7fe fb1e 	bl	80019b0 <HAL_GetTick>
 8003374:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	88fa      	ldrh	r2, [r7, #6]
 800337a:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	88fa      	ldrh	r2, [r7, #6]
 8003382:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800338e:	d10e      	bne.n	80033ae <HAL_UART_Receive+0x80>
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	691b      	ldr	r3, [r3, #16]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d105      	bne.n	80033a4 <HAL_UART_Receive+0x76>
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800339e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80033a2:	e02d      	b.n	8003400 <HAL_UART_Receive+0xd2>
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	22ff      	movs	r2, #255	@ 0xff
 80033a8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80033ac:	e028      	b.n	8003400 <HAL_UART_Receive+0xd2>
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	689b      	ldr	r3, [r3, #8]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d10d      	bne.n	80033d2 <HAL_UART_Receive+0xa4>
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	691b      	ldr	r3, [r3, #16]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d104      	bne.n	80033c8 <HAL_UART_Receive+0x9a>
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	22ff      	movs	r2, #255	@ 0xff
 80033c2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80033c6:	e01b      	b.n	8003400 <HAL_UART_Receive+0xd2>
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	227f      	movs	r2, #127	@ 0x7f
 80033cc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80033d0:	e016      	b.n	8003400 <HAL_UART_Receive+0xd2>
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	689b      	ldr	r3, [r3, #8]
 80033d6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80033da:	d10d      	bne.n	80033f8 <HAL_UART_Receive+0xca>
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	691b      	ldr	r3, [r3, #16]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d104      	bne.n	80033ee <HAL_UART_Receive+0xc0>
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	227f      	movs	r2, #127	@ 0x7f
 80033e8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80033ec:	e008      	b.n	8003400 <HAL_UART_Receive+0xd2>
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	223f      	movs	r2, #63	@ 0x3f
 80033f2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80033f6:	e003      	b.n	8003400 <HAL_UART_Receive+0xd2>
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	2200      	movs	r2, #0
 80033fc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8003406:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	689b      	ldr	r3, [r3, #8]
 800340c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003410:	d108      	bne.n	8003424 <HAL_UART_Receive+0xf6>
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	691b      	ldr	r3, [r3, #16]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d104      	bne.n	8003424 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800341a:	2300      	movs	r3, #0
 800341c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	61bb      	str	r3, [r7, #24]
 8003422:	e003      	b.n	800342c <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003428:	2300      	movs	r3, #0
 800342a:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800342c:	e036      	b.n	800349c <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	9300      	str	r3, [sp, #0]
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	2200      	movs	r2, #0
 8003436:	2120      	movs	r1, #32
 8003438:	68f8      	ldr	r0, [r7, #12]
 800343a:	f000 fb9e 	bl	8003b7a <UART_WaitOnFlagUntilTimeout>
 800343e:	4603      	mov	r3, r0
 8003440:	2b00      	cmp	r3, #0
 8003442:	d005      	beq.n	8003450 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	2220      	movs	r2, #32
 8003448:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 800344c:	2303      	movs	r3, #3
 800344e:	e032      	b.n	80034b6 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8003450:	69fb      	ldr	r3, [r7, #28]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d10c      	bne.n	8003470 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800345c:	b29a      	uxth	r2, r3
 800345e:	8a7b      	ldrh	r3, [r7, #18]
 8003460:	4013      	ands	r3, r2
 8003462:	b29a      	uxth	r2, r3
 8003464:	69bb      	ldr	r3, [r7, #24]
 8003466:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003468:	69bb      	ldr	r3, [r7, #24]
 800346a:	3302      	adds	r3, #2
 800346c:	61bb      	str	r3, [r7, #24]
 800346e:	e00c      	b.n	800348a <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003476:	b2da      	uxtb	r2, r3
 8003478:	8a7b      	ldrh	r3, [r7, #18]
 800347a:	b2db      	uxtb	r3, r3
 800347c:	4013      	ands	r3, r2
 800347e:	b2da      	uxtb	r2, r3
 8003480:	69fb      	ldr	r3, [r7, #28]
 8003482:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8003484:	69fb      	ldr	r3, [r7, #28]
 8003486:	3301      	adds	r3, #1
 8003488:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003490:	b29b      	uxth	r3, r3
 8003492:	3b01      	subs	r3, #1
 8003494:	b29a      	uxth	r2, r3
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80034a2:	b29b      	uxth	r3, r3
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d1c2      	bne.n	800342e <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	2220      	movs	r2, #32
 80034ac:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 80034b0:	2300      	movs	r3, #0
 80034b2:	e000      	b.n	80034b6 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 80034b4:	2302      	movs	r3, #2
  }
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	3720      	adds	r7, #32
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}
	...

080034c0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b088      	sub	sp, #32
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80034c8:	2300      	movs	r3, #0
 80034ca:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	689a      	ldr	r2, [r3, #8]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	691b      	ldr	r3, [r3, #16]
 80034d4:	431a      	orrs	r2, r3
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	695b      	ldr	r3, [r3, #20]
 80034da:	431a      	orrs	r2, r3
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	69db      	ldr	r3, [r3, #28]
 80034e0:	4313      	orrs	r3, r2
 80034e2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	4ba6      	ldr	r3, [pc, #664]	@ (8003784 <UART_SetConfig+0x2c4>)
 80034ec:	4013      	ands	r3, r2
 80034ee:	687a      	ldr	r2, [r7, #4]
 80034f0:	6812      	ldr	r2, [r2, #0]
 80034f2:	6979      	ldr	r1, [r7, #20]
 80034f4:	430b      	orrs	r3, r1
 80034f6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	68da      	ldr	r2, [r3, #12]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	430a      	orrs	r2, r1
 800350c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	699b      	ldr	r3, [r3, #24]
 8003512:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6a1b      	ldr	r3, [r3, #32]
 8003518:	697a      	ldr	r2, [r7, #20]
 800351a:	4313      	orrs	r3, r2
 800351c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	689b      	ldr	r3, [r3, #8]
 8003524:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	697a      	ldr	r2, [r7, #20]
 800352e:	430a      	orrs	r2, r1
 8003530:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4a94      	ldr	r2, [pc, #592]	@ (8003788 <UART_SetConfig+0x2c8>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d120      	bne.n	800357e <UART_SetConfig+0xbe>
 800353c:	4b93      	ldr	r3, [pc, #588]	@ (800378c <UART_SetConfig+0x2cc>)
 800353e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003542:	f003 0303 	and.w	r3, r3, #3
 8003546:	2b03      	cmp	r3, #3
 8003548:	d816      	bhi.n	8003578 <UART_SetConfig+0xb8>
 800354a:	a201      	add	r2, pc, #4	@ (adr r2, 8003550 <UART_SetConfig+0x90>)
 800354c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003550:	08003561 	.word	0x08003561
 8003554:	0800356d 	.word	0x0800356d
 8003558:	08003567 	.word	0x08003567
 800355c:	08003573 	.word	0x08003573
 8003560:	2301      	movs	r3, #1
 8003562:	77fb      	strb	r3, [r7, #31]
 8003564:	e150      	b.n	8003808 <UART_SetConfig+0x348>
 8003566:	2302      	movs	r3, #2
 8003568:	77fb      	strb	r3, [r7, #31]
 800356a:	e14d      	b.n	8003808 <UART_SetConfig+0x348>
 800356c:	2304      	movs	r3, #4
 800356e:	77fb      	strb	r3, [r7, #31]
 8003570:	e14a      	b.n	8003808 <UART_SetConfig+0x348>
 8003572:	2308      	movs	r3, #8
 8003574:	77fb      	strb	r3, [r7, #31]
 8003576:	e147      	b.n	8003808 <UART_SetConfig+0x348>
 8003578:	2310      	movs	r3, #16
 800357a:	77fb      	strb	r3, [r7, #31]
 800357c:	e144      	b.n	8003808 <UART_SetConfig+0x348>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a83      	ldr	r2, [pc, #524]	@ (8003790 <UART_SetConfig+0x2d0>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d132      	bne.n	80035ee <UART_SetConfig+0x12e>
 8003588:	4b80      	ldr	r3, [pc, #512]	@ (800378c <UART_SetConfig+0x2cc>)
 800358a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800358e:	f003 030c 	and.w	r3, r3, #12
 8003592:	2b0c      	cmp	r3, #12
 8003594:	d828      	bhi.n	80035e8 <UART_SetConfig+0x128>
 8003596:	a201      	add	r2, pc, #4	@ (adr r2, 800359c <UART_SetConfig+0xdc>)
 8003598:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800359c:	080035d1 	.word	0x080035d1
 80035a0:	080035e9 	.word	0x080035e9
 80035a4:	080035e9 	.word	0x080035e9
 80035a8:	080035e9 	.word	0x080035e9
 80035ac:	080035dd 	.word	0x080035dd
 80035b0:	080035e9 	.word	0x080035e9
 80035b4:	080035e9 	.word	0x080035e9
 80035b8:	080035e9 	.word	0x080035e9
 80035bc:	080035d7 	.word	0x080035d7
 80035c0:	080035e9 	.word	0x080035e9
 80035c4:	080035e9 	.word	0x080035e9
 80035c8:	080035e9 	.word	0x080035e9
 80035cc:	080035e3 	.word	0x080035e3
 80035d0:	2300      	movs	r3, #0
 80035d2:	77fb      	strb	r3, [r7, #31]
 80035d4:	e118      	b.n	8003808 <UART_SetConfig+0x348>
 80035d6:	2302      	movs	r3, #2
 80035d8:	77fb      	strb	r3, [r7, #31]
 80035da:	e115      	b.n	8003808 <UART_SetConfig+0x348>
 80035dc:	2304      	movs	r3, #4
 80035de:	77fb      	strb	r3, [r7, #31]
 80035e0:	e112      	b.n	8003808 <UART_SetConfig+0x348>
 80035e2:	2308      	movs	r3, #8
 80035e4:	77fb      	strb	r3, [r7, #31]
 80035e6:	e10f      	b.n	8003808 <UART_SetConfig+0x348>
 80035e8:	2310      	movs	r3, #16
 80035ea:	77fb      	strb	r3, [r7, #31]
 80035ec:	e10c      	b.n	8003808 <UART_SetConfig+0x348>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a68      	ldr	r2, [pc, #416]	@ (8003794 <UART_SetConfig+0x2d4>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d120      	bne.n	800363a <UART_SetConfig+0x17a>
 80035f8:	4b64      	ldr	r3, [pc, #400]	@ (800378c <UART_SetConfig+0x2cc>)
 80035fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035fe:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003602:	2b30      	cmp	r3, #48	@ 0x30
 8003604:	d013      	beq.n	800362e <UART_SetConfig+0x16e>
 8003606:	2b30      	cmp	r3, #48	@ 0x30
 8003608:	d814      	bhi.n	8003634 <UART_SetConfig+0x174>
 800360a:	2b20      	cmp	r3, #32
 800360c:	d009      	beq.n	8003622 <UART_SetConfig+0x162>
 800360e:	2b20      	cmp	r3, #32
 8003610:	d810      	bhi.n	8003634 <UART_SetConfig+0x174>
 8003612:	2b00      	cmp	r3, #0
 8003614:	d002      	beq.n	800361c <UART_SetConfig+0x15c>
 8003616:	2b10      	cmp	r3, #16
 8003618:	d006      	beq.n	8003628 <UART_SetConfig+0x168>
 800361a:	e00b      	b.n	8003634 <UART_SetConfig+0x174>
 800361c:	2300      	movs	r3, #0
 800361e:	77fb      	strb	r3, [r7, #31]
 8003620:	e0f2      	b.n	8003808 <UART_SetConfig+0x348>
 8003622:	2302      	movs	r3, #2
 8003624:	77fb      	strb	r3, [r7, #31]
 8003626:	e0ef      	b.n	8003808 <UART_SetConfig+0x348>
 8003628:	2304      	movs	r3, #4
 800362a:	77fb      	strb	r3, [r7, #31]
 800362c:	e0ec      	b.n	8003808 <UART_SetConfig+0x348>
 800362e:	2308      	movs	r3, #8
 8003630:	77fb      	strb	r3, [r7, #31]
 8003632:	e0e9      	b.n	8003808 <UART_SetConfig+0x348>
 8003634:	2310      	movs	r3, #16
 8003636:	77fb      	strb	r3, [r7, #31]
 8003638:	e0e6      	b.n	8003808 <UART_SetConfig+0x348>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a56      	ldr	r2, [pc, #344]	@ (8003798 <UART_SetConfig+0x2d8>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d120      	bne.n	8003686 <UART_SetConfig+0x1c6>
 8003644:	4b51      	ldr	r3, [pc, #324]	@ (800378c <UART_SetConfig+0x2cc>)
 8003646:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800364a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800364e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003650:	d013      	beq.n	800367a <UART_SetConfig+0x1ba>
 8003652:	2bc0      	cmp	r3, #192	@ 0xc0
 8003654:	d814      	bhi.n	8003680 <UART_SetConfig+0x1c0>
 8003656:	2b80      	cmp	r3, #128	@ 0x80
 8003658:	d009      	beq.n	800366e <UART_SetConfig+0x1ae>
 800365a:	2b80      	cmp	r3, #128	@ 0x80
 800365c:	d810      	bhi.n	8003680 <UART_SetConfig+0x1c0>
 800365e:	2b00      	cmp	r3, #0
 8003660:	d002      	beq.n	8003668 <UART_SetConfig+0x1a8>
 8003662:	2b40      	cmp	r3, #64	@ 0x40
 8003664:	d006      	beq.n	8003674 <UART_SetConfig+0x1b4>
 8003666:	e00b      	b.n	8003680 <UART_SetConfig+0x1c0>
 8003668:	2300      	movs	r3, #0
 800366a:	77fb      	strb	r3, [r7, #31]
 800366c:	e0cc      	b.n	8003808 <UART_SetConfig+0x348>
 800366e:	2302      	movs	r3, #2
 8003670:	77fb      	strb	r3, [r7, #31]
 8003672:	e0c9      	b.n	8003808 <UART_SetConfig+0x348>
 8003674:	2304      	movs	r3, #4
 8003676:	77fb      	strb	r3, [r7, #31]
 8003678:	e0c6      	b.n	8003808 <UART_SetConfig+0x348>
 800367a:	2308      	movs	r3, #8
 800367c:	77fb      	strb	r3, [r7, #31]
 800367e:	e0c3      	b.n	8003808 <UART_SetConfig+0x348>
 8003680:	2310      	movs	r3, #16
 8003682:	77fb      	strb	r3, [r7, #31]
 8003684:	e0c0      	b.n	8003808 <UART_SetConfig+0x348>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a44      	ldr	r2, [pc, #272]	@ (800379c <UART_SetConfig+0x2dc>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d125      	bne.n	80036dc <UART_SetConfig+0x21c>
 8003690:	4b3e      	ldr	r3, [pc, #248]	@ (800378c <UART_SetConfig+0x2cc>)
 8003692:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003696:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800369a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800369e:	d017      	beq.n	80036d0 <UART_SetConfig+0x210>
 80036a0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80036a4:	d817      	bhi.n	80036d6 <UART_SetConfig+0x216>
 80036a6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80036aa:	d00b      	beq.n	80036c4 <UART_SetConfig+0x204>
 80036ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80036b0:	d811      	bhi.n	80036d6 <UART_SetConfig+0x216>
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d003      	beq.n	80036be <UART_SetConfig+0x1fe>
 80036b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80036ba:	d006      	beq.n	80036ca <UART_SetConfig+0x20a>
 80036bc:	e00b      	b.n	80036d6 <UART_SetConfig+0x216>
 80036be:	2300      	movs	r3, #0
 80036c0:	77fb      	strb	r3, [r7, #31]
 80036c2:	e0a1      	b.n	8003808 <UART_SetConfig+0x348>
 80036c4:	2302      	movs	r3, #2
 80036c6:	77fb      	strb	r3, [r7, #31]
 80036c8:	e09e      	b.n	8003808 <UART_SetConfig+0x348>
 80036ca:	2304      	movs	r3, #4
 80036cc:	77fb      	strb	r3, [r7, #31]
 80036ce:	e09b      	b.n	8003808 <UART_SetConfig+0x348>
 80036d0:	2308      	movs	r3, #8
 80036d2:	77fb      	strb	r3, [r7, #31]
 80036d4:	e098      	b.n	8003808 <UART_SetConfig+0x348>
 80036d6:	2310      	movs	r3, #16
 80036d8:	77fb      	strb	r3, [r7, #31]
 80036da:	e095      	b.n	8003808 <UART_SetConfig+0x348>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a2f      	ldr	r2, [pc, #188]	@ (80037a0 <UART_SetConfig+0x2e0>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d125      	bne.n	8003732 <UART_SetConfig+0x272>
 80036e6:	4b29      	ldr	r3, [pc, #164]	@ (800378c <UART_SetConfig+0x2cc>)
 80036e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036ec:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80036f0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80036f4:	d017      	beq.n	8003726 <UART_SetConfig+0x266>
 80036f6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80036fa:	d817      	bhi.n	800372c <UART_SetConfig+0x26c>
 80036fc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003700:	d00b      	beq.n	800371a <UART_SetConfig+0x25a>
 8003702:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003706:	d811      	bhi.n	800372c <UART_SetConfig+0x26c>
 8003708:	2b00      	cmp	r3, #0
 800370a:	d003      	beq.n	8003714 <UART_SetConfig+0x254>
 800370c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003710:	d006      	beq.n	8003720 <UART_SetConfig+0x260>
 8003712:	e00b      	b.n	800372c <UART_SetConfig+0x26c>
 8003714:	2301      	movs	r3, #1
 8003716:	77fb      	strb	r3, [r7, #31]
 8003718:	e076      	b.n	8003808 <UART_SetConfig+0x348>
 800371a:	2302      	movs	r3, #2
 800371c:	77fb      	strb	r3, [r7, #31]
 800371e:	e073      	b.n	8003808 <UART_SetConfig+0x348>
 8003720:	2304      	movs	r3, #4
 8003722:	77fb      	strb	r3, [r7, #31]
 8003724:	e070      	b.n	8003808 <UART_SetConfig+0x348>
 8003726:	2308      	movs	r3, #8
 8003728:	77fb      	strb	r3, [r7, #31]
 800372a:	e06d      	b.n	8003808 <UART_SetConfig+0x348>
 800372c:	2310      	movs	r3, #16
 800372e:	77fb      	strb	r3, [r7, #31]
 8003730:	e06a      	b.n	8003808 <UART_SetConfig+0x348>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a1b      	ldr	r2, [pc, #108]	@ (80037a4 <UART_SetConfig+0x2e4>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d138      	bne.n	80037ae <UART_SetConfig+0x2ee>
 800373c:	4b13      	ldr	r3, [pc, #76]	@ (800378c <UART_SetConfig+0x2cc>)
 800373e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003742:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8003746:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800374a:	d017      	beq.n	800377c <UART_SetConfig+0x2bc>
 800374c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003750:	d82a      	bhi.n	80037a8 <UART_SetConfig+0x2e8>
 8003752:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003756:	d00b      	beq.n	8003770 <UART_SetConfig+0x2b0>
 8003758:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800375c:	d824      	bhi.n	80037a8 <UART_SetConfig+0x2e8>
 800375e:	2b00      	cmp	r3, #0
 8003760:	d003      	beq.n	800376a <UART_SetConfig+0x2aa>
 8003762:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003766:	d006      	beq.n	8003776 <UART_SetConfig+0x2b6>
 8003768:	e01e      	b.n	80037a8 <UART_SetConfig+0x2e8>
 800376a:	2300      	movs	r3, #0
 800376c:	77fb      	strb	r3, [r7, #31]
 800376e:	e04b      	b.n	8003808 <UART_SetConfig+0x348>
 8003770:	2302      	movs	r3, #2
 8003772:	77fb      	strb	r3, [r7, #31]
 8003774:	e048      	b.n	8003808 <UART_SetConfig+0x348>
 8003776:	2304      	movs	r3, #4
 8003778:	77fb      	strb	r3, [r7, #31]
 800377a:	e045      	b.n	8003808 <UART_SetConfig+0x348>
 800377c:	2308      	movs	r3, #8
 800377e:	77fb      	strb	r3, [r7, #31]
 8003780:	e042      	b.n	8003808 <UART_SetConfig+0x348>
 8003782:	bf00      	nop
 8003784:	efff69f3 	.word	0xefff69f3
 8003788:	40011000 	.word	0x40011000
 800378c:	40023800 	.word	0x40023800
 8003790:	40004400 	.word	0x40004400
 8003794:	40004800 	.word	0x40004800
 8003798:	40004c00 	.word	0x40004c00
 800379c:	40005000 	.word	0x40005000
 80037a0:	40011400 	.word	0x40011400
 80037a4:	40007800 	.word	0x40007800
 80037a8:	2310      	movs	r3, #16
 80037aa:	77fb      	strb	r3, [r7, #31]
 80037ac:	e02c      	b.n	8003808 <UART_SetConfig+0x348>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a72      	ldr	r2, [pc, #456]	@ (800397c <UART_SetConfig+0x4bc>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d125      	bne.n	8003804 <UART_SetConfig+0x344>
 80037b8:	4b71      	ldr	r3, [pc, #452]	@ (8003980 <UART_SetConfig+0x4c0>)
 80037ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037be:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80037c2:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80037c6:	d017      	beq.n	80037f8 <UART_SetConfig+0x338>
 80037c8:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80037cc:	d817      	bhi.n	80037fe <UART_SetConfig+0x33e>
 80037ce:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80037d2:	d00b      	beq.n	80037ec <UART_SetConfig+0x32c>
 80037d4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80037d8:	d811      	bhi.n	80037fe <UART_SetConfig+0x33e>
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d003      	beq.n	80037e6 <UART_SetConfig+0x326>
 80037de:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80037e2:	d006      	beq.n	80037f2 <UART_SetConfig+0x332>
 80037e4:	e00b      	b.n	80037fe <UART_SetConfig+0x33e>
 80037e6:	2300      	movs	r3, #0
 80037e8:	77fb      	strb	r3, [r7, #31]
 80037ea:	e00d      	b.n	8003808 <UART_SetConfig+0x348>
 80037ec:	2302      	movs	r3, #2
 80037ee:	77fb      	strb	r3, [r7, #31]
 80037f0:	e00a      	b.n	8003808 <UART_SetConfig+0x348>
 80037f2:	2304      	movs	r3, #4
 80037f4:	77fb      	strb	r3, [r7, #31]
 80037f6:	e007      	b.n	8003808 <UART_SetConfig+0x348>
 80037f8:	2308      	movs	r3, #8
 80037fa:	77fb      	strb	r3, [r7, #31]
 80037fc:	e004      	b.n	8003808 <UART_SetConfig+0x348>
 80037fe:	2310      	movs	r3, #16
 8003800:	77fb      	strb	r3, [r7, #31]
 8003802:	e001      	b.n	8003808 <UART_SetConfig+0x348>
 8003804:	2310      	movs	r3, #16
 8003806:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	69db      	ldr	r3, [r3, #28]
 800380c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003810:	d15b      	bne.n	80038ca <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8003812:	7ffb      	ldrb	r3, [r7, #31]
 8003814:	2b08      	cmp	r3, #8
 8003816:	d828      	bhi.n	800386a <UART_SetConfig+0x3aa>
 8003818:	a201      	add	r2, pc, #4	@ (adr r2, 8003820 <UART_SetConfig+0x360>)
 800381a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800381e:	bf00      	nop
 8003820:	08003845 	.word	0x08003845
 8003824:	0800384d 	.word	0x0800384d
 8003828:	08003855 	.word	0x08003855
 800382c:	0800386b 	.word	0x0800386b
 8003830:	0800385b 	.word	0x0800385b
 8003834:	0800386b 	.word	0x0800386b
 8003838:	0800386b 	.word	0x0800386b
 800383c:	0800386b 	.word	0x0800386b
 8003840:	08003863 	.word	0x08003863
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003844:	f7ff f884 	bl	8002950 <HAL_RCC_GetPCLK1Freq>
 8003848:	61b8      	str	r0, [r7, #24]
        break;
 800384a:	e013      	b.n	8003874 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800384c:	f7ff f894 	bl	8002978 <HAL_RCC_GetPCLK2Freq>
 8003850:	61b8      	str	r0, [r7, #24]
        break;
 8003852:	e00f      	b.n	8003874 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003854:	4b4b      	ldr	r3, [pc, #300]	@ (8003984 <UART_SetConfig+0x4c4>)
 8003856:	61bb      	str	r3, [r7, #24]
        break;
 8003858:	e00c      	b.n	8003874 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800385a:	f7fe ffa7 	bl	80027ac <HAL_RCC_GetSysClockFreq>
 800385e:	61b8      	str	r0, [r7, #24]
        break;
 8003860:	e008      	b.n	8003874 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003862:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003866:	61bb      	str	r3, [r7, #24]
        break;
 8003868:	e004      	b.n	8003874 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800386a:	2300      	movs	r3, #0
 800386c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	77bb      	strb	r3, [r7, #30]
        break;
 8003872:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003874:	69bb      	ldr	r3, [r7, #24]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d074      	beq.n	8003964 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800387a:	69bb      	ldr	r3, [r7, #24]
 800387c:	005a      	lsls	r2, r3, #1
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	085b      	lsrs	r3, r3, #1
 8003884:	441a      	add	r2, r3
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	fbb2 f3f3 	udiv	r3, r2, r3
 800388e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003890:	693b      	ldr	r3, [r7, #16]
 8003892:	2b0f      	cmp	r3, #15
 8003894:	d916      	bls.n	80038c4 <UART_SetConfig+0x404>
 8003896:	693b      	ldr	r3, [r7, #16]
 8003898:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800389c:	d212      	bcs.n	80038c4 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	b29b      	uxth	r3, r3
 80038a2:	f023 030f 	bic.w	r3, r3, #15
 80038a6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80038a8:	693b      	ldr	r3, [r7, #16]
 80038aa:	085b      	lsrs	r3, r3, #1
 80038ac:	b29b      	uxth	r3, r3
 80038ae:	f003 0307 	and.w	r3, r3, #7
 80038b2:	b29a      	uxth	r2, r3
 80038b4:	89fb      	ldrh	r3, [r7, #14]
 80038b6:	4313      	orrs	r3, r2
 80038b8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	89fa      	ldrh	r2, [r7, #14]
 80038c0:	60da      	str	r2, [r3, #12]
 80038c2:	e04f      	b.n	8003964 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80038c4:	2301      	movs	r3, #1
 80038c6:	77bb      	strb	r3, [r7, #30]
 80038c8:	e04c      	b.n	8003964 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80038ca:	7ffb      	ldrb	r3, [r7, #31]
 80038cc:	2b08      	cmp	r3, #8
 80038ce:	d828      	bhi.n	8003922 <UART_SetConfig+0x462>
 80038d0:	a201      	add	r2, pc, #4	@ (adr r2, 80038d8 <UART_SetConfig+0x418>)
 80038d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038d6:	bf00      	nop
 80038d8:	080038fd 	.word	0x080038fd
 80038dc:	08003905 	.word	0x08003905
 80038e0:	0800390d 	.word	0x0800390d
 80038e4:	08003923 	.word	0x08003923
 80038e8:	08003913 	.word	0x08003913
 80038ec:	08003923 	.word	0x08003923
 80038f0:	08003923 	.word	0x08003923
 80038f4:	08003923 	.word	0x08003923
 80038f8:	0800391b 	.word	0x0800391b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80038fc:	f7ff f828 	bl	8002950 <HAL_RCC_GetPCLK1Freq>
 8003900:	61b8      	str	r0, [r7, #24]
        break;
 8003902:	e013      	b.n	800392c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003904:	f7ff f838 	bl	8002978 <HAL_RCC_GetPCLK2Freq>
 8003908:	61b8      	str	r0, [r7, #24]
        break;
 800390a:	e00f      	b.n	800392c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800390c:	4b1d      	ldr	r3, [pc, #116]	@ (8003984 <UART_SetConfig+0x4c4>)
 800390e:	61bb      	str	r3, [r7, #24]
        break;
 8003910:	e00c      	b.n	800392c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003912:	f7fe ff4b 	bl	80027ac <HAL_RCC_GetSysClockFreq>
 8003916:	61b8      	str	r0, [r7, #24]
        break;
 8003918:	e008      	b.n	800392c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800391a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800391e:	61bb      	str	r3, [r7, #24]
        break;
 8003920:	e004      	b.n	800392c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8003922:	2300      	movs	r3, #0
 8003924:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	77bb      	strb	r3, [r7, #30]
        break;
 800392a:	bf00      	nop
    }

    if (pclk != 0U)
 800392c:	69bb      	ldr	r3, [r7, #24]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d018      	beq.n	8003964 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	085a      	lsrs	r2, r3, #1
 8003938:	69bb      	ldr	r3, [r7, #24]
 800393a:	441a      	add	r2, r3
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	fbb2 f3f3 	udiv	r3, r2, r3
 8003944:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	2b0f      	cmp	r3, #15
 800394a:	d909      	bls.n	8003960 <UART_SetConfig+0x4a0>
 800394c:	693b      	ldr	r3, [r7, #16]
 800394e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003952:	d205      	bcs.n	8003960 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003954:	693b      	ldr	r3, [r7, #16]
 8003956:	b29a      	uxth	r2, r3
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	60da      	str	r2, [r3, #12]
 800395e:	e001      	b.n	8003964 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003960:	2301      	movs	r3, #1
 8003962:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2200      	movs	r2, #0
 8003968:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2200      	movs	r2, #0
 800396e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003970:	7fbb      	ldrb	r3, [r7, #30]
}
 8003972:	4618      	mov	r0, r3
 8003974:	3720      	adds	r7, #32
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}
 800397a:	bf00      	nop
 800397c:	40007c00 	.word	0x40007c00
 8003980:	40023800 	.word	0x40023800
 8003984:	00f42400 	.word	0x00f42400

08003988 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003988:	b480      	push	{r7}
 800398a:	b083      	sub	sp, #12
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003994:	f003 0308 	and.w	r3, r3, #8
 8003998:	2b00      	cmp	r3, #0
 800399a:	d00a      	beq.n	80039b2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	430a      	orrs	r2, r1
 80039b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039b6:	f003 0301 	and.w	r3, r3, #1
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d00a      	beq.n	80039d4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	430a      	orrs	r2, r1
 80039d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039d8:	f003 0302 	and.w	r3, r3, #2
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d00a      	beq.n	80039f6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	430a      	orrs	r2, r1
 80039f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039fa:	f003 0304 	and.w	r3, r3, #4
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d00a      	beq.n	8003a18 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	430a      	orrs	r2, r1
 8003a16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a1c:	f003 0310 	and.w	r3, r3, #16
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d00a      	beq.n	8003a3a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	689b      	ldr	r3, [r3, #8]
 8003a2a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	430a      	orrs	r2, r1
 8003a38:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a3e:	f003 0320 	and.w	r3, r3, #32
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d00a      	beq.n	8003a5c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	689b      	ldr	r3, [r3, #8]
 8003a4c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	430a      	orrs	r2, r1
 8003a5a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d01a      	beq.n	8003a9e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	430a      	orrs	r2, r1
 8003a7c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a82:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003a86:	d10a      	bne.n	8003a9e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	430a      	orrs	r2, r1
 8003a9c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aa2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d00a      	beq.n	8003ac0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	430a      	orrs	r2, r1
 8003abe:	605a      	str	r2, [r3, #4]
  }
}
 8003ac0:	bf00      	nop
 8003ac2:	370c      	adds	r7, #12
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aca:	4770      	bx	lr

08003acc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b08c      	sub	sp, #48	@ 0x30
 8003ad0:	af02      	add	r7, sp, #8
 8003ad2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003adc:	f7fd ff68 	bl	80019b0 <HAL_GetTick>
 8003ae0:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f003 0308 	and.w	r3, r3, #8
 8003aec:	2b08      	cmp	r3, #8
 8003aee:	d12e      	bne.n	8003b4e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003af0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003af4:	9300      	str	r3, [sp, #0]
 8003af6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003af8:	2200      	movs	r2, #0
 8003afa:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003afe:	6878      	ldr	r0, [r7, #4]
 8003b00:	f000 f83b 	bl	8003b7a <UART_WaitOnFlagUntilTimeout>
 8003b04:	4603      	mov	r3, r0
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d021      	beq.n	8003b4e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b10:	693b      	ldr	r3, [r7, #16]
 8003b12:	e853 3f00 	ldrex	r3, [r3]
 8003b16:	60fb      	str	r3, [r7, #12]
   return(result);
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003b1e:	623b      	str	r3, [r7, #32]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	461a      	mov	r2, r3
 8003b26:	6a3b      	ldr	r3, [r7, #32]
 8003b28:	61fb      	str	r3, [r7, #28]
 8003b2a:	61ba      	str	r2, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b2c:	69b9      	ldr	r1, [r7, #24]
 8003b2e:	69fa      	ldr	r2, [r7, #28]
 8003b30:	e841 2300 	strex	r3, r2, [r1]
 8003b34:	617b      	str	r3, [r7, #20]
   return(result);
 8003b36:	697b      	ldr	r3, [r7, #20]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d1e6      	bne.n	8003b0a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2220      	movs	r2, #32
 8003b40:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2200      	movs	r2, #0
 8003b46:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b4a:	2303      	movs	r3, #3
 8003b4c:	e011      	b.n	8003b72 <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2220      	movs	r2, #32
 8003b52:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2220      	movs	r2, #32
 8003b58:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2200      	movs	r2, #0
 8003b66:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003b70:	2300      	movs	r3, #0
}
 8003b72:	4618      	mov	r0, r3
 8003b74:	3728      	adds	r7, #40	@ 0x28
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bd80      	pop	{r7, pc}

08003b7a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003b7a:	b580      	push	{r7, lr}
 8003b7c:	b084      	sub	sp, #16
 8003b7e:	af00      	add	r7, sp, #0
 8003b80:	60f8      	str	r0, [r7, #12]
 8003b82:	60b9      	str	r1, [r7, #8]
 8003b84:	603b      	str	r3, [r7, #0]
 8003b86:	4613      	mov	r3, r2
 8003b88:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b8a:	e04f      	b.n	8003c2c <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b8c:	69bb      	ldr	r3, [r7, #24]
 8003b8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b92:	d04b      	beq.n	8003c2c <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b94:	f7fd ff0c 	bl	80019b0 <HAL_GetTick>
 8003b98:	4602      	mov	r2, r0
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	1ad3      	subs	r3, r2, r3
 8003b9e:	69ba      	ldr	r2, [r7, #24]
 8003ba0:	429a      	cmp	r2, r3
 8003ba2:	d302      	bcc.n	8003baa <UART_WaitOnFlagUntilTimeout+0x30>
 8003ba4:	69bb      	ldr	r3, [r7, #24]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d101      	bne.n	8003bae <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003baa:	2303      	movs	r3, #3
 8003bac:	e04e      	b.n	8003c4c <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f003 0304 	and.w	r3, r3, #4
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d037      	beq.n	8003c2c <UART_WaitOnFlagUntilTimeout+0xb2>
 8003bbc:	68bb      	ldr	r3, [r7, #8]
 8003bbe:	2b80      	cmp	r3, #128	@ 0x80
 8003bc0:	d034      	beq.n	8003c2c <UART_WaitOnFlagUntilTimeout+0xb2>
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	2b40      	cmp	r3, #64	@ 0x40
 8003bc6:	d031      	beq.n	8003c2c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	69db      	ldr	r3, [r3, #28]
 8003bce:	f003 0308 	and.w	r3, r3, #8
 8003bd2:	2b08      	cmp	r3, #8
 8003bd4:	d110      	bne.n	8003bf8 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	2208      	movs	r2, #8
 8003bdc:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003bde:	68f8      	ldr	r0, [r7, #12]
 8003be0:	f000 f838 	bl	8003c54 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	2208      	movs	r2, #8
 8003be8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	e029      	b.n	8003c4c <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	69db      	ldr	r3, [r3, #28]
 8003bfe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003c02:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003c06:	d111      	bne.n	8003c2c <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003c10:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003c12:	68f8      	ldr	r0, [r7, #12]
 8003c14:	f000 f81e 	bl	8003c54 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	2220      	movs	r2, #32
 8003c1c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	2200      	movs	r2, #0
 8003c24:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003c28:	2303      	movs	r3, #3
 8003c2a:	e00f      	b.n	8003c4c <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	69da      	ldr	r2, [r3, #28]
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	4013      	ands	r3, r2
 8003c36:	68ba      	ldr	r2, [r7, #8]
 8003c38:	429a      	cmp	r2, r3
 8003c3a:	bf0c      	ite	eq
 8003c3c:	2301      	moveq	r3, #1
 8003c3e:	2300      	movne	r3, #0
 8003c40:	b2db      	uxtb	r3, r3
 8003c42:	461a      	mov	r2, r3
 8003c44:	79fb      	ldrb	r3, [r7, #7]
 8003c46:	429a      	cmp	r2, r3
 8003c48:	d0a0      	beq.n	8003b8c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003c4a:	2300      	movs	r3, #0
}
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	3710      	adds	r7, #16
 8003c50:	46bd      	mov	sp, r7
 8003c52:	bd80      	pop	{r7, pc}

08003c54 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003c54:	b480      	push	{r7}
 8003c56:	b095      	sub	sp, #84	@ 0x54
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c64:	e853 3f00 	ldrex	r3, [r3]
 8003c68:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003c6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c6c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003c70:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	461a      	mov	r2, r3
 8003c78:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003c7a:	643b      	str	r3, [r7, #64]	@ 0x40
 8003c7c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c7e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003c80:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003c82:	e841 2300 	strex	r3, r2, [r1]
 8003c86:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003c88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d1e6      	bne.n	8003c5c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	3308      	adds	r3, #8
 8003c94:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c96:	6a3b      	ldr	r3, [r7, #32]
 8003c98:	e853 3f00 	ldrex	r3, [r3]
 8003c9c:	61fb      	str	r3, [r7, #28]
   return(result);
 8003c9e:	69fb      	ldr	r3, [r7, #28]
 8003ca0:	f023 0301 	bic.w	r3, r3, #1
 8003ca4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	3308      	adds	r3, #8
 8003cac:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003cae:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003cb0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cb2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003cb4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003cb6:	e841 2300 	strex	r3, r2, [r1]
 8003cba:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003cbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d1e5      	bne.n	8003c8e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003cc6:	2b01      	cmp	r3, #1
 8003cc8:	d118      	bne.n	8003cfc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	e853 3f00 	ldrex	r3, [r3]
 8003cd6:	60bb      	str	r3, [r7, #8]
   return(result);
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	f023 0310 	bic.w	r3, r3, #16
 8003cde:	647b      	str	r3, [r7, #68]	@ 0x44
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	461a      	mov	r2, r3
 8003ce6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003ce8:	61bb      	str	r3, [r7, #24]
 8003cea:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cec:	6979      	ldr	r1, [r7, #20]
 8003cee:	69ba      	ldr	r2, [r7, #24]
 8003cf0:	e841 2300 	strex	r3, r2, [r1]
 8003cf4:	613b      	str	r3, [r7, #16]
   return(result);
 8003cf6:	693b      	ldr	r3, [r7, #16]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d1e6      	bne.n	8003cca <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2220      	movs	r2, #32
 8003d00:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2200      	movs	r2, #0
 8003d08:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003d10:	bf00      	nop
 8003d12:	3754      	adds	r7, #84	@ 0x54
 8003d14:	46bd      	mov	sp, r7
 8003d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1a:	4770      	bx	lr

08003d1c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b085      	sub	sp, #20
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	4603      	mov	r3, r0
 8003d24:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003d26:	2300      	movs	r3, #0
 8003d28:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003d2a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003d2e:	2b84      	cmp	r3, #132	@ 0x84
 8003d30:	d005      	beq.n	8003d3e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003d32:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	4413      	add	r3, r2
 8003d3a:	3303      	adds	r3, #3
 8003d3c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
}
 8003d40:	4618      	mov	r0, r3
 8003d42:	3714      	adds	r7, #20
 8003d44:	46bd      	mov	sp, r7
 8003d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4a:	4770      	bx	lr

08003d4c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003d50:	f000 fc8a 	bl	8004668 <vTaskStartScheduler>
  
  return osOK;
 8003d54:	2300      	movs	r3, #0
}
 8003d56:	4618      	mov	r0, r3
 8003d58:	bd80      	pop	{r7, pc}

08003d5a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003d5a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d5c:	b089      	sub	sp, #36	@ 0x24
 8003d5e:	af04      	add	r7, sp, #16
 8003d60:	6078      	str	r0, [r7, #4]
 8003d62:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	695b      	ldr	r3, [r3, #20]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d020      	beq.n	8003dae <osThreadCreate+0x54>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	699b      	ldr	r3, [r3, #24]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d01c      	beq.n	8003dae <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	685c      	ldr	r4, [r3, #4]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	691e      	ldr	r6, [r3, #16]
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003d86:	4618      	mov	r0, r3
 8003d88:	f7ff ffc8 	bl	8003d1c <makeFreeRtosPriority>
 8003d8c:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	695b      	ldr	r3, [r3, #20]
 8003d92:	687a      	ldr	r2, [r7, #4]
 8003d94:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003d96:	9202      	str	r2, [sp, #8]
 8003d98:	9301      	str	r3, [sp, #4]
 8003d9a:	9100      	str	r1, [sp, #0]
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	4632      	mov	r2, r6
 8003da0:	4629      	mov	r1, r5
 8003da2:	4620      	mov	r0, r4
 8003da4:	f000 f8ed 	bl	8003f82 <xTaskCreateStatic>
 8003da8:	4603      	mov	r3, r0
 8003daa:	60fb      	str	r3, [r7, #12]
 8003dac:	e01c      	b.n	8003de8 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	685c      	ldr	r4, [r3, #4]
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003dba:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	f7ff ffaa 	bl	8003d1c <makeFreeRtosPriority>
 8003dc8:	4602      	mov	r2, r0
 8003dca:	f107 030c 	add.w	r3, r7, #12
 8003dce:	9301      	str	r3, [sp, #4]
 8003dd0:	9200      	str	r2, [sp, #0]
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	4632      	mov	r2, r6
 8003dd6:	4629      	mov	r1, r5
 8003dd8:	4620      	mov	r0, r4
 8003dda:	f000 f938 	bl	800404e <xTaskCreate>
 8003dde:	4603      	mov	r3, r0
 8003de0:	2b01      	cmp	r3, #1
 8003de2:	d001      	beq.n	8003de8 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003de4:	2300      	movs	r3, #0
 8003de6:	e000      	b.n	8003dea <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003de8:	68fb      	ldr	r3, [r7, #12]
}
 8003dea:	4618      	mov	r0, r3
 8003dec:	3714      	adds	r7, #20
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003df2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003df2:	b580      	push	{r7, lr}
 8003df4:	b084      	sub	sp, #16
 8003df6:	af00      	add	r7, sp, #0
 8003df8:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d001      	beq.n	8003e08 <osDelay+0x16>
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	e000      	b.n	8003e0a <osDelay+0x18>
 8003e08:	2301      	movs	r3, #1
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	f000 fa60 	bl	80042d0 <vTaskDelay>
  
  return osOK;
 8003e10:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003e12:	4618      	mov	r0, r3
 8003e14:	3710      	adds	r7, #16
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bd80      	pop	{r7, pc}

08003e1a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003e1a:	b480      	push	{r7}
 8003e1c:	b083      	sub	sp, #12
 8003e1e:	af00      	add	r7, sp, #0
 8003e20:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	f103 0208 	add.w	r2, r3, #8
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	f04f 32ff 	mov.w	r2, #4294967295
 8003e32:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	f103 0208 	add.w	r2, r3, #8
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	f103 0208 	add.w	r2, r3, #8
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003e4e:	bf00      	nop
 8003e50:	370c      	adds	r7, #12
 8003e52:	46bd      	mov	sp, r7
 8003e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e58:	4770      	bx	lr

08003e5a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003e5a:	b480      	push	{r7}
 8003e5c:	b083      	sub	sp, #12
 8003e5e:	af00      	add	r7, sp, #0
 8003e60:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2200      	movs	r2, #0
 8003e66:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003e68:	bf00      	nop
 8003e6a:	370c      	adds	r7, #12
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e72:	4770      	bx	lr

08003e74 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003e74:	b480      	push	{r7}
 8003e76:	b085      	sub	sp, #20
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
 8003e7c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	68fa      	ldr	r2, [r7, #12]
 8003e88:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	689a      	ldr	r2, [r3, #8]
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	689b      	ldr	r3, [r3, #8]
 8003e96:	683a      	ldr	r2, [r7, #0]
 8003e98:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	683a      	ldr	r2, [r7, #0]
 8003e9e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	687a      	ldr	r2, [r7, #4]
 8003ea4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	1c5a      	adds	r2, r3, #1
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	601a      	str	r2, [r3, #0]
}
 8003eb0:	bf00      	nop
 8003eb2:	3714      	adds	r7, #20
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eba:	4770      	bx	lr

08003ebc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	b085      	sub	sp, #20
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
 8003ec4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ed2:	d103      	bne.n	8003edc <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	691b      	ldr	r3, [r3, #16]
 8003ed8:	60fb      	str	r3, [r7, #12]
 8003eda:	e00c      	b.n	8003ef6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	3308      	adds	r3, #8
 8003ee0:	60fb      	str	r3, [r7, #12]
 8003ee2:	e002      	b.n	8003eea <vListInsert+0x2e>
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	60fb      	str	r3, [r7, #12]
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	68ba      	ldr	r2, [r7, #8]
 8003ef2:	429a      	cmp	r2, r3
 8003ef4:	d2f6      	bcs.n	8003ee4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	685a      	ldr	r2, [r3, #4]
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	683a      	ldr	r2, [r7, #0]
 8003f04:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	68fa      	ldr	r2, [r7, #12]
 8003f0a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	683a      	ldr	r2, [r7, #0]
 8003f10:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	687a      	ldr	r2, [r7, #4]
 8003f16:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	1c5a      	adds	r2, r3, #1
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	601a      	str	r2, [r3, #0]
}
 8003f22:	bf00      	nop
 8003f24:	3714      	adds	r7, #20
 8003f26:	46bd      	mov	sp, r7
 8003f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2c:	4770      	bx	lr

08003f2e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003f2e:	b480      	push	{r7}
 8003f30:	b085      	sub	sp, #20
 8003f32:	af00      	add	r7, sp, #0
 8003f34:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	691b      	ldr	r3, [r3, #16]
 8003f3a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	687a      	ldr	r2, [r7, #4]
 8003f42:	6892      	ldr	r2, [r2, #8]
 8003f44:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	689b      	ldr	r3, [r3, #8]
 8003f4a:	687a      	ldr	r2, [r7, #4]
 8003f4c:	6852      	ldr	r2, [r2, #4]
 8003f4e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	687a      	ldr	r2, [r7, #4]
 8003f56:	429a      	cmp	r2, r3
 8003f58:	d103      	bne.n	8003f62 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	689a      	ldr	r2, [r3, #8]
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2200      	movs	r2, #0
 8003f66:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	1e5a      	subs	r2, r3, #1
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
}
 8003f76:	4618      	mov	r0, r3
 8003f78:	3714      	adds	r7, #20
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f80:	4770      	bx	lr

08003f82 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003f82:	b580      	push	{r7, lr}
 8003f84:	b08e      	sub	sp, #56	@ 0x38
 8003f86:	af04      	add	r7, sp, #16
 8003f88:	60f8      	str	r0, [r7, #12]
 8003f8a:	60b9      	str	r1, [r7, #8]
 8003f8c:	607a      	str	r2, [r7, #4]
 8003f8e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003f90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d10d      	bne.n	8003fb2 <xTaskCreateStatic+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003f96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f9a:	b672      	cpsid	i
 8003f9c:	f383 8811 	msr	BASEPRI, r3
 8003fa0:	f3bf 8f6f 	isb	sy
 8003fa4:	f3bf 8f4f 	dsb	sy
 8003fa8:	b662      	cpsie	i
 8003faa:	623b      	str	r3, [r7, #32]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003fac:	bf00      	nop
 8003fae:	bf00      	nop
 8003fb0:	e7fd      	b.n	8003fae <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8003fb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d10d      	bne.n	8003fd4 <xTaskCreateStatic+0x52>
	__asm volatile
 8003fb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fbc:	b672      	cpsid	i
 8003fbe:	f383 8811 	msr	BASEPRI, r3
 8003fc2:	f3bf 8f6f 	isb	sy
 8003fc6:	f3bf 8f4f 	dsb	sy
 8003fca:	b662      	cpsie	i
 8003fcc:	61fb      	str	r3, [r7, #28]
}
 8003fce:	bf00      	nop
 8003fd0:	bf00      	nop
 8003fd2:	e7fd      	b.n	8003fd0 <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003fd4:	2354      	movs	r3, #84	@ 0x54
 8003fd6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003fd8:	693b      	ldr	r3, [r7, #16]
 8003fda:	2b54      	cmp	r3, #84	@ 0x54
 8003fdc:	d00d      	beq.n	8003ffa <xTaskCreateStatic+0x78>
	__asm volatile
 8003fde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fe2:	b672      	cpsid	i
 8003fe4:	f383 8811 	msr	BASEPRI, r3
 8003fe8:	f3bf 8f6f 	isb	sy
 8003fec:	f3bf 8f4f 	dsb	sy
 8003ff0:	b662      	cpsie	i
 8003ff2:	61bb      	str	r3, [r7, #24]
}
 8003ff4:	bf00      	nop
 8003ff6:	bf00      	nop
 8003ff8:	e7fd      	b.n	8003ff6 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003ffa:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003ffc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d01e      	beq.n	8004040 <xTaskCreateStatic+0xbe>
 8004002:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004004:	2b00      	cmp	r3, #0
 8004006:	d01b      	beq.n	8004040 <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004008:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800400a:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800400c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800400e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004010:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004014:	2202      	movs	r2, #2
 8004016:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800401a:	2300      	movs	r3, #0
 800401c:	9303      	str	r3, [sp, #12]
 800401e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004020:	9302      	str	r3, [sp, #8]
 8004022:	f107 0314 	add.w	r3, r7, #20
 8004026:	9301      	str	r3, [sp, #4]
 8004028:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800402a:	9300      	str	r3, [sp, #0]
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	687a      	ldr	r2, [r7, #4]
 8004030:	68b9      	ldr	r1, [r7, #8]
 8004032:	68f8      	ldr	r0, [r7, #12]
 8004034:	f000 f850 	bl	80040d8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004038:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800403a:	f000 f8df 	bl	80041fc <prvAddNewTaskToReadyList>
 800403e:	e001      	b.n	8004044 <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 8004040:	2300      	movs	r3, #0
 8004042:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004044:	697b      	ldr	r3, [r7, #20]
	}
 8004046:	4618      	mov	r0, r3
 8004048:	3728      	adds	r7, #40	@ 0x28
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}

0800404e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800404e:	b580      	push	{r7, lr}
 8004050:	b08c      	sub	sp, #48	@ 0x30
 8004052:	af04      	add	r7, sp, #16
 8004054:	60f8      	str	r0, [r7, #12]
 8004056:	60b9      	str	r1, [r7, #8]
 8004058:	603b      	str	r3, [r7, #0]
 800405a:	4613      	mov	r3, r2
 800405c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800405e:	88fb      	ldrh	r3, [r7, #6]
 8004060:	009b      	lsls	r3, r3, #2
 8004062:	4618      	mov	r0, r3
 8004064:	f001 f8aa 	bl	80051bc <pvPortMalloc>
 8004068:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800406a:	697b      	ldr	r3, [r7, #20]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d00e      	beq.n	800408e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004070:	2054      	movs	r0, #84	@ 0x54
 8004072:	f001 f8a3 	bl	80051bc <pvPortMalloc>
 8004076:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004078:	69fb      	ldr	r3, [r7, #28]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d003      	beq.n	8004086 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800407e:	69fb      	ldr	r3, [r7, #28]
 8004080:	697a      	ldr	r2, [r7, #20]
 8004082:	631a      	str	r2, [r3, #48]	@ 0x30
 8004084:	e005      	b.n	8004092 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004086:	6978      	ldr	r0, [r7, #20]
 8004088:	f001 f966 	bl	8005358 <vPortFree>
 800408c:	e001      	b.n	8004092 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800408e:	2300      	movs	r3, #0
 8004090:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004092:	69fb      	ldr	r3, [r7, #28]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d017      	beq.n	80040c8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004098:	69fb      	ldr	r3, [r7, #28]
 800409a:	2200      	movs	r2, #0
 800409c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80040a0:	88fa      	ldrh	r2, [r7, #6]
 80040a2:	2300      	movs	r3, #0
 80040a4:	9303      	str	r3, [sp, #12]
 80040a6:	69fb      	ldr	r3, [r7, #28]
 80040a8:	9302      	str	r3, [sp, #8]
 80040aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040ac:	9301      	str	r3, [sp, #4]
 80040ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040b0:	9300      	str	r3, [sp, #0]
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	68b9      	ldr	r1, [r7, #8]
 80040b6:	68f8      	ldr	r0, [r7, #12]
 80040b8:	f000 f80e 	bl	80040d8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80040bc:	69f8      	ldr	r0, [r7, #28]
 80040be:	f000 f89d 	bl	80041fc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80040c2:	2301      	movs	r3, #1
 80040c4:	61bb      	str	r3, [r7, #24]
 80040c6:	e002      	b.n	80040ce <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80040c8:	f04f 33ff 	mov.w	r3, #4294967295
 80040cc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80040ce:	69bb      	ldr	r3, [r7, #24]
	}
 80040d0:	4618      	mov	r0, r3
 80040d2:	3720      	adds	r7, #32
 80040d4:	46bd      	mov	sp, r7
 80040d6:	bd80      	pop	{r7, pc}

080040d8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b088      	sub	sp, #32
 80040dc:	af00      	add	r7, sp, #0
 80040de:	60f8      	str	r0, [r7, #12]
 80040e0:	60b9      	str	r1, [r7, #8]
 80040e2:	607a      	str	r2, [r7, #4]
 80040e4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80040e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040e8:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	009b      	lsls	r3, r3, #2
 80040ee:	461a      	mov	r2, r3
 80040f0:	21a5      	movs	r1, #165	@ 0xa5
 80040f2:	f001 ff35 	bl	8005f60 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80040f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040f8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80040fa:	6879      	ldr	r1, [r7, #4]
 80040fc:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8004100:	440b      	add	r3, r1
 8004102:	009b      	lsls	r3, r3, #2
 8004104:	4413      	add	r3, r2
 8004106:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004108:	69bb      	ldr	r3, [r7, #24]
 800410a:	f023 0307 	bic.w	r3, r3, #7
 800410e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004110:	69bb      	ldr	r3, [r7, #24]
 8004112:	f003 0307 	and.w	r3, r3, #7
 8004116:	2b00      	cmp	r3, #0
 8004118:	d00d      	beq.n	8004136 <prvInitialiseNewTask+0x5e>
	__asm volatile
 800411a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800411e:	b672      	cpsid	i
 8004120:	f383 8811 	msr	BASEPRI, r3
 8004124:	f3bf 8f6f 	isb	sy
 8004128:	f3bf 8f4f 	dsb	sy
 800412c:	b662      	cpsie	i
 800412e:	617b      	str	r3, [r7, #20]
}
 8004130:	bf00      	nop
 8004132:	bf00      	nop
 8004134:	e7fd      	b.n	8004132 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d01f      	beq.n	800417c <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800413c:	2300      	movs	r3, #0
 800413e:	61fb      	str	r3, [r7, #28]
 8004140:	e012      	b.n	8004168 <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004142:	68ba      	ldr	r2, [r7, #8]
 8004144:	69fb      	ldr	r3, [r7, #28]
 8004146:	4413      	add	r3, r2
 8004148:	7819      	ldrb	r1, [r3, #0]
 800414a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800414c:	69fb      	ldr	r3, [r7, #28]
 800414e:	4413      	add	r3, r2
 8004150:	3334      	adds	r3, #52	@ 0x34
 8004152:	460a      	mov	r2, r1
 8004154:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004156:	68ba      	ldr	r2, [r7, #8]
 8004158:	69fb      	ldr	r3, [r7, #28]
 800415a:	4413      	add	r3, r2
 800415c:	781b      	ldrb	r3, [r3, #0]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d006      	beq.n	8004170 <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004162:	69fb      	ldr	r3, [r7, #28]
 8004164:	3301      	adds	r3, #1
 8004166:	61fb      	str	r3, [r7, #28]
 8004168:	69fb      	ldr	r3, [r7, #28]
 800416a:	2b0f      	cmp	r3, #15
 800416c:	d9e9      	bls.n	8004142 <prvInitialiseNewTask+0x6a>
 800416e:	e000      	b.n	8004172 <prvInitialiseNewTask+0x9a>
			{
				break;
 8004170:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004172:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004174:	2200      	movs	r2, #0
 8004176:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800417a:	e003      	b.n	8004184 <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800417c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800417e:	2200      	movs	r2, #0
 8004180:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004184:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004186:	2b06      	cmp	r3, #6
 8004188:	d901      	bls.n	800418e <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800418a:	2306      	movs	r3, #6
 800418c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800418e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004190:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004192:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004194:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004196:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004198:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800419a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800419c:	2200      	movs	r2, #0
 800419e:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80041a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041a2:	3304      	adds	r3, #4
 80041a4:	4618      	mov	r0, r3
 80041a6:	f7ff fe58 	bl	8003e5a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80041aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041ac:	3318      	adds	r3, #24
 80041ae:	4618      	mov	r0, r3
 80041b0:	f7ff fe53 	bl	8003e5a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80041b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80041b8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80041ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041bc:	f1c3 0207 	rsb	r2, r3, #7
 80041c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041c2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80041c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80041c8:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80041ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041cc:	2200      	movs	r2, #0
 80041ce:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80041d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041d2:	2200      	movs	r2, #0
 80041d4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80041d8:	683a      	ldr	r2, [r7, #0]
 80041da:	68f9      	ldr	r1, [r7, #12]
 80041dc:	69b8      	ldr	r0, [r7, #24]
 80041de:	f000 fdf3 	bl	8004dc8 <pxPortInitialiseStack>
 80041e2:	4602      	mov	r2, r0
 80041e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041e6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80041e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d002      	beq.n	80041f4 <prvInitialiseNewTask+0x11c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80041ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80041f2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80041f4:	bf00      	nop
 80041f6:	3720      	adds	r7, #32
 80041f8:	46bd      	mov	sp, r7
 80041fa:	bd80      	pop	{r7, pc}

080041fc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b082      	sub	sp, #8
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004204:	f000 fef2 	bl	8004fec <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004208:	4b2a      	ldr	r3, [pc, #168]	@ (80042b4 <prvAddNewTaskToReadyList+0xb8>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	3301      	adds	r3, #1
 800420e:	4a29      	ldr	r2, [pc, #164]	@ (80042b4 <prvAddNewTaskToReadyList+0xb8>)
 8004210:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004212:	4b29      	ldr	r3, [pc, #164]	@ (80042b8 <prvAddNewTaskToReadyList+0xbc>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d109      	bne.n	800422e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800421a:	4a27      	ldr	r2, [pc, #156]	@ (80042b8 <prvAddNewTaskToReadyList+0xbc>)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004220:	4b24      	ldr	r3, [pc, #144]	@ (80042b4 <prvAddNewTaskToReadyList+0xb8>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	2b01      	cmp	r3, #1
 8004226:	d110      	bne.n	800424a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004228:	f000 fc8a 	bl	8004b40 <prvInitialiseTaskLists>
 800422c:	e00d      	b.n	800424a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800422e:	4b23      	ldr	r3, [pc, #140]	@ (80042bc <prvAddNewTaskToReadyList+0xc0>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d109      	bne.n	800424a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004236:	4b20      	ldr	r3, [pc, #128]	@ (80042b8 <prvAddNewTaskToReadyList+0xbc>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004240:	429a      	cmp	r2, r3
 8004242:	d802      	bhi.n	800424a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004244:	4a1c      	ldr	r2, [pc, #112]	@ (80042b8 <prvAddNewTaskToReadyList+0xbc>)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800424a:	4b1d      	ldr	r3, [pc, #116]	@ (80042c0 <prvAddNewTaskToReadyList+0xc4>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	3301      	adds	r3, #1
 8004250:	4a1b      	ldr	r2, [pc, #108]	@ (80042c0 <prvAddNewTaskToReadyList+0xc4>)
 8004252:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004258:	2201      	movs	r2, #1
 800425a:	409a      	lsls	r2, r3
 800425c:	4b19      	ldr	r3, [pc, #100]	@ (80042c4 <prvAddNewTaskToReadyList+0xc8>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4313      	orrs	r3, r2
 8004262:	4a18      	ldr	r2, [pc, #96]	@ (80042c4 <prvAddNewTaskToReadyList+0xc8>)
 8004264:	6013      	str	r3, [r2, #0]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800426a:	4613      	mov	r3, r2
 800426c:	009b      	lsls	r3, r3, #2
 800426e:	4413      	add	r3, r2
 8004270:	009b      	lsls	r3, r3, #2
 8004272:	4a15      	ldr	r2, [pc, #84]	@ (80042c8 <prvAddNewTaskToReadyList+0xcc>)
 8004274:	441a      	add	r2, r3
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	3304      	adds	r3, #4
 800427a:	4619      	mov	r1, r3
 800427c:	4610      	mov	r0, r2
 800427e:	f7ff fdf9 	bl	8003e74 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004282:	f000 fee9 	bl	8005058 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004286:	4b0d      	ldr	r3, [pc, #52]	@ (80042bc <prvAddNewTaskToReadyList+0xc0>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d00e      	beq.n	80042ac <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800428e:	4b0a      	ldr	r3, [pc, #40]	@ (80042b8 <prvAddNewTaskToReadyList+0xbc>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004298:	429a      	cmp	r2, r3
 800429a:	d207      	bcs.n	80042ac <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800429c:	4b0b      	ldr	r3, [pc, #44]	@ (80042cc <prvAddNewTaskToReadyList+0xd0>)
 800429e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80042a2:	601a      	str	r2, [r3, #0]
 80042a4:	f3bf 8f4f 	dsb	sy
 80042a8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80042ac:	bf00      	nop
 80042ae:	3708      	adds	r7, #8
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}
 80042b4:	20000a8c 	.word	0x20000a8c
 80042b8:	2000098c 	.word	0x2000098c
 80042bc:	20000a98 	.word	0x20000a98
 80042c0:	20000aa8 	.word	0x20000aa8
 80042c4:	20000a94 	.word	0x20000a94
 80042c8:	20000990 	.word	0x20000990
 80042cc:	e000ed04 	.word	0xe000ed04

080042d0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b084      	sub	sp, #16
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80042d8:	2300      	movs	r3, #0
 80042da:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d01a      	beq.n	8004318 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80042e2:	4b15      	ldr	r3, [pc, #84]	@ (8004338 <vTaskDelay+0x68>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d00d      	beq.n	8004306 <vTaskDelay+0x36>
	__asm volatile
 80042ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042ee:	b672      	cpsid	i
 80042f0:	f383 8811 	msr	BASEPRI, r3
 80042f4:	f3bf 8f6f 	isb	sy
 80042f8:	f3bf 8f4f 	dsb	sy
 80042fc:	b662      	cpsie	i
 80042fe:	60bb      	str	r3, [r7, #8]
}
 8004300:	bf00      	nop
 8004302:	bf00      	nop
 8004304:	e7fd      	b.n	8004302 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8004306:	f000 fa15 	bl	8004734 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800430a:	2100      	movs	r1, #0
 800430c:	6878      	ldr	r0, [r7, #4]
 800430e:	f000 fcf5 	bl	8004cfc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004312:	f000 fa1d 	bl	8004750 <xTaskResumeAll>
 8004316:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d107      	bne.n	800432e <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 800431e:	4b07      	ldr	r3, [pc, #28]	@ (800433c <vTaskDelay+0x6c>)
 8004320:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004324:	601a      	str	r2, [r3, #0]
 8004326:	f3bf 8f4f 	dsb	sy
 800432a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800432e:	bf00      	nop
 8004330:	3710      	adds	r7, #16
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}
 8004336:	bf00      	nop
 8004338:	20000ab4 	.word	0x20000ab4
 800433c:	e000ed04 	.word	0xe000ed04

08004340 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 8004340:	b580      	push	{r7, lr}
 8004342:	b088      	sub	sp, #32
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 800434c:	69bb      	ldr	r3, [r7, #24]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d10d      	bne.n	800436e <eTaskGetState+0x2e>
	__asm volatile
 8004352:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004356:	b672      	cpsid	i
 8004358:	f383 8811 	msr	BASEPRI, r3
 800435c:	f3bf 8f6f 	isb	sy
 8004360:	f3bf 8f4f 	dsb	sy
 8004364:	b662      	cpsie	i
 8004366:	60bb      	str	r3, [r7, #8]
}
 8004368:	bf00      	nop
 800436a:	bf00      	nop
 800436c:	e7fd      	b.n	800436a <eTaskGetState+0x2a>

		if( pxTCB == pxCurrentTCB )
 800436e:	4b24      	ldr	r3, [pc, #144]	@ (8004400 <eTaskGetState+0xc0>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	69ba      	ldr	r2, [r7, #24]
 8004374:	429a      	cmp	r2, r3
 8004376:	d102      	bne.n	800437e <eTaskGetState+0x3e>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 8004378:	2300      	movs	r3, #0
 800437a:	77fb      	strb	r3, [r7, #31]
 800437c:	e03a      	b.n	80043f4 <eTaskGetState+0xb4>
		}
		else
		{
			taskENTER_CRITICAL();
 800437e:	f000 fe35 	bl	8004fec <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 8004382:	69bb      	ldr	r3, [r7, #24]
 8004384:	695b      	ldr	r3, [r3, #20]
 8004386:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 8004388:	4b1e      	ldr	r3, [pc, #120]	@ (8004404 <eTaskGetState+0xc4>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 800438e:	4b1e      	ldr	r3, [pc, #120]	@ (8004408 <eTaskGetState+0xc8>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 8004394:	f000 fe60 	bl	8005058 <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 8004398:	697a      	ldr	r2, [r7, #20]
 800439a:	693b      	ldr	r3, [r7, #16]
 800439c:	429a      	cmp	r2, r3
 800439e:	d003      	beq.n	80043a8 <eTaskGetState+0x68>
 80043a0:	697a      	ldr	r2, [r7, #20]
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	429a      	cmp	r2, r3
 80043a6:	d102      	bne.n	80043ae <eTaskGetState+0x6e>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 80043a8:	2302      	movs	r3, #2
 80043aa:	77fb      	strb	r3, [r7, #31]
 80043ac:	e022      	b.n	80043f4 <eTaskGetState+0xb4>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 80043ae:	697b      	ldr	r3, [r7, #20]
 80043b0:	4a16      	ldr	r2, [pc, #88]	@ (800440c <eTaskGetState+0xcc>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d112      	bne.n	80043dc <eTaskGetState+0x9c>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 80043b6:	69bb      	ldr	r3, [r7, #24]
 80043b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d10b      	bne.n	80043d6 <eTaskGetState+0x96>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 80043be:	69bb      	ldr	r3, [r7, #24]
 80043c0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80043c4:	b2db      	uxtb	r3, r3
 80043c6:	2b01      	cmp	r3, #1
 80043c8:	d102      	bne.n	80043d0 <eTaskGetState+0x90>
							{
								eReturn = eBlocked;
 80043ca:	2302      	movs	r3, #2
 80043cc:	77fb      	strb	r3, [r7, #31]
 80043ce:	e011      	b.n	80043f4 <eTaskGetState+0xb4>
							}
							else
							{
								eReturn = eSuspended;
 80043d0:	2303      	movs	r3, #3
 80043d2:	77fb      	strb	r3, [r7, #31]
 80043d4:	e00e      	b.n	80043f4 <eTaskGetState+0xb4>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 80043d6:	2302      	movs	r3, #2
 80043d8:	77fb      	strb	r3, [r7, #31]
 80043da:	e00b      	b.n	80043f4 <eTaskGetState+0xb4>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 80043dc:	697b      	ldr	r3, [r7, #20]
 80043de:	4a0c      	ldr	r2, [pc, #48]	@ (8004410 <eTaskGetState+0xd0>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d002      	beq.n	80043ea <eTaskGetState+0xaa>
 80043e4:	697b      	ldr	r3, [r7, #20]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d102      	bne.n	80043f0 <eTaskGetState+0xb0>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 80043ea:	2304      	movs	r3, #4
 80043ec:	77fb      	strb	r3, [r7, #31]
 80043ee:	e001      	b.n	80043f4 <eTaskGetState+0xb4>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 80043f0:	2301      	movs	r3, #1
 80043f2:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 80043f4:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 80043f6:	4618      	mov	r0, r3
 80043f8:	3720      	adds	r7, #32
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bd80      	pop	{r7, pc}
 80043fe:	bf00      	nop
 8004400:	2000098c 	.word	0x2000098c
 8004404:	20000a44 	.word	0x20000a44
 8004408:	20000a48 	.word	0x20000a48
 800440c:	20000a78 	.word	0x20000a78
 8004410:	20000a60 	.word	0x20000a60

08004414 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8004414:	b580      	push	{r7, lr}
 8004416:	b084      	sub	sp, #16
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800441c:	f000 fde6 	bl	8004fec <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d102      	bne.n	800442c <vTaskSuspend+0x18>
 8004426:	4b3e      	ldr	r3, [pc, #248]	@ (8004520 <vTaskSuspend+0x10c>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	e000      	b.n	800442e <vTaskSuspend+0x1a>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	3304      	adds	r3, #4
 8004434:	4618      	mov	r0, r3
 8004436:	f7ff fd7a 	bl	8003f2e <uxListRemove>
 800443a:	4603      	mov	r3, r0
 800443c:	2b00      	cmp	r3, #0
 800443e:	d115      	bne.n	800446c <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004444:	4937      	ldr	r1, [pc, #220]	@ (8004524 <vTaskSuspend+0x110>)
 8004446:	4613      	mov	r3, r2
 8004448:	009b      	lsls	r3, r3, #2
 800444a:	4413      	add	r3, r2
 800444c:	009b      	lsls	r3, r3, #2
 800444e:	440b      	add	r3, r1
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d10a      	bne.n	800446c <vTaskSuspend+0x58>
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800445a:	2201      	movs	r2, #1
 800445c:	fa02 f303 	lsl.w	r3, r2, r3
 8004460:	43da      	mvns	r2, r3
 8004462:	4b31      	ldr	r3, [pc, #196]	@ (8004528 <vTaskSuspend+0x114>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4013      	ands	r3, r2
 8004468:	4a2f      	ldr	r2, [pc, #188]	@ (8004528 <vTaskSuspend+0x114>)
 800446a:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004470:	2b00      	cmp	r3, #0
 8004472:	d004      	beq.n	800447e <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	3318      	adds	r3, #24
 8004478:	4618      	mov	r0, r3
 800447a:	f7ff fd58 	bl	8003f2e <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	3304      	adds	r3, #4
 8004482:	4619      	mov	r1, r3
 8004484:	4829      	ldr	r0, [pc, #164]	@ (800452c <vTaskSuspend+0x118>)
 8004486:	f7ff fcf5 	bl	8003e74 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004490:	b2db      	uxtb	r3, r3
 8004492:	2b01      	cmp	r3, #1
 8004494:	d103      	bne.n	800449e <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	2200      	movs	r2, #0
 800449a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800449e:	f000 fddb 	bl	8005058 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 80044a2:	4b23      	ldr	r3, [pc, #140]	@ (8004530 <vTaskSuspend+0x11c>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d005      	beq.n	80044b6 <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 80044aa:	f000 fd9f 	bl	8004fec <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 80044ae:	f000 fbe7 	bl	8004c80 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 80044b2:	f000 fdd1 	bl	8005058 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 80044b6:	4b1a      	ldr	r3, [pc, #104]	@ (8004520 <vTaskSuspend+0x10c>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	68fa      	ldr	r2, [r7, #12]
 80044bc:	429a      	cmp	r2, r3
 80044be:	d12a      	bne.n	8004516 <vTaskSuspend+0x102>
		{
			if( xSchedulerRunning != pdFALSE )
 80044c0:	4b1b      	ldr	r3, [pc, #108]	@ (8004530 <vTaskSuspend+0x11c>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d01a      	beq.n	80044fe <vTaskSuspend+0xea>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 80044c8:	4b1a      	ldr	r3, [pc, #104]	@ (8004534 <vTaskSuspend+0x120>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d00d      	beq.n	80044ec <vTaskSuspend+0xd8>
	__asm volatile
 80044d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044d4:	b672      	cpsid	i
 80044d6:	f383 8811 	msr	BASEPRI, r3
 80044da:	f3bf 8f6f 	isb	sy
 80044de:	f3bf 8f4f 	dsb	sy
 80044e2:	b662      	cpsie	i
 80044e4:	60bb      	str	r3, [r7, #8]
}
 80044e6:	bf00      	nop
 80044e8:	bf00      	nop
 80044ea:	e7fd      	b.n	80044e8 <vTaskSuspend+0xd4>
				portYIELD_WITHIN_API();
 80044ec:	4b12      	ldr	r3, [pc, #72]	@ (8004538 <vTaskSuspend+0x124>)
 80044ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80044f2:	601a      	str	r2, [r3, #0]
 80044f4:	f3bf 8f4f 	dsb	sy
 80044f8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80044fc:	e00b      	b.n	8004516 <vTaskSuspend+0x102>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 80044fe:	4b0b      	ldr	r3, [pc, #44]	@ (800452c <vTaskSuspend+0x118>)
 8004500:	681a      	ldr	r2, [r3, #0]
 8004502:	4b0e      	ldr	r3, [pc, #56]	@ (800453c <vTaskSuspend+0x128>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	429a      	cmp	r2, r3
 8004508:	d103      	bne.n	8004512 <vTaskSuspend+0xfe>
					pxCurrentTCB = NULL;
 800450a:	4b05      	ldr	r3, [pc, #20]	@ (8004520 <vTaskSuspend+0x10c>)
 800450c:	2200      	movs	r2, #0
 800450e:	601a      	str	r2, [r3, #0]
	}
 8004510:	e001      	b.n	8004516 <vTaskSuspend+0x102>
					vTaskSwitchContext();
 8004512:	f000 fa79 	bl	8004a08 <vTaskSwitchContext>
	}
 8004516:	bf00      	nop
 8004518:	3710      	adds	r7, #16
 800451a:	46bd      	mov	sp, r7
 800451c:	bd80      	pop	{r7, pc}
 800451e:	bf00      	nop
 8004520:	2000098c 	.word	0x2000098c
 8004524:	20000990 	.word	0x20000990
 8004528:	20000a94 	.word	0x20000a94
 800452c:	20000a78 	.word	0x20000a78
 8004530:	20000a98 	.word	0x20000a98
 8004534:	20000ab4 	.word	0x20000ab4
 8004538:	e000ed04 	.word	0xe000ed04
 800453c:	20000a8c 	.word	0x20000a8c

08004540 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8004540:	b480      	push	{r7}
 8004542:	b087      	sub	sp, #28
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8004548:	2300      	movs	r3, #0
 800454a:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d10d      	bne.n	8004572 <prvTaskIsTaskSuspended+0x32>
	__asm volatile
 8004556:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800455a:	b672      	cpsid	i
 800455c:	f383 8811 	msr	BASEPRI, r3
 8004560:	f3bf 8f6f 	isb	sy
 8004564:	f3bf 8f4f 	dsb	sy
 8004568:	b662      	cpsie	i
 800456a:	60fb      	str	r3, [r7, #12]
}
 800456c:	bf00      	nop
 800456e:	bf00      	nop
 8004570:	e7fd      	b.n	800456e <prvTaskIsTaskSuspended+0x2e>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004572:	693b      	ldr	r3, [r7, #16]
 8004574:	695b      	ldr	r3, [r3, #20]
 8004576:	4a0a      	ldr	r2, [pc, #40]	@ (80045a0 <prvTaskIsTaskSuspended+0x60>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d10a      	bne.n	8004592 <prvTaskIsTaskSuspended+0x52>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800457c:	693b      	ldr	r3, [r7, #16]
 800457e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004580:	4a08      	ldr	r2, [pc, #32]	@ (80045a4 <prvTaskIsTaskSuspended+0x64>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d005      	beq.n	8004592 <prvTaskIsTaskSuspended+0x52>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8004586:	693b      	ldr	r3, [r7, #16]
 8004588:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800458a:	2b00      	cmp	r3, #0
 800458c:	d101      	bne.n	8004592 <prvTaskIsTaskSuspended+0x52>
				{
					xReturn = pdTRUE;
 800458e:	2301      	movs	r3, #1
 8004590:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004592:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8004594:	4618      	mov	r0, r3
 8004596:	371c      	adds	r7, #28
 8004598:	46bd      	mov	sp, r7
 800459a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459e:	4770      	bx	lr
 80045a0:	20000a78 	.word	0x20000a78
 80045a4:	20000a4c 	.word	0x20000a4c

080045a8 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b084      	sub	sp, #16
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d10d      	bne.n	80045d6 <vTaskResume+0x2e>
	__asm volatile
 80045ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045be:	b672      	cpsid	i
 80045c0:	f383 8811 	msr	BASEPRI, r3
 80045c4:	f3bf 8f6f 	isb	sy
 80045c8:	f3bf 8f4f 	dsb	sy
 80045cc:	b662      	cpsie	i
 80045ce:	60bb      	str	r3, [r7, #8]
}
 80045d0:	bf00      	nop
 80045d2:	bf00      	nop
 80045d4:	e7fd      	b.n	80045d2 <vTaskResume+0x2a>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 80045d6:	4b20      	ldr	r3, [pc, #128]	@ (8004658 <vTaskResume+0xb0>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	68fa      	ldr	r2, [r7, #12]
 80045dc:	429a      	cmp	r2, r3
 80045de:	d037      	beq.n	8004650 <vTaskResume+0xa8>
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d034      	beq.n	8004650 <vTaskResume+0xa8>
		{
			taskENTER_CRITICAL();
 80045e6:	f000 fd01 	bl	8004fec <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 80045ea:	68f8      	ldr	r0, [r7, #12]
 80045ec:	f7ff ffa8 	bl	8004540 <prvTaskIsTaskSuspended>
 80045f0:	4603      	mov	r3, r0
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d02a      	beq.n	800464c <vTaskResume+0xa4>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	3304      	adds	r3, #4
 80045fa:	4618      	mov	r0, r3
 80045fc:	f7ff fc97 	bl	8003f2e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004604:	2201      	movs	r2, #1
 8004606:	409a      	lsls	r2, r3
 8004608:	4b14      	ldr	r3, [pc, #80]	@ (800465c <vTaskResume+0xb4>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4313      	orrs	r3, r2
 800460e:	4a13      	ldr	r2, [pc, #76]	@ (800465c <vTaskResume+0xb4>)
 8004610:	6013      	str	r3, [r2, #0]
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004616:	4613      	mov	r3, r2
 8004618:	009b      	lsls	r3, r3, #2
 800461a:	4413      	add	r3, r2
 800461c:	009b      	lsls	r3, r3, #2
 800461e:	4a10      	ldr	r2, [pc, #64]	@ (8004660 <vTaskResume+0xb8>)
 8004620:	441a      	add	r2, r3
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	3304      	adds	r3, #4
 8004626:	4619      	mov	r1, r3
 8004628:	4610      	mov	r0, r2
 800462a:	f7ff fc23 	bl	8003e74 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004632:	4b09      	ldr	r3, [pc, #36]	@ (8004658 <vTaskResume+0xb0>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004638:	429a      	cmp	r2, r3
 800463a:	d307      	bcc.n	800464c <vTaskResume+0xa4>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 800463c:	4b09      	ldr	r3, [pc, #36]	@ (8004664 <vTaskResume+0xbc>)
 800463e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004642:	601a      	str	r2, [r3, #0]
 8004644:	f3bf 8f4f 	dsb	sy
 8004648:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 800464c:	f000 fd04 	bl	8005058 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004650:	bf00      	nop
 8004652:	3710      	adds	r7, #16
 8004654:	46bd      	mov	sp, r7
 8004656:	bd80      	pop	{r7, pc}
 8004658:	2000098c 	.word	0x2000098c
 800465c:	20000a94 	.word	0x20000a94
 8004660:	20000990 	.word	0x20000990
 8004664:	e000ed04 	.word	0xe000ed04

08004668 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b08a      	sub	sp, #40	@ 0x28
 800466c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800466e:	2300      	movs	r3, #0
 8004670:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004672:	2300      	movs	r3, #0
 8004674:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004676:	463a      	mov	r2, r7
 8004678:	1d39      	adds	r1, r7, #4
 800467a:	f107 0308 	add.w	r3, r7, #8
 800467e:	4618      	mov	r0, r3
 8004680:	f7fb ffac 	bl	80005dc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004684:	6839      	ldr	r1, [r7, #0]
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	68ba      	ldr	r2, [r7, #8]
 800468a:	9202      	str	r2, [sp, #8]
 800468c:	9301      	str	r3, [sp, #4]
 800468e:	2300      	movs	r3, #0
 8004690:	9300      	str	r3, [sp, #0]
 8004692:	2300      	movs	r3, #0
 8004694:	460a      	mov	r2, r1
 8004696:	4921      	ldr	r1, [pc, #132]	@ (800471c <vTaskStartScheduler+0xb4>)
 8004698:	4821      	ldr	r0, [pc, #132]	@ (8004720 <vTaskStartScheduler+0xb8>)
 800469a:	f7ff fc72 	bl	8003f82 <xTaskCreateStatic>
 800469e:	4603      	mov	r3, r0
 80046a0:	4a20      	ldr	r2, [pc, #128]	@ (8004724 <vTaskStartScheduler+0xbc>)
 80046a2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80046a4:	4b1f      	ldr	r3, [pc, #124]	@ (8004724 <vTaskStartScheduler+0xbc>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d002      	beq.n	80046b2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80046ac:	2301      	movs	r3, #1
 80046ae:	617b      	str	r3, [r7, #20]
 80046b0:	e001      	b.n	80046b6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80046b2:	2300      	movs	r3, #0
 80046b4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80046b6:	697b      	ldr	r3, [r7, #20]
 80046b8:	2b01      	cmp	r3, #1
 80046ba:	d118      	bne.n	80046ee <vTaskStartScheduler+0x86>
	__asm volatile
 80046bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046c0:	b672      	cpsid	i
 80046c2:	f383 8811 	msr	BASEPRI, r3
 80046c6:	f3bf 8f6f 	isb	sy
 80046ca:	f3bf 8f4f 	dsb	sy
 80046ce:	b662      	cpsie	i
 80046d0:	613b      	str	r3, [r7, #16]
}
 80046d2:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80046d4:	4b14      	ldr	r3, [pc, #80]	@ (8004728 <vTaskStartScheduler+0xc0>)
 80046d6:	f04f 32ff 	mov.w	r2, #4294967295
 80046da:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80046dc:	4b13      	ldr	r3, [pc, #76]	@ (800472c <vTaskStartScheduler+0xc4>)
 80046de:	2201      	movs	r2, #1
 80046e0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80046e2:	4b13      	ldr	r3, [pc, #76]	@ (8004730 <vTaskStartScheduler+0xc8>)
 80046e4:	2200      	movs	r2, #0
 80046e6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80046e8:	f000 fc02 	bl	8004ef0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80046ec:	e011      	b.n	8004712 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80046ee:	697b      	ldr	r3, [r7, #20]
 80046f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046f4:	d10d      	bne.n	8004712 <vTaskStartScheduler+0xaa>
	__asm volatile
 80046f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046fa:	b672      	cpsid	i
 80046fc:	f383 8811 	msr	BASEPRI, r3
 8004700:	f3bf 8f6f 	isb	sy
 8004704:	f3bf 8f4f 	dsb	sy
 8004708:	b662      	cpsie	i
 800470a:	60fb      	str	r3, [r7, #12]
}
 800470c:	bf00      	nop
 800470e:	bf00      	nop
 8004710:	e7fd      	b.n	800470e <vTaskStartScheduler+0xa6>
}
 8004712:	bf00      	nop
 8004714:	3718      	adds	r7, #24
 8004716:	46bd      	mov	sp, r7
 8004718:	bd80      	pop	{r7, pc}
 800471a:	bf00      	nop
 800471c:	08007078 	.word	0x08007078
 8004720:	08004b11 	.word	0x08004b11
 8004724:	20000ab0 	.word	0x20000ab0
 8004728:	20000aac 	.word	0x20000aac
 800472c:	20000a98 	.word	0x20000a98
 8004730:	20000a90 	.word	0x20000a90

08004734 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004734:	b480      	push	{r7}
 8004736:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004738:	4b04      	ldr	r3, [pc, #16]	@ (800474c <vTaskSuspendAll+0x18>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	3301      	adds	r3, #1
 800473e:	4a03      	ldr	r2, [pc, #12]	@ (800474c <vTaskSuspendAll+0x18>)
 8004740:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8004742:	bf00      	nop
 8004744:	46bd      	mov	sp, r7
 8004746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474a:	4770      	bx	lr
 800474c:	20000ab4 	.word	0x20000ab4

08004750 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b084      	sub	sp, #16
 8004754:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004756:	2300      	movs	r3, #0
 8004758:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800475a:	2300      	movs	r3, #0
 800475c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800475e:	4b43      	ldr	r3, [pc, #268]	@ (800486c <xTaskResumeAll+0x11c>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d10d      	bne.n	8004782 <xTaskResumeAll+0x32>
	__asm volatile
 8004766:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800476a:	b672      	cpsid	i
 800476c:	f383 8811 	msr	BASEPRI, r3
 8004770:	f3bf 8f6f 	isb	sy
 8004774:	f3bf 8f4f 	dsb	sy
 8004778:	b662      	cpsie	i
 800477a:	603b      	str	r3, [r7, #0]
}
 800477c:	bf00      	nop
 800477e:	bf00      	nop
 8004780:	e7fd      	b.n	800477e <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004782:	f000 fc33 	bl	8004fec <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004786:	4b39      	ldr	r3, [pc, #228]	@ (800486c <xTaskResumeAll+0x11c>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	3b01      	subs	r3, #1
 800478c:	4a37      	ldr	r2, [pc, #220]	@ (800486c <xTaskResumeAll+0x11c>)
 800478e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004790:	4b36      	ldr	r3, [pc, #216]	@ (800486c <xTaskResumeAll+0x11c>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d161      	bne.n	800485c <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004798:	4b35      	ldr	r3, [pc, #212]	@ (8004870 <xTaskResumeAll+0x120>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d05d      	beq.n	800485c <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80047a0:	e02e      	b.n	8004800 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80047a2:	4b34      	ldr	r3, [pc, #208]	@ (8004874 <xTaskResumeAll+0x124>)
 80047a4:	68db      	ldr	r3, [r3, #12]
 80047a6:	68db      	ldr	r3, [r3, #12]
 80047a8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	3318      	adds	r3, #24
 80047ae:	4618      	mov	r0, r3
 80047b0:	f7ff fbbd 	bl	8003f2e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	3304      	adds	r3, #4
 80047b8:	4618      	mov	r0, r3
 80047ba:	f7ff fbb8 	bl	8003f2e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047c2:	2201      	movs	r2, #1
 80047c4:	409a      	lsls	r2, r3
 80047c6:	4b2c      	ldr	r3, [pc, #176]	@ (8004878 <xTaskResumeAll+0x128>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4313      	orrs	r3, r2
 80047cc:	4a2a      	ldr	r2, [pc, #168]	@ (8004878 <xTaskResumeAll+0x128>)
 80047ce:	6013      	str	r3, [r2, #0]
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047d4:	4613      	mov	r3, r2
 80047d6:	009b      	lsls	r3, r3, #2
 80047d8:	4413      	add	r3, r2
 80047da:	009b      	lsls	r3, r3, #2
 80047dc:	4a27      	ldr	r2, [pc, #156]	@ (800487c <xTaskResumeAll+0x12c>)
 80047de:	441a      	add	r2, r3
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	3304      	adds	r3, #4
 80047e4:	4619      	mov	r1, r3
 80047e6:	4610      	mov	r0, r2
 80047e8:	f7ff fb44 	bl	8003e74 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047f0:	4b23      	ldr	r3, [pc, #140]	@ (8004880 <xTaskResumeAll+0x130>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047f6:	429a      	cmp	r2, r3
 80047f8:	d302      	bcc.n	8004800 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 80047fa:	4b22      	ldr	r3, [pc, #136]	@ (8004884 <xTaskResumeAll+0x134>)
 80047fc:	2201      	movs	r2, #1
 80047fe:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004800:	4b1c      	ldr	r3, [pc, #112]	@ (8004874 <xTaskResumeAll+0x124>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d1cc      	bne.n	80047a2 <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d001      	beq.n	8004812 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800480e:	f000 fa37 	bl	8004c80 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004812:	4b1d      	ldr	r3, [pc, #116]	@ (8004888 <xTaskResumeAll+0x138>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d010      	beq.n	8004840 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800481e:	f000 f837 	bl	8004890 <xTaskIncrementTick>
 8004822:	4603      	mov	r3, r0
 8004824:	2b00      	cmp	r3, #0
 8004826:	d002      	beq.n	800482e <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8004828:	4b16      	ldr	r3, [pc, #88]	@ (8004884 <xTaskResumeAll+0x134>)
 800482a:	2201      	movs	r2, #1
 800482c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	3b01      	subs	r3, #1
 8004832:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d1f1      	bne.n	800481e <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 800483a:	4b13      	ldr	r3, [pc, #76]	@ (8004888 <xTaskResumeAll+0x138>)
 800483c:	2200      	movs	r2, #0
 800483e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004840:	4b10      	ldr	r3, [pc, #64]	@ (8004884 <xTaskResumeAll+0x134>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d009      	beq.n	800485c <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004848:	2301      	movs	r3, #1
 800484a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800484c:	4b0f      	ldr	r3, [pc, #60]	@ (800488c <xTaskResumeAll+0x13c>)
 800484e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004852:	601a      	str	r2, [r3, #0]
 8004854:	f3bf 8f4f 	dsb	sy
 8004858:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800485c:	f000 fbfc 	bl	8005058 <vPortExitCritical>

	return xAlreadyYielded;
 8004860:	68bb      	ldr	r3, [r7, #8]
}
 8004862:	4618      	mov	r0, r3
 8004864:	3710      	adds	r7, #16
 8004866:	46bd      	mov	sp, r7
 8004868:	bd80      	pop	{r7, pc}
 800486a:	bf00      	nop
 800486c:	20000ab4 	.word	0x20000ab4
 8004870:	20000a8c 	.word	0x20000a8c
 8004874:	20000a4c 	.word	0x20000a4c
 8004878:	20000a94 	.word	0x20000a94
 800487c:	20000990 	.word	0x20000990
 8004880:	2000098c 	.word	0x2000098c
 8004884:	20000aa0 	.word	0x20000aa0
 8004888:	20000a9c 	.word	0x20000a9c
 800488c:	e000ed04 	.word	0xe000ed04

08004890 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b086      	sub	sp, #24
 8004894:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004896:	2300      	movs	r3, #0
 8004898:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800489a:	4b50      	ldr	r3, [pc, #320]	@ (80049dc <xTaskIncrementTick+0x14c>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	f040 808b 	bne.w	80049ba <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80048a4:	4b4e      	ldr	r3, [pc, #312]	@ (80049e0 <xTaskIncrementTick+0x150>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	3301      	adds	r3, #1
 80048aa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80048ac:	4a4c      	ldr	r2, [pc, #304]	@ (80049e0 <xTaskIncrementTick+0x150>)
 80048ae:	693b      	ldr	r3, [r7, #16]
 80048b0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80048b2:	693b      	ldr	r3, [r7, #16]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d123      	bne.n	8004900 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 80048b8:	4b4a      	ldr	r3, [pc, #296]	@ (80049e4 <xTaskIncrementTick+0x154>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d00d      	beq.n	80048de <xTaskIncrementTick+0x4e>
	__asm volatile
 80048c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048c6:	b672      	cpsid	i
 80048c8:	f383 8811 	msr	BASEPRI, r3
 80048cc:	f3bf 8f6f 	isb	sy
 80048d0:	f3bf 8f4f 	dsb	sy
 80048d4:	b662      	cpsie	i
 80048d6:	603b      	str	r3, [r7, #0]
}
 80048d8:	bf00      	nop
 80048da:	bf00      	nop
 80048dc:	e7fd      	b.n	80048da <xTaskIncrementTick+0x4a>
 80048de:	4b41      	ldr	r3, [pc, #260]	@ (80049e4 <xTaskIncrementTick+0x154>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	60fb      	str	r3, [r7, #12]
 80048e4:	4b40      	ldr	r3, [pc, #256]	@ (80049e8 <xTaskIncrementTick+0x158>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4a3e      	ldr	r2, [pc, #248]	@ (80049e4 <xTaskIncrementTick+0x154>)
 80048ea:	6013      	str	r3, [r2, #0]
 80048ec:	4a3e      	ldr	r2, [pc, #248]	@ (80049e8 <xTaskIncrementTick+0x158>)
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	6013      	str	r3, [r2, #0]
 80048f2:	4b3e      	ldr	r3, [pc, #248]	@ (80049ec <xTaskIncrementTick+0x15c>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	3301      	adds	r3, #1
 80048f8:	4a3c      	ldr	r2, [pc, #240]	@ (80049ec <xTaskIncrementTick+0x15c>)
 80048fa:	6013      	str	r3, [r2, #0]
 80048fc:	f000 f9c0 	bl	8004c80 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004900:	4b3b      	ldr	r3, [pc, #236]	@ (80049f0 <xTaskIncrementTick+0x160>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	693a      	ldr	r2, [r7, #16]
 8004906:	429a      	cmp	r2, r3
 8004908:	d348      	bcc.n	800499c <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800490a:	4b36      	ldr	r3, [pc, #216]	@ (80049e4 <xTaskIncrementTick+0x154>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d104      	bne.n	800491e <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004914:	4b36      	ldr	r3, [pc, #216]	@ (80049f0 <xTaskIncrementTick+0x160>)
 8004916:	f04f 32ff 	mov.w	r2, #4294967295
 800491a:	601a      	str	r2, [r3, #0]
					break;
 800491c:	e03e      	b.n	800499c <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800491e:	4b31      	ldr	r3, [pc, #196]	@ (80049e4 <xTaskIncrementTick+0x154>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	68db      	ldr	r3, [r3, #12]
 8004924:	68db      	ldr	r3, [r3, #12]
 8004926:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004928:	68bb      	ldr	r3, [r7, #8]
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800492e:	693a      	ldr	r2, [r7, #16]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	429a      	cmp	r2, r3
 8004934:	d203      	bcs.n	800493e <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004936:	4a2e      	ldr	r2, [pc, #184]	@ (80049f0 <xTaskIncrementTick+0x160>)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800493c:	e02e      	b.n	800499c <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800493e:	68bb      	ldr	r3, [r7, #8]
 8004940:	3304      	adds	r3, #4
 8004942:	4618      	mov	r0, r3
 8004944:	f7ff faf3 	bl	8003f2e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800494c:	2b00      	cmp	r3, #0
 800494e:	d004      	beq.n	800495a <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	3318      	adds	r3, #24
 8004954:	4618      	mov	r0, r3
 8004956:	f7ff faea 	bl	8003f2e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800495a:	68bb      	ldr	r3, [r7, #8]
 800495c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800495e:	2201      	movs	r2, #1
 8004960:	409a      	lsls	r2, r3
 8004962:	4b24      	ldr	r3, [pc, #144]	@ (80049f4 <xTaskIncrementTick+0x164>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4313      	orrs	r3, r2
 8004968:	4a22      	ldr	r2, [pc, #136]	@ (80049f4 <xTaskIncrementTick+0x164>)
 800496a:	6013      	str	r3, [r2, #0]
 800496c:	68bb      	ldr	r3, [r7, #8]
 800496e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004970:	4613      	mov	r3, r2
 8004972:	009b      	lsls	r3, r3, #2
 8004974:	4413      	add	r3, r2
 8004976:	009b      	lsls	r3, r3, #2
 8004978:	4a1f      	ldr	r2, [pc, #124]	@ (80049f8 <xTaskIncrementTick+0x168>)
 800497a:	441a      	add	r2, r3
 800497c:	68bb      	ldr	r3, [r7, #8]
 800497e:	3304      	adds	r3, #4
 8004980:	4619      	mov	r1, r3
 8004982:	4610      	mov	r0, r2
 8004984:	f7ff fa76 	bl	8003e74 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800498c:	4b1b      	ldr	r3, [pc, #108]	@ (80049fc <xTaskIncrementTick+0x16c>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004992:	429a      	cmp	r2, r3
 8004994:	d3b9      	bcc.n	800490a <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 8004996:	2301      	movs	r3, #1
 8004998:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800499a:	e7b6      	b.n	800490a <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800499c:	4b17      	ldr	r3, [pc, #92]	@ (80049fc <xTaskIncrementTick+0x16c>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049a2:	4915      	ldr	r1, [pc, #84]	@ (80049f8 <xTaskIncrementTick+0x168>)
 80049a4:	4613      	mov	r3, r2
 80049a6:	009b      	lsls	r3, r3, #2
 80049a8:	4413      	add	r3, r2
 80049aa:	009b      	lsls	r3, r3, #2
 80049ac:	440b      	add	r3, r1
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	2b01      	cmp	r3, #1
 80049b2:	d907      	bls.n	80049c4 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 80049b4:	2301      	movs	r3, #1
 80049b6:	617b      	str	r3, [r7, #20]
 80049b8:	e004      	b.n	80049c4 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80049ba:	4b11      	ldr	r3, [pc, #68]	@ (8004a00 <xTaskIncrementTick+0x170>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	3301      	adds	r3, #1
 80049c0:	4a0f      	ldr	r2, [pc, #60]	@ (8004a00 <xTaskIncrementTick+0x170>)
 80049c2:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80049c4:	4b0f      	ldr	r3, [pc, #60]	@ (8004a04 <xTaskIncrementTick+0x174>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d001      	beq.n	80049d0 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 80049cc:	2301      	movs	r3, #1
 80049ce:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80049d0:	697b      	ldr	r3, [r7, #20]
}
 80049d2:	4618      	mov	r0, r3
 80049d4:	3718      	adds	r7, #24
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bd80      	pop	{r7, pc}
 80049da:	bf00      	nop
 80049dc:	20000ab4 	.word	0x20000ab4
 80049e0:	20000a90 	.word	0x20000a90
 80049e4:	20000a44 	.word	0x20000a44
 80049e8:	20000a48 	.word	0x20000a48
 80049ec:	20000aa4 	.word	0x20000aa4
 80049f0:	20000aac 	.word	0x20000aac
 80049f4:	20000a94 	.word	0x20000a94
 80049f8:	20000990 	.word	0x20000990
 80049fc:	2000098c 	.word	0x2000098c
 8004a00:	20000a9c 	.word	0x20000a9c
 8004a04:	20000aa0 	.word	0x20000aa0

08004a08 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b088      	sub	sp, #32
 8004a0c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004a0e:	4b3b      	ldr	r3, [pc, #236]	@ (8004afc <vTaskSwitchContext+0xf4>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d003      	beq.n	8004a1e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004a16:	4b3a      	ldr	r3, [pc, #232]	@ (8004b00 <vTaskSwitchContext+0xf8>)
 8004a18:	2201      	movs	r2, #1
 8004a1a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004a1c:	e069      	b.n	8004af2 <vTaskSwitchContext+0xea>
		xYieldPending = pdFALSE;
 8004a1e:	4b38      	ldr	r3, [pc, #224]	@ (8004b00 <vTaskSwitchContext+0xf8>)
 8004a20:	2200      	movs	r2, #0
 8004a22:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8004a24:	4b37      	ldr	r3, [pc, #220]	@ (8004b04 <vTaskSwitchContext+0xfc>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a2a:	61fb      	str	r3, [r7, #28]
 8004a2c:	f04f 33a5 	mov.w	r3, #2779096485	@ 0xa5a5a5a5
 8004a30:	61bb      	str	r3, [r7, #24]
 8004a32:	69fb      	ldr	r3, [r7, #28]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	69ba      	ldr	r2, [r7, #24]
 8004a38:	429a      	cmp	r2, r3
 8004a3a:	d111      	bne.n	8004a60 <vTaskSwitchContext+0x58>
 8004a3c:	69fb      	ldr	r3, [r7, #28]
 8004a3e:	3304      	adds	r3, #4
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	69ba      	ldr	r2, [r7, #24]
 8004a44:	429a      	cmp	r2, r3
 8004a46:	d10b      	bne.n	8004a60 <vTaskSwitchContext+0x58>
 8004a48:	69fb      	ldr	r3, [r7, #28]
 8004a4a:	3308      	adds	r3, #8
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	69ba      	ldr	r2, [r7, #24]
 8004a50:	429a      	cmp	r2, r3
 8004a52:	d105      	bne.n	8004a60 <vTaskSwitchContext+0x58>
 8004a54:	69fb      	ldr	r3, [r7, #28]
 8004a56:	330c      	adds	r3, #12
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	69ba      	ldr	r2, [r7, #24]
 8004a5c:	429a      	cmp	r2, r3
 8004a5e:	d008      	beq.n	8004a72 <vTaskSwitchContext+0x6a>
 8004a60:	4b28      	ldr	r3, [pc, #160]	@ (8004b04 <vTaskSwitchContext+0xfc>)
 8004a62:	681a      	ldr	r2, [r3, #0]
 8004a64:	4b27      	ldr	r3, [pc, #156]	@ (8004b04 <vTaskSwitchContext+0xfc>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	3334      	adds	r3, #52	@ 0x34
 8004a6a:	4619      	mov	r1, r3
 8004a6c:	4610      	mov	r0, r2
 8004a6e:	f7fc fbd9 	bl	8001224 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a72:	4b25      	ldr	r3, [pc, #148]	@ (8004b08 <vTaskSwitchContext+0x100>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	fab3 f383 	clz	r3, r3
 8004a7e:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004a80:	7afb      	ldrb	r3, [r7, #11]
 8004a82:	f1c3 031f 	rsb	r3, r3, #31
 8004a86:	617b      	str	r3, [r7, #20]
 8004a88:	4920      	ldr	r1, [pc, #128]	@ (8004b0c <vTaskSwitchContext+0x104>)
 8004a8a:	697a      	ldr	r2, [r7, #20]
 8004a8c:	4613      	mov	r3, r2
 8004a8e:	009b      	lsls	r3, r3, #2
 8004a90:	4413      	add	r3, r2
 8004a92:	009b      	lsls	r3, r3, #2
 8004a94:	440b      	add	r3, r1
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d10d      	bne.n	8004ab8 <vTaskSwitchContext+0xb0>
	__asm volatile
 8004a9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004aa0:	b672      	cpsid	i
 8004aa2:	f383 8811 	msr	BASEPRI, r3
 8004aa6:	f3bf 8f6f 	isb	sy
 8004aaa:	f3bf 8f4f 	dsb	sy
 8004aae:	b662      	cpsie	i
 8004ab0:	607b      	str	r3, [r7, #4]
}
 8004ab2:	bf00      	nop
 8004ab4:	bf00      	nop
 8004ab6:	e7fd      	b.n	8004ab4 <vTaskSwitchContext+0xac>
 8004ab8:	697a      	ldr	r2, [r7, #20]
 8004aba:	4613      	mov	r3, r2
 8004abc:	009b      	lsls	r3, r3, #2
 8004abe:	4413      	add	r3, r2
 8004ac0:	009b      	lsls	r3, r3, #2
 8004ac2:	4a12      	ldr	r2, [pc, #72]	@ (8004b0c <vTaskSwitchContext+0x104>)
 8004ac4:	4413      	add	r3, r2
 8004ac6:	613b      	str	r3, [r7, #16]
 8004ac8:	693b      	ldr	r3, [r7, #16]
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	685a      	ldr	r2, [r3, #4]
 8004ace:	693b      	ldr	r3, [r7, #16]
 8004ad0:	605a      	str	r2, [r3, #4]
 8004ad2:	693b      	ldr	r3, [r7, #16]
 8004ad4:	685a      	ldr	r2, [r3, #4]
 8004ad6:	693b      	ldr	r3, [r7, #16]
 8004ad8:	3308      	adds	r3, #8
 8004ada:	429a      	cmp	r2, r3
 8004adc:	d104      	bne.n	8004ae8 <vTaskSwitchContext+0xe0>
 8004ade:	693b      	ldr	r3, [r7, #16]
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	685a      	ldr	r2, [r3, #4]
 8004ae4:	693b      	ldr	r3, [r7, #16]
 8004ae6:	605a      	str	r2, [r3, #4]
 8004ae8:	693b      	ldr	r3, [r7, #16]
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	68db      	ldr	r3, [r3, #12]
 8004aee:	4a05      	ldr	r2, [pc, #20]	@ (8004b04 <vTaskSwitchContext+0xfc>)
 8004af0:	6013      	str	r3, [r2, #0]
}
 8004af2:	bf00      	nop
 8004af4:	3720      	adds	r7, #32
 8004af6:	46bd      	mov	sp, r7
 8004af8:	bd80      	pop	{r7, pc}
 8004afa:	bf00      	nop
 8004afc:	20000ab4 	.word	0x20000ab4
 8004b00:	20000aa0 	.word	0x20000aa0
 8004b04:	2000098c 	.word	0x2000098c
 8004b08:	20000a94 	.word	0x20000a94
 8004b0c:	20000990 	.word	0x20000990

08004b10 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b082      	sub	sp, #8
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004b18:	f000 f852 	bl	8004bc0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004b1c:	4b06      	ldr	r3, [pc, #24]	@ (8004b38 <prvIdleTask+0x28>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	2b01      	cmp	r3, #1
 8004b22:	d9f9      	bls.n	8004b18 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004b24:	4b05      	ldr	r3, [pc, #20]	@ (8004b3c <prvIdleTask+0x2c>)
 8004b26:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004b2a:	601a      	str	r2, [r3, #0]
 8004b2c:	f3bf 8f4f 	dsb	sy
 8004b30:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004b34:	e7f0      	b.n	8004b18 <prvIdleTask+0x8>
 8004b36:	bf00      	nop
 8004b38:	20000990 	.word	0x20000990
 8004b3c:	e000ed04 	.word	0xe000ed04

08004b40 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b082      	sub	sp, #8
 8004b44:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004b46:	2300      	movs	r3, #0
 8004b48:	607b      	str	r3, [r7, #4]
 8004b4a:	e00c      	b.n	8004b66 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004b4c:	687a      	ldr	r2, [r7, #4]
 8004b4e:	4613      	mov	r3, r2
 8004b50:	009b      	lsls	r3, r3, #2
 8004b52:	4413      	add	r3, r2
 8004b54:	009b      	lsls	r3, r3, #2
 8004b56:	4a12      	ldr	r2, [pc, #72]	@ (8004ba0 <prvInitialiseTaskLists+0x60>)
 8004b58:	4413      	add	r3, r2
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	f7ff f95d 	bl	8003e1a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	3301      	adds	r3, #1
 8004b64:	607b      	str	r3, [r7, #4]
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2b06      	cmp	r3, #6
 8004b6a:	d9ef      	bls.n	8004b4c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004b6c:	480d      	ldr	r0, [pc, #52]	@ (8004ba4 <prvInitialiseTaskLists+0x64>)
 8004b6e:	f7ff f954 	bl	8003e1a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004b72:	480d      	ldr	r0, [pc, #52]	@ (8004ba8 <prvInitialiseTaskLists+0x68>)
 8004b74:	f7ff f951 	bl	8003e1a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004b78:	480c      	ldr	r0, [pc, #48]	@ (8004bac <prvInitialiseTaskLists+0x6c>)
 8004b7a:	f7ff f94e 	bl	8003e1a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004b7e:	480c      	ldr	r0, [pc, #48]	@ (8004bb0 <prvInitialiseTaskLists+0x70>)
 8004b80:	f7ff f94b 	bl	8003e1a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004b84:	480b      	ldr	r0, [pc, #44]	@ (8004bb4 <prvInitialiseTaskLists+0x74>)
 8004b86:	f7ff f948 	bl	8003e1a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004b8a:	4b0b      	ldr	r3, [pc, #44]	@ (8004bb8 <prvInitialiseTaskLists+0x78>)
 8004b8c:	4a05      	ldr	r2, [pc, #20]	@ (8004ba4 <prvInitialiseTaskLists+0x64>)
 8004b8e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004b90:	4b0a      	ldr	r3, [pc, #40]	@ (8004bbc <prvInitialiseTaskLists+0x7c>)
 8004b92:	4a05      	ldr	r2, [pc, #20]	@ (8004ba8 <prvInitialiseTaskLists+0x68>)
 8004b94:	601a      	str	r2, [r3, #0]
}
 8004b96:	bf00      	nop
 8004b98:	3708      	adds	r7, #8
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	bd80      	pop	{r7, pc}
 8004b9e:	bf00      	nop
 8004ba0:	20000990 	.word	0x20000990
 8004ba4:	20000a1c 	.word	0x20000a1c
 8004ba8:	20000a30 	.word	0x20000a30
 8004bac:	20000a4c 	.word	0x20000a4c
 8004bb0:	20000a60 	.word	0x20000a60
 8004bb4:	20000a78 	.word	0x20000a78
 8004bb8:	20000a44 	.word	0x20000a44
 8004bbc:	20000a48 	.word	0x20000a48

08004bc0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b082      	sub	sp, #8
 8004bc4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004bc6:	e019      	b.n	8004bfc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004bc8:	f000 fa10 	bl	8004fec <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004bcc:	4b10      	ldr	r3, [pc, #64]	@ (8004c10 <prvCheckTasksWaitingTermination+0x50>)
 8004bce:	68db      	ldr	r3, [r3, #12]
 8004bd0:	68db      	ldr	r3, [r3, #12]
 8004bd2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	3304      	adds	r3, #4
 8004bd8:	4618      	mov	r0, r3
 8004bda:	f7ff f9a8 	bl	8003f2e <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004bde:	4b0d      	ldr	r3, [pc, #52]	@ (8004c14 <prvCheckTasksWaitingTermination+0x54>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	3b01      	subs	r3, #1
 8004be4:	4a0b      	ldr	r2, [pc, #44]	@ (8004c14 <prvCheckTasksWaitingTermination+0x54>)
 8004be6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004be8:	4b0b      	ldr	r3, [pc, #44]	@ (8004c18 <prvCheckTasksWaitingTermination+0x58>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	3b01      	subs	r3, #1
 8004bee:	4a0a      	ldr	r2, [pc, #40]	@ (8004c18 <prvCheckTasksWaitingTermination+0x58>)
 8004bf0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004bf2:	f000 fa31 	bl	8005058 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004bf6:	6878      	ldr	r0, [r7, #4]
 8004bf8:	f000 f810 	bl	8004c1c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004bfc:	4b06      	ldr	r3, [pc, #24]	@ (8004c18 <prvCheckTasksWaitingTermination+0x58>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d1e1      	bne.n	8004bc8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004c04:	bf00      	nop
 8004c06:	bf00      	nop
 8004c08:	3708      	adds	r7, #8
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	bd80      	pop	{r7, pc}
 8004c0e:	bf00      	nop
 8004c10:	20000a60 	.word	0x20000a60
 8004c14:	20000a8c 	.word	0x20000a8c
 8004c18:	20000a74 	.word	0x20000a74

08004c1c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b084      	sub	sp, #16
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d108      	bne.n	8004c40 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c32:	4618      	mov	r0, r3
 8004c34:	f000 fb90 	bl	8005358 <vPortFree>
				vPortFree( pxTCB );
 8004c38:	6878      	ldr	r0, [r7, #4]
 8004c3a:	f000 fb8d 	bl	8005358 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004c3e:	e01b      	b.n	8004c78 <prvDeleteTCB+0x5c>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004c46:	2b01      	cmp	r3, #1
 8004c48:	d103      	bne.n	8004c52 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004c4a:	6878      	ldr	r0, [r7, #4]
 8004c4c:	f000 fb84 	bl	8005358 <vPortFree>
	}
 8004c50:	e012      	b.n	8004c78 <prvDeleteTCB+0x5c>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004c58:	2b02      	cmp	r3, #2
 8004c5a:	d00d      	beq.n	8004c78 <prvDeleteTCB+0x5c>
	__asm volatile
 8004c5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c60:	b672      	cpsid	i
 8004c62:	f383 8811 	msr	BASEPRI, r3
 8004c66:	f3bf 8f6f 	isb	sy
 8004c6a:	f3bf 8f4f 	dsb	sy
 8004c6e:	b662      	cpsie	i
 8004c70:	60fb      	str	r3, [r7, #12]
}
 8004c72:	bf00      	nop
 8004c74:	bf00      	nop
 8004c76:	e7fd      	b.n	8004c74 <prvDeleteTCB+0x58>
	}
 8004c78:	bf00      	nop
 8004c7a:	3710      	adds	r7, #16
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	bd80      	pop	{r7, pc}

08004c80 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004c80:	b480      	push	{r7}
 8004c82:	b083      	sub	sp, #12
 8004c84:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004c86:	4b0c      	ldr	r3, [pc, #48]	@ (8004cb8 <prvResetNextTaskUnblockTime+0x38>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d104      	bne.n	8004c9a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004c90:	4b0a      	ldr	r3, [pc, #40]	@ (8004cbc <prvResetNextTaskUnblockTime+0x3c>)
 8004c92:	f04f 32ff 	mov.w	r2, #4294967295
 8004c96:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004c98:	e008      	b.n	8004cac <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c9a:	4b07      	ldr	r3, [pc, #28]	@ (8004cb8 <prvResetNextTaskUnblockTime+0x38>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	68db      	ldr	r3, [r3, #12]
 8004ca0:	68db      	ldr	r3, [r3, #12]
 8004ca2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	685b      	ldr	r3, [r3, #4]
 8004ca8:	4a04      	ldr	r2, [pc, #16]	@ (8004cbc <prvResetNextTaskUnblockTime+0x3c>)
 8004caa:	6013      	str	r3, [r2, #0]
}
 8004cac:	bf00      	nop
 8004cae:	370c      	adds	r7, #12
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb6:	4770      	bx	lr
 8004cb8:	20000a44 	.word	0x20000a44
 8004cbc:	20000aac 	.word	0x20000aac

08004cc0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004cc0:	b480      	push	{r7}
 8004cc2:	b083      	sub	sp, #12
 8004cc4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004cc6:	4b0b      	ldr	r3, [pc, #44]	@ (8004cf4 <xTaskGetSchedulerState+0x34>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d102      	bne.n	8004cd4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004cce:	2301      	movs	r3, #1
 8004cd0:	607b      	str	r3, [r7, #4]
 8004cd2:	e008      	b.n	8004ce6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004cd4:	4b08      	ldr	r3, [pc, #32]	@ (8004cf8 <xTaskGetSchedulerState+0x38>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d102      	bne.n	8004ce2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004cdc:	2302      	movs	r3, #2
 8004cde:	607b      	str	r3, [r7, #4]
 8004ce0:	e001      	b.n	8004ce6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004ce6:	687b      	ldr	r3, [r7, #4]
	}
 8004ce8:	4618      	mov	r0, r3
 8004cea:	370c      	adds	r7, #12
 8004cec:	46bd      	mov	sp, r7
 8004cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf2:	4770      	bx	lr
 8004cf4:	20000a98 	.word	0x20000a98
 8004cf8:	20000ab4 	.word	0x20000ab4

08004cfc <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b084      	sub	sp, #16
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
 8004d04:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004d06:	4b29      	ldr	r3, [pc, #164]	@ (8004dac <prvAddCurrentTaskToDelayedList+0xb0>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004d0c:	4b28      	ldr	r3, [pc, #160]	@ (8004db0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	3304      	adds	r3, #4
 8004d12:	4618      	mov	r0, r3
 8004d14:	f7ff f90b 	bl	8003f2e <uxListRemove>
 8004d18:	4603      	mov	r3, r0
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d10b      	bne.n	8004d36 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004d1e:	4b24      	ldr	r3, [pc, #144]	@ (8004db0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d24:	2201      	movs	r2, #1
 8004d26:	fa02 f303 	lsl.w	r3, r2, r3
 8004d2a:	43da      	mvns	r2, r3
 8004d2c:	4b21      	ldr	r3, [pc, #132]	@ (8004db4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4013      	ands	r3, r2
 8004d32:	4a20      	ldr	r2, [pc, #128]	@ (8004db4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004d34:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d3c:	d10a      	bne.n	8004d54 <prvAddCurrentTaskToDelayedList+0x58>
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d007      	beq.n	8004d54 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004d44:	4b1a      	ldr	r3, [pc, #104]	@ (8004db0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	3304      	adds	r3, #4
 8004d4a:	4619      	mov	r1, r3
 8004d4c:	481a      	ldr	r0, [pc, #104]	@ (8004db8 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004d4e:	f7ff f891 	bl	8003e74 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004d52:	e026      	b.n	8004da2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004d54:	68fa      	ldr	r2, [r7, #12]
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	4413      	add	r3, r2
 8004d5a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004d5c:	4b14      	ldr	r3, [pc, #80]	@ (8004db0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	68ba      	ldr	r2, [r7, #8]
 8004d62:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004d64:	68ba      	ldr	r2, [r7, #8]
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	429a      	cmp	r2, r3
 8004d6a:	d209      	bcs.n	8004d80 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004d6c:	4b13      	ldr	r3, [pc, #76]	@ (8004dbc <prvAddCurrentTaskToDelayedList+0xc0>)
 8004d6e:	681a      	ldr	r2, [r3, #0]
 8004d70:	4b0f      	ldr	r3, [pc, #60]	@ (8004db0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	3304      	adds	r3, #4
 8004d76:	4619      	mov	r1, r3
 8004d78:	4610      	mov	r0, r2
 8004d7a:	f7ff f89f 	bl	8003ebc <vListInsert>
}
 8004d7e:	e010      	b.n	8004da2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004d80:	4b0f      	ldr	r3, [pc, #60]	@ (8004dc0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004d82:	681a      	ldr	r2, [r3, #0]
 8004d84:	4b0a      	ldr	r3, [pc, #40]	@ (8004db0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	3304      	adds	r3, #4
 8004d8a:	4619      	mov	r1, r3
 8004d8c:	4610      	mov	r0, r2
 8004d8e:	f7ff f895 	bl	8003ebc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004d92:	4b0c      	ldr	r3, [pc, #48]	@ (8004dc4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	68ba      	ldr	r2, [r7, #8]
 8004d98:	429a      	cmp	r2, r3
 8004d9a:	d202      	bcs.n	8004da2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004d9c:	4a09      	ldr	r2, [pc, #36]	@ (8004dc4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	6013      	str	r3, [r2, #0]
}
 8004da2:	bf00      	nop
 8004da4:	3710      	adds	r7, #16
 8004da6:	46bd      	mov	sp, r7
 8004da8:	bd80      	pop	{r7, pc}
 8004daa:	bf00      	nop
 8004dac:	20000a90 	.word	0x20000a90
 8004db0:	2000098c 	.word	0x2000098c
 8004db4:	20000a94 	.word	0x20000a94
 8004db8:	20000a78 	.word	0x20000a78
 8004dbc:	20000a48 	.word	0x20000a48
 8004dc0:	20000a44 	.word	0x20000a44
 8004dc4:	20000aac 	.word	0x20000aac

08004dc8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004dc8:	b480      	push	{r7}
 8004dca:	b085      	sub	sp, #20
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	60f8      	str	r0, [r7, #12]
 8004dd0:	60b9      	str	r1, [r7, #8]
 8004dd2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	3b04      	subs	r3, #4
 8004dd8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004de0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	3b04      	subs	r3, #4
 8004de6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	f023 0201 	bic.w	r2, r3, #1
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	3b04      	subs	r3, #4
 8004df6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004df8:	4a0c      	ldr	r2, [pc, #48]	@ (8004e2c <pxPortInitialiseStack+0x64>)
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	3b14      	subs	r3, #20
 8004e02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004e04:	687a      	ldr	r2, [r7, #4]
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	3b04      	subs	r3, #4
 8004e0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	f06f 0202 	mvn.w	r2, #2
 8004e16:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	3b20      	subs	r3, #32
 8004e1c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
}
 8004e20:	4618      	mov	r0, r3
 8004e22:	3714      	adds	r7, #20
 8004e24:	46bd      	mov	sp, r7
 8004e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2a:	4770      	bx	lr
 8004e2c:	08004e31 	.word	0x08004e31

08004e30 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004e30:	b480      	push	{r7}
 8004e32:	b085      	sub	sp, #20
 8004e34:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004e36:	2300      	movs	r3, #0
 8004e38:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004e3a:	4b15      	ldr	r3, [pc, #84]	@ (8004e90 <prvTaskExitError+0x60>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e42:	d00d      	beq.n	8004e60 <prvTaskExitError+0x30>
	__asm volatile
 8004e44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e48:	b672      	cpsid	i
 8004e4a:	f383 8811 	msr	BASEPRI, r3
 8004e4e:	f3bf 8f6f 	isb	sy
 8004e52:	f3bf 8f4f 	dsb	sy
 8004e56:	b662      	cpsie	i
 8004e58:	60fb      	str	r3, [r7, #12]
}
 8004e5a:	bf00      	nop
 8004e5c:	bf00      	nop
 8004e5e:	e7fd      	b.n	8004e5c <prvTaskExitError+0x2c>
	__asm volatile
 8004e60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e64:	b672      	cpsid	i
 8004e66:	f383 8811 	msr	BASEPRI, r3
 8004e6a:	f3bf 8f6f 	isb	sy
 8004e6e:	f3bf 8f4f 	dsb	sy
 8004e72:	b662      	cpsie	i
 8004e74:	60bb      	str	r3, [r7, #8]
}
 8004e76:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004e78:	bf00      	nop
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d0fc      	beq.n	8004e7a <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004e80:	bf00      	nop
 8004e82:	bf00      	nop
 8004e84:	3714      	adds	r7, #20
 8004e86:	46bd      	mov	sp, r7
 8004e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8c:	4770      	bx	lr
 8004e8e:	bf00      	nop
 8004e90:	2000010c 	.word	0x2000010c
	...

08004ea0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004ea0:	4b07      	ldr	r3, [pc, #28]	@ (8004ec0 <pxCurrentTCBConst2>)
 8004ea2:	6819      	ldr	r1, [r3, #0]
 8004ea4:	6808      	ldr	r0, [r1, #0]
 8004ea6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004eaa:	f380 8809 	msr	PSP, r0
 8004eae:	f3bf 8f6f 	isb	sy
 8004eb2:	f04f 0000 	mov.w	r0, #0
 8004eb6:	f380 8811 	msr	BASEPRI, r0
 8004eba:	4770      	bx	lr
 8004ebc:	f3af 8000 	nop.w

08004ec0 <pxCurrentTCBConst2>:
 8004ec0:	2000098c 	.word	0x2000098c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004ec4:	bf00      	nop
 8004ec6:	bf00      	nop

08004ec8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004ec8:	4808      	ldr	r0, [pc, #32]	@ (8004eec <prvPortStartFirstTask+0x24>)
 8004eca:	6800      	ldr	r0, [r0, #0]
 8004ecc:	6800      	ldr	r0, [r0, #0]
 8004ece:	f380 8808 	msr	MSP, r0
 8004ed2:	f04f 0000 	mov.w	r0, #0
 8004ed6:	f380 8814 	msr	CONTROL, r0
 8004eda:	b662      	cpsie	i
 8004edc:	b661      	cpsie	f
 8004ede:	f3bf 8f4f 	dsb	sy
 8004ee2:	f3bf 8f6f 	isb	sy
 8004ee6:	df00      	svc	0
 8004ee8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004eea:	bf00      	nop
 8004eec:	e000ed08 	.word	0xe000ed08

08004ef0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b084      	sub	sp, #16
 8004ef4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004ef6:	4b37      	ldr	r3, [pc, #220]	@ (8004fd4 <xPortStartScheduler+0xe4>)
 8004ef8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	781b      	ldrb	r3, [r3, #0]
 8004efe:	b2db      	uxtb	r3, r3
 8004f00:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	22ff      	movs	r2, #255	@ 0xff
 8004f06:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	781b      	ldrb	r3, [r3, #0]
 8004f0c:	b2db      	uxtb	r3, r3
 8004f0e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004f10:	78fb      	ldrb	r3, [r7, #3]
 8004f12:	b2db      	uxtb	r3, r3
 8004f14:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004f18:	b2da      	uxtb	r2, r3
 8004f1a:	4b2f      	ldr	r3, [pc, #188]	@ (8004fd8 <xPortStartScheduler+0xe8>)
 8004f1c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004f1e:	4b2f      	ldr	r3, [pc, #188]	@ (8004fdc <xPortStartScheduler+0xec>)
 8004f20:	2207      	movs	r2, #7
 8004f22:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004f24:	e009      	b.n	8004f3a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8004f26:	4b2d      	ldr	r3, [pc, #180]	@ (8004fdc <xPortStartScheduler+0xec>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	3b01      	subs	r3, #1
 8004f2c:	4a2b      	ldr	r2, [pc, #172]	@ (8004fdc <xPortStartScheduler+0xec>)
 8004f2e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004f30:	78fb      	ldrb	r3, [r7, #3]
 8004f32:	b2db      	uxtb	r3, r3
 8004f34:	005b      	lsls	r3, r3, #1
 8004f36:	b2db      	uxtb	r3, r3
 8004f38:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004f3a:	78fb      	ldrb	r3, [r7, #3]
 8004f3c:	b2db      	uxtb	r3, r3
 8004f3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f42:	2b80      	cmp	r3, #128	@ 0x80
 8004f44:	d0ef      	beq.n	8004f26 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004f46:	4b25      	ldr	r3, [pc, #148]	@ (8004fdc <xPortStartScheduler+0xec>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f1c3 0307 	rsb	r3, r3, #7
 8004f4e:	2b04      	cmp	r3, #4
 8004f50:	d00d      	beq.n	8004f6e <xPortStartScheduler+0x7e>
	__asm volatile
 8004f52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f56:	b672      	cpsid	i
 8004f58:	f383 8811 	msr	BASEPRI, r3
 8004f5c:	f3bf 8f6f 	isb	sy
 8004f60:	f3bf 8f4f 	dsb	sy
 8004f64:	b662      	cpsie	i
 8004f66:	60bb      	str	r3, [r7, #8]
}
 8004f68:	bf00      	nop
 8004f6a:	bf00      	nop
 8004f6c:	e7fd      	b.n	8004f6a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004f6e:	4b1b      	ldr	r3, [pc, #108]	@ (8004fdc <xPortStartScheduler+0xec>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	021b      	lsls	r3, r3, #8
 8004f74:	4a19      	ldr	r2, [pc, #100]	@ (8004fdc <xPortStartScheduler+0xec>)
 8004f76:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004f78:	4b18      	ldr	r3, [pc, #96]	@ (8004fdc <xPortStartScheduler+0xec>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004f80:	4a16      	ldr	r2, [pc, #88]	@ (8004fdc <xPortStartScheduler+0xec>)
 8004f82:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	b2da      	uxtb	r2, r3
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004f8c:	4b14      	ldr	r3, [pc, #80]	@ (8004fe0 <xPortStartScheduler+0xf0>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4a13      	ldr	r2, [pc, #76]	@ (8004fe0 <xPortStartScheduler+0xf0>)
 8004f92:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004f96:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004f98:	4b11      	ldr	r3, [pc, #68]	@ (8004fe0 <xPortStartScheduler+0xf0>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	4a10      	ldr	r2, [pc, #64]	@ (8004fe0 <xPortStartScheduler+0xf0>)
 8004f9e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004fa2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004fa4:	f000 f8dc 	bl	8005160 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004fa8:	4b0e      	ldr	r3, [pc, #56]	@ (8004fe4 <xPortStartScheduler+0xf4>)
 8004faa:	2200      	movs	r2, #0
 8004fac:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004fae:	f000 f8fb 	bl	80051a8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004fb2:	4b0d      	ldr	r3, [pc, #52]	@ (8004fe8 <xPortStartScheduler+0xf8>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4a0c      	ldr	r2, [pc, #48]	@ (8004fe8 <xPortStartScheduler+0xf8>)
 8004fb8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8004fbc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004fbe:	f7ff ff83 	bl	8004ec8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004fc2:	f7ff fd21 	bl	8004a08 <vTaskSwitchContext>
	prvTaskExitError();
 8004fc6:	f7ff ff33 	bl	8004e30 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004fca:	2300      	movs	r3, #0
}
 8004fcc:	4618      	mov	r0, r3
 8004fce:	3710      	adds	r7, #16
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	bd80      	pop	{r7, pc}
 8004fd4:	e000e400 	.word	0xe000e400
 8004fd8:	20000ab8 	.word	0x20000ab8
 8004fdc:	20000abc 	.word	0x20000abc
 8004fe0:	e000ed20 	.word	0xe000ed20
 8004fe4:	2000010c 	.word	0x2000010c
 8004fe8:	e000ef34 	.word	0xe000ef34

08004fec <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004fec:	b480      	push	{r7}
 8004fee:	b083      	sub	sp, #12
 8004ff0:	af00      	add	r7, sp, #0
	__asm volatile
 8004ff2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ff6:	b672      	cpsid	i
 8004ff8:	f383 8811 	msr	BASEPRI, r3
 8004ffc:	f3bf 8f6f 	isb	sy
 8005000:	f3bf 8f4f 	dsb	sy
 8005004:	b662      	cpsie	i
 8005006:	607b      	str	r3, [r7, #4]
}
 8005008:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800500a:	4b11      	ldr	r3, [pc, #68]	@ (8005050 <vPortEnterCritical+0x64>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	3301      	adds	r3, #1
 8005010:	4a0f      	ldr	r2, [pc, #60]	@ (8005050 <vPortEnterCritical+0x64>)
 8005012:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005014:	4b0e      	ldr	r3, [pc, #56]	@ (8005050 <vPortEnterCritical+0x64>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	2b01      	cmp	r3, #1
 800501a:	d112      	bne.n	8005042 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800501c:	4b0d      	ldr	r3, [pc, #52]	@ (8005054 <vPortEnterCritical+0x68>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	b2db      	uxtb	r3, r3
 8005022:	2b00      	cmp	r3, #0
 8005024:	d00d      	beq.n	8005042 <vPortEnterCritical+0x56>
	__asm volatile
 8005026:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800502a:	b672      	cpsid	i
 800502c:	f383 8811 	msr	BASEPRI, r3
 8005030:	f3bf 8f6f 	isb	sy
 8005034:	f3bf 8f4f 	dsb	sy
 8005038:	b662      	cpsie	i
 800503a:	603b      	str	r3, [r7, #0]
}
 800503c:	bf00      	nop
 800503e:	bf00      	nop
 8005040:	e7fd      	b.n	800503e <vPortEnterCritical+0x52>
	}
}
 8005042:	bf00      	nop
 8005044:	370c      	adds	r7, #12
 8005046:	46bd      	mov	sp, r7
 8005048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504c:	4770      	bx	lr
 800504e:	bf00      	nop
 8005050:	2000010c 	.word	0x2000010c
 8005054:	e000ed04 	.word	0xe000ed04

08005058 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005058:	b480      	push	{r7}
 800505a:	b083      	sub	sp, #12
 800505c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800505e:	4b13      	ldr	r3, [pc, #76]	@ (80050ac <vPortExitCritical+0x54>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d10d      	bne.n	8005082 <vPortExitCritical+0x2a>
	__asm volatile
 8005066:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800506a:	b672      	cpsid	i
 800506c:	f383 8811 	msr	BASEPRI, r3
 8005070:	f3bf 8f6f 	isb	sy
 8005074:	f3bf 8f4f 	dsb	sy
 8005078:	b662      	cpsie	i
 800507a:	607b      	str	r3, [r7, #4]
}
 800507c:	bf00      	nop
 800507e:	bf00      	nop
 8005080:	e7fd      	b.n	800507e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8005082:	4b0a      	ldr	r3, [pc, #40]	@ (80050ac <vPortExitCritical+0x54>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	3b01      	subs	r3, #1
 8005088:	4a08      	ldr	r2, [pc, #32]	@ (80050ac <vPortExitCritical+0x54>)
 800508a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800508c:	4b07      	ldr	r3, [pc, #28]	@ (80050ac <vPortExitCritical+0x54>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d105      	bne.n	80050a0 <vPortExitCritical+0x48>
 8005094:	2300      	movs	r3, #0
 8005096:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800509e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80050a0:	bf00      	nop
 80050a2:	370c      	adds	r7, #12
 80050a4:	46bd      	mov	sp, r7
 80050a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050aa:	4770      	bx	lr
 80050ac:	2000010c 	.word	0x2000010c

080050b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80050b0:	f3ef 8009 	mrs	r0, PSP
 80050b4:	f3bf 8f6f 	isb	sy
 80050b8:	4b15      	ldr	r3, [pc, #84]	@ (8005110 <pxCurrentTCBConst>)
 80050ba:	681a      	ldr	r2, [r3, #0]
 80050bc:	f01e 0f10 	tst.w	lr, #16
 80050c0:	bf08      	it	eq
 80050c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80050c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050ca:	6010      	str	r0, [r2, #0]
 80050cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80050d0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80050d4:	b672      	cpsid	i
 80050d6:	f380 8811 	msr	BASEPRI, r0
 80050da:	f3bf 8f4f 	dsb	sy
 80050de:	f3bf 8f6f 	isb	sy
 80050e2:	b662      	cpsie	i
 80050e4:	f7ff fc90 	bl	8004a08 <vTaskSwitchContext>
 80050e8:	f04f 0000 	mov.w	r0, #0
 80050ec:	f380 8811 	msr	BASEPRI, r0
 80050f0:	bc09      	pop	{r0, r3}
 80050f2:	6819      	ldr	r1, [r3, #0]
 80050f4:	6808      	ldr	r0, [r1, #0]
 80050f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050fa:	f01e 0f10 	tst.w	lr, #16
 80050fe:	bf08      	it	eq
 8005100:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005104:	f380 8809 	msr	PSP, r0
 8005108:	f3bf 8f6f 	isb	sy
 800510c:	4770      	bx	lr
 800510e:	bf00      	nop

08005110 <pxCurrentTCBConst>:
 8005110:	2000098c 	.word	0x2000098c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005114:	bf00      	nop
 8005116:	bf00      	nop

08005118 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b082      	sub	sp, #8
 800511c:	af00      	add	r7, sp, #0
	__asm volatile
 800511e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005122:	b672      	cpsid	i
 8005124:	f383 8811 	msr	BASEPRI, r3
 8005128:	f3bf 8f6f 	isb	sy
 800512c:	f3bf 8f4f 	dsb	sy
 8005130:	b662      	cpsie	i
 8005132:	607b      	str	r3, [r7, #4]
}
 8005134:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005136:	f7ff fbab 	bl	8004890 <xTaskIncrementTick>
 800513a:	4603      	mov	r3, r0
 800513c:	2b00      	cmp	r3, #0
 800513e:	d003      	beq.n	8005148 <xPortSysTickHandler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005140:	4b06      	ldr	r3, [pc, #24]	@ (800515c <xPortSysTickHandler+0x44>)
 8005142:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005146:	601a      	str	r2, [r3, #0]
 8005148:	2300      	movs	r3, #0
 800514a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	f383 8811 	msr	BASEPRI, r3
}
 8005152:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005154:	bf00      	nop
 8005156:	3708      	adds	r7, #8
 8005158:	46bd      	mov	sp, r7
 800515a:	bd80      	pop	{r7, pc}
 800515c:	e000ed04 	.word	0xe000ed04

08005160 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005160:	b480      	push	{r7}
 8005162:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005164:	4b0b      	ldr	r3, [pc, #44]	@ (8005194 <vPortSetupTimerInterrupt+0x34>)
 8005166:	2200      	movs	r2, #0
 8005168:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800516a:	4b0b      	ldr	r3, [pc, #44]	@ (8005198 <vPortSetupTimerInterrupt+0x38>)
 800516c:	2200      	movs	r2, #0
 800516e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005170:	4b0a      	ldr	r3, [pc, #40]	@ (800519c <vPortSetupTimerInterrupt+0x3c>)
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4a0a      	ldr	r2, [pc, #40]	@ (80051a0 <vPortSetupTimerInterrupt+0x40>)
 8005176:	fba2 2303 	umull	r2, r3, r2, r3
 800517a:	099b      	lsrs	r3, r3, #6
 800517c:	4a09      	ldr	r2, [pc, #36]	@ (80051a4 <vPortSetupTimerInterrupt+0x44>)
 800517e:	3b01      	subs	r3, #1
 8005180:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005182:	4b04      	ldr	r3, [pc, #16]	@ (8005194 <vPortSetupTimerInterrupt+0x34>)
 8005184:	2207      	movs	r2, #7
 8005186:	601a      	str	r2, [r3, #0]
}
 8005188:	bf00      	nop
 800518a:	46bd      	mov	sp, r7
 800518c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005190:	4770      	bx	lr
 8005192:	bf00      	nop
 8005194:	e000e010 	.word	0xe000e010
 8005198:	e000e018 	.word	0xe000e018
 800519c:	20000100 	.word	0x20000100
 80051a0:	10624dd3 	.word	0x10624dd3
 80051a4:	e000e014 	.word	0xe000e014

080051a8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80051a8:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80051b8 <vPortEnableVFP+0x10>
 80051ac:	6801      	ldr	r1, [r0, #0]
 80051ae:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80051b2:	6001      	str	r1, [r0, #0]
 80051b4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80051b6:	bf00      	nop
 80051b8:	e000ed88 	.word	0xe000ed88

080051bc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b08a      	sub	sp, #40	@ 0x28
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80051c4:	2300      	movs	r3, #0
 80051c6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80051c8:	f7ff fab4 	bl	8004734 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80051cc:	4b5d      	ldr	r3, [pc, #372]	@ (8005344 <pvPortMalloc+0x188>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d101      	bne.n	80051d8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80051d4:	f000 f920 	bl	8005418 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80051d8:	4b5b      	ldr	r3, [pc, #364]	@ (8005348 <pvPortMalloc+0x18c>)
 80051da:	681a      	ldr	r2, [r3, #0]
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	4013      	ands	r3, r2
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	f040 8094 	bne.w	800530e <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d020      	beq.n	800522e <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 80051ec:	2208      	movs	r2, #8
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	4413      	add	r3, r2
 80051f2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	f003 0307 	and.w	r3, r3, #7
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d017      	beq.n	800522e <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	f023 0307 	bic.w	r3, r3, #7
 8005204:	3308      	adds	r3, #8
 8005206:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	f003 0307 	and.w	r3, r3, #7
 800520e:	2b00      	cmp	r3, #0
 8005210:	d00d      	beq.n	800522e <pvPortMalloc+0x72>
	__asm volatile
 8005212:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005216:	b672      	cpsid	i
 8005218:	f383 8811 	msr	BASEPRI, r3
 800521c:	f3bf 8f6f 	isb	sy
 8005220:	f3bf 8f4f 	dsb	sy
 8005224:	b662      	cpsie	i
 8005226:	617b      	str	r3, [r7, #20]
}
 8005228:	bf00      	nop
 800522a:	bf00      	nop
 800522c:	e7fd      	b.n	800522a <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d06c      	beq.n	800530e <pvPortMalloc+0x152>
 8005234:	4b45      	ldr	r3, [pc, #276]	@ (800534c <pvPortMalloc+0x190>)
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	687a      	ldr	r2, [r7, #4]
 800523a:	429a      	cmp	r2, r3
 800523c:	d867      	bhi.n	800530e <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800523e:	4b44      	ldr	r3, [pc, #272]	@ (8005350 <pvPortMalloc+0x194>)
 8005240:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005242:	4b43      	ldr	r3, [pc, #268]	@ (8005350 <pvPortMalloc+0x194>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005248:	e004      	b.n	8005254 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 800524a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800524c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800524e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005256:	685b      	ldr	r3, [r3, #4]
 8005258:	687a      	ldr	r2, [r7, #4]
 800525a:	429a      	cmp	r2, r3
 800525c:	d903      	bls.n	8005266 <pvPortMalloc+0xaa>
 800525e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d1f1      	bne.n	800524a <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005266:	4b37      	ldr	r3, [pc, #220]	@ (8005344 <pvPortMalloc+0x188>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800526c:	429a      	cmp	r2, r3
 800526e:	d04e      	beq.n	800530e <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005270:	6a3b      	ldr	r3, [r7, #32]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	2208      	movs	r2, #8
 8005276:	4413      	add	r3, r2
 8005278:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800527a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800527c:	681a      	ldr	r2, [r3, #0]
 800527e:	6a3b      	ldr	r3, [r7, #32]
 8005280:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005284:	685a      	ldr	r2, [r3, #4]
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	1ad2      	subs	r2, r2, r3
 800528a:	2308      	movs	r3, #8
 800528c:	005b      	lsls	r3, r3, #1
 800528e:	429a      	cmp	r2, r3
 8005290:	d922      	bls.n	80052d8 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005292:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	4413      	add	r3, r2
 8005298:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800529a:	69bb      	ldr	r3, [r7, #24]
 800529c:	f003 0307 	and.w	r3, r3, #7
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d00d      	beq.n	80052c0 <pvPortMalloc+0x104>
	__asm volatile
 80052a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052a8:	b672      	cpsid	i
 80052aa:	f383 8811 	msr	BASEPRI, r3
 80052ae:	f3bf 8f6f 	isb	sy
 80052b2:	f3bf 8f4f 	dsb	sy
 80052b6:	b662      	cpsie	i
 80052b8:	613b      	str	r3, [r7, #16]
}
 80052ba:	bf00      	nop
 80052bc:	bf00      	nop
 80052be:	e7fd      	b.n	80052bc <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80052c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052c2:	685a      	ldr	r2, [r3, #4]
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	1ad2      	subs	r2, r2, r3
 80052c8:	69bb      	ldr	r3, [r7, #24]
 80052ca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80052cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052ce:	687a      	ldr	r2, [r7, #4]
 80052d0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80052d2:	69b8      	ldr	r0, [r7, #24]
 80052d4:	f000 f902 	bl	80054dc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80052d8:	4b1c      	ldr	r3, [pc, #112]	@ (800534c <pvPortMalloc+0x190>)
 80052da:	681a      	ldr	r2, [r3, #0]
 80052dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052de:	685b      	ldr	r3, [r3, #4]
 80052e0:	1ad3      	subs	r3, r2, r3
 80052e2:	4a1a      	ldr	r2, [pc, #104]	@ (800534c <pvPortMalloc+0x190>)
 80052e4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80052e6:	4b19      	ldr	r3, [pc, #100]	@ (800534c <pvPortMalloc+0x190>)
 80052e8:	681a      	ldr	r2, [r3, #0]
 80052ea:	4b1a      	ldr	r3, [pc, #104]	@ (8005354 <pvPortMalloc+0x198>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	429a      	cmp	r2, r3
 80052f0:	d203      	bcs.n	80052fa <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80052f2:	4b16      	ldr	r3, [pc, #88]	@ (800534c <pvPortMalloc+0x190>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	4a17      	ldr	r2, [pc, #92]	@ (8005354 <pvPortMalloc+0x198>)
 80052f8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80052fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052fc:	685a      	ldr	r2, [r3, #4]
 80052fe:	4b12      	ldr	r3, [pc, #72]	@ (8005348 <pvPortMalloc+0x18c>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	431a      	orrs	r2, r3
 8005304:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005306:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005308:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800530a:	2200      	movs	r2, #0
 800530c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800530e:	f7ff fa1f 	bl	8004750 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005312:	69fb      	ldr	r3, [r7, #28]
 8005314:	f003 0307 	and.w	r3, r3, #7
 8005318:	2b00      	cmp	r3, #0
 800531a:	d00d      	beq.n	8005338 <pvPortMalloc+0x17c>
	__asm volatile
 800531c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005320:	b672      	cpsid	i
 8005322:	f383 8811 	msr	BASEPRI, r3
 8005326:	f3bf 8f6f 	isb	sy
 800532a:	f3bf 8f4f 	dsb	sy
 800532e:	b662      	cpsie	i
 8005330:	60fb      	str	r3, [r7, #12]
}
 8005332:	bf00      	nop
 8005334:	bf00      	nop
 8005336:	e7fd      	b.n	8005334 <pvPortMalloc+0x178>
	return pvReturn;
 8005338:	69fb      	ldr	r3, [r7, #28]
}
 800533a:	4618      	mov	r0, r3
 800533c:	3728      	adds	r7, #40	@ 0x28
 800533e:	46bd      	mov	sp, r7
 8005340:	bd80      	pop	{r7, pc}
 8005342:	bf00      	nop
 8005344:	200046c8 	.word	0x200046c8
 8005348:	200046d4 	.word	0x200046d4
 800534c:	200046cc 	.word	0x200046cc
 8005350:	200046c0 	.word	0x200046c0
 8005354:	200046d0 	.word	0x200046d0

08005358 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005358:	b580      	push	{r7, lr}
 800535a:	b086      	sub	sp, #24
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d04e      	beq.n	8005408 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800536a:	2308      	movs	r3, #8
 800536c:	425b      	negs	r3, r3
 800536e:	697a      	ldr	r2, [r7, #20]
 8005370:	4413      	add	r3, r2
 8005372:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005374:	697b      	ldr	r3, [r7, #20]
 8005376:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005378:	693b      	ldr	r3, [r7, #16]
 800537a:	685a      	ldr	r2, [r3, #4]
 800537c:	4b24      	ldr	r3, [pc, #144]	@ (8005410 <vPortFree+0xb8>)
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	4013      	ands	r3, r2
 8005382:	2b00      	cmp	r3, #0
 8005384:	d10d      	bne.n	80053a2 <vPortFree+0x4a>
	__asm volatile
 8005386:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800538a:	b672      	cpsid	i
 800538c:	f383 8811 	msr	BASEPRI, r3
 8005390:	f3bf 8f6f 	isb	sy
 8005394:	f3bf 8f4f 	dsb	sy
 8005398:	b662      	cpsie	i
 800539a:	60fb      	str	r3, [r7, #12]
}
 800539c:	bf00      	nop
 800539e:	bf00      	nop
 80053a0:	e7fd      	b.n	800539e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80053a2:	693b      	ldr	r3, [r7, #16]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d00d      	beq.n	80053c6 <vPortFree+0x6e>
	__asm volatile
 80053aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053ae:	b672      	cpsid	i
 80053b0:	f383 8811 	msr	BASEPRI, r3
 80053b4:	f3bf 8f6f 	isb	sy
 80053b8:	f3bf 8f4f 	dsb	sy
 80053bc:	b662      	cpsie	i
 80053be:	60bb      	str	r3, [r7, #8]
}
 80053c0:	bf00      	nop
 80053c2:	bf00      	nop
 80053c4:	e7fd      	b.n	80053c2 <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80053c6:	693b      	ldr	r3, [r7, #16]
 80053c8:	685a      	ldr	r2, [r3, #4]
 80053ca:	4b11      	ldr	r3, [pc, #68]	@ (8005410 <vPortFree+0xb8>)
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	4013      	ands	r3, r2
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d019      	beq.n	8005408 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80053d4:	693b      	ldr	r3, [r7, #16]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d115      	bne.n	8005408 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80053dc:	693b      	ldr	r3, [r7, #16]
 80053de:	685a      	ldr	r2, [r3, #4]
 80053e0:	4b0b      	ldr	r3, [pc, #44]	@ (8005410 <vPortFree+0xb8>)
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	43db      	mvns	r3, r3
 80053e6:	401a      	ands	r2, r3
 80053e8:	693b      	ldr	r3, [r7, #16]
 80053ea:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80053ec:	f7ff f9a2 	bl	8004734 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80053f0:	693b      	ldr	r3, [r7, #16]
 80053f2:	685a      	ldr	r2, [r3, #4]
 80053f4:	4b07      	ldr	r3, [pc, #28]	@ (8005414 <vPortFree+0xbc>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4413      	add	r3, r2
 80053fa:	4a06      	ldr	r2, [pc, #24]	@ (8005414 <vPortFree+0xbc>)
 80053fc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80053fe:	6938      	ldr	r0, [r7, #16]
 8005400:	f000 f86c 	bl	80054dc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005404:	f7ff f9a4 	bl	8004750 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005408:	bf00      	nop
 800540a:	3718      	adds	r7, #24
 800540c:	46bd      	mov	sp, r7
 800540e:	bd80      	pop	{r7, pc}
 8005410:	200046d4 	.word	0x200046d4
 8005414:	200046cc 	.word	0x200046cc

08005418 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005418:	b480      	push	{r7}
 800541a:	b085      	sub	sp, #20
 800541c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800541e:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8005422:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005424:	4b27      	ldr	r3, [pc, #156]	@ (80054c4 <prvHeapInit+0xac>)
 8005426:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	f003 0307 	and.w	r3, r3, #7
 800542e:	2b00      	cmp	r3, #0
 8005430:	d00c      	beq.n	800544c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	3307      	adds	r3, #7
 8005436:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	f023 0307 	bic.w	r3, r3, #7
 800543e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005440:	68ba      	ldr	r2, [r7, #8]
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	1ad3      	subs	r3, r2, r3
 8005446:	4a1f      	ldr	r2, [pc, #124]	@ (80054c4 <prvHeapInit+0xac>)
 8005448:	4413      	add	r3, r2
 800544a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005450:	4a1d      	ldr	r2, [pc, #116]	@ (80054c8 <prvHeapInit+0xb0>)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005456:	4b1c      	ldr	r3, [pc, #112]	@ (80054c8 <prvHeapInit+0xb0>)
 8005458:	2200      	movs	r2, #0
 800545a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	68ba      	ldr	r2, [r7, #8]
 8005460:	4413      	add	r3, r2
 8005462:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005464:	2208      	movs	r2, #8
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	1a9b      	subs	r3, r3, r2
 800546a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	f023 0307 	bic.w	r3, r3, #7
 8005472:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	4a15      	ldr	r2, [pc, #84]	@ (80054cc <prvHeapInit+0xb4>)
 8005478:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800547a:	4b14      	ldr	r3, [pc, #80]	@ (80054cc <prvHeapInit+0xb4>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	2200      	movs	r2, #0
 8005480:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005482:	4b12      	ldr	r3, [pc, #72]	@ (80054cc <prvHeapInit+0xb4>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	2200      	movs	r2, #0
 8005488:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	68fa      	ldr	r2, [r7, #12]
 8005492:	1ad2      	subs	r2, r2, r3
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005498:	4b0c      	ldr	r3, [pc, #48]	@ (80054cc <prvHeapInit+0xb4>)
 800549a:	681a      	ldr	r2, [r3, #0]
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	685b      	ldr	r3, [r3, #4]
 80054a4:	4a0a      	ldr	r2, [pc, #40]	@ (80054d0 <prvHeapInit+0xb8>)
 80054a6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	685b      	ldr	r3, [r3, #4]
 80054ac:	4a09      	ldr	r2, [pc, #36]	@ (80054d4 <prvHeapInit+0xbc>)
 80054ae:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80054b0:	4b09      	ldr	r3, [pc, #36]	@ (80054d8 <prvHeapInit+0xc0>)
 80054b2:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80054b6:	601a      	str	r2, [r3, #0]
}
 80054b8:	bf00      	nop
 80054ba:	3714      	adds	r7, #20
 80054bc:	46bd      	mov	sp, r7
 80054be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c2:	4770      	bx	lr
 80054c4:	20000ac0 	.word	0x20000ac0
 80054c8:	200046c0 	.word	0x200046c0
 80054cc:	200046c8 	.word	0x200046c8
 80054d0:	200046d0 	.word	0x200046d0
 80054d4:	200046cc 	.word	0x200046cc
 80054d8:	200046d4 	.word	0x200046d4

080054dc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80054dc:	b480      	push	{r7}
 80054de:	b085      	sub	sp, #20
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80054e4:	4b28      	ldr	r3, [pc, #160]	@ (8005588 <prvInsertBlockIntoFreeList+0xac>)
 80054e6:	60fb      	str	r3, [r7, #12]
 80054e8:	e002      	b.n	80054f0 <prvInsertBlockIntoFreeList+0x14>
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	60fb      	str	r3, [r7, #12]
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	687a      	ldr	r2, [r7, #4]
 80054f6:	429a      	cmp	r2, r3
 80054f8:	d8f7      	bhi.n	80054ea <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	685b      	ldr	r3, [r3, #4]
 8005502:	68ba      	ldr	r2, [r7, #8]
 8005504:	4413      	add	r3, r2
 8005506:	687a      	ldr	r2, [r7, #4]
 8005508:	429a      	cmp	r2, r3
 800550a:	d108      	bne.n	800551e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	685a      	ldr	r2, [r3, #4]
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	685b      	ldr	r3, [r3, #4]
 8005514:	441a      	add	r2, r3
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	685b      	ldr	r3, [r3, #4]
 8005526:	68ba      	ldr	r2, [r7, #8]
 8005528:	441a      	add	r2, r3
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	429a      	cmp	r2, r3
 8005530:	d118      	bne.n	8005564 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681a      	ldr	r2, [r3, #0]
 8005536:	4b15      	ldr	r3, [pc, #84]	@ (800558c <prvInsertBlockIntoFreeList+0xb0>)
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	429a      	cmp	r2, r3
 800553c:	d00d      	beq.n	800555a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	685a      	ldr	r2, [r3, #4]
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	685b      	ldr	r3, [r3, #4]
 8005548:	441a      	add	r2, r3
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	681a      	ldr	r2, [r3, #0]
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	601a      	str	r2, [r3, #0]
 8005558:	e008      	b.n	800556c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800555a:	4b0c      	ldr	r3, [pc, #48]	@ (800558c <prvInsertBlockIntoFreeList+0xb0>)
 800555c:	681a      	ldr	r2, [r3, #0]
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	601a      	str	r2, [r3, #0]
 8005562:	e003      	b.n	800556c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681a      	ldr	r2, [r3, #0]
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800556c:	68fa      	ldr	r2, [r7, #12]
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	429a      	cmp	r2, r3
 8005572:	d002      	beq.n	800557a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	687a      	ldr	r2, [r7, #4]
 8005578:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800557a:	bf00      	nop
 800557c:	3714      	adds	r7, #20
 800557e:	46bd      	mov	sp, r7
 8005580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005584:	4770      	bx	lr
 8005586:	bf00      	nop
 8005588:	200046c0 	.word	0x200046c0
 800558c:	200046c8 	.word	0x200046c8

08005590 <drv_uart1_receive>:

#include "usart.h"
#include "gpio.h"

uint8_t drv_uart1_receive(char * pData, uint16_t size)
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b082      	sub	sp, #8
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
 8005598:	460b      	mov	r3, r1
 800559a:	807b      	strh	r3, [r7, #2]
	HAL_UART_Receive(&huart1, (uint8_t*)(pData), size, HAL_MAX_DELAY);
 800559c:	887a      	ldrh	r2, [r7, #2]
 800559e:	f04f 33ff 	mov.w	r3, #4294967295
 80055a2:	6879      	ldr	r1, [r7, #4]
 80055a4:	4803      	ldr	r0, [pc, #12]	@ (80055b4 <drv_uart1_receive+0x24>)
 80055a6:	f7fd fec2 	bl	800332e <HAL_UART_Receive>

	return 0;	// Life's too short for error management
 80055aa:	2300      	movs	r3, #0
}
 80055ac:	4618      	mov	r0, r3
 80055ae:	3708      	adds	r7, #8
 80055b0:	46bd      	mov	sp, r7
 80055b2:	bd80      	pop	{r7, pc}
 80055b4:	20000900 	.word	0x20000900

080055b8 <drv_uart1_transmit>:

uint8_t drv_uart1_transmit(const char * pData, uint16_t size)
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b082      	sub	sp, #8
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
 80055c0:	460b      	mov	r3, r1
 80055c2:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit(&huart1, (uint8_t*)pData, size, HAL_MAX_DELAY);
 80055c4:	887a      	ldrh	r2, [r7, #2]
 80055c6:	f04f 33ff 	mov.w	r3, #4294967295
 80055ca:	6879      	ldr	r1, [r7, #4]
 80055cc:	4803      	ldr	r0, [pc, #12]	@ (80055dc <drv_uart1_transmit+0x24>)
 80055ce:	f7fd fe25 	bl	800321c <HAL_UART_Transmit>

	return 0;	// Srsly, don't do that kids
 80055d2:	2300      	movs	r3, #0
}
 80055d4:	4618      	mov	r0, r3
 80055d6:	3708      	adds	r7, #8
 80055d8:	46bd      	mov	sp, r7
 80055da:	bd80      	pop	{r7, pc}
 80055dc:	20000900 	.word	0x20000900

080055e0 <sh_help>:

#include "shell.h"

#include <stdio.h>

static int sh_help(h_shell_t * h_shell, int argc, char ** argv) {
 80055e0:	b590      	push	{r4, r7, lr}
 80055e2:	b08b      	sub	sp, #44	@ 0x2c
 80055e4:	af02      	add	r7, sp, #8
 80055e6:	60f8      	str	r0, [r7, #12]
 80055e8:	60b9      	str	r1, [r7, #8]
 80055ea:	607a      	str	r2, [r7, #4]
	int size;

	size = snprintf(h_shell->print_buffer, BUFFER_SIZE, "sh_help appelé avec %d argument(s)\r\n", argc);
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	f503 7041 	add.w	r0, r3, #772	@ 0x304
 80055f2:	68bb      	ldr	r3, [r7, #8]
 80055f4:	4a35      	ldr	r2, [pc, #212]	@ (80056cc <sh_help+0xec>)
 80055f6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80055fa:	f000 fba3 	bl	8005d44 <sniprintf>
 80055fe:	6178      	str	r0, [r7, #20]
	h_shell->drv.transmit(h_shell->print_buffer, size);
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	f8d3 3504 	ldr.w	r3, [r3, #1284]	@ 0x504
 8005606:	68fa      	ldr	r2, [r7, #12]
 8005608:	f502 7241 	add.w	r2, r2, #772	@ 0x304
 800560c:	6979      	ldr	r1, [r7, #20]
 800560e:	b289      	uxth	r1, r1
 8005610:	4610      	mov	r0, r2
 8005612:	4798      	blx	r3

	for(int i = 0; i < argc; i++) {
 8005614:	2300      	movs	r3, #0
 8005616:	61fb      	str	r3, [r7, #28]
 8005618:	e01c      	b.n	8005654 <sh_help+0x74>
		size = snprintf(h_shell->print_buffer, BUFFER_SIZE, "argv[%d] = %s\r\n", i, argv[i]);
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	f503 7041 	add.w	r0, r3, #772	@ 0x304
 8005620:	69fb      	ldr	r3, [r7, #28]
 8005622:	009b      	lsls	r3, r3, #2
 8005624:	687a      	ldr	r2, [r7, #4]
 8005626:	4413      	add	r3, r2
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	9300      	str	r3, [sp, #0]
 800562c:	69fb      	ldr	r3, [r7, #28]
 800562e:	4a28      	ldr	r2, [pc, #160]	@ (80056d0 <sh_help+0xf0>)
 8005630:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005634:	f000 fb86 	bl	8005d44 <sniprintf>
 8005638:	6178      	str	r0, [r7, #20]
		h_shell->drv.transmit(h_shell->print_buffer, size);
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	f8d3 3504 	ldr.w	r3, [r3, #1284]	@ 0x504
 8005640:	68fa      	ldr	r2, [r7, #12]
 8005642:	f502 7241 	add.w	r2, r2, #772	@ 0x304
 8005646:	6979      	ldr	r1, [r7, #20]
 8005648:	b289      	uxth	r1, r1
 800564a:	4610      	mov	r0, r2
 800564c:	4798      	blx	r3
	for(int i = 0; i < argc; i++) {
 800564e:	69fb      	ldr	r3, [r7, #28]
 8005650:	3301      	adds	r3, #1
 8005652:	61fb      	str	r3, [r7, #28]
 8005654:	69fa      	ldr	r2, [r7, #28]
 8005656:	68bb      	ldr	r3, [r7, #8]
 8005658:	429a      	cmp	r2, r3
 800565a:	dbde      	blt.n	800561a <sh_help+0x3a>
	}

	for(int i = 0 ; i < h_shell->func_list_size ; i++) {
 800565c:	2300      	movs	r3, #0
 800565e:	61bb      	str	r3, [r7, #24]
 8005660:	e02a      	b.n	80056b8 <sh_help+0xd8>
		size = snprintf(h_shell->print_buffer, BUFFER_SIZE, "%c: %s\r\n", h_shell->func_list[i].c, h_shell->func_list[i].description);
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	f503 7041 	add.w	r0, r3, #772	@ 0x304
 8005668:	68f9      	ldr	r1, [r7, #12]
 800566a:	69ba      	ldr	r2, [r7, #24]
 800566c:	4613      	mov	r3, r2
 800566e:	005b      	lsls	r3, r3, #1
 8005670:	4413      	add	r3, r2
 8005672:	009b      	lsls	r3, r3, #2
 8005674:	440b      	add	r3, r1
 8005676:	3304      	adds	r3, #4
 8005678:	781b      	ldrb	r3, [r3, #0]
 800567a:	461c      	mov	r4, r3
 800567c:	68f9      	ldr	r1, [r7, #12]
 800567e:	69ba      	ldr	r2, [r7, #24]
 8005680:	4613      	mov	r3, r2
 8005682:	005b      	lsls	r3, r3, #1
 8005684:	4413      	add	r3, r2
 8005686:	009b      	lsls	r3, r3, #2
 8005688:	440b      	add	r3, r1
 800568a:	330c      	adds	r3, #12
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	9300      	str	r3, [sp, #0]
 8005690:	4623      	mov	r3, r4
 8005692:	4a10      	ldr	r2, [pc, #64]	@ (80056d4 <sh_help+0xf4>)
 8005694:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005698:	f000 fb54 	bl	8005d44 <sniprintf>
 800569c:	6178      	str	r0, [r7, #20]
		h_shell->drv.transmit(h_shell->print_buffer, size);
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	f8d3 3504 	ldr.w	r3, [r3, #1284]	@ 0x504
 80056a4:	68fa      	ldr	r2, [r7, #12]
 80056a6:	f502 7241 	add.w	r2, r2, #772	@ 0x304
 80056aa:	6979      	ldr	r1, [r7, #20]
 80056ac:	b289      	uxth	r1, r1
 80056ae:	4610      	mov	r0, r2
 80056b0:	4798      	blx	r3
	for(int i = 0 ; i < h_shell->func_list_size ; i++) {
 80056b2:	69bb      	ldr	r3, [r7, #24]
 80056b4:	3301      	adds	r3, #1
 80056b6:	61bb      	str	r3, [r7, #24]
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	69ba      	ldr	r2, [r7, #24]
 80056be:	429a      	cmp	r2, r3
 80056c0:	dbcf      	blt.n	8005662 <sh_help+0x82>
	}
	return 0;
 80056c2:	2300      	movs	r3, #0
}
 80056c4:	4618      	mov	r0, r3
 80056c6:	3724      	adds	r7, #36	@ 0x24
 80056c8:	46bd      	mov	sp, r7
 80056ca:	bd90      	pop	{r4, r7, pc}
 80056cc:	08007080 	.word	0x08007080
 80056d0:	080070a8 	.word	0x080070a8
 80056d4:	080070b8 	.word	0x080070b8

080056d8 <shell_init>:

void shell_init(h_shell_t * h_shell) {
 80056d8:	b580      	push	{r7, lr}
 80056da:	b084      	sub	sp, #16
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
	int size = 0;
 80056e0:	2300      	movs	r3, #0
 80056e2:	60fb      	str	r3, [r7, #12]

	h_shell->func_list_size = 0;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2200      	movs	r2, #0
 80056e8:	601a      	str	r2, [r3, #0]

	size = snprintf (h_shell->print_buffer, BUFFER_SIZE, "\r\n\r\n===== Monsieur Shell v0.2 =====\r\n");
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	f503 7341 	add.w	r3, r3, #772	@ 0x304
 80056f0:	4a17      	ldr	r2, [pc, #92]	@ (8005750 <shell_init+0x78>)
 80056f2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80056f6:	4618      	mov	r0, r3
 80056f8:	f000 fb24 	bl	8005d44 <sniprintf>
 80056fc:	60f8      	str	r0, [r7, #12]
	h_shell->drv.transmit(h_shell->print_buffer, size);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	f8d3 3504 	ldr.w	r3, [r3, #1284]	@ 0x504
 8005704:	687a      	ldr	r2, [r7, #4]
 8005706:	f502 7241 	add.w	r2, r2, #772	@ 0x304
 800570a:	68f9      	ldr	r1, [r7, #12]
 800570c:	b289      	uxth	r1, r1
 800570e:	4610      	mov	r0, r2
 8005710:	4798      	blx	r3

	size = snprintf (h_shell->print_buffer, BUFFER_SIZE, "Correction TD (v0.2.1 du coup?)\r\n");
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	f503 7341 	add.w	r3, r3, #772	@ 0x304
 8005718:	4a0e      	ldr	r2, [pc, #56]	@ (8005754 <shell_init+0x7c>)
 800571a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800571e:	4618      	mov	r0, r3
 8005720:	f000 fb10 	bl	8005d44 <sniprintf>
 8005724:	60f8      	str	r0, [r7, #12]
	h_shell->drv.transmit(h_shell->print_buffer, size);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	f8d3 3504 	ldr.w	r3, [r3, #1284]	@ 0x504
 800572c:	687a      	ldr	r2, [r7, #4]
 800572e:	f502 7241 	add.w	r2, r2, #772	@ 0x304
 8005732:	68f9      	ldr	r1, [r7, #12]
 8005734:	b289      	uxth	r1, r1
 8005736:	4610      	mov	r0, r2
 8005738:	4798      	blx	r3

	shell_add(h_shell, 'h', sh_help, "Help");
 800573a:	4b07      	ldr	r3, [pc, #28]	@ (8005758 <shell_init+0x80>)
 800573c:	4a07      	ldr	r2, [pc, #28]	@ (800575c <shell_init+0x84>)
 800573e:	2168      	movs	r1, #104	@ 0x68
 8005740:	6878      	ldr	r0, [r7, #4]
 8005742:	f000 f80d 	bl	8005760 <shell_add>
}
 8005746:	bf00      	nop
 8005748:	3710      	adds	r7, #16
 800574a:	46bd      	mov	sp, r7
 800574c:	bd80      	pop	{r7, pc}
 800574e:	bf00      	nop
 8005750:	080070c4 	.word	0x080070c4
 8005754:	080070ec 	.word	0x080070ec
 8005758:	08007110 	.word	0x08007110
 800575c:	080055e1 	.word	0x080055e1

08005760 <shell_add>:

int shell_add(h_shell_t * h_shell, char c, shell_func_pointer_t pfunc, char * description) {
 8005760:	b480      	push	{r7}
 8005762:	b085      	sub	sp, #20
 8005764:	af00      	add	r7, sp, #0
 8005766:	60f8      	str	r0, [r7, #12]
 8005768:	607a      	str	r2, [r7, #4]
 800576a:	603b      	str	r3, [r7, #0]
 800576c:	460b      	mov	r3, r1
 800576e:	72fb      	strb	r3, [r7, #11]
	if (h_shell->func_list_size < SHELL_FUNC_LIST_MAX_SIZE) {
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	2b3f      	cmp	r3, #63	@ 0x3f
 8005776:	dc27      	bgt.n	80057c8 <shell_add+0x68>
		h_shell->func_list[h_shell->func_list_size].c = c;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681a      	ldr	r2, [r3, #0]
 800577c:	68f9      	ldr	r1, [r7, #12]
 800577e:	4613      	mov	r3, r2
 8005780:	005b      	lsls	r3, r3, #1
 8005782:	4413      	add	r3, r2
 8005784:	009b      	lsls	r3, r3, #2
 8005786:	440b      	add	r3, r1
 8005788:	3304      	adds	r3, #4
 800578a:	7afa      	ldrb	r2, [r7, #11]
 800578c:	701a      	strb	r2, [r3, #0]
		h_shell->func_list[h_shell->func_list_size].func = pfunc;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681a      	ldr	r2, [r3, #0]
 8005792:	68f9      	ldr	r1, [r7, #12]
 8005794:	4613      	mov	r3, r2
 8005796:	005b      	lsls	r3, r3, #1
 8005798:	4413      	add	r3, r2
 800579a:	009b      	lsls	r3, r3, #2
 800579c:	440b      	add	r3, r1
 800579e:	3308      	adds	r3, #8
 80057a0:	687a      	ldr	r2, [r7, #4]
 80057a2:	601a      	str	r2, [r3, #0]
		h_shell->func_list[h_shell->func_list_size].description = description;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681a      	ldr	r2, [r3, #0]
 80057a8:	68f9      	ldr	r1, [r7, #12]
 80057aa:	4613      	mov	r3, r2
 80057ac:	005b      	lsls	r3, r3, #1
 80057ae:	4413      	add	r3, r2
 80057b0:	009b      	lsls	r3, r3, #2
 80057b2:	440b      	add	r3, r1
 80057b4:	330c      	adds	r3, #12
 80057b6:	683a      	ldr	r2, [r7, #0]
 80057b8:	601a      	str	r2, [r3, #0]
		h_shell->func_list_size++;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	1c5a      	adds	r2, r3, #1
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	601a      	str	r2, [r3, #0]
		return 0;
 80057c4:	2300      	movs	r3, #0
 80057c6:	e001      	b.n	80057cc <shell_add+0x6c>
	}

	return -1;
 80057c8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80057cc:	4618      	mov	r0, r3
 80057ce:	3714      	adds	r7, #20
 80057d0:	46bd      	mov	sp, r7
 80057d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d6:	4770      	bx	lr

080057d8 <shell_exec>:

static int shell_exec(h_shell_t * h_shell, char * buf) {
 80057d8:	b580      	push	{r7, lr}
 80057da:	b090      	sub	sp, #64	@ 0x40
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
 80057e0:	6039      	str	r1, [r7, #0]
	int i;

	char c = buf[0];
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	781b      	ldrb	r3, [r3, #0]
 80057e6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

	int argc;
	char * argv[ARGC_MAX];
	char *p;

	for(i = 0 ; i < h_shell->func_list_size ; i++) {
 80057ea:	2300      	movs	r3, #0
 80057ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80057ee:	e041      	b.n	8005874 <shell_exec+0x9c>
		if (h_shell->func_list[i].c == c) {
 80057f0:	6879      	ldr	r1, [r7, #4]
 80057f2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80057f4:	4613      	mov	r3, r2
 80057f6:	005b      	lsls	r3, r3, #1
 80057f8:	4413      	add	r3, r2
 80057fa:	009b      	lsls	r3, r3, #2
 80057fc:	440b      	add	r3, r1
 80057fe:	3304      	adds	r3, #4
 8005800:	781b      	ldrb	r3, [r3, #0]
 8005802:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 8005806:	429a      	cmp	r2, r3
 8005808:	d131      	bne.n	800586e <shell_exec+0x96>
			argc = 1;
 800580a:	2301      	movs	r3, #1
 800580c:	63bb      	str	r3, [r7, #56]	@ 0x38
			argv[0] = buf;
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	60fb      	str	r3, [r7, #12]

			for(p = buf ; *p != '\0' && argc < ARGC_MAX ; p++){
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	637b      	str	r3, [r7, #52]	@ 0x34
 8005816:	e013      	b.n	8005840 <shell_exec+0x68>
				if(*p == ' ') {
 8005818:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800581a:	781b      	ldrb	r3, [r3, #0]
 800581c:	2b20      	cmp	r3, #32
 800581e:	d10c      	bne.n	800583a <shell_exec+0x62>
					*p = '\0';
 8005820:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005822:	2200      	movs	r2, #0
 8005824:	701a      	strb	r2, [r3, #0]
					argv[argc++] = p+1;
 8005826:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005828:	1c5a      	adds	r2, r3, #1
 800582a:	63ba      	str	r2, [r7, #56]	@ 0x38
 800582c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800582e:	3201      	adds	r2, #1
 8005830:	009b      	lsls	r3, r3, #2
 8005832:	3340      	adds	r3, #64	@ 0x40
 8005834:	443b      	add	r3, r7
 8005836:	f843 2c34 	str.w	r2, [r3, #-52]
			for(p = buf ; *p != '\0' && argc < ARGC_MAX ; p++){
 800583a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800583c:	3301      	adds	r3, #1
 800583e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005840:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005842:	781b      	ldrb	r3, [r3, #0]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d002      	beq.n	800584e <shell_exec+0x76>
 8005848:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800584a:	2b07      	cmp	r3, #7
 800584c:	dde4      	ble.n	8005818 <shell_exec+0x40>
				}
			}

			return h_shell->func_list[i].func(h_shell, argc, argv);
 800584e:	6879      	ldr	r1, [r7, #4]
 8005850:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005852:	4613      	mov	r3, r2
 8005854:	005b      	lsls	r3, r3, #1
 8005856:	4413      	add	r3, r2
 8005858:	009b      	lsls	r3, r3, #2
 800585a:	440b      	add	r3, r1
 800585c:	3308      	adds	r3, #8
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f107 020c 	add.w	r2, r7, #12
 8005864:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005866:	6878      	ldr	r0, [r7, #4]
 8005868:	4798      	blx	r3
 800586a:	4603      	mov	r3, r0
 800586c:	e01e      	b.n	80058ac <shell_exec+0xd4>
	for(i = 0 ; i < h_shell->func_list_size ; i++) {
 800586e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005870:	3301      	adds	r3, #1
 8005872:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800587a:	429a      	cmp	r2, r3
 800587c:	dbb8      	blt.n	80057f0 <shell_exec+0x18>
		}
	}

	int size;
	size = snprintf (h_shell->print_buffer, BUFFER_SIZE, "%c: no such command\r\n", c);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	f503 7041 	add.w	r0, r3, #772	@ 0x304
 8005884:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005888:	4a0a      	ldr	r2, [pc, #40]	@ (80058b4 <shell_exec+0xdc>)
 800588a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800588e:	f000 fa59 	bl	8005d44 <sniprintf>
 8005892:	62f8      	str	r0, [r7, #44]	@ 0x2c
	h_shell->drv.transmit(h_shell->print_buffer, size);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	f8d3 3504 	ldr.w	r3, [r3, #1284]	@ 0x504
 800589a:	687a      	ldr	r2, [r7, #4]
 800589c:	f502 7241 	add.w	r2, r2, #772	@ 0x304
 80058a0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80058a2:	b289      	uxth	r1, r1
 80058a4:	4610      	mov	r0, r2
 80058a6:	4798      	blx	r3
	return -1;
 80058a8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80058ac:	4618      	mov	r0, r3
 80058ae:	3740      	adds	r7, #64	@ 0x40
 80058b0:	46bd      	mov	sp, r7
 80058b2:	bd80      	pop	{r7, pc}
 80058b4:	08007118 	.word	0x08007118

080058b8 <shell_run>:

static const char backspace[] = "\b \b";
static const char prompt[] = "> ";

int shell_run(h_shell_t * h_shell) {
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b086      	sub	sp, #24
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
	int reading = 0;
 80058c0:	2300      	movs	r3, #0
 80058c2:	617b      	str	r3, [r7, #20]
	int pos = 0;
 80058c4:	2300      	movs	r3, #0
 80058c6:	613b      	str	r3, [r7, #16]

	while (1) {
		h_shell->drv.transmit(prompt, 2);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	f8d3 3504 	ldr.w	r3, [r3, #1284]	@ 0x504
 80058ce:	2102      	movs	r1, #2
 80058d0:	483b      	ldr	r0, [pc, #236]	@ (80059c0 <shell_run+0x108>)
 80058d2:	4798      	blx	r3
		reading = 1;
 80058d4:	2301      	movs	r3, #1
 80058d6:	617b      	str	r3, [r7, #20]

		while(reading) {
 80058d8:	e066      	b.n	80059a8 <shell_run+0xf0>
			char c;
			h_shell->drv.receive(&c, 1);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 80058e0:	f107 020b 	add.w	r2, r7, #11
 80058e4:	2101      	movs	r1, #1
 80058e6:	4610      	mov	r0, r2
 80058e8:	4798      	blx	r3
			int size;

			switch (c) {
 80058ea:	7afb      	ldrb	r3, [r7, #11]
 80058ec:	2b08      	cmp	r3, #8
 80058ee:	d038      	beq.n	8005962 <shell_run+0xaa>
 80058f0:	2b0d      	cmp	r3, #13
 80058f2:	d143      	bne.n	800597c <shell_run+0xc4>
			//process RETURN key
			case '\r':
				//case '\n':
				size = snprintf (h_shell->print_buffer, BUFFER_SIZE, "\r\n");
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	f503 7341 	add.w	r3, r3, #772	@ 0x304
 80058fa:	4a32      	ldr	r2, [pc, #200]	@ (80059c4 <shell_run+0x10c>)
 80058fc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005900:	4618      	mov	r0, r3
 8005902:	f000 fa1f 	bl	8005d44 <sniprintf>
 8005906:	60f8      	str	r0, [r7, #12]
				h_shell->drv.transmit(h_shell->print_buffer, size);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	@ 0x504
 800590e:	687a      	ldr	r2, [r7, #4]
 8005910:	f502 7241 	add.w	r2, r2, #772	@ 0x304
 8005914:	68f9      	ldr	r1, [r7, #12]
 8005916:	b289      	uxth	r1, r1
 8005918:	4610      	mov	r0, r2
 800591a:	4798      	blx	r3
				h_shell->cmd_buffer[pos++] = 0;     //add \0 char at end of string
 800591c:	693b      	ldr	r3, [r7, #16]
 800591e:	1c5a      	adds	r2, r3, #1
 8005920:	613a      	str	r2, [r7, #16]
 8005922:	687a      	ldr	r2, [r7, #4]
 8005924:	4413      	add	r3, r2
 8005926:	2200      	movs	r2, #0
 8005928:	f883 2404 	strb.w	r2, [r3, #1028]	@ 0x404
				size = snprintf (h_shell->print_buffer, BUFFER_SIZE, ":%s\r\n", h_shell->cmd_buffer);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	f503 7041 	add.w	r0, r3, #772	@ 0x304
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005938:	4a23      	ldr	r2, [pc, #140]	@ (80059c8 <shell_run+0x110>)
 800593a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800593e:	f000 fa01 	bl	8005d44 <sniprintf>
 8005942:	60f8      	str	r0, [r7, #12]
				h_shell->drv.transmit(h_shell->print_buffer, size);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	f8d3 3504 	ldr.w	r3, [r3, #1284]	@ 0x504
 800594a:	687a      	ldr	r2, [r7, #4]
 800594c:	f502 7241 	add.w	r2, r2, #772	@ 0x304
 8005950:	68f9      	ldr	r1, [r7, #12]
 8005952:	b289      	uxth	r1, r1
 8005954:	4610      	mov	r0, r2
 8005956:	4798      	blx	r3
				reading = 0;        //exit read loop
 8005958:	2300      	movs	r3, #0
 800595a:	617b      	str	r3, [r7, #20]
				pos = 0;            //reset buffer
 800595c:	2300      	movs	r3, #0
 800595e:	613b      	str	r3, [r7, #16]
				break;
 8005960:	e022      	b.n	80059a8 <shell_run+0xf0>
				//backspace
			case '\b':
				if (pos > 0) {      //is there a char to delete?
 8005962:	693b      	ldr	r3, [r7, #16]
 8005964:	2b00      	cmp	r3, #0
 8005966:	dd1e      	ble.n	80059a6 <shell_run+0xee>
					pos--;          //remove it in buffer
 8005968:	693b      	ldr	r3, [r7, #16]
 800596a:	3b01      	subs	r3, #1
 800596c:	613b      	str	r3, [r7, #16]

					h_shell->drv.transmit(backspace, 3);	// delete the char on the terminal
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	f8d3 3504 	ldr.w	r3, [r3, #1284]	@ 0x504
 8005974:	2103      	movs	r1, #3
 8005976:	4815      	ldr	r0, [pc, #84]	@ (80059cc <shell_run+0x114>)
 8005978:	4798      	blx	r3
				}
				break;
 800597a:	e014      	b.n	80059a6 <shell_run+0xee>
				//other characters
			default:
				//only store characters if buffer has space
				if (pos < BUFFER_SIZE) {
 800597c:	693b      	ldr	r3, [r7, #16]
 800597e:	2bff      	cmp	r3, #255	@ 0xff
 8005980:	dc12      	bgt.n	80059a8 <shell_run+0xf0>
					h_shell->drv.transmit(&c, 1);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	f8d3 3504 	ldr.w	r3, [r3, #1284]	@ 0x504
 8005988:	f107 020b 	add.w	r2, r7, #11
 800598c:	2101      	movs	r1, #1
 800598e:	4610      	mov	r0, r2
 8005990:	4798      	blx	r3
					h_shell->cmd_buffer[pos++] = c; //store
 8005992:	693b      	ldr	r3, [r7, #16]
 8005994:	1c5a      	adds	r2, r3, #1
 8005996:	613a      	str	r2, [r7, #16]
 8005998:	7af9      	ldrb	r1, [r7, #11]
 800599a:	687a      	ldr	r2, [r7, #4]
 800599c:	4413      	add	r3, r2
 800599e:	460a      	mov	r2, r1
 80059a0:	f883 2404 	strb.w	r2, [r3, #1028]	@ 0x404
 80059a4:	e000      	b.n	80059a8 <shell_run+0xf0>
				break;
 80059a6:	bf00      	nop
		while(reading) {
 80059a8:	697b      	ldr	r3, [r7, #20]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d195      	bne.n	80058da <shell_run+0x22>
				}
			}
		}
		shell_exec(h_shell, h_shell->cmd_buffer);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80059b4:	4619      	mov	r1, r3
 80059b6:	6878      	ldr	r0, [r7, #4]
 80059b8:	f7ff ff0e 	bl	80057d8 <shell_exec>
		h_shell->drv.transmit(prompt, 2);
 80059bc:	e784      	b.n	80058c8 <shell_run+0x10>
 80059be:	bf00      	nop
 80059c0:	08007158 	.word	0x08007158
 80059c4:	08007130 	.word	0x08007130
 80059c8:	08007134 	.word	0x08007134
 80059cc:	08007154 	.word	0x08007154

080059d0 <atoi>:
 80059d0:	220a      	movs	r2, #10
 80059d2:	2100      	movs	r1, #0
 80059d4:	f000 b87a 	b.w	8005acc <strtol>

080059d8 <_strtol_l.isra.0>:
 80059d8:	2b24      	cmp	r3, #36	@ 0x24
 80059da:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80059de:	4686      	mov	lr, r0
 80059e0:	4690      	mov	r8, r2
 80059e2:	d801      	bhi.n	80059e8 <_strtol_l.isra.0+0x10>
 80059e4:	2b01      	cmp	r3, #1
 80059e6:	d106      	bne.n	80059f6 <_strtol_l.isra.0+0x1e>
 80059e8:	f000 fb1c 	bl	8006024 <__errno>
 80059ec:	2316      	movs	r3, #22
 80059ee:	6003      	str	r3, [r0, #0]
 80059f0:	2000      	movs	r0, #0
 80059f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059f6:	4834      	ldr	r0, [pc, #208]	@ (8005ac8 <_strtol_l.isra.0+0xf0>)
 80059f8:	460d      	mov	r5, r1
 80059fa:	462a      	mov	r2, r5
 80059fc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005a00:	5d06      	ldrb	r6, [r0, r4]
 8005a02:	f016 0608 	ands.w	r6, r6, #8
 8005a06:	d1f8      	bne.n	80059fa <_strtol_l.isra.0+0x22>
 8005a08:	2c2d      	cmp	r4, #45	@ 0x2d
 8005a0a:	d110      	bne.n	8005a2e <_strtol_l.isra.0+0x56>
 8005a0c:	782c      	ldrb	r4, [r5, #0]
 8005a0e:	2601      	movs	r6, #1
 8005a10:	1c95      	adds	r5, r2, #2
 8005a12:	f033 0210 	bics.w	r2, r3, #16
 8005a16:	d115      	bne.n	8005a44 <_strtol_l.isra.0+0x6c>
 8005a18:	2c30      	cmp	r4, #48	@ 0x30
 8005a1a:	d10d      	bne.n	8005a38 <_strtol_l.isra.0+0x60>
 8005a1c:	782a      	ldrb	r2, [r5, #0]
 8005a1e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8005a22:	2a58      	cmp	r2, #88	@ 0x58
 8005a24:	d108      	bne.n	8005a38 <_strtol_l.isra.0+0x60>
 8005a26:	786c      	ldrb	r4, [r5, #1]
 8005a28:	3502      	adds	r5, #2
 8005a2a:	2310      	movs	r3, #16
 8005a2c:	e00a      	b.n	8005a44 <_strtol_l.isra.0+0x6c>
 8005a2e:	2c2b      	cmp	r4, #43	@ 0x2b
 8005a30:	bf04      	itt	eq
 8005a32:	782c      	ldrbeq	r4, [r5, #0]
 8005a34:	1c95      	addeq	r5, r2, #2
 8005a36:	e7ec      	b.n	8005a12 <_strtol_l.isra.0+0x3a>
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d1f6      	bne.n	8005a2a <_strtol_l.isra.0+0x52>
 8005a3c:	2c30      	cmp	r4, #48	@ 0x30
 8005a3e:	bf14      	ite	ne
 8005a40:	230a      	movne	r3, #10
 8005a42:	2308      	moveq	r3, #8
 8005a44:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8005a48:	f10c 3cff 	add.w	ip, ip, #4294967295
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	fbbc f9f3 	udiv	r9, ip, r3
 8005a52:	4610      	mov	r0, r2
 8005a54:	fb03 ca19 	mls	sl, r3, r9, ip
 8005a58:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8005a5c:	2f09      	cmp	r7, #9
 8005a5e:	d80f      	bhi.n	8005a80 <_strtol_l.isra.0+0xa8>
 8005a60:	463c      	mov	r4, r7
 8005a62:	42a3      	cmp	r3, r4
 8005a64:	dd1b      	ble.n	8005a9e <_strtol_l.isra.0+0xc6>
 8005a66:	1c57      	adds	r7, r2, #1
 8005a68:	d007      	beq.n	8005a7a <_strtol_l.isra.0+0xa2>
 8005a6a:	4581      	cmp	r9, r0
 8005a6c:	d314      	bcc.n	8005a98 <_strtol_l.isra.0+0xc0>
 8005a6e:	d101      	bne.n	8005a74 <_strtol_l.isra.0+0x9c>
 8005a70:	45a2      	cmp	sl, r4
 8005a72:	db11      	blt.n	8005a98 <_strtol_l.isra.0+0xc0>
 8005a74:	fb00 4003 	mla	r0, r0, r3, r4
 8005a78:	2201      	movs	r2, #1
 8005a7a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005a7e:	e7eb      	b.n	8005a58 <_strtol_l.isra.0+0x80>
 8005a80:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8005a84:	2f19      	cmp	r7, #25
 8005a86:	d801      	bhi.n	8005a8c <_strtol_l.isra.0+0xb4>
 8005a88:	3c37      	subs	r4, #55	@ 0x37
 8005a8a:	e7ea      	b.n	8005a62 <_strtol_l.isra.0+0x8a>
 8005a8c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8005a90:	2f19      	cmp	r7, #25
 8005a92:	d804      	bhi.n	8005a9e <_strtol_l.isra.0+0xc6>
 8005a94:	3c57      	subs	r4, #87	@ 0x57
 8005a96:	e7e4      	b.n	8005a62 <_strtol_l.isra.0+0x8a>
 8005a98:	f04f 32ff 	mov.w	r2, #4294967295
 8005a9c:	e7ed      	b.n	8005a7a <_strtol_l.isra.0+0xa2>
 8005a9e:	1c53      	adds	r3, r2, #1
 8005aa0:	d108      	bne.n	8005ab4 <_strtol_l.isra.0+0xdc>
 8005aa2:	2322      	movs	r3, #34	@ 0x22
 8005aa4:	f8ce 3000 	str.w	r3, [lr]
 8005aa8:	4660      	mov	r0, ip
 8005aaa:	f1b8 0f00 	cmp.w	r8, #0
 8005aae:	d0a0      	beq.n	80059f2 <_strtol_l.isra.0+0x1a>
 8005ab0:	1e69      	subs	r1, r5, #1
 8005ab2:	e006      	b.n	8005ac2 <_strtol_l.isra.0+0xea>
 8005ab4:	b106      	cbz	r6, 8005ab8 <_strtol_l.isra.0+0xe0>
 8005ab6:	4240      	negs	r0, r0
 8005ab8:	f1b8 0f00 	cmp.w	r8, #0
 8005abc:	d099      	beq.n	80059f2 <_strtol_l.isra.0+0x1a>
 8005abe:	2a00      	cmp	r2, #0
 8005ac0:	d1f6      	bne.n	8005ab0 <_strtol_l.isra.0+0xd8>
 8005ac2:	f8c8 1000 	str.w	r1, [r8]
 8005ac6:	e794      	b.n	80059f2 <_strtol_l.isra.0+0x1a>
 8005ac8:	0800715c 	.word	0x0800715c

08005acc <strtol>:
 8005acc:	4613      	mov	r3, r2
 8005ace:	460a      	mov	r2, r1
 8005ad0:	4601      	mov	r1, r0
 8005ad2:	4802      	ldr	r0, [pc, #8]	@ (8005adc <strtol+0x10>)
 8005ad4:	6800      	ldr	r0, [r0, #0]
 8005ad6:	f7ff bf7f 	b.w	80059d8 <_strtol_l.isra.0>
 8005ada:	bf00      	nop
 8005adc:	2000011c 	.word	0x2000011c

08005ae0 <std>:
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	b510      	push	{r4, lr}
 8005ae4:	4604      	mov	r4, r0
 8005ae6:	e9c0 3300 	strd	r3, r3, [r0]
 8005aea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005aee:	6083      	str	r3, [r0, #8]
 8005af0:	8181      	strh	r1, [r0, #12]
 8005af2:	6643      	str	r3, [r0, #100]	@ 0x64
 8005af4:	81c2      	strh	r2, [r0, #14]
 8005af6:	6183      	str	r3, [r0, #24]
 8005af8:	4619      	mov	r1, r3
 8005afa:	2208      	movs	r2, #8
 8005afc:	305c      	adds	r0, #92	@ 0x5c
 8005afe:	f000 fa2f 	bl	8005f60 <memset>
 8005b02:	4b0d      	ldr	r3, [pc, #52]	@ (8005b38 <std+0x58>)
 8005b04:	6263      	str	r3, [r4, #36]	@ 0x24
 8005b06:	4b0d      	ldr	r3, [pc, #52]	@ (8005b3c <std+0x5c>)
 8005b08:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005b0a:	4b0d      	ldr	r3, [pc, #52]	@ (8005b40 <std+0x60>)
 8005b0c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005b0e:	4b0d      	ldr	r3, [pc, #52]	@ (8005b44 <std+0x64>)
 8005b10:	6323      	str	r3, [r4, #48]	@ 0x30
 8005b12:	4b0d      	ldr	r3, [pc, #52]	@ (8005b48 <std+0x68>)
 8005b14:	6224      	str	r4, [r4, #32]
 8005b16:	429c      	cmp	r4, r3
 8005b18:	d006      	beq.n	8005b28 <std+0x48>
 8005b1a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005b1e:	4294      	cmp	r4, r2
 8005b20:	d002      	beq.n	8005b28 <std+0x48>
 8005b22:	33d0      	adds	r3, #208	@ 0xd0
 8005b24:	429c      	cmp	r4, r3
 8005b26:	d105      	bne.n	8005b34 <std+0x54>
 8005b28:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005b2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b30:	f000 baa2 	b.w	8006078 <__retarget_lock_init_recursive>
 8005b34:	bd10      	pop	{r4, pc}
 8005b36:	bf00      	nop
 8005b38:	08005db1 	.word	0x08005db1
 8005b3c:	08005dd3 	.word	0x08005dd3
 8005b40:	08005e0b 	.word	0x08005e0b
 8005b44:	08005e2f 	.word	0x08005e2f
 8005b48:	200046d8 	.word	0x200046d8

08005b4c <stdio_exit_handler>:
 8005b4c:	4a02      	ldr	r2, [pc, #8]	@ (8005b58 <stdio_exit_handler+0xc>)
 8005b4e:	4903      	ldr	r1, [pc, #12]	@ (8005b5c <stdio_exit_handler+0x10>)
 8005b50:	4803      	ldr	r0, [pc, #12]	@ (8005b60 <stdio_exit_handler+0x14>)
 8005b52:	f000 b869 	b.w	8005c28 <_fwalk_sglue>
 8005b56:	bf00      	nop
 8005b58:	20000110 	.word	0x20000110
 8005b5c:	08006be1 	.word	0x08006be1
 8005b60:	20000120 	.word	0x20000120

08005b64 <cleanup_stdio>:
 8005b64:	6841      	ldr	r1, [r0, #4]
 8005b66:	4b0c      	ldr	r3, [pc, #48]	@ (8005b98 <cleanup_stdio+0x34>)
 8005b68:	4299      	cmp	r1, r3
 8005b6a:	b510      	push	{r4, lr}
 8005b6c:	4604      	mov	r4, r0
 8005b6e:	d001      	beq.n	8005b74 <cleanup_stdio+0x10>
 8005b70:	f001 f836 	bl	8006be0 <_fflush_r>
 8005b74:	68a1      	ldr	r1, [r4, #8]
 8005b76:	4b09      	ldr	r3, [pc, #36]	@ (8005b9c <cleanup_stdio+0x38>)
 8005b78:	4299      	cmp	r1, r3
 8005b7a:	d002      	beq.n	8005b82 <cleanup_stdio+0x1e>
 8005b7c:	4620      	mov	r0, r4
 8005b7e:	f001 f82f 	bl	8006be0 <_fflush_r>
 8005b82:	68e1      	ldr	r1, [r4, #12]
 8005b84:	4b06      	ldr	r3, [pc, #24]	@ (8005ba0 <cleanup_stdio+0x3c>)
 8005b86:	4299      	cmp	r1, r3
 8005b88:	d004      	beq.n	8005b94 <cleanup_stdio+0x30>
 8005b8a:	4620      	mov	r0, r4
 8005b8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b90:	f001 b826 	b.w	8006be0 <_fflush_r>
 8005b94:	bd10      	pop	{r4, pc}
 8005b96:	bf00      	nop
 8005b98:	200046d8 	.word	0x200046d8
 8005b9c:	20004740 	.word	0x20004740
 8005ba0:	200047a8 	.word	0x200047a8

08005ba4 <global_stdio_init.part.0>:
 8005ba4:	b510      	push	{r4, lr}
 8005ba6:	4b0b      	ldr	r3, [pc, #44]	@ (8005bd4 <global_stdio_init.part.0+0x30>)
 8005ba8:	4c0b      	ldr	r4, [pc, #44]	@ (8005bd8 <global_stdio_init.part.0+0x34>)
 8005baa:	4a0c      	ldr	r2, [pc, #48]	@ (8005bdc <global_stdio_init.part.0+0x38>)
 8005bac:	601a      	str	r2, [r3, #0]
 8005bae:	4620      	mov	r0, r4
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	2104      	movs	r1, #4
 8005bb4:	f7ff ff94 	bl	8005ae0 <std>
 8005bb8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005bbc:	2201      	movs	r2, #1
 8005bbe:	2109      	movs	r1, #9
 8005bc0:	f7ff ff8e 	bl	8005ae0 <std>
 8005bc4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005bc8:	2202      	movs	r2, #2
 8005bca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005bce:	2112      	movs	r1, #18
 8005bd0:	f7ff bf86 	b.w	8005ae0 <std>
 8005bd4:	20004810 	.word	0x20004810
 8005bd8:	200046d8 	.word	0x200046d8
 8005bdc:	08005b4d 	.word	0x08005b4d

08005be0 <__sfp_lock_acquire>:
 8005be0:	4801      	ldr	r0, [pc, #4]	@ (8005be8 <__sfp_lock_acquire+0x8>)
 8005be2:	f000 ba4a 	b.w	800607a <__retarget_lock_acquire_recursive>
 8005be6:	bf00      	nop
 8005be8:	20004819 	.word	0x20004819

08005bec <__sfp_lock_release>:
 8005bec:	4801      	ldr	r0, [pc, #4]	@ (8005bf4 <__sfp_lock_release+0x8>)
 8005bee:	f000 ba45 	b.w	800607c <__retarget_lock_release_recursive>
 8005bf2:	bf00      	nop
 8005bf4:	20004819 	.word	0x20004819

08005bf8 <__sinit>:
 8005bf8:	b510      	push	{r4, lr}
 8005bfa:	4604      	mov	r4, r0
 8005bfc:	f7ff fff0 	bl	8005be0 <__sfp_lock_acquire>
 8005c00:	6a23      	ldr	r3, [r4, #32]
 8005c02:	b11b      	cbz	r3, 8005c0c <__sinit+0x14>
 8005c04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c08:	f7ff bff0 	b.w	8005bec <__sfp_lock_release>
 8005c0c:	4b04      	ldr	r3, [pc, #16]	@ (8005c20 <__sinit+0x28>)
 8005c0e:	6223      	str	r3, [r4, #32]
 8005c10:	4b04      	ldr	r3, [pc, #16]	@ (8005c24 <__sinit+0x2c>)
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d1f5      	bne.n	8005c04 <__sinit+0xc>
 8005c18:	f7ff ffc4 	bl	8005ba4 <global_stdio_init.part.0>
 8005c1c:	e7f2      	b.n	8005c04 <__sinit+0xc>
 8005c1e:	bf00      	nop
 8005c20:	08005b65 	.word	0x08005b65
 8005c24:	20004810 	.word	0x20004810

08005c28 <_fwalk_sglue>:
 8005c28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c2c:	4607      	mov	r7, r0
 8005c2e:	4688      	mov	r8, r1
 8005c30:	4614      	mov	r4, r2
 8005c32:	2600      	movs	r6, #0
 8005c34:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005c38:	f1b9 0901 	subs.w	r9, r9, #1
 8005c3c:	d505      	bpl.n	8005c4a <_fwalk_sglue+0x22>
 8005c3e:	6824      	ldr	r4, [r4, #0]
 8005c40:	2c00      	cmp	r4, #0
 8005c42:	d1f7      	bne.n	8005c34 <_fwalk_sglue+0xc>
 8005c44:	4630      	mov	r0, r6
 8005c46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c4a:	89ab      	ldrh	r3, [r5, #12]
 8005c4c:	2b01      	cmp	r3, #1
 8005c4e:	d907      	bls.n	8005c60 <_fwalk_sglue+0x38>
 8005c50:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005c54:	3301      	adds	r3, #1
 8005c56:	d003      	beq.n	8005c60 <_fwalk_sglue+0x38>
 8005c58:	4629      	mov	r1, r5
 8005c5a:	4638      	mov	r0, r7
 8005c5c:	47c0      	blx	r8
 8005c5e:	4306      	orrs	r6, r0
 8005c60:	3568      	adds	r5, #104	@ 0x68
 8005c62:	e7e9      	b.n	8005c38 <_fwalk_sglue+0x10>

08005c64 <iprintf>:
 8005c64:	b40f      	push	{r0, r1, r2, r3}
 8005c66:	b507      	push	{r0, r1, r2, lr}
 8005c68:	4906      	ldr	r1, [pc, #24]	@ (8005c84 <iprintf+0x20>)
 8005c6a:	ab04      	add	r3, sp, #16
 8005c6c:	6808      	ldr	r0, [r1, #0]
 8005c6e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005c72:	6881      	ldr	r1, [r0, #8]
 8005c74:	9301      	str	r3, [sp, #4]
 8005c76:	f000 fc8b 	bl	8006590 <_vfiprintf_r>
 8005c7a:	b003      	add	sp, #12
 8005c7c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005c80:	b004      	add	sp, #16
 8005c82:	4770      	bx	lr
 8005c84:	2000011c 	.word	0x2000011c

08005c88 <_puts_r>:
 8005c88:	6a03      	ldr	r3, [r0, #32]
 8005c8a:	b570      	push	{r4, r5, r6, lr}
 8005c8c:	6884      	ldr	r4, [r0, #8]
 8005c8e:	4605      	mov	r5, r0
 8005c90:	460e      	mov	r6, r1
 8005c92:	b90b      	cbnz	r3, 8005c98 <_puts_r+0x10>
 8005c94:	f7ff ffb0 	bl	8005bf8 <__sinit>
 8005c98:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005c9a:	07db      	lsls	r3, r3, #31
 8005c9c:	d405      	bmi.n	8005caa <_puts_r+0x22>
 8005c9e:	89a3      	ldrh	r3, [r4, #12]
 8005ca0:	0598      	lsls	r0, r3, #22
 8005ca2:	d402      	bmi.n	8005caa <_puts_r+0x22>
 8005ca4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005ca6:	f000 f9e8 	bl	800607a <__retarget_lock_acquire_recursive>
 8005caa:	89a3      	ldrh	r3, [r4, #12]
 8005cac:	0719      	lsls	r1, r3, #28
 8005cae:	d502      	bpl.n	8005cb6 <_puts_r+0x2e>
 8005cb0:	6923      	ldr	r3, [r4, #16]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d135      	bne.n	8005d22 <_puts_r+0x9a>
 8005cb6:	4621      	mov	r1, r4
 8005cb8:	4628      	mov	r0, r5
 8005cba:	f000 f8fb 	bl	8005eb4 <__swsetup_r>
 8005cbe:	b380      	cbz	r0, 8005d22 <_puts_r+0x9a>
 8005cc0:	f04f 35ff 	mov.w	r5, #4294967295
 8005cc4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005cc6:	07da      	lsls	r2, r3, #31
 8005cc8:	d405      	bmi.n	8005cd6 <_puts_r+0x4e>
 8005cca:	89a3      	ldrh	r3, [r4, #12]
 8005ccc:	059b      	lsls	r3, r3, #22
 8005cce:	d402      	bmi.n	8005cd6 <_puts_r+0x4e>
 8005cd0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005cd2:	f000 f9d3 	bl	800607c <__retarget_lock_release_recursive>
 8005cd6:	4628      	mov	r0, r5
 8005cd8:	bd70      	pop	{r4, r5, r6, pc}
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	da04      	bge.n	8005ce8 <_puts_r+0x60>
 8005cde:	69a2      	ldr	r2, [r4, #24]
 8005ce0:	429a      	cmp	r2, r3
 8005ce2:	dc17      	bgt.n	8005d14 <_puts_r+0x8c>
 8005ce4:	290a      	cmp	r1, #10
 8005ce6:	d015      	beq.n	8005d14 <_puts_r+0x8c>
 8005ce8:	6823      	ldr	r3, [r4, #0]
 8005cea:	1c5a      	adds	r2, r3, #1
 8005cec:	6022      	str	r2, [r4, #0]
 8005cee:	7019      	strb	r1, [r3, #0]
 8005cf0:	68a3      	ldr	r3, [r4, #8]
 8005cf2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005cf6:	3b01      	subs	r3, #1
 8005cf8:	60a3      	str	r3, [r4, #8]
 8005cfa:	2900      	cmp	r1, #0
 8005cfc:	d1ed      	bne.n	8005cda <_puts_r+0x52>
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	da11      	bge.n	8005d26 <_puts_r+0x9e>
 8005d02:	4622      	mov	r2, r4
 8005d04:	210a      	movs	r1, #10
 8005d06:	4628      	mov	r0, r5
 8005d08:	f000 f895 	bl	8005e36 <__swbuf_r>
 8005d0c:	3001      	adds	r0, #1
 8005d0e:	d0d7      	beq.n	8005cc0 <_puts_r+0x38>
 8005d10:	250a      	movs	r5, #10
 8005d12:	e7d7      	b.n	8005cc4 <_puts_r+0x3c>
 8005d14:	4622      	mov	r2, r4
 8005d16:	4628      	mov	r0, r5
 8005d18:	f000 f88d 	bl	8005e36 <__swbuf_r>
 8005d1c:	3001      	adds	r0, #1
 8005d1e:	d1e7      	bne.n	8005cf0 <_puts_r+0x68>
 8005d20:	e7ce      	b.n	8005cc0 <_puts_r+0x38>
 8005d22:	3e01      	subs	r6, #1
 8005d24:	e7e4      	b.n	8005cf0 <_puts_r+0x68>
 8005d26:	6823      	ldr	r3, [r4, #0]
 8005d28:	1c5a      	adds	r2, r3, #1
 8005d2a:	6022      	str	r2, [r4, #0]
 8005d2c:	220a      	movs	r2, #10
 8005d2e:	701a      	strb	r2, [r3, #0]
 8005d30:	e7ee      	b.n	8005d10 <_puts_r+0x88>
	...

08005d34 <puts>:
 8005d34:	4b02      	ldr	r3, [pc, #8]	@ (8005d40 <puts+0xc>)
 8005d36:	4601      	mov	r1, r0
 8005d38:	6818      	ldr	r0, [r3, #0]
 8005d3a:	f7ff bfa5 	b.w	8005c88 <_puts_r>
 8005d3e:	bf00      	nop
 8005d40:	2000011c 	.word	0x2000011c

08005d44 <sniprintf>:
 8005d44:	b40c      	push	{r2, r3}
 8005d46:	b530      	push	{r4, r5, lr}
 8005d48:	4b18      	ldr	r3, [pc, #96]	@ (8005dac <sniprintf+0x68>)
 8005d4a:	1e0c      	subs	r4, r1, #0
 8005d4c:	681d      	ldr	r5, [r3, #0]
 8005d4e:	b09d      	sub	sp, #116	@ 0x74
 8005d50:	da08      	bge.n	8005d64 <sniprintf+0x20>
 8005d52:	238b      	movs	r3, #139	@ 0x8b
 8005d54:	602b      	str	r3, [r5, #0]
 8005d56:	f04f 30ff 	mov.w	r0, #4294967295
 8005d5a:	b01d      	add	sp, #116	@ 0x74
 8005d5c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005d60:	b002      	add	sp, #8
 8005d62:	4770      	bx	lr
 8005d64:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8005d68:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005d6c:	f04f 0300 	mov.w	r3, #0
 8005d70:	931b      	str	r3, [sp, #108]	@ 0x6c
 8005d72:	bf14      	ite	ne
 8005d74:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005d78:	4623      	moveq	r3, r4
 8005d7a:	9304      	str	r3, [sp, #16]
 8005d7c:	9307      	str	r3, [sp, #28]
 8005d7e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005d82:	9002      	str	r0, [sp, #8]
 8005d84:	9006      	str	r0, [sp, #24]
 8005d86:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005d8a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8005d8c:	ab21      	add	r3, sp, #132	@ 0x84
 8005d8e:	a902      	add	r1, sp, #8
 8005d90:	4628      	mov	r0, r5
 8005d92:	9301      	str	r3, [sp, #4]
 8005d94:	f000 fad6 	bl	8006344 <_svfiprintf_r>
 8005d98:	1c43      	adds	r3, r0, #1
 8005d9a:	bfbc      	itt	lt
 8005d9c:	238b      	movlt	r3, #139	@ 0x8b
 8005d9e:	602b      	strlt	r3, [r5, #0]
 8005da0:	2c00      	cmp	r4, #0
 8005da2:	d0da      	beq.n	8005d5a <sniprintf+0x16>
 8005da4:	9b02      	ldr	r3, [sp, #8]
 8005da6:	2200      	movs	r2, #0
 8005da8:	701a      	strb	r2, [r3, #0]
 8005daa:	e7d6      	b.n	8005d5a <sniprintf+0x16>
 8005dac:	2000011c 	.word	0x2000011c

08005db0 <__sread>:
 8005db0:	b510      	push	{r4, lr}
 8005db2:	460c      	mov	r4, r1
 8005db4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005db8:	f000 f910 	bl	8005fdc <_read_r>
 8005dbc:	2800      	cmp	r0, #0
 8005dbe:	bfab      	itete	ge
 8005dc0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005dc2:	89a3      	ldrhlt	r3, [r4, #12]
 8005dc4:	181b      	addge	r3, r3, r0
 8005dc6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005dca:	bfac      	ite	ge
 8005dcc:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005dce:	81a3      	strhlt	r3, [r4, #12]
 8005dd0:	bd10      	pop	{r4, pc}

08005dd2 <__swrite>:
 8005dd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005dd6:	461f      	mov	r7, r3
 8005dd8:	898b      	ldrh	r3, [r1, #12]
 8005dda:	05db      	lsls	r3, r3, #23
 8005ddc:	4605      	mov	r5, r0
 8005dde:	460c      	mov	r4, r1
 8005de0:	4616      	mov	r6, r2
 8005de2:	d505      	bpl.n	8005df0 <__swrite+0x1e>
 8005de4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005de8:	2302      	movs	r3, #2
 8005dea:	2200      	movs	r2, #0
 8005dec:	f000 f8e4 	bl	8005fb8 <_lseek_r>
 8005df0:	89a3      	ldrh	r3, [r4, #12]
 8005df2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005df6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005dfa:	81a3      	strh	r3, [r4, #12]
 8005dfc:	4632      	mov	r2, r6
 8005dfe:	463b      	mov	r3, r7
 8005e00:	4628      	mov	r0, r5
 8005e02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005e06:	f000 b8fb 	b.w	8006000 <_write_r>

08005e0a <__sseek>:
 8005e0a:	b510      	push	{r4, lr}
 8005e0c:	460c      	mov	r4, r1
 8005e0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e12:	f000 f8d1 	bl	8005fb8 <_lseek_r>
 8005e16:	1c43      	adds	r3, r0, #1
 8005e18:	89a3      	ldrh	r3, [r4, #12]
 8005e1a:	bf15      	itete	ne
 8005e1c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005e1e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005e22:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005e26:	81a3      	strheq	r3, [r4, #12]
 8005e28:	bf18      	it	ne
 8005e2a:	81a3      	strhne	r3, [r4, #12]
 8005e2c:	bd10      	pop	{r4, pc}

08005e2e <__sclose>:
 8005e2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e32:	f000 b8b1 	b.w	8005f98 <_close_r>

08005e36 <__swbuf_r>:
 8005e36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e38:	460e      	mov	r6, r1
 8005e3a:	4614      	mov	r4, r2
 8005e3c:	4605      	mov	r5, r0
 8005e3e:	b118      	cbz	r0, 8005e48 <__swbuf_r+0x12>
 8005e40:	6a03      	ldr	r3, [r0, #32]
 8005e42:	b90b      	cbnz	r3, 8005e48 <__swbuf_r+0x12>
 8005e44:	f7ff fed8 	bl	8005bf8 <__sinit>
 8005e48:	69a3      	ldr	r3, [r4, #24]
 8005e4a:	60a3      	str	r3, [r4, #8]
 8005e4c:	89a3      	ldrh	r3, [r4, #12]
 8005e4e:	071a      	lsls	r2, r3, #28
 8005e50:	d501      	bpl.n	8005e56 <__swbuf_r+0x20>
 8005e52:	6923      	ldr	r3, [r4, #16]
 8005e54:	b943      	cbnz	r3, 8005e68 <__swbuf_r+0x32>
 8005e56:	4621      	mov	r1, r4
 8005e58:	4628      	mov	r0, r5
 8005e5a:	f000 f82b 	bl	8005eb4 <__swsetup_r>
 8005e5e:	b118      	cbz	r0, 8005e68 <__swbuf_r+0x32>
 8005e60:	f04f 37ff 	mov.w	r7, #4294967295
 8005e64:	4638      	mov	r0, r7
 8005e66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e68:	6823      	ldr	r3, [r4, #0]
 8005e6a:	6922      	ldr	r2, [r4, #16]
 8005e6c:	1a98      	subs	r0, r3, r2
 8005e6e:	6963      	ldr	r3, [r4, #20]
 8005e70:	b2f6      	uxtb	r6, r6
 8005e72:	4283      	cmp	r3, r0
 8005e74:	4637      	mov	r7, r6
 8005e76:	dc05      	bgt.n	8005e84 <__swbuf_r+0x4e>
 8005e78:	4621      	mov	r1, r4
 8005e7a:	4628      	mov	r0, r5
 8005e7c:	f000 feb0 	bl	8006be0 <_fflush_r>
 8005e80:	2800      	cmp	r0, #0
 8005e82:	d1ed      	bne.n	8005e60 <__swbuf_r+0x2a>
 8005e84:	68a3      	ldr	r3, [r4, #8]
 8005e86:	3b01      	subs	r3, #1
 8005e88:	60a3      	str	r3, [r4, #8]
 8005e8a:	6823      	ldr	r3, [r4, #0]
 8005e8c:	1c5a      	adds	r2, r3, #1
 8005e8e:	6022      	str	r2, [r4, #0]
 8005e90:	701e      	strb	r6, [r3, #0]
 8005e92:	6962      	ldr	r2, [r4, #20]
 8005e94:	1c43      	adds	r3, r0, #1
 8005e96:	429a      	cmp	r2, r3
 8005e98:	d004      	beq.n	8005ea4 <__swbuf_r+0x6e>
 8005e9a:	89a3      	ldrh	r3, [r4, #12]
 8005e9c:	07db      	lsls	r3, r3, #31
 8005e9e:	d5e1      	bpl.n	8005e64 <__swbuf_r+0x2e>
 8005ea0:	2e0a      	cmp	r6, #10
 8005ea2:	d1df      	bne.n	8005e64 <__swbuf_r+0x2e>
 8005ea4:	4621      	mov	r1, r4
 8005ea6:	4628      	mov	r0, r5
 8005ea8:	f000 fe9a 	bl	8006be0 <_fflush_r>
 8005eac:	2800      	cmp	r0, #0
 8005eae:	d0d9      	beq.n	8005e64 <__swbuf_r+0x2e>
 8005eb0:	e7d6      	b.n	8005e60 <__swbuf_r+0x2a>
	...

08005eb4 <__swsetup_r>:
 8005eb4:	b538      	push	{r3, r4, r5, lr}
 8005eb6:	4b29      	ldr	r3, [pc, #164]	@ (8005f5c <__swsetup_r+0xa8>)
 8005eb8:	4605      	mov	r5, r0
 8005eba:	6818      	ldr	r0, [r3, #0]
 8005ebc:	460c      	mov	r4, r1
 8005ebe:	b118      	cbz	r0, 8005ec8 <__swsetup_r+0x14>
 8005ec0:	6a03      	ldr	r3, [r0, #32]
 8005ec2:	b90b      	cbnz	r3, 8005ec8 <__swsetup_r+0x14>
 8005ec4:	f7ff fe98 	bl	8005bf8 <__sinit>
 8005ec8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005ecc:	0719      	lsls	r1, r3, #28
 8005ece:	d422      	bmi.n	8005f16 <__swsetup_r+0x62>
 8005ed0:	06da      	lsls	r2, r3, #27
 8005ed2:	d407      	bmi.n	8005ee4 <__swsetup_r+0x30>
 8005ed4:	2209      	movs	r2, #9
 8005ed6:	602a      	str	r2, [r5, #0]
 8005ed8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005edc:	81a3      	strh	r3, [r4, #12]
 8005ede:	f04f 30ff 	mov.w	r0, #4294967295
 8005ee2:	e033      	b.n	8005f4c <__swsetup_r+0x98>
 8005ee4:	0758      	lsls	r0, r3, #29
 8005ee6:	d512      	bpl.n	8005f0e <__swsetup_r+0x5a>
 8005ee8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005eea:	b141      	cbz	r1, 8005efe <__swsetup_r+0x4a>
 8005eec:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005ef0:	4299      	cmp	r1, r3
 8005ef2:	d002      	beq.n	8005efa <__swsetup_r+0x46>
 8005ef4:	4628      	mov	r0, r5
 8005ef6:	f000 f8d1 	bl	800609c <_free_r>
 8005efa:	2300      	movs	r3, #0
 8005efc:	6363      	str	r3, [r4, #52]	@ 0x34
 8005efe:	89a3      	ldrh	r3, [r4, #12]
 8005f00:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005f04:	81a3      	strh	r3, [r4, #12]
 8005f06:	2300      	movs	r3, #0
 8005f08:	6063      	str	r3, [r4, #4]
 8005f0a:	6923      	ldr	r3, [r4, #16]
 8005f0c:	6023      	str	r3, [r4, #0]
 8005f0e:	89a3      	ldrh	r3, [r4, #12]
 8005f10:	f043 0308 	orr.w	r3, r3, #8
 8005f14:	81a3      	strh	r3, [r4, #12]
 8005f16:	6923      	ldr	r3, [r4, #16]
 8005f18:	b94b      	cbnz	r3, 8005f2e <__swsetup_r+0x7a>
 8005f1a:	89a3      	ldrh	r3, [r4, #12]
 8005f1c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005f20:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005f24:	d003      	beq.n	8005f2e <__swsetup_r+0x7a>
 8005f26:	4621      	mov	r1, r4
 8005f28:	4628      	mov	r0, r5
 8005f2a:	f000 fea7 	bl	8006c7c <__smakebuf_r>
 8005f2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005f32:	f013 0201 	ands.w	r2, r3, #1
 8005f36:	d00a      	beq.n	8005f4e <__swsetup_r+0x9a>
 8005f38:	2200      	movs	r2, #0
 8005f3a:	60a2      	str	r2, [r4, #8]
 8005f3c:	6962      	ldr	r2, [r4, #20]
 8005f3e:	4252      	negs	r2, r2
 8005f40:	61a2      	str	r2, [r4, #24]
 8005f42:	6922      	ldr	r2, [r4, #16]
 8005f44:	b942      	cbnz	r2, 8005f58 <__swsetup_r+0xa4>
 8005f46:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005f4a:	d1c5      	bne.n	8005ed8 <__swsetup_r+0x24>
 8005f4c:	bd38      	pop	{r3, r4, r5, pc}
 8005f4e:	0799      	lsls	r1, r3, #30
 8005f50:	bf58      	it	pl
 8005f52:	6962      	ldrpl	r2, [r4, #20]
 8005f54:	60a2      	str	r2, [r4, #8]
 8005f56:	e7f4      	b.n	8005f42 <__swsetup_r+0x8e>
 8005f58:	2000      	movs	r0, #0
 8005f5a:	e7f7      	b.n	8005f4c <__swsetup_r+0x98>
 8005f5c:	2000011c 	.word	0x2000011c

08005f60 <memset>:
 8005f60:	4402      	add	r2, r0
 8005f62:	4603      	mov	r3, r0
 8005f64:	4293      	cmp	r3, r2
 8005f66:	d100      	bne.n	8005f6a <memset+0xa>
 8005f68:	4770      	bx	lr
 8005f6a:	f803 1b01 	strb.w	r1, [r3], #1
 8005f6e:	e7f9      	b.n	8005f64 <memset+0x4>

08005f70 <strncpy>:
 8005f70:	b510      	push	{r4, lr}
 8005f72:	3901      	subs	r1, #1
 8005f74:	4603      	mov	r3, r0
 8005f76:	b132      	cbz	r2, 8005f86 <strncpy+0x16>
 8005f78:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8005f7c:	f803 4b01 	strb.w	r4, [r3], #1
 8005f80:	3a01      	subs	r2, #1
 8005f82:	2c00      	cmp	r4, #0
 8005f84:	d1f7      	bne.n	8005f76 <strncpy+0x6>
 8005f86:	441a      	add	r2, r3
 8005f88:	2100      	movs	r1, #0
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	d100      	bne.n	8005f90 <strncpy+0x20>
 8005f8e:	bd10      	pop	{r4, pc}
 8005f90:	f803 1b01 	strb.w	r1, [r3], #1
 8005f94:	e7f9      	b.n	8005f8a <strncpy+0x1a>
	...

08005f98 <_close_r>:
 8005f98:	b538      	push	{r3, r4, r5, lr}
 8005f9a:	4d06      	ldr	r5, [pc, #24]	@ (8005fb4 <_close_r+0x1c>)
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	4604      	mov	r4, r0
 8005fa0:	4608      	mov	r0, r1
 8005fa2:	602b      	str	r3, [r5, #0]
 8005fa4:	f7fb fb5b 	bl	800165e <_close>
 8005fa8:	1c43      	adds	r3, r0, #1
 8005faa:	d102      	bne.n	8005fb2 <_close_r+0x1a>
 8005fac:	682b      	ldr	r3, [r5, #0]
 8005fae:	b103      	cbz	r3, 8005fb2 <_close_r+0x1a>
 8005fb0:	6023      	str	r3, [r4, #0]
 8005fb2:	bd38      	pop	{r3, r4, r5, pc}
 8005fb4:	20004814 	.word	0x20004814

08005fb8 <_lseek_r>:
 8005fb8:	b538      	push	{r3, r4, r5, lr}
 8005fba:	4d07      	ldr	r5, [pc, #28]	@ (8005fd8 <_lseek_r+0x20>)
 8005fbc:	4604      	mov	r4, r0
 8005fbe:	4608      	mov	r0, r1
 8005fc0:	4611      	mov	r1, r2
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	602a      	str	r2, [r5, #0]
 8005fc6:	461a      	mov	r2, r3
 8005fc8:	f7fb fb70 	bl	80016ac <_lseek>
 8005fcc:	1c43      	adds	r3, r0, #1
 8005fce:	d102      	bne.n	8005fd6 <_lseek_r+0x1e>
 8005fd0:	682b      	ldr	r3, [r5, #0]
 8005fd2:	b103      	cbz	r3, 8005fd6 <_lseek_r+0x1e>
 8005fd4:	6023      	str	r3, [r4, #0]
 8005fd6:	bd38      	pop	{r3, r4, r5, pc}
 8005fd8:	20004814 	.word	0x20004814

08005fdc <_read_r>:
 8005fdc:	b538      	push	{r3, r4, r5, lr}
 8005fde:	4d07      	ldr	r5, [pc, #28]	@ (8005ffc <_read_r+0x20>)
 8005fe0:	4604      	mov	r4, r0
 8005fe2:	4608      	mov	r0, r1
 8005fe4:	4611      	mov	r1, r2
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	602a      	str	r2, [r5, #0]
 8005fea:	461a      	mov	r2, r3
 8005fec:	f7fb fafe 	bl	80015ec <_read>
 8005ff0:	1c43      	adds	r3, r0, #1
 8005ff2:	d102      	bne.n	8005ffa <_read_r+0x1e>
 8005ff4:	682b      	ldr	r3, [r5, #0]
 8005ff6:	b103      	cbz	r3, 8005ffa <_read_r+0x1e>
 8005ff8:	6023      	str	r3, [r4, #0]
 8005ffa:	bd38      	pop	{r3, r4, r5, pc}
 8005ffc:	20004814 	.word	0x20004814

08006000 <_write_r>:
 8006000:	b538      	push	{r3, r4, r5, lr}
 8006002:	4d07      	ldr	r5, [pc, #28]	@ (8006020 <_write_r+0x20>)
 8006004:	4604      	mov	r4, r0
 8006006:	4608      	mov	r0, r1
 8006008:	4611      	mov	r1, r2
 800600a:	2200      	movs	r2, #0
 800600c:	602a      	str	r2, [r5, #0]
 800600e:	461a      	mov	r2, r3
 8006010:	f7fb fb09 	bl	8001626 <_write>
 8006014:	1c43      	adds	r3, r0, #1
 8006016:	d102      	bne.n	800601e <_write_r+0x1e>
 8006018:	682b      	ldr	r3, [r5, #0]
 800601a:	b103      	cbz	r3, 800601e <_write_r+0x1e>
 800601c:	6023      	str	r3, [r4, #0]
 800601e:	bd38      	pop	{r3, r4, r5, pc}
 8006020:	20004814 	.word	0x20004814

08006024 <__errno>:
 8006024:	4b01      	ldr	r3, [pc, #4]	@ (800602c <__errno+0x8>)
 8006026:	6818      	ldr	r0, [r3, #0]
 8006028:	4770      	bx	lr
 800602a:	bf00      	nop
 800602c:	2000011c 	.word	0x2000011c

08006030 <__libc_init_array>:
 8006030:	b570      	push	{r4, r5, r6, lr}
 8006032:	4d0d      	ldr	r5, [pc, #52]	@ (8006068 <__libc_init_array+0x38>)
 8006034:	4c0d      	ldr	r4, [pc, #52]	@ (800606c <__libc_init_array+0x3c>)
 8006036:	1b64      	subs	r4, r4, r5
 8006038:	10a4      	asrs	r4, r4, #2
 800603a:	2600      	movs	r6, #0
 800603c:	42a6      	cmp	r6, r4
 800603e:	d109      	bne.n	8006054 <__libc_init_array+0x24>
 8006040:	4d0b      	ldr	r5, [pc, #44]	@ (8006070 <__libc_init_array+0x40>)
 8006042:	4c0c      	ldr	r4, [pc, #48]	@ (8006074 <__libc_init_array+0x44>)
 8006044:	f000 fed8 	bl	8006df8 <_init>
 8006048:	1b64      	subs	r4, r4, r5
 800604a:	10a4      	asrs	r4, r4, #2
 800604c:	2600      	movs	r6, #0
 800604e:	42a6      	cmp	r6, r4
 8006050:	d105      	bne.n	800605e <__libc_init_array+0x2e>
 8006052:	bd70      	pop	{r4, r5, r6, pc}
 8006054:	f855 3b04 	ldr.w	r3, [r5], #4
 8006058:	4798      	blx	r3
 800605a:	3601      	adds	r6, #1
 800605c:	e7ee      	b.n	800603c <__libc_init_array+0xc>
 800605e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006062:	4798      	blx	r3
 8006064:	3601      	adds	r6, #1
 8006066:	e7f2      	b.n	800604e <__libc_init_array+0x1e>
 8006068:	08007298 	.word	0x08007298
 800606c:	08007298 	.word	0x08007298
 8006070:	08007298 	.word	0x08007298
 8006074:	0800729c 	.word	0x0800729c

08006078 <__retarget_lock_init_recursive>:
 8006078:	4770      	bx	lr

0800607a <__retarget_lock_acquire_recursive>:
 800607a:	4770      	bx	lr

0800607c <__retarget_lock_release_recursive>:
 800607c:	4770      	bx	lr

0800607e <memcpy>:
 800607e:	440a      	add	r2, r1
 8006080:	4291      	cmp	r1, r2
 8006082:	f100 33ff 	add.w	r3, r0, #4294967295
 8006086:	d100      	bne.n	800608a <memcpy+0xc>
 8006088:	4770      	bx	lr
 800608a:	b510      	push	{r4, lr}
 800608c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006090:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006094:	4291      	cmp	r1, r2
 8006096:	d1f9      	bne.n	800608c <memcpy+0xe>
 8006098:	bd10      	pop	{r4, pc}
	...

0800609c <_free_r>:
 800609c:	b538      	push	{r3, r4, r5, lr}
 800609e:	4605      	mov	r5, r0
 80060a0:	2900      	cmp	r1, #0
 80060a2:	d041      	beq.n	8006128 <_free_r+0x8c>
 80060a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80060a8:	1f0c      	subs	r4, r1, #4
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	bfb8      	it	lt
 80060ae:	18e4      	addlt	r4, r4, r3
 80060b0:	f000 f8e0 	bl	8006274 <__malloc_lock>
 80060b4:	4a1d      	ldr	r2, [pc, #116]	@ (800612c <_free_r+0x90>)
 80060b6:	6813      	ldr	r3, [r2, #0]
 80060b8:	b933      	cbnz	r3, 80060c8 <_free_r+0x2c>
 80060ba:	6063      	str	r3, [r4, #4]
 80060bc:	6014      	str	r4, [r2, #0]
 80060be:	4628      	mov	r0, r5
 80060c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80060c4:	f000 b8dc 	b.w	8006280 <__malloc_unlock>
 80060c8:	42a3      	cmp	r3, r4
 80060ca:	d908      	bls.n	80060de <_free_r+0x42>
 80060cc:	6820      	ldr	r0, [r4, #0]
 80060ce:	1821      	adds	r1, r4, r0
 80060d0:	428b      	cmp	r3, r1
 80060d2:	bf01      	itttt	eq
 80060d4:	6819      	ldreq	r1, [r3, #0]
 80060d6:	685b      	ldreq	r3, [r3, #4]
 80060d8:	1809      	addeq	r1, r1, r0
 80060da:	6021      	streq	r1, [r4, #0]
 80060dc:	e7ed      	b.n	80060ba <_free_r+0x1e>
 80060de:	461a      	mov	r2, r3
 80060e0:	685b      	ldr	r3, [r3, #4]
 80060e2:	b10b      	cbz	r3, 80060e8 <_free_r+0x4c>
 80060e4:	42a3      	cmp	r3, r4
 80060e6:	d9fa      	bls.n	80060de <_free_r+0x42>
 80060e8:	6811      	ldr	r1, [r2, #0]
 80060ea:	1850      	adds	r0, r2, r1
 80060ec:	42a0      	cmp	r0, r4
 80060ee:	d10b      	bne.n	8006108 <_free_r+0x6c>
 80060f0:	6820      	ldr	r0, [r4, #0]
 80060f2:	4401      	add	r1, r0
 80060f4:	1850      	adds	r0, r2, r1
 80060f6:	4283      	cmp	r3, r0
 80060f8:	6011      	str	r1, [r2, #0]
 80060fa:	d1e0      	bne.n	80060be <_free_r+0x22>
 80060fc:	6818      	ldr	r0, [r3, #0]
 80060fe:	685b      	ldr	r3, [r3, #4]
 8006100:	6053      	str	r3, [r2, #4]
 8006102:	4408      	add	r0, r1
 8006104:	6010      	str	r0, [r2, #0]
 8006106:	e7da      	b.n	80060be <_free_r+0x22>
 8006108:	d902      	bls.n	8006110 <_free_r+0x74>
 800610a:	230c      	movs	r3, #12
 800610c:	602b      	str	r3, [r5, #0]
 800610e:	e7d6      	b.n	80060be <_free_r+0x22>
 8006110:	6820      	ldr	r0, [r4, #0]
 8006112:	1821      	adds	r1, r4, r0
 8006114:	428b      	cmp	r3, r1
 8006116:	bf04      	itt	eq
 8006118:	6819      	ldreq	r1, [r3, #0]
 800611a:	685b      	ldreq	r3, [r3, #4]
 800611c:	6063      	str	r3, [r4, #4]
 800611e:	bf04      	itt	eq
 8006120:	1809      	addeq	r1, r1, r0
 8006122:	6021      	streq	r1, [r4, #0]
 8006124:	6054      	str	r4, [r2, #4]
 8006126:	e7ca      	b.n	80060be <_free_r+0x22>
 8006128:	bd38      	pop	{r3, r4, r5, pc}
 800612a:	bf00      	nop
 800612c:	20004820 	.word	0x20004820

08006130 <sbrk_aligned>:
 8006130:	b570      	push	{r4, r5, r6, lr}
 8006132:	4e0f      	ldr	r6, [pc, #60]	@ (8006170 <sbrk_aligned+0x40>)
 8006134:	460c      	mov	r4, r1
 8006136:	6831      	ldr	r1, [r6, #0]
 8006138:	4605      	mov	r5, r0
 800613a:	b911      	cbnz	r1, 8006142 <sbrk_aligned+0x12>
 800613c:	f000 fe16 	bl	8006d6c <_sbrk_r>
 8006140:	6030      	str	r0, [r6, #0]
 8006142:	4621      	mov	r1, r4
 8006144:	4628      	mov	r0, r5
 8006146:	f000 fe11 	bl	8006d6c <_sbrk_r>
 800614a:	1c43      	adds	r3, r0, #1
 800614c:	d103      	bne.n	8006156 <sbrk_aligned+0x26>
 800614e:	f04f 34ff 	mov.w	r4, #4294967295
 8006152:	4620      	mov	r0, r4
 8006154:	bd70      	pop	{r4, r5, r6, pc}
 8006156:	1cc4      	adds	r4, r0, #3
 8006158:	f024 0403 	bic.w	r4, r4, #3
 800615c:	42a0      	cmp	r0, r4
 800615e:	d0f8      	beq.n	8006152 <sbrk_aligned+0x22>
 8006160:	1a21      	subs	r1, r4, r0
 8006162:	4628      	mov	r0, r5
 8006164:	f000 fe02 	bl	8006d6c <_sbrk_r>
 8006168:	3001      	adds	r0, #1
 800616a:	d1f2      	bne.n	8006152 <sbrk_aligned+0x22>
 800616c:	e7ef      	b.n	800614e <sbrk_aligned+0x1e>
 800616e:	bf00      	nop
 8006170:	2000481c 	.word	0x2000481c

08006174 <_malloc_r>:
 8006174:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006178:	1ccd      	adds	r5, r1, #3
 800617a:	f025 0503 	bic.w	r5, r5, #3
 800617e:	3508      	adds	r5, #8
 8006180:	2d0c      	cmp	r5, #12
 8006182:	bf38      	it	cc
 8006184:	250c      	movcc	r5, #12
 8006186:	2d00      	cmp	r5, #0
 8006188:	4606      	mov	r6, r0
 800618a:	db01      	blt.n	8006190 <_malloc_r+0x1c>
 800618c:	42a9      	cmp	r1, r5
 800618e:	d904      	bls.n	800619a <_malloc_r+0x26>
 8006190:	230c      	movs	r3, #12
 8006192:	6033      	str	r3, [r6, #0]
 8006194:	2000      	movs	r0, #0
 8006196:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800619a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006270 <_malloc_r+0xfc>
 800619e:	f000 f869 	bl	8006274 <__malloc_lock>
 80061a2:	f8d8 3000 	ldr.w	r3, [r8]
 80061a6:	461c      	mov	r4, r3
 80061a8:	bb44      	cbnz	r4, 80061fc <_malloc_r+0x88>
 80061aa:	4629      	mov	r1, r5
 80061ac:	4630      	mov	r0, r6
 80061ae:	f7ff ffbf 	bl	8006130 <sbrk_aligned>
 80061b2:	1c43      	adds	r3, r0, #1
 80061b4:	4604      	mov	r4, r0
 80061b6:	d158      	bne.n	800626a <_malloc_r+0xf6>
 80061b8:	f8d8 4000 	ldr.w	r4, [r8]
 80061bc:	4627      	mov	r7, r4
 80061be:	2f00      	cmp	r7, #0
 80061c0:	d143      	bne.n	800624a <_malloc_r+0xd6>
 80061c2:	2c00      	cmp	r4, #0
 80061c4:	d04b      	beq.n	800625e <_malloc_r+0xea>
 80061c6:	6823      	ldr	r3, [r4, #0]
 80061c8:	4639      	mov	r1, r7
 80061ca:	4630      	mov	r0, r6
 80061cc:	eb04 0903 	add.w	r9, r4, r3
 80061d0:	f000 fdcc 	bl	8006d6c <_sbrk_r>
 80061d4:	4581      	cmp	r9, r0
 80061d6:	d142      	bne.n	800625e <_malloc_r+0xea>
 80061d8:	6821      	ldr	r1, [r4, #0]
 80061da:	1a6d      	subs	r5, r5, r1
 80061dc:	4629      	mov	r1, r5
 80061de:	4630      	mov	r0, r6
 80061e0:	f7ff ffa6 	bl	8006130 <sbrk_aligned>
 80061e4:	3001      	adds	r0, #1
 80061e6:	d03a      	beq.n	800625e <_malloc_r+0xea>
 80061e8:	6823      	ldr	r3, [r4, #0]
 80061ea:	442b      	add	r3, r5
 80061ec:	6023      	str	r3, [r4, #0]
 80061ee:	f8d8 3000 	ldr.w	r3, [r8]
 80061f2:	685a      	ldr	r2, [r3, #4]
 80061f4:	bb62      	cbnz	r2, 8006250 <_malloc_r+0xdc>
 80061f6:	f8c8 7000 	str.w	r7, [r8]
 80061fa:	e00f      	b.n	800621c <_malloc_r+0xa8>
 80061fc:	6822      	ldr	r2, [r4, #0]
 80061fe:	1b52      	subs	r2, r2, r5
 8006200:	d420      	bmi.n	8006244 <_malloc_r+0xd0>
 8006202:	2a0b      	cmp	r2, #11
 8006204:	d917      	bls.n	8006236 <_malloc_r+0xc2>
 8006206:	1961      	adds	r1, r4, r5
 8006208:	42a3      	cmp	r3, r4
 800620a:	6025      	str	r5, [r4, #0]
 800620c:	bf18      	it	ne
 800620e:	6059      	strne	r1, [r3, #4]
 8006210:	6863      	ldr	r3, [r4, #4]
 8006212:	bf08      	it	eq
 8006214:	f8c8 1000 	streq.w	r1, [r8]
 8006218:	5162      	str	r2, [r4, r5]
 800621a:	604b      	str	r3, [r1, #4]
 800621c:	4630      	mov	r0, r6
 800621e:	f000 f82f 	bl	8006280 <__malloc_unlock>
 8006222:	f104 000b 	add.w	r0, r4, #11
 8006226:	1d23      	adds	r3, r4, #4
 8006228:	f020 0007 	bic.w	r0, r0, #7
 800622c:	1ac2      	subs	r2, r0, r3
 800622e:	bf1c      	itt	ne
 8006230:	1a1b      	subne	r3, r3, r0
 8006232:	50a3      	strne	r3, [r4, r2]
 8006234:	e7af      	b.n	8006196 <_malloc_r+0x22>
 8006236:	6862      	ldr	r2, [r4, #4]
 8006238:	42a3      	cmp	r3, r4
 800623a:	bf0c      	ite	eq
 800623c:	f8c8 2000 	streq.w	r2, [r8]
 8006240:	605a      	strne	r2, [r3, #4]
 8006242:	e7eb      	b.n	800621c <_malloc_r+0xa8>
 8006244:	4623      	mov	r3, r4
 8006246:	6864      	ldr	r4, [r4, #4]
 8006248:	e7ae      	b.n	80061a8 <_malloc_r+0x34>
 800624a:	463c      	mov	r4, r7
 800624c:	687f      	ldr	r7, [r7, #4]
 800624e:	e7b6      	b.n	80061be <_malloc_r+0x4a>
 8006250:	461a      	mov	r2, r3
 8006252:	685b      	ldr	r3, [r3, #4]
 8006254:	42a3      	cmp	r3, r4
 8006256:	d1fb      	bne.n	8006250 <_malloc_r+0xdc>
 8006258:	2300      	movs	r3, #0
 800625a:	6053      	str	r3, [r2, #4]
 800625c:	e7de      	b.n	800621c <_malloc_r+0xa8>
 800625e:	230c      	movs	r3, #12
 8006260:	6033      	str	r3, [r6, #0]
 8006262:	4630      	mov	r0, r6
 8006264:	f000 f80c 	bl	8006280 <__malloc_unlock>
 8006268:	e794      	b.n	8006194 <_malloc_r+0x20>
 800626a:	6005      	str	r5, [r0, #0]
 800626c:	e7d6      	b.n	800621c <_malloc_r+0xa8>
 800626e:	bf00      	nop
 8006270:	20004820 	.word	0x20004820

08006274 <__malloc_lock>:
 8006274:	4801      	ldr	r0, [pc, #4]	@ (800627c <__malloc_lock+0x8>)
 8006276:	f7ff bf00 	b.w	800607a <__retarget_lock_acquire_recursive>
 800627a:	bf00      	nop
 800627c:	20004818 	.word	0x20004818

08006280 <__malloc_unlock>:
 8006280:	4801      	ldr	r0, [pc, #4]	@ (8006288 <__malloc_unlock+0x8>)
 8006282:	f7ff befb 	b.w	800607c <__retarget_lock_release_recursive>
 8006286:	bf00      	nop
 8006288:	20004818 	.word	0x20004818

0800628c <__ssputs_r>:
 800628c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006290:	688e      	ldr	r6, [r1, #8]
 8006292:	461f      	mov	r7, r3
 8006294:	42be      	cmp	r6, r7
 8006296:	680b      	ldr	r3, [r1, #0]
 8006298:	4682      	mov	sl, r0
 800629a:	460c      	mov	r4, r1
 800629c:	4690      	mov	r8, r2
 800629e:	d82d      	bhi.n	80062fc <__ssputs_r+0x70>
 80062a0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80062a4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80062a8:	d026      	beq.n	80062f8 <__ssputs_r+0x6c>
 80062aa:	6965      	ldr	r5, [r4, #20]
 80062ac:	6909      	ldr	r1, [r1, #16]
 80062ae:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80062b2:	eba3 0901 	sub.w	r9, r3, r1
 80062b6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80062ba:	1c7b      	adds	r3, r7, #1
 80062bc:	444b      	add	r3, r9
 80062be:	106d      	asrs	r5, r5, #1
 80062c0:	429d      	cmp	r5, r3
 80062c2:	bf38      	it	cc
 80062c4:	461d      	movcc	r5, r3
 80062c6:	0553      	lsls	r3, r2, #21
 80062c8:	d527      	bpl.n	800631a <__ssputs_r+0x8e>
 80062ca:	4629      	mov	r1, r5
 80062cc:	f7ff ff52 	bl	8006174 <_malloc_r>
 80062d0:	4606      	mov	r6, r0
 80062d2:	b360      	cbz	r0, 800632e <__ssputs_r+0xa2>
 80062d4:	6921      	ldr	r1, [r4, #16]
 80062d6:	464a      	mov	r2, r9
 80062d8:	f7ff fed1 	bl	800607e <memcpy>
 80062dc:	89a3      	ldrh	r3, [r4, #12]
 80062de:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80062e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80062e6:	81a3      	strh	r3, [r4, #12]
 80062e8:	6126      	str	r6, [r4, #16]
 80062ea:	6165      	str	r5, [r4, #20]
 80062ec:	444e      	add	r6, r9
 80062ee:	eba5 0509 	sub.w	r5, r5, r9
 80062f2:	6026      	str	r6, [r4, #0]
 80062f4:	60a5      	str	r5, [r4, #8]
 80062f6:	463e      	mov	r6, r7
 80062f8:	42be      	cmp	r6, r7
 80062fa:	d900      	bls.n	80062fe <__ssputs_r+0x72>
 80062fc:	463e      	mov	r6, r7
 80062fe:	6820      	ldr	r0, [r4, #0]
 8006300:	4632      	mov	r2, r6
 8006302:	4641      	mov	r1, r8
 8006304:	f000 fcf6 	bl	8006cf4 <memmove>
 8006308:	68a3      	ldr	r3, [r4, #8]
 800630a:	1b9b      	subs	r3, r3, r6
 800630c:	60a3      	str	r3, [r4, #8]
 800630e:	6823      	ldr	r3, [r4, #0]
 8006310:	4433      	add	r3, r6
 8006312:	6023      	str	r3, [r4, #0]
 8006314:	2000      	movs	r0, #0
 8006316:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800631a:	462a      	mov	r2, r5
 800631c:	f000 fd36 	bl	8006d8c <_realloc_r>
 8006320:	4606      	mov	r6, r0
 8006322:	2800      	cmp	r0, #0
 8006324:	d1e0      	bne.n	80062e8 <__ssputs_r+0x5c>
 8006326:	6921      	ldr	r1, [r4, #16]
 8006328:	4650      	mov	r0, sl
 800632a:	f7ff feb7 	bl	800609c <_free_r>
 800632e:	230c      	movs	r3, #12
 8006330:	f8ca 3000 	str.w	r3, [sl]
 8006334:	89a3      	ldrh	r3, [r4, #12]
 8006336:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800633a:	81a3      	strh	r3, [r4, #12]
 800633c:	f04f 30ff 	mov.w	r0, #4294967295
 8006340:	e7e9      	b.n	8006316 <__ssputs_r+0x8a>
	...

08006344 <_svfiprintf_r>:
 8006344:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006348:	4698      	mov	r8, r3
 800634a:	898b      	ldrh	r3, [r1, #12]
 800634c:	061b      	lsls	r3, r3, #24
 800634e:	b09d      	sub	sp, #116	@ 0x74
 8006350:	4607      	mov	r7, r0
 8006352:	460d      	mov	r5, r1
 8006354:	4614      	mov	r4, r2
 8006356:	d510      	bpl.n	800637a <_svfiprintf_r+0x36>
 8006358:	690b      	ldr	r3, [r1, #16]
 800635a:	b973      	cbnz	r3, 800637a <_svfiprintf_r+0x36>
 800635c:	2140      	movs	r1, #64	@ 0x40
 800635e:	f7ff ff09 	bl	8006174 <_malloc_r>
 8006362:	6028      	str	r0, [r5, #0]
 8006364:	6128      	str	r0, [r5, #16]
 8006366:	b930      	cbnz	r0, 8006376 <_svfiprintf_r+0x32>
 8006368:	230c      	movs	r3, #12
 800636a:	603b      	str	r3, [r7, #0]
 800636c:	f04f 30ff 	mov.w	r0, #4294967295
 8006370:	b01d      	add	sp, #116	@ 0x74
 8006372:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006376:	2340      	movs	r3, #64	@ 0x40
 8006378:	616b      	str	r3, [r5, #20]
 800637a:	2300      	movs	r3, #0
 800637c:	9309      	str	r3, [sp, #36]	@ 0x24
 800637e:	2320      	movs	r3, #32
 8006380:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006384:	f8cd 800c 	str.w	r8, [sp, #12]
 8006388:	2330      	movs	r3, #48	@ 0x30
 800638a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006528 <_svfiprintf_r+0x1e4>
 800638e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006392:	f04f 0901 	mov.w	r9, #1
 8006396:	4623      	mov	r3, r4
 8006398:	469a      	mov	sl, r3
 800639a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800639e:	b10a      	cbz	r2, 80063a4 <_svfiprintf_r+0x60>
 80063a0:	2a25      	cmp	r2, #37	@ 0x25
 80063a2:	d1f9      	bne.n	8006398 <_svfiprintf_r+0x54>
 80063a4:	ebba 0b04 	subs.w	fp, sl, r4
 80063a8:	d00b      	beq.n	80063c2 <_svfiprintf_r+0x7e>
 80063aa:	465b      	mov	r3, fp
 80063ac:	4622      	mov	r2, r4
 80063ae:	4629      	mov	r1, r5
 80063b0:	4638      	mov	r0, r7
 80063b2:	f7ff ff6b 	bl	800628c <__ssputs_r>
 80063b6:	3001      	adds	r0, #1
 80063b8:	f000 80a7 	beq.w	800650a <_svfiprintf_r+0x1c6>
 80063bc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80063be:	445a      	add	r2, fp
 80063c0:	9209      	str	r2, [sp, #36]	@ 0x24
 80063c2:	f89a 3000 	ldrb.w	r3, [sl]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	f000 809f 	beq.w	800650a <_svfiprintf_r+0x1c6>
 80063cc:	2300      	movs	r3, #0
 80063ce:	f04f 32ff 	mov.w	r2, #4294967295
 80063d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80063d6:	f10a 0a01 	add.w	sl, sl, #1
 80063da:	9304      	str	r3, [sp, #16]
 80063dc:	9307      	str	r3, [sp, #28]
 80063de:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80063e2:	931a      	str	r3, [sp, #104]	@ 0x68
 80063e4:	4654      	mov	r4, sl
 80063e6:	2205      	movs	r2, #5
 80063e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80063ec:	484e      	ldr	r0, [pc, #312]	@ (8006528 <_svfiprintf_r+0x1e4>)
 80063ee:	f7f9 ff0f 	bl	8000210 <memchr>
 80063f2:	9a04      	ldr	r2, [sp, #16]
 80063f4:	b9d8      	cbnz	r0, 800642e <_svfiprintf_r+0xea>
 80063f6:	06d0      	lsls	r0, r2, #27
 80063f8:	bf44      	itt	mi
 80063fa:	2320      	movmi	r3, #32
 80063fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006400:	0711      	lsls	r1, r2, #28
 8006402:	bf44      	itt	mi
 8006404:	232b      	movmi	r3, #43	@ 0x2b
 8006406:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800640a:	f89a 3000 	ldrb.w	r3, [sl]
 800640e:	2b2a      	cmp	r3, #42	@ 0x2a
 8006410:	d015      	beq.n	800643e <_svfiprintf_r+0xfa>
 8006412:	9a07      	ldr	r2, [sp, #28]
 8006414:	4654      	mov	r4, sl
 8006416:	2000      	movs	r0, #0
 8006418:	f04f 0c0a 	mov.w	ip, #10
 800641c:	4621      	mov	r1, r4
 800641e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006422:	3b30      	subs	r3, #48	@ 0x30
 8006424:	2b09      	cmp	r3, #9
 8006426:	d94b      	bls.n	80064c0 <_svfiprintf_r+0x17c>
 8006428:	b1b0      	cbz	r0, 8006458 <_svfiprintf_r+0x114>
 800642a:	9207      	str	r2, [sp, #28]
 800642c:	e014      	b.n	8006458 <_svfiprintf_r+0x114>
 800642e:	eba0 0308 	sub.w	r3, r0, r8
 8006432:	fa09 f303 	lsl.w	r3, r9, r3
 8006436:	4313      	orrs	r3, r2
 8006438:	9304      	str	r3, [sp, #16]
 800643a:	46a2      	mov	sl, r4
 800643c:	e7d2      	b.n	80063e4 <_svfiprintf_r+0xa0>
 800643e:	9b03      	ldr	r3, [sp, #12]
 8006440:	1d19      	adds	r1, r3, #4
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	9103      	str	r1, [sp, #12]
 8006446:	2b00      	cmp	r3, #0
 8006448:	bfbb      	ittet	lt
 800644a:	425b      	neglt	r3, r3
 800644c:	f042 0202 	orrlt.w	r2, r2, #2
 8006450:	9307      	strge	r3, [sp, #28]
 8006452:	9307      	strlt	r3, [sp, #28]
 8006454:	bfb8      	it	lt
 8006456:	9204      	strlt	r2, [sp, #16]
 8006458:	7823      	ldrb	r3, [r4, #0]
 800645a:	2b2e      	cmp	r3, #46	@ 0x2e
 800645c:	d10a      	bne.n	8006474 <_svfiprintf_r+0x130>
 800645e:	7863      	ldrb	r3, [r4, #1]
 8006460:	2b2a      	cmp	r3, #42	@ 0x2a
 8006462:	d132      	bne.n	80064ca <_svfiprintf_r+0x186>
 8006464:	9b03      	ldr	r3, [sp, #12]
 8006466:	1d1a      	adds	r2, r3, #4
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	9203      	str	r2, [sp, #12]
 800646c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006470:	3402      	adds	r4, #2
 8006472:	9305      	str	r3, [sp, #20]
 8006474:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006538 <_svfiprintf_r+0x1f4>
 8006478:	7821      	ldrb	r1, [r4, #0]
 800647a:	2203      	movs	r2, #3
 800647c:	4650      	mov	r0, sl
 800647e:	f7f9 fec7 	bl	8000210 <memchr>
 8006482:	b138      	cbz	r0, 8006494 <_svfiprintf_r+0x150>
 8006484:	9b04      	ldr	r3, [sp, #16]
 8006486:	eba0 000a 	sub.w	r0, r0, sl
 800648a:	2240      	movs	r2, #64	@ 0x40
 800648c:	4082      	lsls	r2, r0
 800648e:	4313      	orrs	r3, r2
 8006490:	3401      	adds	r4, #1
 8006492:	9304      	str	r3, [sp, #16]
 8006494:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006498:	4824      	ldr	r0, [pc, #144]	@ (800652c <_svfiprintf_r+0x1e8>)
 800649a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800649e:	2206      	movs	r2, #6
 80064a0:	f7f9 feb6 	bl	8000210 <memchr>
 80064a4:	2800      	cmp	r0, #0
 80064a6:	d036      	beq.n	8006516 <_svfiprintf_r+0x1d2>
 80064a8:	4b21      	ldr	r3, [pc, #132]	@ (8006530 <_svfiprintf_r+0x1ec>)
 80064aa:	bb1b      	cbnz	r3, 80064f4 <_svfiprintf_r+0x1b0>
 80064ac:	9b03      	ldr	r3, [sp, #12]
 80064ae:	3307      	adds	r3, #7
 80064b0:	f023 0307 	bic.w	r3, r3, #7
 80064b4:	3308      	adds	r3, #8
 80064b6:	9303      	str	r3, [sp, #12]
 80064b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80064ba:	4433      	add	r3, r6
 80064bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80064be:	e76a      	b.n	8006396 <_svfiprintf_r+0x52>
 80064c0:	fb0c 3202 	mla	r2, ip, r2, r3
 80064c4:	460c      	mov	r4, r1
 80064c6:	2001      	movs	r0, #1
 80064c8:	e7a8      	b.n	800641c <_svfiprintf_r+0xd8>
 80064ca:	2300      	movs	r3, #0
 80064cc:	3401      	adds	r4, #1
 80064ce:	9305      	str	r3, [sp, #20]
 80064d0:	4619      	mov	r1, r3
 80064d2:	f04f 0c0a 	mov.w	ip, #10
 80064d6:	4620      	mov	r0, r4
 80064d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80064dc:	3a30      	subs	r2, #48	@ 0x30
 80064de:	2a09      	cmp	r2, #9
 80064e0:	d903      	bls.n	80064ea <_svfiprintf_r+0x1a6>
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d0c6      	beq.n	8006474 <_svfiprintf_r+0x130>
 80064e6:	9105      	str	r1, [sp, #20]
 80064e8:	e7c4      	b.n	8006474 <_svfiprintf_r+0x130>
 80064ea:	fb0c 2101 	mla	r1, ip, r1, r2
 80064ee:	4604      	mov	r4, r0
 80064f0:	2301      	movs	r3, #1
 80064f2:	e7f0      	b.n	80064d6 <_svfiprintf_r+0x192>
 80064f4:	ab03      	add	r3, sp, #12
 80064f6:	9300      	str	r3, [sp, #0]
 80064f8:	462a      	mov	r2, r5
 80064fa:	4b0e      	ldr	r3, [pc, #56]	@ (8006534 <_svfiprintf_r+0x1f0>)
 80064fc:	a904      	add	r1, sp, #16
 80064fe:	4638      	mov	r0, r7
 8006500:	f3af 8000 	nop.w
 8006504:	1c42      	adds	r2, r0, #1
 8006506:	4606      	mov	r6, r0
 8006508:	d1d6      	bne.n	80064b8 <_svfiprintf_r+0x174>
 800650a:	89ab      	ldrh	r3, [r5, #12]
 800650c:	065b      	lsls	r3, r3, #25
 800650e:	f53f af2d 	bmi.w	800636c <_svfiprintf_r+0x28>
 8006512:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006514:	e72c      	b.n	8006370 <_svfiprintf_r+0x2c>
 8006516:	ab03      	add	r3, sp, #12
 8006518:	9300      	str	r3, [sp, #0]
 800651a:	462a      	mov	r2, r5
 800651c:	4b05      	ldr	r3, [pc, #20]	@ (8006534 <_svfiprintf_r+0x1f0>)
 800651e:	a904      	add	r1, sp, #16
 8006520:	4638      	mov	r0, r7
 8006522:	f000 f9bb 	bl	800689c <_printf_i>
 8006526:	e7ed      	b.n	8006504 <_svfiprintf_r+0x1c0>
 8006528:	0800725c 	.word	0x0800725c
 800652c:	08007266 	.word	0x08007266
 8006530:	00000000 	.word	0x00000000
 8006534:	0800628d 	.word	0x0800628d
 8006538:	08007262 	.word	0x08007262

0800653c <__sfputc_r>:
 800653c:	6893      	ldr	r3, [r2, #8]
 800653e:	3b01      	subs	r3, #1
 8006540:	2b00      	cmp	r3, #0
 8006542:	b410      	push	{r4}
 8006544:	6093      	str	r3, [r2, #8]
 8006546:	da08      	bge.n	800655a <__sfputc_r+0x1e>
 8006548:	6994      	ldr	r4, [r2, #24]
 800654a:	42a3      	cmp	r3, r4
 800654c:	db01      	blt.n	8006552 <__sfputc_r+0x16>
 800654e:	290a      	cmp	r1, #10
 8006550:	d103      	bne.n	800655a <__sfputc_r+0x1e>
 8006552:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006556:	f7ff bc6e 	b.w	8005e36 <__swbuf_r>
 800655a:	6813      	ldr	r3, [r2, #0]
 800655c:	1c58      	adds	r0, r3, #1
 800655e:	6010      	str	r0, [r2, #0]
 8006560:	7019      	strb	r1, [r3, #0]
 8006562:	4608      	mov	r0, r1
 8006564:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006568:	4770      	bx	lr

0800656a <__sfputs_r>:
 800656a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800656c:	4606      	mov	r6, r0
 800656e:	460f      	mov	r7, r1
 8006570:	4614      	mov	r4, r2
 8006572:	18d5      	adds	r5, r2, r3
 8006574:	42ac      	cmp	r4, r5
 8006576:	d101      	bne.n	800657c <__sfputs_r+0x12>
 8006578:	2000      	movs	r0, #0
 800657a:	e007      	b.n	800658c <__sfputs_r+0x22>
 800657c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006580:	463a      	mov	r2, r7
 8006582:	4630      	mov	r0, r6
 8006584:	f7ff ffda 	bl	800653c <__sfputc_r>
 8006588:	1c43      	adds	r3, r0, #1
 800658a:	d1f3      	bne.n	8006574 <__sfputs_r+0xa>
 800658c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006590 <_vfiprintf_r>:
 8006590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006594:	460d      	mov	r5, r1
 8006596:	b09d      	sub	sp, #116	@ 0x74
 8006598:	4614      	mov	r4, r2
 800659a:	4698      	mov	r8, r3
 800659c:	4606      	mov	r6, r0
 800659e:	b118      	cbz	r0, 80065a8 <_vfiprintf_r+0x18>
 80065a0:	6a03      	ldr	r3, [r0, #32]
 80065a2:	b90b      	cbnz	r3, 80065a8 <_vfiprintf_r+0x18>
 80065a4:	f7ff fb28 	bl	8005bf8 <__sinit>
 80065a8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80065aa:	07d9      	lsls	r1, r3, #31
 80065ac:	d405      	bmi.n	80065ba <_vfiprintf_r+0x2a>
 80065ae:	89ab      	ldrh	r3, [r5, #12]
 80065b0:	059a      	lsls	r2, r3, #22
 80065b2:	d402      	bmi.n	80065ba <_vfiprintf_r+0x2a>
 80065b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80065b6:	f7ff fd60 	bl	800607a <__retarget_lock_acquire_recursive>
 80065ba:	89ab      	ldrh	r3, [r5, #12]
 80065bc:	071b      	lsls	r3, r3, #28
 80065be:	d501      	bpl.n	80065c4 <_vfiprintf_r+0x34>
 80065c0:	692b      	ldr	r3, [r5, #16]
 80065c2:	b99b      	cbnz	r3, 80065ec <_vfiprintf_r+0x5c>
 80065c4:	4629      	mov	r1, r5
 80065c6:	4630      	mov	r0, r6
 80065c8:	f7ff fc74 	bl	8005eb4 <__swsetup_r>
 80065cc:	b170      	cbz	r0, 80065ec <_vfiprintf_r+0x5c>
 80065ce:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80065d0:	07dc      	lsls	r4, r3, #31
 80065d2:	d504      	bpl.n	80065de <_vfiprintf_r+0x4e>
 80065d4:	f04f 30ff 	mov.w	r0, #4294967295
 80065d8:	b01d      	add	sp, #116	@ 0x74
 80065da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065de:	89ab      	ldrh	r3, [r5, #12]
 80065e0:	0598      	lsls	r0, r3, #22
 80065e2:	d4f7      	bmi.n	80065d4 <_vfiprintf_r+0x44>
 80065e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80065e6:	f7ff fd49 	bl	800607c <__retarget_lock_release_recursive>
 80065ea:	e7f3      	b.n	80065d4 <_vfiprintf_r+0x44>
 80065ec:	2300      	movs	r3, #0
 80065ee:	9309      	str	r3, [sp, #36]	@ 0x24
 80065f0:	2320      	movs	r3, #32
 80065f2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80065f6:	f8cd 800c 	str.w	r8, [sp, #12]
 80065fa:	2330      	movs	r3, #48	@ 0x30
 80065fc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80067ac <_vfiprintf_r+0x21c>
 8006600:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006604:	f04f 0901 	mov.w	r9, #1
 8006608:	4623      	mov	r3, r4
 800660a:	469a      	mov	sl, r3
 800660c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006610:	b10a      	cbz	r2, 8006616 <_vfiprintf_r+0x86>
 8006612:	2a25      	cmp	r2, #37	@ 0x25
 8006614:	d1f9      	bne.n	800660a <_vfiprintf_r+0x7a>
 8006616:	ebba 0b04 	subs.w	fp, sl, r4
 800661a:	d00b      	beq.n	8006634 <_vfiprintf_r+0xa4>
 800661c:	465b      	mov	r3, fp
 800661e:	4622      	mov	r2, r4
 8006620:	4629      	mov	r1, r5
 8006622:	4630      	mov	r0, r6
 8006624:	f7ff ffa1 	bl	800656a <__sfputs_r>
 8006628:	3001      	adds	r0, #1
 800662a:	f000 80a7 	beq.w	800677c <_vfiprintf_r+0x1ec>
 800662e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006630:	445a      	add	r2, fp
 8006632:	9209      	str	r2, [sp, #36]	@ 0x24
 8006634:	f89a 3000 	ldrb.w	r3, [sl]
 8006638:	2b00      	cmp	r3, #0
 800663a:	f000 809f 	beq.w	800677c <_vfiprintf_r+0x1ec>
 800663e:	2300      	movs	r3, #0
 8006640:	f04f 32ff 	mov.w	r2, #4294967295
 8006644:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006648:	f10a 0a01 	add.w	sl, sl, #1
 800664c:	9304      	str	r3, [sp, #16]
 800664e:	9307      	str	r3, [sp, #28]
 8006650:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006654:	931a      	str	r3, [sp, #104]	@ 0x68
 8006656:	4654      	mov	r4, sl
 8006658:	2205      	movs	r2, #5
 800665a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800665e:	4853      	ldr	r0, [pc, #332]	@ (80067ac <_vfiprintf_r+0x21c>)
 8006660:	f7f9 fdd6 	bl	8000210 <memchr>
 8006664:	9a04      	ldr	r2, [sp, #16]
 8006666:	b9d8      	cbnz	r0, 80066a0 <_vfiprintf_r+0x110>
 8006668:	06d1      	lsls	r1, r2, #27
 800666a:	bf44      	itt	mi
 800666c:	2320      	movmi	r3, #32
 800666e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006672:	0713      	lsls	r3, r2, #28
 8006674:	bf44      	itt	mi
 8006676:	232b      	movmi	r3, #43	@ 0x2b
 8006678:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800667c:	f89a 3000 	ldrb.w	r3, [sl]
 8006680:	2b2a      	cmp	r3, #42	@ 0x2a
 8006682:	d015      	beq.n	80066b0 <_vfiprintf_r+0x120>
 8006684:	9a07      	ldr	r2, [sp, #28]
 8006686:	4654      	mov	r4, sl
 8006688:	2000      	movs	r0, #0
 800668a:	f04f 0c0a 	mov.w	ip, #10
 800668e:	4621      	mov	r1, r4
 8006690:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006694:	3b30      	subs	r3, #48	@ 0x30
 8006696:	2b09      	cmp	r3, #9
 8006698:	d94b      	bls.n	8006732 <_vfiprintf_r+0x1a2>
 800669a:	b1b0      	cbz	r0, 80066ca <_vfiprintf_r+0x13a>
 800669c:	9207      	str	r2, [sp, #28]
 800669e:	e014      	b.n	80066ca <_vfiprintf_r+0x13a>
 80066a0:	eba0 0308 	sub.w	r3, r0, r8
 80066a4:	fa09 f303 	lsl.w	r3, r9, r3
 80066a8:	4313      	orrs	r3, r2
 80066aa:	9304      	str	r3, [sp, #16]
 80066ac:	46a2      	mov	sl, r4
 80066ae:	e7d2      	b.n	8006656 <_vfiprintf_r+0xc6>
 80066b0:	9b03      	ldr	r3, [sp, #12]
 80066b2:	1d19      	adds	r1, r3, #4
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	9103      	str	r1, [sp, #12]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	bfbb      	ittet	lt
 80066bc:	425b      	neglt	r3, r3
 80066be:	f042 0202 	orrlt.w	r2, r2, #2
 80066c2:	9307      	strge	r3, [sp, #28]
 80066c4:	9307      	strlt	r3, [sp, #28]
 80066c6:	bfb8      	it	lt
 80066c8:	9204      	strlt	r2, [sp, #16]
 80066ca:	7823      	ldrb	r3, [r4, #0]
 80066cc:	2b2e      	cmp	r3, #46	@ 0x2e
 80066ce:	d10a      	bne.n	80066e6 <_vfiprintf_r+0x156>
 80066d0:	7863      	ldrb	r3, [r4, #1]
 80066d2:	2b2a      	cmp	r3, #42	@ 0x2a
 80066d4:	d132      	bne.n	800673c <_vfiprintf_r+0x1ac>
 80066d6:	9b03      	ldr	r3, [sp, #12]
 80066d8:	1d1a      	adds	r2, r3, #4
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	9203      	str	r2, [sp, #12]
 80066de:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80066e2:	3402      	adds	r4, #2
 80066e4:	9305      	str	r3, [sp, #20]
 80066e6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80067bc <_vfiprintf_r+0x22c>
 80066ea:	7821      	ldrb	r1, [r4, #0]
 80066ec:	2203      	movs	r2, #3
 80066ee:	4650      	mov	r0, sl
 80066f0:	f7f9 fd8e 	bl	8000210 <memchr>
 80066f4:	b138      	cbz	r0, 8006706 <_vfiprintf_r+0x176>
 80066f6:	9b04      	ldr	r3, [sp, #16]
 80066f8:	eba0 000a 	sub.w	r0, r0, sl
 80066fc:	2240      	movs	r2, #64	@ 0x40
 80066fe:	4082      	lsls	r2, r0
 8006700:	4313      	orrs	r3, r2
 8006702:	3401      	adds	r4, #1
 8006704:	9304      	str	r3, [sp, #16]
 8006706:	f814 1b01 	ldrb.w	r1, [r4], #1
 800670a:	4829      	ldr	r0, [pc, #164]	@ (80067b0 <_vfiprintf_r+0x220>)
 800670c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006710:	2206      	movs	r2, #6
 8006712:	f7f9 fd7d 	bl	8000210 <memchr>
 8006716:	2800      	cmp	r0, #0
 8006718:	d03f      	beq.n	800679a <_vfiprintf_r+0x20a>
 800671a:	4b26      	ldr	r3, [pc, #152]	@ (80067b4 <_vfiprintf_r+0x224>)
 800671c:	bb1b      	cbnz	r3, 8006766 <_vfiprintf_r+0x1d6>
 800671e:	9b03      	ldr	r3, [sp, #12]
 8006720:	3307      	adds	r3, #7
 8006722:	f023 0307 	bic.w	r3, r3, #7
 8006726:	3308      	adds	r3, #8
 8006728:	9303      	str	r3, [sp, #12]
 800672a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800672c:	443b      	add	r3, r7
 800672e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006730:	e76a      	b.n	8006608 <_vfiprintf_r+0x78>
 8006732:	fb0c 3202 	mla	r2, ip, r2, r3
 8006736:	460c      	mov	r4, r1
 8006738:	2001      	movs	r0, #1
 800673a:	e7a8      	b.n	800668e <_vfiprintf_r+0xfe>
 800673c:	2300      	movs	r3, #0
 800673e:	3401      	adds	r4, #1
 8006740:	9305      	str	r3, [sp, #20]
 8006742:	4619      	mov	r1, r3
 8006744:	f04f 0c0a 	mov.w	ip, #10
 8006748:	4620      	mov	r0, r4
 800674a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800674e:	3a30      	subs	r2, #48	@ 0x30
 8006750:	2a09      	cmp	r2, #9
 8006752:	d903      	bls.n	800675c <_vfiprintf_r+0x1cc>
 8006754:	2b00      	cmp	r3, #0
 8006756:	d0c6      	beq.n	80066e6 <_vfiprintf_r+0x156>
 8006758:	9105      	str	r1, [sp, #20]
 800675a:	e7c4      	b.n	80066e6 <_vfiprintf_r+0x156>
 800675c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006760:	4604      	mov	r4, r0
 8006762:	2301      	movs	r3, #1
 8006764:	e7f0      	b.n	8006748 <_vfiprintf_r+0x1b8>
 8006766:	ab03      	add	r3, sp, #12
 8006768:	9300      	str	r3, [sp, #0]
 800676a:	462a      	mov	r2, r5
 800676c:	4b12      	ldr	r3, [pc, #72]	@ (80067b8 <_vfiprintf_r+0x228>)
 800676e:	a904      	add	r1, sp, #16
 8006770:	4630      	mov	r0, r6
 8006772:	f3af 8000 	nop.w
 8006776:	4607      	mov	r7, r0
 8006778:	1c78      	adds	r0, r7, #1
 800677a:	d1d6      	bne.n	800672a <_vfiprintf_r+0x19a>
 800677c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800677e:	07d9      	lsls	r1, r3, #31
 8006780:	d405      	bmi.n	800678e <_vfiprintf_r+0x1fe>
 8006782:	89ab      	ldrh	r3, [r5, #12]
 8006784:	059a      	lsls	r2, r3, #22
 8006786:	d402      	bmi.n	800678e <_vfiprintf_r+0x1fe>
 8006788:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800678a:	f7ff fc77 	bl	800607c <__retarget_lock_release_recursive>
 800678e:	89ab      	ldrh	r3, [r5, #12]
 8006790:	065b      	lsls	r3, r3, #25
 8006792:	f53f af1f 	bmi.w	80065d4 <_vfiprintf_r+0x44>
 8006796:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006798:	e71e      	b.n	80065d8 <_vfiprintf_r+0x48>
 800679a:	ab03      	add	r3, sp, #12
 800679c:	9300      	str	r3, [sp, #0]
 800679e:	462a      	mov	r2, r5
 80067a0:	4b05      	ldr	r3, [pc, #20]	@ (80067b8 <_vfiprintf_r+0x228>)
 80067a2:	a904      	add	r1, sp, #16
 80067a4:	4630      	mov	r0, r6
 80067a6:	f000 f879 	bl	800689c <_printf_i>
 80067aa:	e7e4      	b.n	8006776 <_vfiprintf_r+0x1e6>
 80067ac:	0800725c 	.word	0x0800725c
 80067b0:	08007266 	.word	0x08007266
 80067b4:	00000000 	.word	0x00000000
 80067b8:	0800656b 	.word	0x0800656b
 80067bc:	08007262 	.word	0x08007262

080067c0 <_printf_common>:
 80067c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80067c4:	4616      	mov	r6, r2
 80067c6:	4698      	mov	r8, r3
 80067c8:	688a      	ldr	r2, [r1, #8]
 80067ca:	690b      	ldr	r3, [r1, #16]
 80067cc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80067d0:	4293      	cmp	r3, r2
 80067d2:	bfb8      	it	lt
 80067d4:	4613      	movlt	r3, r2
 80067d6:	6033      	str	r3, [r6, #0]
 80067d8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80067dc:	4607      	mov	r7, r0
 80067de:	460c      	mov	r4, r1
 80067e0:	b10a      	cbz	r2, 80067e6 <_printf_common+0x26>
 80067e2:	3301      	adds	r3, #1
 80067e4:	6033      	str	r3, [r6, #0]
 80067e6:	6823      	ldr	r3, [r4, #0]
 80067e8:	0699      	lsls	r1, r3, #26
 80067ea:	bf42      	ittt	mi
 80067ec:	6833      	ldrmi	r3, [r6, #0]
 80067ee:	3302      	addmi	r3, #2
 80067f0:	6033      	strmi	r3, [r6, #0]
 80067f2:	6825      	ldr	r5, [r4, #0]
 80067f4:	f015 0506 	ands.w	r5, r5, #6
 80067f8:	d106      	bne.n	8006808 <_printf_common+0x48>
 80067fa:	f104 0a19 	add.w	sl, r4, #25
 80067fe:	68e3      	ldr	r3, [r4, #12]
 8006800:	6832      	ldr	r2, [r6, #0]
 8006802:	1a9b      	subs	r3, r3, r2
 8006804:	42ab      	cmp	r3, r5
 8006806:	dc26      	bgt.n	8006856 <_printf_common+0x96>
 8006808:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800680c:	6822      	ldr	r2, [r4, #0]
 800680e:	3b00      	subs	r3, #0
 8006810:	bf18      	it	ne
 8006812:	2301      	movne	r3, #1
 8006814:	0692      	lsls	r2, r2, #26
 8006816:	d42b      	bmi.n	8006870 <_printf_common+0xb0>
 8006818:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800681c:	4641      	mov	r1, r8
 800681e:	4638      	mov	r0, r7
 8006820:	47c8      	blx	r9
 8006822:	3001      	adds	r0, #1
 8006824:	d01e      	beq.n	8006864 <_printf_common+0xa4>
 8006826:	6823      	ldr	r3, [r4, #0]
 8006828:	6922      	ldr	r2, [r4, #16]
 800682a:	f003 0306 	and.w	r3, r3, #6
 800682e:	2b04      	cmp	r3, #4
 8006830:	bf02      	ittt	eq
 8006832:	68e5      	ldreq	r5, [r4, #12]
 8006834:	6833      	ldreq	r3, [r6, #0]
 8006836:	1aed      	subeq	r5, r5, r3
 8006838:	68a3      	ldr	r3, [r4, #8]
 800683a:	bf0c      	ite	eq
 800683c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006840:	2500      	movne	r5, #0
 8006842:	4293      	cmp	r3, r2
 8006844:	bfc4      	itt	gt
 8006846:	1a9b      	subgt	r3, r3, r2
 8006848:	18ed      	addgt	r5, r5, r3
 800684a:	2600      	movs	r6, #0
 800684c:	341a      	adds	r4, #26
 800684e:	42b5      	cmp	r5, r6
 8006850:	d11a      	bne.n	8006888 <_printf_common+0xc8>
 8006852:	2000      	movs	r0, #0
 8006854:	e008      	b.n	8006868 <_printf_common+0xa8>
 8006856:	2301      	movs	r3, #1
 8006858:	4652      	mov	r2, sl
 800685a:	4641      	mov	r1, r8
 800685c:	4638      	mov	r0, r7
 800685e:	47c8      	blx	r9
 8006860:	3001      	adds	r0, #1
 8006862:	d103      	bne.n	800686c <_printf_common+0xac>
 8006864:	f04f 30ff 	mov.w	r0, #4294967295
 8006868:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800686c:	3501      	adds	r5, #1
 800686e:	e7c6      	b.n	80067fe <_printf_common+0x3e>
 8006870:	18e1      	adds	r1, r4, r3
 8006872:	1c5a      	adds	r2, r3, #1
 8006874:	2030      	movs	r0, #48	@ 0x30
 8006876:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800687a:	4422      	add	r2, r4
 800687c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006880:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006884:	3302      	adds	r3, #2
 8006886:	e7c7      	b.n	8006818 <_printf_common+0x58>
 8006888:	2301      	movs	r3, #1
 800688a:	4622      	mov	r2, r4
 800688c:	4641      	mov	r1, r8
 800688e:	4638      	mov	r0, r7
 8006890:	47c8      	blx	r9
 8006892:	3001      	adds	r0, #1
 8006894:	d0e6      	beq.n	8006864 <_printf_common+0xa4>
 8006896:	3601      	adds	r6, #1
 8006898:	e7d9      	b.n	800684e <_printf_common+0x8e>
	...

0800689c <_printf_i>:
 800689c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80068a0:	7e0f      	ldrb	r7, [r1, #24]
 80068a2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80068a4:	2f78      	cmp	r7, #120	@ 0x78
 80068a6:	4691      	mov	r9, r2
 80068a8:	4680      	mov	r8, r0
 80068aa:	460c      	mov	r4, r1
 80068ac:	469a      	mov	sl, r3
 80068ae:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80068b2:	d807      	bhi.n	80068c4 <_printf_i+0x28>
 80068b4:	2f62      	cmp	r7, #98	@ 0x62
 80068b6:	d80a      	bhi.n	80068ce <_printf_i+0x32>
 80068b8:	2f00      	cmp	r7, #0
 80068ba:	f000 80d1 	beq.w	8006a60 <_printf_i+0x1c4>
 80068be:	2f58      	cmp	r7, #88	@ 0x58
 80068c0:	f000 80b8 	beq.w	8006a34 <_printf_i+0x198>
 80068c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80068c8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80068cc:	e03a      	b.n	8006944 <_printf_i+0xa8>
 80068ce:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80068d2:	2b15      	cmp	r3, #21
 80068d4:	d8f6      	bhi.n	80068c4 <_printf_i+0x28>
 80068d6:	a101      	add	r1, pc, #4	@ (adr r1, 80068dc <_printf_i+0x40>)
 80068d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80068dc:	08006935 	.word	0x08006935
 80068e0:	08006949 	.word	0x08006949
 80068e4:	080068c5 	.word	0x080068c5
 80068e8:	080068c5 	.word	0x080068c5
 80068ec:	080068c5 	.word	0x080068c5
 80068f0:	080068c5 	.word	0x080068c5
 80068f4:	08006949 	.word	0x08006949
 80068f8:	080068c5 	.word	0x080068c5
 80068fc:	080068c5 	.word	0x080068c5
 8006900:	080068c5 	.word	0x080068c5
 8006904:	080068c5 	.word	0x080068c5
 8006908:	08006a47 	.word	0x08006a47
 800690c:	08006973 	.word	0x08006973
 8006910:	08006a01 	.word	0x08006a01
 8006914:	080068c5 	.word	0x080068c5
 8006918:	080068c5 	.word	0x080068c5
 800691c:	08006a69 	.word	0x08006a69
 8006920:	080068c5 	.word	0x080068c5
 8006924:	08006973 	.word	0x08006973
 8006928:	080068c5 	.word	0x080068c5
 800692c:	080068c5 	.word	0x080068c5
 8006930:	08006a09 	.word	0x08006a09
 8006934:	6833      	ldr	r3, [r6, #0]
 8006936:	1d1a      	adds	r2, r3, #4
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	6032      	str	r2, [r6, #0]
 800693c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006940:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006944:	2301      	movs	r3, #1
 8006946:	e09c      	b.n	8006a82 <_printf_i+0x1e6>
 8006948:	6833      	ldr	r3, [r6, #0]
 800694a:	6820      	ldr	r0, [r4, #0]
 800694c:	1d19      	adds	r1, r3, #4
 800694e:	6031      	str	r1, [r6, #0]
 8006950:	0606      	lsls	r6, r0, #24
 8006952:	d501      	bpl.n	8006958 <_printf_i+0xbc>
 8006954:	681d      	ldr	r5, [r3, #0]
 8006956:	e003      	b.n	8006960 <_printf_i+0xc4>
 8006958:	0645      	lsls	r5, r0, #25
 800695a:	d5fb      	bpl.n	8006954 <_printf_i+0xb8>
 800695c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006960:	2d00      	cmp	r5, #0
 8006962:	da03      	bge.n	800696c <_printf_i+0xd0>
 8006964:	232d      	movs	r3, #45	@ 0x2d
 8006966:	426d      	negs	r5, r5
 8006968:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800696c:	4858      	ldr	r0, [pc, #352]	@ (8006ad0 <_printf_i+0x234>)
 800696e:	230a      	movs	r3, #10
 8006970:	e011      	b.n	8006996 <_printf_i+0xfa>
 8006972:	6821      	ldr	r1, [r4, #0]
 8006974:	6833      	ldr	r3, [r6, #0]
 8006976:	0608      	lsls	r0, r1, #24
 8006978:	f853 5b04 	ldr.w	r5, [r3], #4
 800697c:	d402      	bmi.n	8006984 <_printf_i+0xe8>
 800697e:	0649      	lsls	r1, r1, #25
 8006980:	bf48      	it	mi
 8006982:	b2ad      	uxthmi	r5, r5
 8006984:	2f6f      	cmp	r7, #111	@ 0x6f
 8006986:	4852      	ldr	r0, [pc, #328]	@ (8006ad0 <_printf_i+0x234>)
 8006988:	6033      	str	r3, [r6, #0]
 800698a:	bf14      	ite	ne
 800698c:	230a      	movne	r3, #10
 800698e:	2308      	moveq	r3, #8
 8006990:	2100      	movs	r1, #0
 8006992:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006996:	6866      	ldr	r6, [r4, #4]
 8006998:	60a6      	str	r6, [r4, #8]
 800699a:	2e00      	cmp	r6, #0
 800699c:	db05      	blt.n	80069aa <_printf_i+0x10e>
 800699e:	6821      	ldr	r1, [r4, #0]
 80069a0:	432e      	orrs	r6, r5
 80069a2:	f021 0104 	bic.w	r1, r1, #4
 80069a6:	6021      	str	r1, [r4, #0]
 80069a8:	d04b      	beq.n	8006a42 <_printf_i+0x1a6>
 80069aa:	4616      	mov	r6, r2
 80069ac:	fbb5 f1f3 	udiv	r1, r5, r3
 80069b0:	fb03 5711 	mls	r7, r3, r1, r5
 80069b4:	5dc7      	ldrb	r7, [r0, r7]
 80069b6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80069ba:	462f      	mov	r7, r5
 80069bc:	42bb      	cmp	r3, r7
 80069be:	460d      	mov	r5, r1
 80069c0:	d9f4      	bls.n	80069ac <_printf_i+0x110>
 80069c2:	2b08      	cmp	r3, #8
 80069c4:	d10b      	bne.n	80069de <_printf_i+0x142>
 80069c6:	6823      	ldr	r3, [r4, #0]
 80069c8:	07df      	lsls	r7, r3, #31
 80069ca:	d508      	bpl.n	80069de <_printf_i+0x142>
 80069cc:	6923      	ldr	r3, [r4, #16]
 80069ce:	6861      	ldr	r1, [r4, #4]
 80069d0:	4299      	cmp	r1, r3
 80069d2:	bfde      	ittt	le
 80069d4:	2330      	movle	r3, #48	@ 0x30
 80069d6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80069da:	f106 36ff 	addle.w	r6, r6, #4294967295
 80069de:	1b92      	subs	r2, r2, r6
 80069e0:	6122      	str	r2, [r4, #16]
 80069e2:	f8cd a000 	str.w	sl, [sp]
 80069e6:	464b      	mov	r3, r9
 80069e8:	aa03      	add	r2, sp, #12
 80069ea:	4621      	mov	r1, r4
 80069ec:	4640      	mov	r0, r8
 80069ee:	f7ff fee7 	bl	80067c0 <_printf_common>
 80069f2:	3001      	adds	r0, #1
 80069f4:	d14a      	bne.n	8006a8c <_printf_i+0x1f0>
 80069f6:	f04f 30ff 	mov.w	r0, #4294967295
 80069fa:	b004      	add	sp, #16
 80069fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a00:	6823      	ldr	r3, [r4, #0]
 8006a02:	f043 0320 	orr.w	r3, r3, #32
 8006a06:	6023      	str	r3, [r4, #0]
 8006a08:	4832      	ldr	r0, [pc, #200]	@ (8006ad4 <_printf_i+0x238>)
 8006a0a:	2778      	movs	r7, #120	@ 0x78
 8006a0c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006a10:	6823      	ldr	r3, [r4, #0]
 8006a12:	6831      	ldr	r1, [r6, #0]
 8006a14:	061f      	lsls	r7, r3, #24
 8006a16:	f851 5b04 	ldr.w	r5, [r1], #4
 8006a1a:	d402      	bmi.n	8006a22 <_printf_i+0x186>
 8006a1c:	065f      	lsls	r7, r3, #25
 8006a1e:	bf48      	it	mi
 8006a20:	b2ad      	uxthmi	r5, r5
 8006a22:	6031      	str	r1, [r6, #0]
 8006a24:	07d9      	lsls	r1, r3, #31
 8006a26:	bf44      	itt	mi
 8006a28:	f043 0320 	orrmi.w	r3, r3, #32
 8006a2c:	6023      	strmi	r3, [r4, #0]
 8006a2e:	b11d      	cbz	r5, 8006a38 <_printf_i+0x19c>
 8006a30:	2310      	movs	r3, #16
 8006a32:	e7ad      	b.n	8006990 <_printf_i+0xf4>
 8006a34:	4826      	ldr	r0, [pc, #152]	@ (8006ad0 <_printf_i+0x234>)
 8006a36:	e7e9      	b.n	8006a0c <_printf_i+0x170>
 8006a38:	6823      	ldr	r3, [r4, #0]
 8006a3a:	f023 0320 	bic.w	r3, r3, #32
 8006a3e:	6023      	str	r3, [r4, #0]
 8006a40:	e7f6      	b.n	8006a30 <_printf_i+0x194>
 8006a42:	4616      	mov	r6, r2
 8006a44:	e7bd      	b.n	80069c2 <_printf_i+0x126>
 8006a46:	6833      	ldr	r3, [r6, #0]
 8006a48:	6825      	ldr	r5, [r4, #0]
 8006a4a:	6961      	ldr	r1, [r4, #20]
 8006a4c:	1d18      	adds	r0, r3, #4
 8006a4e:	6030      	str	r0, [r6, #0]
 8006a50:	062e      	lsls	r6, r5, #24
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	d501      	bpl.n	8006a5a <_printf_i+0x1be>
 8006a56:	6019      	str	r1, [r3, #0]
 8006a58:	e002      	b.n	8006a60 <_printf_i+0x1c4>
 8006a5a:	0668      	lsls	r0, r5, #25
 8006a5c:	d5fb      	bpl.n	8006a56 <_printf_i+0x1ba>
 8006a5e:	8019      	strh	r1, [r3, #0]
 8006a60:	2300      	movs	r3, #0
 8006a62:	6123      	str	r3, [r4, #16]
 8006a64:	4616      	mov	r6, r2
 8006a66:	e7bc      	b.n	80069e2 <_printf_i+0x146>
 8006a68:	6833      	ldr	r3, [r6, #0]
 8006a6a:	1d1a      	adds	r2, r3, #4
 8006a6c:	6032      	str	r2, [r6, #0]
 8006a6e:	681e      	ldr	r6, [r3, #0]
 8006a70:	6862      	ldr	r2, [r4, #4]
 8006a72:	2100      	movs	r1, #0
 8006a74:	4630      	mov	r0, r6
 8006a76:	f7f9 fbcb 	bl	8000210 <memchr>
 8006a7a:	b108      	cbz	r0, 8006a80 <_printf_i+0x1e4>
 8006a7c:	1b80      	subs	r0, r0, r6
 8006a7e:	6060      	str	r0, [r4, #4]
 8006a80:	6863      	ldr	r3, [r4, #4]
 8006a82:	6123      	str	r3, [r4, #16]
 8006a84:	2300      	movs	r3, #0
 8006a86:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006a8a:	e7aa      	b.n	80069e2 <_printf_i+0x146>
 8006a8c:	6923      	ldr	r3, [r4, #16]
 8006a8e:	4632      	mov	r2, r6
 8006a90:	4649      	mov	r1, r9
 8006a92:	4640      	mov	r0, r8
 8006a94:	47d0      	blx	sl
 8006a96:	3001      	adds	r0, #1
 8006a98:	d0ad      	beq.n	80069f6 <_printf_i+0x15a>
 8006a9a:	6823      	ldr	r3, [r4, #0]
 8006a9c:	079b      	lsls	r3, r3, #30
 8006a9e:	d413      	bmi.n	8006ac8 <_printf_i+0x22c>
 8006aa0:	68e0      	ldr	r0, [r4, #12]
 8006aa2:	9b03      	ldr	r3, [sp, #12]
 8006aa4:	4298      	cmp	r0, r3
 8006aa6:	bfb8      	it	lt
 8006aa8:	4618      	movlt	r0, r3
 8006aaa:	e7a6      	b.n	80069fa <_printf_i+0x15e>
 8006aac:	2301      	movs	r3, #1
 8006aae:	4632      	mov	r2, r6
 8006ab0:	4649      	mov	r1, r9
 8006ab2:	4640      	mov	r0, r8
 8006ab4:	47d0      	blx	sl
 8006ab6:	3001      	adds	r0, #1
 8006ab8:	d09d      	beq.n	80069f6 <_printf_i+0x15a>
 8006aba:	3501      	adds	r5, #1
 8006abc:	68e3      	ldr	r3, [r4, #12]
 8006abe:	9903      	ldr	r1, [sp, #12]
 8006ac0:	1a5b      	subs	r3, r3, r1
 8006ac2:	42ab      	cmp	r3, r5
 8006ac4:	dcf2      	bgt.n	8006aac <_printf_i+0x210>
 8006ac6:	e7eb      	b.n	8006aa0 <_printf_i+0x204>
 8006ac8:	2500      	movs	r5, #0
 8006aca:	f104 0619 	add.w	r6, r4, #25
 8006ace:	e7f5      	b.n	8006abc <_printf_i+0x220>
 8006ad0:	0800726d 	.word	0x0800726d
 8006ad4:	0800727e 	.word	0x0800727e

08006ad8 <__sflush_r>:
 8006ad8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006adc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ae0:	0716      	lsls	r6, r2, #28
 8006ae2:	4605      	mov	r5, r0
 8006ae4:	460c      	mov	r4, r1
 8006ae6:	d454      	bmi.n	8006b92 <__sflush_r+0xba>
 8006ae8:	684b      	ldr	r3, [r1, #4]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	dc02      	bgt.n	8006af4 <__sflush_r+0x1c>
 8006aee:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	dd48      	ble.n	8006b86 <__sflush_r+0xae>
 8006af4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006af6:	2e00      	cmp	r6, #0
 8006af8:	d045      	beq.n	8006b86 <__sflush_r+0xae>
 8006afa:	2300      	movs	r3, #0
 8006afc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006b00:	682f      	ldr	r7, [r5, #0]
 8006b02:	6a21      	ldr	r1, [r4, #32]
 8006b04:	602b      	str	r3, [r5, #0]
 8006b06:	d030      	beq.n	8006b6a <__sflush_r+0x92>
 8006b08:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006b0a:	89a3      	ldrh	r3, [r4, #12]
 8006b0c:	0759      	lsls	r1, r3, #29
 8006b0e:	d505      	bpl.n	8006b1c <__sflush_r+0x44>
 8006b10:	6863      	ldr	r3, [r4, #4]
 8006b12:	1ad2      	subs	r2, r2, r3
 8006b14:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006b16:	b10b      	cbz	r3, 8006b1c <__sflush_r+0x44>
 8006b18:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006b1a:	1ad2      	subs	r2, r2, r3
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006b20:	6a21      	ldr	r1, [r4, #32]
 8006b22:	4628      	mov	r0, r5
 8006b24:	47b0      	blx	r6
 8006b26:	1c43      	adds	r3, r0, #1
 8006b28:	89a3      	ldrh	r3, [r4, #12]
 8006b2a:	d106      	bne.n	8006b3a <__sflush_r+0x62>
 8006b2c:	6829      	ldr	r1, [r5, #0]
 8006b2e:	291d      	cmp	r1, #29
 8006b30:	d82b      	bhi.n	8006b8a <__sflush_r+0xb2>
 8006b32:	4a2a      	ldr	r2, [pc, #168]	@ (8006bdc <__sflush_r+0x104>)
 8006b34:	40ca      	lsrs	r2, r1
 8006b36:	07d6      	lsls	r6, r2, #31
 8006b38:	d527      	bpl.n	8006b8a <__sflush_r+0xb2>
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	6062      	str	r2, [r4, #4]
 8006b3e:	04d9      	lsls	r1, r3, #19
 8006b40:	6922      	ldr	r2, [r4, #16]
 8006b42:	6022      	str	r2, [r4, #0]
 8006b44:	d504      	bpl.n	8006b50 <__sflush_r+0x78>
 8006b46:	1c42      	adds	r2, r0, #1
 8006b48:	d101      	bne.n	8006b4e <__sflush_r+0x76>
 8006b4a:	682b      	ldr	r3, [r5, #0]
 8006b4c:	b903      	cbnz	r3, 8006b50 <__sflush_r+0x78>
 8006b4e:	6560      	str	r0, [r4, #84]	@ 0x54
 8006b50:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006b52:	602f      	str	r7, [r5, #0]
 8006b54:	b1b9      	cbz	r1, 8006b86 <__sflush_r+0xae>
 8006b56:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006b5a:	4299      	cmp	r1, r3
 8006b5c:	d002      	beq.n	8006b64 <__sflush_r+0x8c>
 8006b5e:	4628      	mov	r0, r5
 8006b60:	f7ff fa9c 	bl	800609c <_free_r>
 8006b64:	2300      	movs	r3, #0
 8006b66:	6363      	str	r3, [r4, #52]	@ 0x34
 8006b68:	e00d      	b.n	8006b86 <__sflush_r+0xae>
 8006b6a:	2301      	movs	r3, #1
 8006b6c:	4628      	mov	r0, r5
 8006b6e:	47b0      	blx	r6
 8006b70:	4602      	mov	r2, r0
 8006b72:	1c50      	adds	r0, r2, #1
 8006b74:	d1c9      	bne.n	8006b0a <__sflush_r+0x32>
 8006b76:	682b      	ldr	r3, [r5, #0]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d0c6      	beq.n	8006b0a <__sflush_r+0x32>
 8006b7c:	2b1d      	cmp	r3, #29
 8006b7e:	d001      	beq.n	8006b84 <__sflush_r+0xac>
 8006b80:	2b16      	cmp	r3, #22
 8006b82:	d11e      	bne.n	8006bc2 <__sflush_r+0xea>
 8006b84:	602f      	str	r7, [r5, #0]
 8006b86:	2000      	movs	r0, #0
 8006b88:	e022      	b.n	8006bd0 <__sflush_r+0xf8>
 8006b8a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006b8e:	b21b      	sxth	r3, r3
 8006b90:	e01b      	b.n	8006bca <__sflush_r+0xf2>
 8006b92:	690f      	ldr	r7, [r1, #16]
 8006b94:	2f00      	cmp	r7, #0
 8006b96:	d0f6      	beq.n	8006b86 <__sflush_r+0xae>
 8006b98:	0793      	lsls	r3, r2, #30
 8006b9a:	680e      	ldr	r6, [r1, #0]
 8006b9c:	bf08      	it	eq
 8006b9e:	694b      	ldreq	r3, [r1, #20]
 8006ba0:	600f      	str	r7, [r1, #0]
 8006ba2:	bf18      	it	ne
 8006ba4:	2300      	movne	r3, #0
 8006ba6:	eba6 0807 	sub.w	r8, r6, r7
 8006baa:	608b      	str	r3, [r1, #8]
 8006bac:	f1b8 0f00 	cmp.w	r8, #0
 8006bb0:	dde9      	ble.n	8006b86 <__sflush_r+0xae>
 8006bb2:	6a21      	ldr	r1, [r4, #32]
 8006bb4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006bb6:	4643      	mov	r3, r8
 8006bb8:	463a      	mov	r2, r7
 8006bba:	4628      	mov	r0, r5
 8006bbc:	47b0      	blx	r6
 8006bbe:	2800      	cmp	r0, #0
 8006bc0:	dc08      	bgt.n	8006bd4 <__sflush_r+0xfc>
 8006bc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006bc6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006bca:	81a3      	strh	r3, [r4, #12]
 8006bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8006bd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006bd4:	4407      	add	r7, r0
 8006bd6:	eba8 0800 	sub.w	r8, r8, r0
 8006bda:	e7e7      	b.n	8006bac <__sflush_r+0xd4>
 8006bdc:	20400001 	.word	0x20400001

08006be0 <_fflush_r>:
 8006be0:	b538      	push	{r3, r4, r5, lr}
 8006be2:	690b      	ldr	r3, [r1, #16]
 8006be4:	4605      	mov	r5, r0
 8006be6:	460c      	mov	r4, r1
 8006be8:	b913      	cbnz	r3, 8006bf0 <_fflush_r+0x10>
 8006bea:	2500      	movs	r5, #0
 8006bec:	4628      	mov	r0, r5
 8006bee:	bd38      	pop	{r3, r4, r5, pc}
 8006bf0:	b118      	cbz	r0, 8006bfa <_fflush_r+0x1a>
 8006bf2:	6a03      	ldr	r3, [r0, #32]
 8006bf4:	b90b      	cbnz	r3, 8006bfa <_fflush_r+0x1a>
 8006bf6:	f7fe ffff 	bl	8005bf8 <__sinit>
 8006bfa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d0f3      	beq.n	8006bea <_fflush_r+0xa>
 8006c02:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006c04:	07d0      	lsls	r0, r2, #31
 8006c06:	d404      	bmi.n	8006c12 <_fflush_r+0x32>
 8006c08:	0599      	lsls	r1, r3, #22
 8006c0a:	d402      	bmi.n	8006c12 <_fflush_r+0x32>
 8006c0c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006c0e:	f7ff fa34 	bl	800607a <__retarget_lock_acquire_recursive>
 8006c12:	4628      	mov	r0, r5
 8006c14:	4621      	mov	r1, r4
 8006c16:	f7ff ff5f 	bl	8006ad8 <__sflush_r>
 8006c1a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006c1c:	07da      	lsls	r2, r3, #31
 8006c1e:	4605      	mov	r5, r0
 8006c20:	d4e4      	bmi.n	8006bec <_fflush_r+0xc>
 8006c22:	89a3      	ldrh	r3, [r4, #12]
 8006c24:	059b      	lsls	r3, r3, #22
 8006c26:	d4e1      	bmi.n	8006bec <_fflush_r+0xc>
 8006c28:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006c2a:	f7ff fa27 	bl	800607c <__retarget_lock_release_recursive>
 8006c2e:	e7dd      	b.n	8006bec <_fflush_r+0xc>

08006c30 <__swhatbuf_r>:
 8006c30:	b570      	push	{r4, r5, r6, lr}
 8006c32:	460c      	mov	r4, r1
 8006c34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c38:	2900      	cmp	r1, #0
 8006c3a:	b096      	sub	sp, #88	@ 0x58
 8006c3c:	4615      	mov	r5, r2
 8006c3e:	461e      	mov	r6, r3
 8006c40:	da0d      	bge.n	8006c5e <__swhatbuf_r+0x2e>
 8006c42:	89a3      	ldrh	r3, [r4, #12]
 8006c44:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006c48:	f04f 0100 	mov.w	r1, #0
 8006c4c:	bf14      	ite	ne
 8006c4e:	2340      	movne	r3, #64	@ 0x40
 8006c50:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006c54:	2000      	movs	r0, #0
 8006c56:	6031      	str	r1, [r6, #0]
 8006c58:	602b      	str	r3, [r5, #0]
 8006c5a:	b016      	add	sp, #88	@ 0x58
 8006c5c:	bd70      	pop	{r4, r5, r6, pc}
 8006c5e:	466a      	mov	r2, sp
 8006c60:	f000 f862 	bl	8006d28 <_fstat_r>
 8006c64:	2800      	cmp	r0, #0
 8006c66:	dbec      	blt.n	8006c42 <__swhatbuf_r+0x12>
 8006c68:	9901      	ldr	r1, [sp, #4]
 8006c6a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006c6e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006c72:	4259      	negs	r1, r3
 8006c74:	4159      	adcs	r1, r3
 8006c76:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006c7a:	e7eb      	b.n	8006c54 <__swhatbuf_r+0x24>

08006c7c <__smakebuf_r>:
 8006c7c:	898b      	ldrh	r3, [r1, #12]
 8006c7e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006c80:	079d      	lsls	r5, r3, #30
 8006c82:	4606      	mov	r6, r0
 8006c84:	460c      	mov	r4, r1
 8006c86:	d507      	bpl.n	8006c98 <__smakebuf_r+0x1c>
 8006c88:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006c8c:	6023      	str	r3, [r4, #0]
 8006c8e:	6123      	str	r3, [r4, #16]
 8006c90:	2301      	movs	r3, #1
 8006c92:	6163      	str	r3, [r4, #20]
 8006c94:	b003      	add	sp, #12
 8006c96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c98:	ab01      	add	r3, sp, #4
 8006c9a:	466a      	mov	r2, sp
 8006c9c:	f7ff ffc8 	bl	8006c30 <__swhatbuf_r>
 8006ca0:	9f00      	ldr	r7, [sp, #0]
 8006ca2:	4605      	mov	r5, r0
 8006ca4:	4639      	mov	r1, r7
 8006ca6:	4630      	mov	r0, r6
 8006ca8:	f7ff fa64 	bl	8006174 <_malloc_r>
 8006cac:	b948      	cbnz	r0, 8006cc2 <__smakebuf_r+0x46>
 8006cae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006cb2:	059a      	lsls	r2, r3, #22
 8006cb4:	d4ee      	bmi.n	8006c94 <__smakebuf_r+0x18>
 8006cb6:	f023 0303 	bic.w	r3, r3, #3
 8006cba:	f043 0302 	orr.w	r3, r3, #2
 8006cbe:	81a3      	strh	r3, [r4, #12]
 8006cc0:	e7e2      	b.n	8006c88 <__smakebuf_r+0xc>
 8006cc2:	89a3      	ldrh	r3, [r4, #12]
 8006cc4:	6020      	str	r0, [r4, #0]
 8006cc6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006cca:	81a3      	strh	r3, [r4, #12]
 8006ccc:	9b01      	ldr	r3, [sp, #4]
 8006cce:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006cd2:	b15b      	cbz	r3, 8006cec <__smakebuf_r+0x70>
 8006cd4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006cd8:	4630      	mov	r0, r6
 8006cda:	f000 f837 	bl	8006d4c <_isatty_r>
 8006cde:	b128      	cbz	r0, 8006cec <__smakebuf_r+0x70>
 8006ce0:	89a3      	ldrh	r3, [r4, #12]
 8006ce2:	f023 0303 	bic.w	r3, r3, #3
 8006ce6:	f043 0301 	orr.w	r3, r3, #1
 8006cea:	81a3      	strh	r3, [r4, #12]
 8006cec:	89a3      	ldrh	r3, [r4, #12]
 8006cee:	431d      	orrs	r5, r3
 8006cf0:	81a5      	strh	r5, [r4, #12]
 8006cf2:	e7cf      	b.n	8006c94 <__smakebuf_r+0x18>

08006cf4 <memmove>:
 8006cf4:	4288      	cmp	r0, r1
 8006cf6:	b510      	push	{r4, lr}
 8006cf8:	eb01 0402 	add.w	r4, r1, r2
 8006cfc:	d902      	bls.n	8006d04 <memmove+0x10>
 8006cfe:	4284      	cmp	r4, r0
 8006d00:	4623      	mov	r3, r4
 8006d02:	d807      	bhi.n	8006d14 <memmove+0x20>
 8006d04:	1e43      	subs	r3, r0, #1
 8006d06:	42a1      	cmp	r1, r4
 8006d08:	d008      	beq.n	8006d1c <memmove+0x28>
 8006d0a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006d0e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006d12:	e7f8      	b.n	8006d06 <memmove+0x12>
 8006d14:	4402      	add	r2, r0
 8006d16:	4601      	mov	r1, r0
 8006d18:	428a      	cmp	r2, r1
 8006d1a:	d100      	bne.n	8006d1e <memmove+0x2a>
 8006d1c:	bd10      	pop	{r4, pc}
 8006d1e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006d22:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006d26:	e7f7      	b.n	8006d18 <memmove+0x24>

08006d28 <_fstat_r>:
 8006d28:	b538      	push	{r3, r4, r5, lr}
 8006d2a:	4d07      	ldr	r5, [pc, #28]	@ (8006d48 <_fstat_r+0x20>)
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	4604      	mov	r4, r0
 8006d30:	4608      	mov	r0, r1
 8006d32:	4611      	mov	r1, r2
 8006d34:	602b      	str	r3, [r5, #0]
 8006d36:	f7fa fc9e 	bl	8001676 <_fstat>
 8006d3a:	1c43      	adds	r3, r0, #1
 8006d3c:	d102      	bne.n	8006d44 <_fstat_r+0x1c>
 8006d3e:	682b      	ldr	r3, [r5, #0]
 8006d40:	b103      	cbz	r3, 8006d44 <_fstat_r+0x1c>
 8006d42:	6023      	str	r3, [r4, #0]
 8006d44:	bd38      	pop	{r3, r4, r5, pc}
 8006d46:	bf00      	nop
 8006d48:	20004814 	.word	0x20004814

08006d4c <_isatty_r>:
 8006d4c:	b538      	push	{r3, r4, r5, lr}
 8006d4e:	4d06      	ldr	r5, [pc, #24]	@ (8006d68 <_isatty_r+0x1c>)
 8006d50:	2300      	movs	r3, #0
 8006d52:	4604      	mov	r4, r0
 8006d54:	4608      	mov	r0, r1
 8006d56:	602b      	str	r3, [r5, #0]
 8006d58:	f7fa fc9d 	bl	8001696 <_isatty>
 8006d5c:	1c43      	adds	r3, r0, #1
 8006d5e:	d102      	bne.n	8006d66 <_isatty_r+0x1a>
 8006d60:	682b      	ldr	r3, [r5, #0]
 8006d62:	b103      	cbz	r3, 8006d66 <_isatty_r+0x1a>
 8006d64:	6023      	str	r3, [r4, #0]
 8006d66:	bd38      	pop	{r3, r4, r5, pc}
 8006d68:	20004814 	.word	0x20004814

08006d6c <_sbrk_r>:
 8006d6c:	b538      	push	{r3, r4, r5, lr}
 8006d6e:	4d06      	ldr	r5, [pc, #24]	@ (8006d88 <_sbrk_r+0x1c>)
 8006d70:	2300      	movs	r3, #0
 8006d72:	4604      	mov	r4, r0
 8006d74:	4608      	mov	r0, r1
 8006d76:	602b      	str	r3, [r5, #0]
 8006d78:	f7fa fca6 	bl	80016c8 <_sbrk>
 8006d7c:	1c43      	adds	r3, r0, #1
 8006d7e:	d102      	bne.n	8006d86 <_sbrk_r+0x1a>
 8006d80:	682b      	ldr	r3, [r5, #0]
 8006d82:	b103      	cbz	r3, 8006d86 <_sbrk_r+0x1a>
 8006d84:	6023      	str	r3, [r4, #0]
 8006d86:	bd38      	pop	{r3, r4, r5, pc}
 8006d88:	20004814 	.word	0x20004814

08006d8c <_realloc_r>:
 8006d8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d90:	4607      	mov	r7, r0
 8006d92:	4614      	mov	r4, r2
 8006d94:	460d      	mov	r5, r1
 8006d96:	b921      	cbnz	r1, 8006da2 <_realloc_r+0x16>
 8006d98:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006d9c:	4611      	mov	r1, r2
 8006d9e:	f7ff b9e9 	b.w	8006174 <_malloc_r>
 8006da2:	b92a      	cbnz	r2, 8006db0 <_realloc_r+0x24>
 8006da4:	f7ff f97a 	bl	800609c <_free_r>
 8006da8:	4625      	mov	r5, r4
 8006daa:	4628      	mov	r0, r5
 8006dac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006db0:	f000 f81a 	bl	8006de8 <_malloc_usable_size_r>
 8006db4:	4284      	cmp	r4, r0
 8006db6:	4606      	mov	r6, r0
 8006db8:	d802      	bhi.n	8006dc0 <_realloc_r+0x34>
 8006dba:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006dbe:	d8f4      	bhi.n	8006daa <_realloc_r+0x1e>
 8006dc0:	4621      	mov	r1, r4
 8006dc2:	4638      	mov	r0, r7
 8006dc4:	f7ff f9d6 	bl	8006174 <_malloc_r>
 8006dc8:	4680      	mov	r8, r0
 8006dca:	b908      	cbnz	r0, 8006dd0 <_realloc_r+0x44>
 8006dcc:	4645      	mov	r5, r8
 8006dce:	e7ec      	b.n	8006daa <_realloc_r+0x1e>
 8006dd0:	42b4      	cmp	r4, r6
 8006dd2:	4622      	mov	r2, r4
 8006dd4:	4629      	mov	r1, r5
 8006dd6:	bf28      	it	cs
 8006dd8:	4632      	movcs	r2, r6
 8006dda:	f7ff f950 	bl	800607e <memcpy>
 8006dde:	4629      	mov	r1, r5
 8006de0:	4638      	mov	r0, r7
 8006de2:	f7ff f95b 	bl	800609c <_free_r>
 8006de6:	e7f1      	b.n	8006dcc <_realloc_r+0x40>

08006de8 <_malloc_usable_size_r>:
 8006de8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006dec:	1f18      	subs	r0, r3, #4
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	bfbc      	itt	lt
 8006df2:	580b      	ldrlt	r3, [r1, r0]
 8006df4:	18c0      	addlt	r0, r0, r3
 8006df6:	4770      	bx	lr

08006df8 <_init>:
 8006df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dfa:	bf00      	nop
 8006dfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006dfe:	bc08      	pop	{r3}
 8006e00:	469e      	mov	lr, r3
 8006e02:	4770      	bx	lr

08006e04 <_fini>:
 8006e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e06:	bf00      	nop
 8006e08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e0a:	bc08      	pop	{r3}
 8006e0c:	469e      	mov	lr, r3
 8006e0e:	4770      	bx	lr
