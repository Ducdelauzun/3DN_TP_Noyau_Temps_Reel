
3DN_TP_Noyau_Temps_Reel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a70  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000039c  08006c40  08006c40  00007c40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006fdc  08006fdc  0000816c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006fdc  08006fdc  00007fdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006fe4  08006fe4  0000816c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006fe4  08006fe4  00007fe4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006fe8  08006fe8  00007fe8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000016c  20000000  08006fec  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000046b8  2000016c  08007158  0000816c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004824  08007158  00008824  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000816c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010aa7  00000000  00000000  0000819c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002fb8  00000000  00000000  00018c43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e20  00000000  00000000  0001bc00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000aaa  00000000  00000000  0001ca20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028b1b  00000000  00000000  0001d4ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012422  00000000  00000000  00045fe5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f283d  00000000  00000000  00058407  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014ac44  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000040fc  00000000  00000000  0014ac88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007e  00000000  00000000  0014ed84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000016c 	.word	0x2000016c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006c28 	.word	0x08006c28

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000170 	.word	0x20000170
 800020c:	08006c28 	.word	0x08006c28

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b988 	b.w	80005d8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	468e      	mov	lr, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	4688      	mov	r8, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d962      	bls.n	80003bc <__udivmoddi4+0xdc>
 80002f6:	fab2 f682 	clz	r6, r2
 80002fa:	b14e      	cbz	r6, 8000310 <__udivmoddi4+0x30>
 80002fc:	f1c6 0320 	rsb	r3, r6, #32
 8000300:	fa01 f806 	lsl.w	r8, r1, r6
 8000304:	fa20 f303 	lsr.w	r3, r0, r3
 8000308:	40b7      	lsls	r7, r6
 800030a:	ea43 0808 	orr.w	r8, r3, r8
 800030e:	40b4      	lsls	r4, r6
 8000310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000314:	fa1f fc87 	uxth.w	ip, r7
 8000318:	fbb8 f1fe 	udiv	r1, r8, lr
 800031c:	0c23      	lsrs	r3, r4, #16
 800031e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000322:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000326:	fb01 f20c 	mul.w	r2, r1, ip
 800032a:	429a      	cmp	r2, r3
 800032c:	d909      	bls.n	8000342 <__udivmoddi4+0x62>
 800032e:	18fb      	adds	r3, r7, r3
 8000330:	f101 30ff 	add.w	r0, r1, #4294967295
 8000334:	f080 80ea 	bcs.w	800050c <__udivmoddi4+0x22c>
 8000338:	429a      	cmp	r2, r3
 800033a:	f240 80e7 	bls.w	800050c <__udivmoddi4+0x22c>
 800033e:	3902      	subs	r1, #2
 8000340:	443b      	add	r3, r7
 8000342:	1a9a      	subs	r2, r3, r2
 8000344:	b2a3      	uxth	r3, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000352:	fb00 fc0c 	mul.w	ip, r0, ip
 8000356:	459c      	cmp	ip, r3
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x8e>
 800035a:	18fb      	adds	r3, r7, r3
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000360:	f080 80d6 	bcs.w	8000510 <__udivmoddi4+0x230>
 8000364:	459c      	cmp	ip, r3
 8000366:	f240 80d3 	bls.w	8000510 <__udivmoddi4+0x230>
 800036a:	443b      	add	r3, r7
 800036c:	3802      	subs	r0, #2
 800036e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000372:	eba3 030c 	sub.w	r3, r3, ip
 8000376:	2100      	movs	r1, #0
 8000378:	b11d      	cbz	r5, 8000382 <__udivmoddi4+0xa2>
 800037a:	40f3      	lsrs	r3, r6
 800037c:	2200      	movs	r2, #0
 800037e:	e9c5 3200 	strd	r3, r2, [r5]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d905      	bls.n	8000396 <__udivmoddi4+0xb6>
 800038a:	b10d      	cbz	r5, 8000390 <__udivmoddi4+0xb0>
 800038c:	e9c5 0100 	strd	r0, r1, [r5]
 8000390:	2100      	movs	r1, #0
 8000392:	4608      	mov	r0, r1
 8000394:	e7f5      	b.n	8000382 <__udivmoddi4+0xa2>
 8000396:	fab3 f183 	clz	r1, r3
 800039a:	2900      	cmp	r1, #0
 800039c:	d146      	bne.n	800042c <__udivmoddi4+0x14c>
 800039e:	4573      	cmp	r3, lr
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0xc8>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 8105 	bhi.w	80005b2 <__udivmoddi4+0x2d2>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb6e 0203 	sbc.w	r2, lr, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	4690      	mov	r8, r2
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0e5      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003b6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ba:	e7e2      	b.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f000 8090 	beq.w	80004e2 <__udivmoddi4+0x202>
 80003c2:	fab2 f682 	clz	r6, r2
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	f040 80a4 	bne.w	8000514 <__udivmoddi4+0x234>
 80003cc:	1a8a      	subs	r2, r1, r2
 80003ce:	0c03      	lsrs	r3, r0, #16
 80003d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d4:	b280      	uxth	r0, r0
 80003d6:	b2bc      	uxth	r4, r7
 80003d8:	2101      	movs	r1, #1
 80003da:	fbb2 fcfe 	udiv	ip, r2, lr
 80003de:	fb0e 221c 	mls	r2, lr, ip, r2
 80003e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003e6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ea:	429a      	cmp	r2, r3
 80003ec:	d907      	bls.n	80003fe <__udivmoddi4+0x11e>
 80003ee:	18fb      	adds	r3, r7, r3
 80003f0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x11c>
 80003f6:	429a      	cmp	r2, r3
 80003f8:	f200 80e0 	bhi.w	80005bc <__udivmoddi4+0x2dc>
 80003fc:	46c4      	mov	ip, r8
 80003fe:	1a9b      	subs	r3, r3, r2
 8000400:	fbb3 f2fe 	udiv	r2, r3, lr
 8000404:	fb0e 3312 	mls	r3, lr, r2, r3
 8000408:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800040c:	fb02 f404 	mul.w	r4, r2, r4
 8000410:	429c      	cmp	r4, r3
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0x144>
 8000414:	18fb      	adds	r3, r7, r3
 8000416:	f102 30ff 	add.w	r0, r2, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x142>
 800041c:	429c      	cmp	r4, r3
 800041e:	f200 80ca 	bhi.w	80005b6 <__udivmoddi4+0x2d6>
 8000422:	4602      	mov	r2, r0
 8000424:	1b1b      	subs	r3, r3, r4
 8000426:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800042a:	e7a5      	b.n	8000378 <__udivmoddi4+0x98>
 800042c:	f1c1 0620 	rsb	r6, r1, #32
 8000430:	408b      	lsls	r3, r1
 8000432:	fa22 f706 	lsr.w	r7, r2, r6
 8000436:	431f      	orrs	r7, r3
 8000438:	fa0e f401 	lsl.w	r4, lr, r1
 800043c:	fa20 f306 	lsr.w	r3, r0, r6
 8000440:	fa2e fe06 	lsr.w	lr, lr, r6
 8000444:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000448:	4323      	orrs	r3, r4
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	fa1f fc87 	uxth.w	ip, r7
 8000452:	fbbe f0f9 	udiv	r0, lr, r9
 8000456:	0c1c      	lsrs	r4, r3, #16
 8000458:	fb09 ee10 	mls	lr, r9, r0, lr
 800045c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000460:	fb00 fe0c 	mul.w	lr, r0, ip
 8000464:	45a6      	cmp	lr, r4
 8000466:	fa02 f201 	lsl.w	r2, r2, r1
 800046a:	d909      	bls.n	8000480 <__udivmoddi4+0x1a0>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000472:	f080 809c 	bcs.w	80005ae <__udivmoddi4+0x2ce>
 8000476:	45a6      	cmp	lr, r4
 8000478:	f240 8099 	bls.w	80005ae <__udivmoddi4+0x2ce>
 800047c:	3802      	subs	r0, #2
 800047e:	443c      	add	r4, r7
 8000480:	eba4 040e 	sub.w	r4, r4, lr
 8000484:	fa1f fe83 	uxth.w	lr, r3
 8000488:	fbb4 f3f9 	udiv	r3, r4, r9
 800048c:	fb09 4413 	mls	r4, r9, r3, r4
 8000490:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000494:	fb03 fc0c 	mul.w	ip, r3, ip
 8000498:	45a4      	cmp	ip, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x1ce>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f103 3eff 	add.w	lr, r3, #4294967295
 80004a2:	f080 8082 	bcs.w	80005aa <__udivmoddi4+0x2ca>
 80004a6:	45a4      	cmp	ip, r4
 80004a8:	d97f      	bls.n	80005aa <__udivmoddi4+0x2ca>
 80004aa:	3b02      	subs	r3, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004b2:	eba4 040c 	sub.w	r4, r4, ip
 80004b6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ba:	4564      	cmp	r4, ip
 80004bc:	4673      	mov	r3, lr
 80004be:	46e1      	mov	r9, ip
 80004c0:	d362      	bcc.n	8000588 <__udivmoddi4+0x2a8>
 80004c2:	d05f      	beq.n	8000584 <__udivmoddi4+0x2a4>
 80004c4:	b15d      	cbz	r5, 80004de <__udivmoddi4+0x1fe>
 80004c6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ca:	eb64 0409 	sbc.w	r4, r4, r9
 80004ce:	fa04 f606 	lsl.w	r6, r4, r6
 80004d2:	fa22 f301 	lsr.w	r3, r2, r1
 80004d6:	431e      	orrs	r6, r3
 80004d8:	40cc      	lsrs	r4, r1
 80004da:	e9c5 6400 	strd	r6, r4, [r5]
 80004de:	2100      	movs	r1, #0
 80004e0:	e74f      	b.n	8000382 <__udivmoddi4+0xa2>
 80004e2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004e6:	0c01      	lsrs	r1, r0, #16
 80004e8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ec:	b280      	uxth	r0, r0
 80004ee:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004f2:	463b      	mov	r3, r7
 80004f4:	4638      	mov	r0, r7
 80004f6:	463c      	mov	r4, r7
 80004f8:	46b8      	mov	r8, r7
 80004fa:	46be      	mov	lr, r7
 80004fc:	2620      	movs	r6, #32
 80004fe:	fbb1 f1f7 	udiv	r1, r1, r7
 8000502:	eba2 0208 	sub.w	r2, r2, r8
 8000506:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800050a:	e766      	b.n	80003da <__udivmoddi4+0xfa>
 800050c:	4601      	mov	r1, r0
 800050e:	e718      	b.n	8000342 <__udivmoddi4+0x62>
 8000510:	4610      	mov	r0, r2
 8000512:	e72c      	b.n	800036e <__udivmoddi4+0x8e>
 8000514:	f1c6 0220 	rsb	r2, r6, #32
 8000518:	fa2e f302 	lsr.w	r3, lr, r2
 800051c:	40b7      	lsls	r7, r6
 800051e:	40b1      	lsls	r1, r6
 8000520:	fa20 f202 	lsr.w	r2, r0, r2
 8000524:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000528:	430a      	orrs	r2, r1
 800052a:	fbb3 f8fe 	udiv	r8, r3, lr
 800052e:	b2bc      	uxth	r4, r7
 8000530:	fb0e 3318 	mls	r3, lr, r8, r3
 8000534:	0c11      	lsrs	r1, r2, #16
 8000536:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800053a:	fb08 f904 	mul.w	r9, r8, r4
 800053e:	40b0      	lsls	r0, r6
 8000540:	4589      	cmp	r9, r1
 8000542:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000546:	b280      	uxth	r0, r0
 8000548:	d93e      	bls.n	80005c8 <__udivmoddi4+0x2e8>
 800054a:	1879      	adds	r1, r7, r1
 800054c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000550:	d201      	bcs.n	8000556 <__udivmoddi4+0x276>
 8000552:	4589      	cmp	r9, r1
 8000554:	d81f      	bhi.n	8000596 <__udivmoddi4+0x2b6>
 8000556:	eba1 0109 	sub.w	r1, r1, r9
 800055a:	fbb1 f9fe 	udiv	r9, r1, lr
 800055e:	fb09 f804 	mul.w	r8, r9, r4
 8000562:	fb0e 1119 	mls	r1, lr, r9, r1
 8000566:	b292      	uxth	r2, r2
 8000568:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800056c:	4542      	cmp	r2, r8
 800056e:	d229      	bcs.n	80005c4 <__udivmoddi4+0x2e4>
 8000570:	18ba      	adds	r2, r7, r2
 8000572:	f109 31ff 	add.w	r1, r9, #4294967295
 8000576:	d2c4      	bcs.n	8000502 <__udivmoddi4+0x222>
 8000578:	4542      	cmp	r2, r8
 800057a:	d2c2      	bcs.n	8000502 <__udivmoddi4+0x222>
 800057c:	f1a9 0102 	sub.w	r1, r9, #2
 8000580:	443a      	add	r2, r7
 8000582:	e7be      	b.n	8000502 <__udivmoddi4+0x222>
 8000584:	45f0      	cmp	r8, lr
 8000586:	d29d      	bcs.n	80004c4 <__udivmoddi4+0x1e4>
 8000588:	ebbe 0302 	subs.w	r3, lr, r2
 800058c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000590:	3801      	subs	r0, #1
 8000592:	46e1      	mov	r9, ip
 8000594:	e796      	b.n	80004c4 <__udivmoddi4+0x1e4>
 8000596:	eba7 0909 	sub.w	r9, r7, r9
 800059a:	4449      	add	r1, r9
 800059c:	f1a8 0c02 	sub.w	ip, r8, #2
 80005a0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a4:	fb09 f804 	mul.w	r8, r9, r4
 80005a8:	e7db      	b.n	8000562 <__udivmoddi4+0x282>
 80005aa:	4673      	mov	r3, lr
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1ce>
 80005ae:	4650      	mov	r0, sl
 80005b0:	e766      	b.n	8000480 <__udivmoddi4+0x1a0>
 80005b2:	4608      	mov	r0, r1
 80005b4:	e6fd      	b.n	80003b2 <__udivmoddi4+0xd2>
 80005b6:	443b      	add	r3, r7
 80005b8:	3a02      	subs	r2, #2
 80005ba:	e733      	b.n	8000424 <__udivmoddi4+0x144>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	443b      	add	r3, r7
 80005c2:	e71c      	b.n	80003fe <__udivmoddi4+0x11e>
 80005c4:	4649      	mov	r1, r9
 80005c6:	e79c      	b.n	8000502 <__udivmoddi4+0x222>
 80005c8:	eba1 0109 	sub.w	r1, r1, r9
 80005cc:	46c4      	mov	ip, r8
 80005ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d2:	fb09 f804 	mul.w	r8, r9, r4
 80005d6:	e7c4      	b.n	8000562 <__udivmoddi4+0x282>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005dc:	b480      	push	{r7}
 80005de:	b085      	sub	sp, #20
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	60f8      	str	r0, [r7, #12]
 80005e4:	60b9      	str	r1, [r7, #8]
 80005e6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	4a07      	ldr	r2, [pc, #28]	@ (8000608 <vApplicationGetIdleTaskMemory+0x2c>)
 80005ec:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005ee:	68bb      	ldr	r3, [r7, #8]
 80005f0:	4a06      	ldr	r2, [pc, #24]	@ (800060c <vApplicationGetIdleTaskMemory+0x30>)
 80005f2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	2280      	movs	r2, #128	@ 0x80
 80005f8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005fa:	bf00      	nop
 80005fc:	3714      	adds	r7, #20
 80005fe:	46bd      	mov	sp, r7
 8000600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop
 8000608:	2000018c 	.word	0x2000018c
 800060c:	200001e0 	.word	0x200001e0

08000610 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000610:	b5b0      	push	{r4, r5, r7, lr}
 8000612:	b088      	sub	sp, #32
 8000614:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000616:	4b0a      	ldr	r3, [pc, #40]	@ (8000640 <MX_FREERTOS_Init+0x30>)
 8000618:	1d3c      	adds	r4, r7, #4
 800061a:	461d      	mov	r5, r3
 800061c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800061e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000620:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000624:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000628:	1d3b      	adds	r3, r7, #4
 800062a:	2100      	movs	r1, #0
 800062c:	4618      	mov	r0, r3
 800062e:	f003 fade 	bl	8003bee <osThreadCreate>
 8000632:	4603      	mov	r3, r0
 8000634:	4a03      	ldr	r2, [pc, #12]	@ (8000644 <MX_FREERTOS_Init+0x34>)
 8000636:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000638:	bf00      	nop
 800063a:	3720      	adds	r7, #32
 800063c:	46bd      	mov	sp, r7
 800063e:	bdb0      	pop	{r4, r5, r7, pc}
 8000640:	08006c4c 	.word	0x08006c4c
 8000644:	20000188 	.word	0x20000188

08000648 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000650:	2001      	movs	r0, #1
 8000652:	f003 fb18 	bl	8003c86 <osDelay>
 8000656:	e7fb      	b.n	8000650 <StartDefaultTask+0x8>

08000658 <MX_GPIO_Init>:
     PB11   ------> USB_OTG_HS_ULPI_D4
     PB14   ------> SPI2_MISO
     PB15   ------> SPI2_MOSI
*/
void MX_GPIO_Init(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b090      	sub	sp, #64	@ 0x40
 800065c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800065e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000662:	2200      	movs	r2, #0
 8000664:	601a      	str	r2, [r3, #0]
 8000666:	605a      	str	r2, [r3, #4]
 8000668:	609a      	str	r2, [r3, #8]
 800066a:	60da      	str	r2, [r3, #12]
 800066c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800066e:	4bad      	ldr	r3, [pc, #692]	@ (8000924 <MX_GPIO_Init+0x2cc>)
 8000670:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000672:	4aac      	ldr	r2, [pc, #688]	@ (8000924 <MX_GPIO_Init+0x2cc>)
 8000674:	f043 0310 	orr.w	r3, r3, #16
 8000678:	6313      	str	r3, [r2, #48]	@ 0x30
 800067a:	4baa      	ldr	r3, [pc, #680]	@ (8000924 <MX_GPIO_Init+0x2cc>)
 800067c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800067e:	f003 0310 	and.w	r3, r3, #16
 8000682:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000684:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000686:	4ba7      	ldr	r3, [pc, #668]	@ (8000924 <MX_GPIO_Init+0x2cc>)
 8000688:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800068a:	4aa6      	ldr	r2, [pc, #664]	@ (8000924 <MX_GPIO_Init+0x2cc>)
 800068c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000690:	6313      	str	r3, [r2, #48]	@ 0x30
 8000692:	4ba4      	ldr	r3, [pc, #656]	@ (8000924 <MX_GPIO_Init+0x2cc>)
 8000694:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000696:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800069a:	627b      	str	r3, [r7, #36]	@ 0x24
 800069c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800069e:	4ba1      	ldr	r3, [pc, #644]	@ (8000924 <MX_GPIO_Init+0x2cc>)
 80006a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006a2:	4aa0      	ldr	r2, [pc, #640]	@ (8000924 <MX_GPIO_Init+0x2cc>)
 80006a4:	f043 0302 	orr.w	r3, r3, #2
 80006a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80006aa:	4b9e      	ldr	r3, [pc, #632]	@ (8000924 <MX_GPIO_Init+0x2cc>)
 80006ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ae:	f003 0302 	and.w	r3, r3, #2
 80006b2:	623b      	str	r3, [r7, #32]
 80006b4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006b6:	4b9b      	ldr	r3, [pc, #620]	@ (8000924 <MX_GPIO_Init+0x2cc>)
 80006b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ba:	4a9a      	ldr	r2, [pc, #616]	@ (8000924 <MX_GPIO_Init+0x2cc>)
 80006bc:	f043 0308 	orr.w	r3, r3, #8
 80006c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80006c2:	4b98      	ldr	r3, [pc, #608]	@ (8000924 <MX_GPIO_Init+0x2cc>)
 80006c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006c6:	f003 0308 	and.w	r3, r3, #8
 80006ca:	61fb      	str	r3, [r7, #28]
 80006cc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006ce:	4b95      	ldr	r3, [pc, #596]	@ (8000924 <MX_GPIO_Init+0x2cc>)
 80006d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006d2:	4a94      	ldr	r2, [pc, #592]	@ (8000924 <MX_GPIO_Init+0x2cc>)
 80006d4:	f043 0304 	orr.w	r3, r3, #4
 80006d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80006da:	4b92      	ldr	r3, [pc, #584]	@ (8000924 <MX_GPIO_Init+0x2cc>)
 80006dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006de:	f003 0304 	and.w	r3, r3, #4
 80006e2:	61bb      	str	r3, [r7, #24]
 80006e4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006e6:	4b8f      	ldr	r3, [pc, #572]	@ (8000924 <MX_GPIO_Init+0x2cc>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ea:	4a8e      	ldr	r2, [pc, #568]	@ (8000924 <MX_GPIO_Init+0x2cc>)
 80006ec:	f043 0301 	orr.w	r3, r3, #1
 80006f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80006f2:	4b8c      	ldr	r3, [pc, #560]	@ (8000924 <MX_GPIO_Init+0x2cc>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006f6:	f003 0301 	and.w	r3, r3, #1
 80006fa:	617b      	str	r3, [r7, #20]
 80006fc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80006fe:	4b89      	ldr	r3, [pc, #548]	@ (8000924 <MX_GPIO_Init+0x2cc>)
 8000700:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000702:	4a88      	ldr	r2, [pc, #544]	@ (8000924 <MX_GPIO_Init+0x2cc>)
 8000704:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000708:	6313      	str	r3, [r2, #48]	@ 0x30
 800070a:	4b86      	ldr	r3, [pc, #536]	@ (8000924 <MX_GPIO_Init+0x2cc>)
 800070c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800070e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000712:	613b      	str	r3, [r7, #16]
 8000714:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000716:	4b83      	ldr	r3, [pc, #524]	@ (8000924 <MX_GPIO_Init+0x2cc>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800071a:	4a82      	ldr	r2, [pc, #520]	@ (8000924 <MX_GPIO_Init+0x2cc>)
 800071c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000720:	6313      	str	r3, [r2, #48]	@ 0x30
 8000722:	4b80      	ldr	r3, [pc, #512]	@ (8000924 <MX_GPIO_Init+0x2cc>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000726:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800072a:	60fb      	str	r3, [r7, #12]
 800072c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800072e:	4b7d      	ldr	r3, [pc, #500]	@ (8000924 <MX_GPIO_Init+0x2cc>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000732:	4a7c      	ldr	r2, [pc, #496]	@ (8000924 <MX_GPIO_Init+0x2cc>)
 8000734:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000738:	6313      	str	r3, [r2, #48]	@ 0x30
 800073a:	4b7a      	ldr	r3, [pc, #488]	@ (8000924 <MX_GPIO_Init+0x2cc>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800073e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000742:	60bb      	str	r3, [r7, #8]
 8000744:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000746:	4b77      	ldr	r3, [pc, #476]	@ (8000924 <MX_GPIO_Init+0x2cc>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800074a:	4a76      	ldr	r2, [pc, #472]	@ (8000924 <MX_GPIO_Init+0x2cc>)
 800074c:	f043 0320 	orr.w	r3, r3, #32
 8000750:	6313      	str	r3, [r2, #48]	@ 0x30
 8000752:	4b74      	ldr	r3, [pc, #464]	@ (8000924 <MX_GPIO_Init+0x2cc>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000756:	f003 0320 	and.w	r3, r3, #32
 800075a:	607b      	str	r3, [r7, #4]
 800075c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800075e:	4b71      	ldr	r3, [pc, #452]	@ (8000924 <MX_GPIO_Init+0x2cc>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000762:	4a70      	ldr	r2, [pc, #448]	@ (8000924 <MX_GPIO_Init+0x2cc>)
 8000764:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000768:	6313      	str	r3, [r2, #48]	@ 0x30
 800076a:	4b6e      	ldr	r3, [pc, #440]	@ (8000924 <MX_GPIO_Init+0x2cc>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800076e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000772:	603b      	str	r3, [r7, #0]
 8000774:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000776:	2201      	movs	r2, #1
 8000778:	2120      	movs	r1, #32
 800077a:	486b      	ldr	r0, [pc, #428]	@ (8000928 <MX_GPIO_Init+0x2d0>)
 800077c:	f001 fb3c 	bl	8001df8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin|LED_Pin|LCD_DISP_Pin, GPIO_PIN_RESET);
 8000780:	2200      	movs	r2, #0
 8000782:	f241 010e 	movw	r1, #4110	@ 0x100e
 8000786:	4869      	ldr	r0, [pc, #420]	@ (800092c <MX_GPIO_Init+0x2d4>)
 8000788:	f001 fb36 	bl	8001df8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 800078c:	2200      	movs	r2, #0
 800078e:	2108      	movs	r1, #8
 8000790:	4867      	ldr	r0, [pc, #412]	@ (8000930 <MX_GPIO_Init+0x2d8>)
 8000792:	f001 fb31 	bl	8001df8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8000796:	2200      	movs	r2, #0
 8000798:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800079c:	4865      	ldr	r0, [pc, #404]	@ (8000934 <MX_GPIO_Init+0x2dc>)
 800079e:	f001 fb2b 	bl	8001df8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 80007a2:	2200      	movs	r2, #0
 80007a4:	21c8      	movs	r1, #200	@ 0xc8
 80007a6:	4864      	ldr	r0, [pc, #400]	@ (8000938 <MX_GPIO_Init+0x2e0>)
 80007a8:	f001 fb26 	bl	8001df8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LCD_B0_Pin */
  GPIO_InitStruct.Pin = LCD_B0_Pin;
 80007ac:	2310      	movs	r3, #16
 80007ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007b0:	2302      	movs	r3, #2
 80007b2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b4:	2300      	movs	r3, #0
 80007b6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b8:	2300      	movs	r3, #0
 80007ba:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80007bc:	230e      	movs	r3, #14
 80007be:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 80007c0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80007c4:	4619      	mov	r1, r3
 80007c6:	485d      	ldr	r0, [pc, #372]	@ (800093c <MX_GPIO_Init+0x2e4>)
 80007c8:	f001 f952 	bl	8001a70 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 80007cc:	2308      	movs	r3, #8
 80007ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007d0:	2300      	movs	r3, #0
 80007d2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d4:	2300      	movs	r3, #0
 80007d6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80007d8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80007dc:	4619      	mov	r1, r3
 80007de:	4857      	ldr	r0, [pc, #348]	@ (800093c <MX_GPIO_Init+0x2e4>)
 80007e0:	f001 f946 	bl	8001a70 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_D2_Pin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 80007e4:	2304      	movs	r3, #4
 80007e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007e8:	2302      	movs	r3, #2
 80007ea:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ec:	2300      	movs	r3, #0
 80007ee:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007f0:	2303      	movs	r3, #3
 80007f2:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80007f4:	2309      	movs	r3, #9
 80007f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 80007f8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80007fc:	4619      	mov	r1, r3
 80007fe:	484f      	ldr	r0, [pc, #316]	@ (800093c <MX_GPIO_Init+0x2e4>)
 8000800:	f001 f936 	bl	8001a70 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8000804:	f44f 43d0 	mov.w	r3, #26624	@ 0x6800
 8000808:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800080a:	2302      	movs	r3, #2
 800080c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080e:	2300      	movs	r3, #0
 8000810:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000812:	2303      	movs	r3, #3
 8000814:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000816:	230b      	movs	r3, #11
 8000818:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800081a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800081e:	4619      	mov	r1, r3
 8000820:	4845      	ldr	r0, [pc, #276]	@ (8000938 <MX_GPIO_Init+0x2e0>)
 8000822:	f001 f925 	bl	8001a70 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_NBL1_Pin FMC_NBL0_Pin FMC_D5_Pin FMC_D6_Pin
                           FMC_D8_Pin FMC_D11_Pin FMC_D4_Pin FMC_D7_Pin
                           FMC_D9_Pin FMC_D12_Pin FMC_D10_Pin */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8000826:	f64f 7383 	movw	r3, #65411	@ 0xff83
 800082a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800082c:	2302      	movs	r3, #2
 800082e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000830:	2300      	movs	r3, #0
 8000832:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000834:	2303      	movs	r3, #3
 8000836:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000838:	230c      	movs	r3, #12
 800083a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800083c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000840:	4619      	mov	r1, r3
 8000842:	483e      	ldr	r0, [pc, #248]	@ (800093c <MX_GPIO_Init+0x2e4>)
 8000844:	f001 f914 	bl	8001a70 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_SCL_D15_Pin ARDUINO_SDA_D14_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8000848:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800084c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800084e:	2312      	movs	r3, #18
 8000850:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000852:	2300      	movs	r3, #0
 8000854:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000856:	2300      	movs	r3, #0
 8000858:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800085a:	2304      	movs	r3, #4
 800085c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800085e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000862:	4619      	mov	r1, r3
 8000864:	4836      	ldr	r0, [pc, #216]	@ (8000940 <MX_GPIO_Init+0x2e8>)
 8000866:	f001 f903 	bl	8001a70 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 800086a:	f643 4323 	movw	r3, #15395	@ 0x3c23
 800086e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000870:	2302      	movs	r3, #2
 8000872:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000874:	2300      	movs	r3, #0
 8000876:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000878:	2303      	movs	r3, #3
 800087a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800087c:	230a      	movs	r3, #10
 800087e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000880:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000884:	4619      	mov	r1, r3
 8000886:	482e      	ldr	r0, [pc, #184]	@ (8000940 <MX_GPIO_Init+0x2e8>)
 8000888:	f001 f8f2 	bl	8001a70 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 800088c:	2310      	movs	r3, #16
 800088e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000890:	2302      	movs	r3, #2
 8000892:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000894:	2300      	movs	r3, #0
 8000896:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000898:	2300      	movs	r3, #0
 800089a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800089c:	2302      	movs	r3, #2
 800089e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 80008a0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80008a4:	4619      	mov	r1, r3
 80008a6:	4826      	ldr	r0, [pc, #152]	@ (8000940 <MX_GPIO_Init+0x2e8>)
 80008a8:	f001 f8e2 	bl	8001a70 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPDIF_RX0_Pin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 80008ac:	2380      	movs	r3, #128	@ 0x80
 80008ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008b0:	2302      	movs	r3, #2
 80008b2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b4:	2300      	movs	r3, #0
 80008b6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b8:	2300      	movs	r3, #0
 80008ba:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 80008bc:	2308      	movs	r3, #8
 80008be:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 80008c0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80008c4:	4619      	mov	r1, r3
 80008c6:	4818      	ldr	r0, [pc, #96]	@ (8000928 <MX_GPIO_Init+0x2d0>)
 80008c8:	f001 f8d2 	bl	8001a70 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDMMC_CK_Pin SDMMC_D3_Pin SDMMC_D2_Pin PC9
                           PC8 */
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 80008cc:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 80008d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d2:	2302      	movs	r3, #2
 80008d4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d6:	2300      	movs	r3, #0
 80008d8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008da:	2303      	movs	r3, #3
 80008dc:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80008de:	230c      	movs	r3, #12
 80008e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008e2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80008e6:	4619      	mov	r1, r3
 80008e8:	4816      	ldr	r0, [pc, #88]	@ (8000944 <MX_GPIO_Init+0x2ec>)
 80008ea:	f001 f8c1 	bl	8001a70 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D9_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 80008ee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80008f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008f4:	2302      	movs	r3, #2
 80008f6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f8:	2300      	movs	r3, #0
 80008fa:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fc:	2300      	movs	r3, #0
 80008fe:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000900:	2301      	movs	r3, #1
 8000902:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8000904:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000908:	4619      	mov	r1, r3
 800090a:	480f      	ldr	r0, [pc, #60]	@ (8000948 <MX_GPIO_Init+0x2f0>)
 800090c:	f001 f8b0 	bl	8001a70 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D6_Pin DCMI_D7_Pin */
  GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8000910:	2360      	movs	r3, #96	@ 0x60
 8000912:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000914:	2302      	movs	r3, #2
 8000916:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000918:	2300      	movs	r3, #0
 800091a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800091c:	2300      	movs	r3, #0
 800091e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000920:	230d      	movs	r3, #13
 8000922:	e013      	b.n	800094c <MX_GPIO_Init+0x2f4>
 8000924:	40023800 	.word	0x40023800
 8000928:	40020c00 	.word	0x40020c00
 800092c:	40022000 	.word	0x40022000
 8000930:	40022800 	.word	0x40022800
 8000934:	40021c00 	.word	0x40021c00
 8000938:	40021800 	.word	0x40021800
 800093c:	40021000 	.word	0x40021000
 8000940:	40020400 	.word	0x40020400
 8000944:	40020800 	.word	0x40020800
 8000948:	40020000 	.word	0x40020000
 800094c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800094e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000952:	4619      	mov	r1, r3
 8000954:	48bc      	ldr	r0, [pc, #752]	@ (8000c48 <MX_GPIO_Init+0x5f0>)
 8000956:	f001 f88b 	bl	8001a70 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_NCS_Pin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 800095a:	2340      	movs	r3, #64	@ 0x40
 800095c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800095e:	2302      	movs	r3, #2
 8000960:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000962:	2300      	movs	r3, #0
 8000964:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000966:	2303      	movs	r3, #3
 8000968:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800096a:	230a      	movs	r3, #10
 800096c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 800096e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000972:	4619      	mov	r1, r3
 8000974:	48b5      	ldr	r0, [pc, #724]	@ (8000c4c <MX_GPIO_Init+0x5f4>)
 8000976:	f001 f87b 	bl	8001a70 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNCAS_Pin FMC_SDCLK_Pin FMC_A11_Pin FMC_A10_Pin
                           FMC_BA1_Pin FMC_BA0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 800097a:	f248 1333 	movw	r3, #33075	@ 0x8133
 800097e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000980:	2302      	movs	r3, #2
 8000982:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000984:	2300      	movs	r3, #0
 8000986:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000988:	2303      	movs	r3, #3
 800098a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800098c:	230c      	movs	r3, #12
 800098e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000990:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000994:	4619      	mov	r1, r3
 8000996:	48ae      	ldr	r0, [pc, #696]	@ (8000c50 <MX_GPIO_Init+0x5f8>)
 8000998:	f001 f86a 	bl	8001a70 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_B1_Pin LCD_B2_Pin LCD_B3_Pin LCD_G4_Pin
                           LCD_G1_Pin LCD_G3_Pin LCD_G0_Pin LCD_G2_Pin
                           LCD_R7_Pin LCD_R5_Pin LCD_R6_Pin LCD_R4_Pin
                           LCD_R3_Pin LCD_R1_Pin LCD_R2_Pin */
  GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 800099c:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 80009a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a2:	2302      	movs	r3, #2
 80009a4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a6:	2300      	movs	r3, #0
 80009a8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009aa:	2300      	movs	r3, #0
 80009ac:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80009ae:	230e      	movs	r3, #14
 80009b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80009b2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80009b6:	4619      	mov	r1, r3
 80009b8:	48a6      	ldr	r0, [pc, #664]	@ (8000c54 <MX_GPIO_Init+0x5fc>)
 80009ba:	f001 f859 	bl	8001a70 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 80009be:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009c4:	2300      	movs	r3, #0
 80009c6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c8:	2300      	movs	r3, #0
 80009ca:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80009cc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80009d0:	4619      	mov	r1, r3
 80009d2:	48a0      	ldr	r0, [pc, #640]	@ (8000c54 <MX_GPIO_Init+0x5fc>)
 80009d4:	f001 f84c 	bl	8001a70 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 80009d8:	2340      	movs	r3, #64	@ 0x40
 80009da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009dc:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80009e0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e2:	2300      	movs	r3, #0
 80009e4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 80009e6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80009ea:	4619      	mov	r1, r3
 80009ec:	489a      	ldr	r0, [pc, #616]	@ (8000c58 <MX_GPIO_Init+0x600>)
 80009ee:	f001 f83f 	bl	8001a70 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_D2_Pin FMC_D3_Pin FMC_D1_Pin FMC_D15_Pin
                           FMC_D0_Pin FMC_D14_Pin FMC_D13_Pin */
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 80009f2:	f24c 7303 	movw	r3, #50947	@ 0xc703
 80009f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f8:	2302      	movs	r3, #2
 80009fa:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fc:	2300      	movs	r3, #0
 80009fe:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a00:	2303      	movs	r3, #3
 8000a02:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000a04:	230c      	movs	r3, #12
 8000a06:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a08:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	4892      	ldr	r0, [pc, #584]	@ (8000c58 <MX_GPIO_Init+0x600>)
 8000a10:	f001 f82e 	bl	8001a70 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 8000a14:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000a18:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a1a:	2302      	movs	r3, #2
 8000a1c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a22:	2303      	movs	r3, #3
 8000a24:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000a26:	230a      	movs	r3, #10
 8000a28:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a2a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a2e:	4619      	mov	r1, r3
 8000a30:	488a      	ldr	r0, [pc, #552]	@ (8000c5c <MX_GPIO_Init+0x604>)
 8000a32:	f001 f81d 	bl	8001a70 <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI2_MCLKA_Pin SAI2_SCKA_Pin SAI2_FSA_Pin SAI2_SDA_Pin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8000a36:	23f0      	movs	r3, #240	@ 0xf0
 8000a38:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a3a:	2302      	movs	r3, #2
 8000a3c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a42:	2300      	movs	r3, #0
 8000a44:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8000a46:	230a      	movs	r3, #10
 8000a48:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000a4a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a4e:	4619      	mov	r1, r3
 8000a50:	4883      	ldr	r0, [pc, #524]	@ (8000c60 <MX_GPIO_Init+0x608>)
 8000a52:	f001 f80d 	bl	8001a70 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_DE_Pin LCD_B7_Pin LCD_B6_Pin LCD_B5_Pin
                           LCD_G6_Pin LCD_G7_Pin LCD_G5_Pin */
  GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8000a56:	23f7      	movs	r3, #247	@ 0xf7
 8000a58:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a5a:	2302      	movs	r3, #2
 8000a5c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a62:	2300      	movs	r3, #0
 8000a64:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000a66:	230e      	movs	r3, #14
 8000a68:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8000a6a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a6e:	4619      	mov	r1, r3
 8000a70:	487c      	ldr	r0, [pc, #496]	@ (8000c64 <MX_GPIO_Init+0x60c>)
 8000a72:	f000 fffd 	bl	8001a70 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_B4_Pin */
  GPIO_InitStruct.Pin = LCD_B4_Pin;
 8000a76:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a7c:	2302      	movs	r3, #2
 8000a7e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a80:	2300      	movs	r3, #0
 8000a82:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a84:	2300      	movs	r3, #0
 8000a86:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000a88:	2309      	movs	r3, #9
 8000a8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8000a8c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a90:	4619      	mov	r1, r3
 8000a92:	486f      	ldr	r0, [pc, #444]	@ (8000c50 <MX_GPIO_Init+0x5f8>)
 8000a94:	f000 ffec 	bl	8001a70 <HAL_GPIO_Init>

  /*Configure GPIO pin : SAI2_SDB_Pin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8000a98:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a9e:	2302      	movs	r3, #2
 8000aa0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8000aaa:	230a      	movs	r3, #10
 8000aac:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8000aae:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	4866      	ldr	r0, [pc, #408]	@ (8000c50 <MX_GPIO_Init+0x5f8>)
 8000ab6:	f000 ffdb 	bl	8001a70 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000aba:	2320      	movs	r3, #32
 8000abc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000abe:	2301      	movs	r3, #1
 8000ac0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000aca:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ace:	4619      	mov	r1, r3
 8000ad0:	4861      	ldr	r0, [pc, #388]	@ (8000c58 <MX_GPIO_Init+0x600>)
 8000ad2:	f000 ffcd 	bl	8001a70 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_D5_Pin */
  GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8000ad6:	2308      	movs	r3, #8
 8000ad8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ada:	2302      	movs	r3, #2
 8000adc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000ae6:	230d      	movs	r3, #13
 8000ae8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8000aea:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000aee:	4619      	mov	r1, r3
 8000af0:	4859      	ldr	r0, [pc, #356]	@ (8000c58 <MX_GPIO_Init+0x600>)
 8000af2:	f000 ffbd 	bl	8001a70 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LED_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LED_Pin|LCD_DISP_Pin;
 8000af6:	f241 030e 	movw	r3, #4110	@ 0x100e
 8000afa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000afc:	2301      	movs	r3, #1
 8000afe:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b00:	2300      	movs	r3, #0
 8000b02:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b04:	2300      	movs	r3, #0
 8000b06:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000b08:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	4854      	ldr	r0, [pc, #336]	@ (8000c60 <MX_GPIO_Init+0x608>)
 8000b10:	f000 ffae 	bl	8001a70 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8000b14:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b18:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8000b22:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b26:	4619      	mov	r1, r3
 8000b28:	484f      	ldr	r0, [pc, #316]	@ (8000c68 <MX_GPIO_Init+0x610>)
 8000b2a:	f000 ffa1 	bl	8001a70 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_A0_Pin FMC_A1_Pin FMC_A2_Pin FMC_A3_Pin
                           FMC_A4_Pin FMC_A5_Pin FMC_A6_Pin FMC_A9_Pin
                           FMC_A7_Pin FMC_A8_Pin FMC_SDNRAS_Pin */
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8000b2e:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8000b32:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b34:	2302      	movs	r3, #2
 8000b36:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b3c:	2303      	movs	r3, #3
 8000b3e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000b40:	230c      	movs	r3, #12
 8000b42:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000b44:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b48:	4619      	mov	r1, r3
 8000b4a:	4848      	ldr	r0, [pc, #288]	@ (8000c6c <MX_GPIO_Init+0x614>)
 8000b4c:	f000 ff90 	bl	8001a70 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_HSYNC_Pin LCD_VSYNC_Pin LCD_R0_Pin LCD_CLK_Pin */
  GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8000b50:	f44f 4346 	mov.w	r3, #50688	@ 0xc600
 8000b54:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b56:	2302      	movs	r3, #2
 8000b58:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000b62:	230e      	movs	r3, #14
 8000b64:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000b66:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	483c      	ldr	r0, [pc, #240]	@ (8000c60 <MX_GPIO_Init+0x608>)
 8000b6e:	f000 ff7f 	bl	8001a70 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8000b72:	2308      	movs	r3, #8
 8000b74:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b76:	2301      	movs	r3, #1
 8000b78:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8000b82:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b86:	4619      	mov	r1, r3
 8000b88:	4836      	ldr	r0, [pc, #216]	@ (8000c64 <MX_GPIO_Init+0x60c>)
 8000b8a:	f000 ff71 	bl	8001a70 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_VSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8000b8e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000b92:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b94:	2302      	movs	r3, #2
 8000b96:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000ba0:	230d      	movs	r3, #13
 8000ba2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8000ba4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ba8:	4619      	mov	r1, r3
 8000baa:	4829      	ldr	r0, [pc, #164]	@ (8000c50 <MX_GPIO_Init+0x5f8>)
 8000bac:	f000 ff60 	bl	8001a70 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000bb0:	2310      	movs	r3, #16
 8000bb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000bbc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	4825      	ldr	r0, [pc, #148]	@ (8000c58 <MX_GPIO_Init+0x600>)
 8000bc4:	f000 ff54 	bl	8001a70 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDMMC_D0_Pin */
  GPIO_InitStruct.Pin = SDMMC_D0_Pin;
 8000bc8:	2304      	movs	r3, #4
 8000bca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bcc:	2302      	movs	r3, #2
 8000bce:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bd4:	2303      	movs	r3, #3
 8000bd6:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000bd8:	230c      	movs	r3, #12
 8000bda:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SDMMC_D0_GPIO_Port, &GPIO_InitStruct);
 8000bdc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000be0:	4619      	mov	r1, r3
 8000be2:	481d      	ldr	r0, [pc, #116]	@ (8000c58 <MX_GPIO_Init+0x600>)
 8000be4:	f000 ff44 	bl	8001a70 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8000be8:	f248 0304 	movw	r3, #32772	@ 0x8004
 8000bec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000bf6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	481c      	ldr	r0, [pc, #112]	@ (8000c70 <MX_GPIO_Init+0x618>)
 8000bfe:	f000 ff37 	bl	8001a70 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8000c02:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c06:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c08:	2301      	movs	r3, #1
 8000c0a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c10:	2300      	movs	r3, #0
 8000c12:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000c14:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c18:	4619      	mov	r1, r3
 8000c1a:	4815      	ldr	r0, [pc, #84]	@ (8000c70 <MX_GPIO_Init+0x618>)
 8000c1c:	f000 ff28 	bl	8001a70 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D4_Pin DCMI_D3_Pin DCMI_D0_Pin DCMI_D2_Pin
                           DCMI_D1_Pin */
  GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8000c20:	f44f 43bc 	mov.w	r3, #24064	@ 0x5e00
 8000c24:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |DCMI_D1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c26:	2302      	movs	r3, #2
 8000c28:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000c32:	230d      	movs	r3, #13
 8000c34:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000c36:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	480c      	ldr	r0, [pc, #48]	@ (8000c70 <MX_GPIO_Init+0x618>)
 8000c3e:	f000 ff17 	bl	8001a70 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_CS_D5_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 8000c42:	2301      	movs	r3, #1
 8000c44:	e016      	b.n	8000c74 <MX_GPIO_Init+0x61c>
 8000c46:	bf00      	nop
 8000c48:	40021000 	.word	0x40021000
 8000c4c:	40020400 	.word	0x40020400
 8000c50:	40021800 	.word	0x40021800
 8000c54:	40022400 	.word	0x40022400
 8000c58:	40020c00 	.word	0x40020c00
 8000c5c:	40020000 	.word	0x40020000
 8000c60:	40022000 	.word	0x40022000
 8000c64:	40022800 	.word	0x40022800
 8000c68:	40020800 	.word	0x40020800
 8000c6c:	40021400 	.word	0x40021400
 8000c70:	40021c00 	.word	0x40021c00
 8000c74:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c76:	2302      	movs	r3, #2
 8000c78:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8000c82:	2302      	movs	r3, #2
 8000c84:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 8000c86:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	48a4      	ldr	r0, [pc, #656]	@ (8000f20 <MX_GPIO_Init+0x8c8>)
 8000c8e:	f000 feef 	bl	8001a70 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8000c92:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000c96:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000ca0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	489e      	ldr	r0, [pc, #632]	@ (8000f20 <MX_GPIO_Init+0x8c8>)
 8000ca8:	f000 fee2 	bl	8001a70 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D10_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8000cac:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000cb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb2:	2302      	movs	r3, #2
 8000cb4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8000cc2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	4896      	ldr	r0, [pc, #600]	@ (8000f24 <MX_GPIO_Init+0x8cc>)
 8000cca:	f000 fed1 	bl	8001a70 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8000cce:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000cd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000cd4:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000cd8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8000cde:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	488e      	ldr	r0, [pc, #568]	@ (8000f20 <MX_GPIO_Init+0x8c8>)
 8000ce6:	f000 fec3 	bl	8001a70 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_RX_D0_Pin ARDUINO_TX_D1_Pin */
  GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8000cea:	23c0      	movs	r3, #192	@ 0xc0
 8000cec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cee:	2302      	movs	r3, #2
 8000cf0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cf6:	2303      	movs	r3, #3
 8000cf8:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000cfa:	2308      	movs	r3, #8
 8000cfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cfe:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d02:	4619      	mov	r1, r3
 8000d04:	4888      	ldr	r0, [pc, #544]	@ (8000f28 <MX_GPIO_Init+0x8d0>)
 8000d06:	f000 feb3 	bl	8001a70 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8000d0a:	2310      	movs	r3, #16
 8000d0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d0e:	2302      	movs	r3, #2
 8000d10:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d12:	2300      	movs	r3, #0
 8000d14:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d16:	2303      	movs	r3, #3
 8000d18:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000d1a:	230a      	movs	r3, #10
 8000d1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8000d1e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d22:	4619      	mov	r1, r3
 8000d24:	4881      	ldr	r0, [pc, #516]	@ (8000f2c <MX_GPIO_Init+0x8d4>)
 8000d26:	f000 fea3 	bl	8001a70 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNME_Pin FMC_SDNE0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8000d2a:	2328      	movs	r3, #40	@ 0x28
 8000d2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d2e:	2302      	movs	r3, #2
 8000d30:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d32:	2300      	movs	r3, #0
 8000d34:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d36:	2303      	movs	r3, #3
 8000d38:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000d3a:	230c      	movs	r3, #12
 8000d3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000d3e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d42:	4619      	mov	r1, r3
 8000d44:	4879      	ldr	r0, [pc, #484]	@ (8000f2c <MX_GPIO_Init+0x8d4>)
 8000d46:	f000 fe93 	bl	8001a70 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8000d4a:	23c8      	movs	r3, #200	@ 0xc8
 8000d4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d4e:	2301      	movs	r3, #1
 8000d50:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d52:	2300      	movs	r3, #0
 8000d54:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d56:	2300      	movs	r3, #0
 8000d58:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d5a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d5e:	4619      	mov	r1, r3
 8000d60:	4873      	ldr	r0, [pc, #460]	@ (8000f30 <MX_GPIO_Init+0x8d8>)
 8000d62:	f000 fe85 	bl	8001a70 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_A4_Pin ARDUINO_A5_Pin ARDUINO_A1_Pin ARDUINO_A2_Pin
                           ARDUINO_A3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 8000d66:	f44f 63f8 	mov.w	r3, #1984	@ 0x7c0
 8000d6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |ARDUINO_A3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d6c:	2303      	movs	r3, #3
 8000d6e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d70:	2300      	movs	r3, #0
 8000d72:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000d74:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d78:	4619      	mov	r1, r3
 8000d7a:	486e      	ldr	r0, [pc, #440]	@ (8000f34 <MX_GPIO_Init+0x8dc>)
 8000d7c:	f000 fe78 	bl	8001a70 <HAL_GPIO_Init>

  /*Configure GPIO pin : FMC_SDCKE0_Pin */
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8000d80:	2308      	movs	r3, #8
 8000d82:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d84:	2302      	movs	r3, #2
 8000d86:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d8c:	2303      	movs	r3, #3
 8000d8e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000d90:	230c      	movs	r3, #12
 8000d92:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8000d94:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d98:	4619      	mov	r1, r3
 8000d9a:	4863      	ldr	r0, [pc, #396]	@ (8000f28 <MX_GPIO_Init+0x8d0>)
 8000d9c:	f000 fe68 	bl	8001a70 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8000da0:	2305      	movs	r3, #5
 8000da2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da4:	2302      	movs	r3, #2
 8000da6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da8:	2300      	movs	r3, #0
 8000daa:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dac:	2303      	movs	r3, #3
 8000dae:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000db0:	230a      	movs	r3, #10
 8000db2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000db4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000db8:	4619      	mov	r1, r3
 8000dba:	485b      	ldr	r0, [pc, #364]	@ (8000f28 <MX_GPIO_Init+0x8d0>)
 8000dbc:	f000 fe58 	bl	8001a70 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000dc0:	2332      	movs	r3, #50	@ 0x32
 8000dc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc4:	2302      	movs	r3, #2
 8000dc6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dcc:	2303      	movs	r3, #3
 8000dce:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000dd0:	230b      	movs	r3, #11
 8000dd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dd4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000dd8:	4619      	mov	r1, r3
 8000dda:	4853      	ldr	r0, [pc, #332]	@ (8000f28 <MX_GPIO_Init+0x8d0>)
 8000ddc:	f000 fe48 	bl	8001a70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000de0:	2304      	movs	r3, #4
 8000de2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de4:	2302      	movs	r3, #2
 8000de6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de8:	2300      	movs	r3, #0
 8000dea:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dec:	2303      	movs	r3, #3
 8000dee:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000df0:	2309      	movs	r3, #9
 8000df2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000df4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000df8:	4619      	mov	r1, r3
 8000dfa:	484f      	ldr	r0, [pc, #316]	@ (8000f38 <MX_GPIO_Init+0x8e0>)
 8000dfc:	f000 fe38 	bl	8001a70 <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_D1_Pin QSPI_D3_Pin QSPI_D0_Pin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8000e00:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8000e04:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e06:	2302      	movs	r3, #2
 8000e08:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e0e:	2303      	movs	r3, #3
 8000e10:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000e12:	2309      	movs	r3, #9
 8000e14:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e16:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	4847      	ldr	r0, [pc, #284]	@ (8000f3c <MX_GPIO_Init+0x8e4>)
 8000e1e:	f000 fe27 	bl	8001a70 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8000e22:	2304      	movs	r3, #4
 8000e24:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e26:	2300      	movs	r3, #0
 8000e28:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8000e2e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e32:	4619      	mov	r1, r3
 8000e34:	483e      	ldr	r0, [pc, #248]	@ (8000f30 <MX_GPIO_Init+0x8d8>)
 8000e36:	f000 fe1b 	bl	8001a70 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000e3a:	2386      	movs	r3, #134	@ 0x86
 8000e3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e3e:	2302      	movs	r3, #2
 8000e40:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e42:	2300      	movs	r3, #0
 8000e44:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e46:	2303      	movs	r3, #3
 8000e48:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e4a:	230b      	movs	r3, #11
 8000e4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e4e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e52:	4619      	mov	r1, r3
 8000e54:	4833      	ldr	r0, [pc, #204]	@ (8000f24 <MX_GPIO_Init+0x8cc>)
 8000e56:	f000 fe0b 	bl	8001a70 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_A0_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e5e:	2303      	movs	r3, #3
 8000e60:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e62:	2300      	movs	r3, #0
 8000e64:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8000e66:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	482d      	ldr	r0, [pc, #180]	@ (8000f24 <MX_GPIO_Init+0x8cc>)
 8000e6e:	f000 fdff 	bl	8001a70 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_HSYNC_Pin PA6 */
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8000e72:	2350      	movs	r3, #80	@ 0x50
 8000e74:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e76:	2302      	movs	r3, #2
 8000e78:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000e82:	230d      	movs	r3, #13
 8000e84:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e86:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	4825      	ldr	r0, [pc, #148]	@ (8000f24 <MX_GPIO_Init+0x8cc>)
 8000e8e:	f000 fdef 	bl	8001a70 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_SCL_Pin LCD_SDA_Pin */
  GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8000e92:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000e96:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e98:	2312      	movs	r3, #18
 8000e9a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ea0:	2303      	movs	r3, #3
 8000ea2:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000ea4:	2304      	movs	r3, #4
 8000ea6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000ea8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000eac:	4619      	mov	r1, r3
 8000eae:	481f      	ldr	r0, [pc, #124]	@ (8000f2c <MX_GPIO_Init+0x8d4>)
 8000eb0:	f000 fdde 	bl	8001a70 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8000eb4:	2328      	movs	r3, #40	@ 0x28
 8000eb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb8:	2302      	movs	r3, #2
 8000eba:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ec0:	2303      	movs	r3, #3
 8000ec2:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000ec4:	230a      	movs	r3, #10
 8000ec6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ec8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ecc:	4619      	mov	r1, r3
 8000ece:	4815      	ldr	r0, [pc, #84]	@ (8000f24 <MX_GPIO_Init+0x8cc>)
 8000ed0:	f000 fdce 	bl	8001a70 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D6_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8000ed4:	2340      	movs	r3, #64	@ 0x40
 8000ed6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed8:	2302      	movs	r3, #2
 8000eda:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000edc:	2300      	movs	r3, #0
 8000ede:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8000ee4:	2309      	movs	r3, #9
 8000ee6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8000ee8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000eec:	4619      	mov	r1, r3
 8000eee:	480f      	ldr	r0, [pc, #60]	@ (8000f2c <MX_GPIO_Init+0x8d4>)
 8000ef0:	f000 fdbe 	bl	8001a70 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8000ef4:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000ef8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000efa:	2302      	movs	r3, #2
 8000efc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efe:	2300      	movs	r3, #0
 8000f00:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f02:	2300      	movs	r3, #0
 8000f04:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000f06:	2305      	movs	r3, #5
 8000f08:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f0a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f0e:	4619      	mov	r1, r3
 8000f10:	4809      	ldr	r0, [pc, #36]	@ (8000f38 <MX_GPIO_Init+0x8e0>)
 8000f12:	f000 fdad 	bl	8001a70 <HAL_GPIO_Init>

}
 8000f16:	bf00      	nop
 8000f18:	3740      	adds	r7, #64	@ 0x40
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	40022000 	.word	0x40022000
 8000f24:	40020000 	.word	0x40020000
 8000f28:	40020800 	.word	0x40020800
 8000f2c:	40021c00 	.word	0x40021c00
 8000f30:	40021800 	.word	0x40021800
 8000f34:	40021400 	.word	0x40021400
 8000f38:	40020400 	.word	0x40020400
 8000f3c:	40020c00 	.word	0x40020c00

08000f40 <__io_putchar>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
void MX_FREERTOS_Init(void);
/* USER CODE BEGIN PFP */
int __io_putchar(int chr)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)&chr, 1, HAL_MAX_DELAY);
 8000f48:	1d39      	adds	r1, r7, #4
 8000f4a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f4e:	2201      	movs	r2, #1
 8000f50:	4803      	ldr	r0, [pc, #12]	@ (8000f60 <__io_putchar+0x20>)
 8000f52:	f002 f8ad 	bl	80030b0 <HAL_UART_Transmit>
	return chr;
 8000f56:	687b      	ldr	r3, [r7, #4]
}
 8000f58:	4618      	mov	r0, r3
 8000f5a:	3708      	adds	r7, #8
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	20000900 	.word	0x20000900

08000f64 <LedTask>:

void LedTask(void *pvParameters)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
	while (1)
	{
		if (led_period_ms == 0)
 8000f6c:	4b0f      	ldr	r3, [pc, #60]	@ (8000fac <LedTask+0x48>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d108      	bne.n	8000f86 <LedTask+0x22>
		{
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000f74:	2200      	movs	r2, #0
 8000f76:	2102      	movs	r1, #2
 8000f78:	480d      	ldr	r0, [pc, #52]	@ (8000fb0 <LedTask+0x4c>)
 8000f7a:	f000 ff3d 	bl	8001df8 <HAL_GPIO_WritePin>
			vTaskSuspend(NULL);
 8000f7e:	2000      	movs	r0, #0
 8000f80:	f003 f98a 	bl	8004298 <vTaskSuspend>
 8000f84:	e7f2      	b.n	8000f6c <LedTask+0x8>
		}
		else
		{
			HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000f86:	2102      	movs	r1, #2
 8000f88:	4809      	ldr	r0, [pc, #36]	@ (8000fb0 <LedTask+0x4c>)
 8000f8a:	f000 ff4e 	bl	8001e2a <HAL_GPIO_TogglePin>
			vTaskDelay(pdMS_TO_TICKS(led_period_ms / 2));
 8000f8e:	4b07      	ldr	r3, [pc, #28]	@ (8000fac <LedTask+0x48>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	085b      	lsrs	r3, r3, #1
 8000f94:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000f98:	fb02 f303 	mul.w	r3, r2, r3
 8000f9c:	4a05      	ldr	r2, [pc, #20]	@ (8000fb4 <LedTask+0x50>)
 8000f9e:	fba2 2303 	umull	r2, r3, r2, r3
 8000fa2:	099b      	lsrs	r3, r3, #6
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f003 f8d5 	bl	8004154 <vTaskDelay>
		if (led_period_ms == 0)
 8000faa:	e7df      	b.n	8000f6c <LedTask+0x8>
 8000fac:	200008f0 	.word	0x200008f0
 8000fb0:	40022000 	.word	0x40022000
 8000fb4:	10624dd3 	.word	0x10624dd3

08000fb8 <ma_fonction_test>:
		vTaskDelay(delay);
	}
}*/

int ma_fonction_test(h_shell_t * h_shell, int argc, char ** argv)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b088      	sub	sp, #32
 8000fbc:	af02      	add	r7, sp, #8
 8000fbe:	60f8      	str	r0, [r7, #12]
 8000fc0:	60b9      	str	r1, [r7, #8]
 8000fc2:	607a      	str	r2, [r7, #4]
	int size;
	size = snprintf(h_shell->print_buffer, BUFFER_SIZE, "Fonction test appelee avec %d argument(s)\r\n", argc);
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	f503 7041 	add.w	r0, r3, #772	@ 0x304
 8000fca:	68bb      	ldr	r3, [r7, #8]
 8000fcc:	4a1c      	ldr	r2, [pc, #112]	@ (8001040 <ma_fonction_test+0x88>)
 8000fce:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000fd2:	f004 fdcf 	bl	8005b74 <sniprintf>
 8000fd6:	6138      	str	r0, [r7, #16]
	h_shell->drv.transmit(h_shell->print_buffer, size);
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	f8d3 3504 	ldr.w	r3, [r3, #1284]	@ 0x504
 8000fde:	68fa      	ldr	r2, [r7, #12]
 8000fe0:	f502 7241 	add.w	r2, r2, #772	@ 0x304
 8000fe4:	6939      	ldr	r1, [r7, #16]
 8000fe6:	b289      	uxth	r1, r1
 8000fe8:	4610      	mov	r0, r2
 8000fea:	4798      	blx	r3

	for(int i = 0; i < argc; i++) {
 8000fec:	2300      	movs	r3, #0
 8000fee:	617b      	str	r3, [r7, #20]
 8000ff0:	e01c      	b.n	800102c <ma_fonction_test+0x74>
		size = snprintf(h_shell->print_buffer, BUFFER_SIZE, "argv[%d] = %s\r\n", i, argv[i]);
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	f503 7041 	add.w	r0, r3, #772	@ 0x304
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	009b      	lsls	r3, r3, #2
 8000ffc:	687a      	ldr	r2, [r7, #4]
 8000ffe:	4413      	add	r3, r2
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	9300      	str	r3, [sp, #0]
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	4a0f      	ldr	r2, [pc, #60]	@ (8001044 <ma_fonction_test+0x8c>)
 8001008:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800100c:	f004 fdb2 	bl	8005b74 <sniprintf>
 8001010:	6138      	str	r0, [r7, #16]
		h_shell->drv.transmit(h_shell->print_buffer, size);
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	f8d3 3504 	ldr.w	r3, [r3, #1284]	@ 0x504
 8001018:	68fa      	ldr	r2, [r7, #12]
 800101a:	f502 7241 	add.w	r2, r2, #772	@ 0x304
 800101e:	6939      	ldr	r1, [r7, #16]
 8001020:	b289      	uxth	r1, r1
 8001022:	4610      	mov	r0, r2
 8001024:	4798      	blx	r3
	for(int i = 0; i < argc; i++) {
 8001026:	697b      	ldr	r3, [r7, #20]
 8001028:	3301      	adds	r3, #1
 800102a:	617b      	str	r3, [r7, #20]
 800102c:	697a      	ldr	r2, [r7, #20]
 800102e:	68bb      	ldr	r3, [r7, #8]
 8001030:	429a      	cmp	r2, r3
 8001032:	dbde      	blt.n	8000ff2 <ma_fonction_test+0x3a>
	}

	return 0;
 8001034:	2300      	movs	r3, #0
}
 8001036:	4618      	mov	r0, r3
 8001038:	3718      	adds	r7, #24
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	08006c68 	.word	0x08006c68
 8001044:	08006c94 	.word	0x08006c94

08001048 <shellTask>:

void shellTask(void * pvParameters)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
	shell_run(&mon_shell);
 8001050:	4803      	ldr	r0, [pc, #12]	@ (8001060 <shellTask+0x18>)
 8001052:	f004 fb49 	bl	80056e8 <shell_run>
}
 8001056:	bf00      	nop
 8001058:	3708      	adds	r7, #8
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	200003e0 	.word	0x200003e0

08001064 <led_shell_func>:

int led_shell_func(h_shell_t * h_shell, int argc, char ** argv)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b088      	sub	sp, #32
 8001068:	af02      	add	r7, sp, #8
 800106a:	60f8      	str	r0, [r7, #12]
 800106c:	60b9      	str	r1, [r7, #8]
 800106e:	607a      	str	r2, [r7, #4]
	if (argc < 2)
 8001070:	68bb      	ldr	r3, [r7, #8]
 8001072:	2b01      	cmp	r3, #1
 8001074:	dc16      	bgt.n	80010a4 <led_shell_func+0x40>
	{
		int len = snprintf(h_shell->print_buffer, BUFFER_SIZE, "Usage: l <periode_ms>\r\n");
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	f503 7341 	add.w	r3, r3, #772	@ 0x304
 800107c:	4a28      	ldr	r2, [pc, #160]	@ (8001120 <led_shell_func+0xbc>)
 800107e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001082:	4618      	mov	r0, r3
 8001084:	f004 fd76 	bl	8005b74 <sniprintf>
 8001088:	6138      	str	r0, [r7, #16]
		h_shell->drv.transmit(h_shell->print_buffer, len);
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	f8d3 3504 	ldr.w	r3, [r3, #1284]	@ 0x504
 8001090:	68fa      	ldr	r2, [r7, #12]
 8001092:	f502 7241 	add.w	r2, r2, #772	@ 0x304
 8001096:	6939      	ldr	r1, [r7, #16]
 8001098:	b289      	uxth	r1, r1
 800109a:	4610      	mov	r0, r2
 800109c:	4798      	blx	r3
		return -1;
 800109e:	f04f 33ff 	mov.w	r3, #4294967295
 80010a2:	e039      	b.n	8001118 <led_shell_func+0xb4>
	}

	led_period_ms = atoi(argv[1]);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	3304      	adds	r3, #4
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	4618      	mov	r0, r3
 80010ac:	f004 fba8 	bl	8005800 <atoi>
 80010b0:	4603      	mov	r3, r0
 80010b2:	461a      	mov	r2, r3
 80010b4:	4b1b      	ldr	r3, [pc, #108]	@ (8001124 <led_shell_func+0xc0>)
 80010b6:	601a      	str	r2, [r3, #0]

	if (led_period_ms > 0)
 80010b8:	4b1a      	ldr	r3, [pc, #104]	@ (8001124 <led_shell_func+0xc0>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d00c      	beq.n	80010da <led_shell_func+0x76>
	{
		if (eTaskGetState(ledTaskHandle) == eSuspended)
 80010c0:	4b19      	ldr	r3, [pc, #100]	@ (8001128 <led_shell_func+0xc4>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4618      	mov	r0, r3
 80010c6:	f003 f87d 	bl	80041c4 <eTaskGetState>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b03      	cmp	r3, #3
 80010ce:	d104      	bne.n	80010da <led_shell_func+0x76>
		{
			vTaskResume(ledTaskHandle);
 80010d0:	4b15      	ldr	r3, [pc, #84]	@ (8001128 <led_shell_func+0xc4>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4618      	mov	r0, r3
 80010d6:	f003 f9a9 	bl	800442c <vTaskResume>
		}
	}

	int len = snprintf(h_shell->print_buffer, BUFFER_SIZE,
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	f503 7041 	add.w	r0, r3, #772	@ 0x304
	                   "Clignotement LED %s (periode = %lu ms)\r\n",
	                   led_period_ms == 0 ? "désactivé" : "activé", led_period_ms);
 80010e0:	4b10      	ldr	r3, [pc, #64]	@ (8001124 <led_shell_func+0xc0>)
 80010e2:	681b      	ldr	r3, [r3, #0]
	int len = snprintf(h_shell->print_buffer, BUFFER_SIZE,
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d101      	bne.n	80010ec <led_shell_func+0x88>
 80010e8:	4a10      	ldr	r2, [pc, #64]	@ (800112c <led_shell_func+0xc8>)
 80010ea:	e000      	b.n	80010ee <led_shell_func+0x8a>
 80010ec:	4a10      	ldr	r2, [pc, #64]	@ (8001130 <led_shell_func+0xcc>)
 80010ee:	4b0d      	ldr	r3, [pc, #52]	@ (8001124 <led_shell_func+0xc0>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	9300      	str	r3, [sp, #0]
 80010f4:	4613      	mov	r3, r2
 80010f6:	4a0f      	ldr	r2, [pc, #60]	@ (8001134 <led_shell_func+0xd0>)
 80010f8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80010fc:	f004 fd3a 	bl	8005b74 <sniprintf>
 8001100:	6178      	str	r0, [r7, #20]
	h_shell->drv.transmit(h_shell->print_buffer, len);
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	f8d3 3504 	ldr.w	r3, [r3, #1284]	@ 0x504
 8001108:	68fa      	ldr	r2, [r7, #12]
 800110a:	f502 7241 	add.w	r2, r2, #772	@ 0x304
 800110e:	6979      	ldr	r1, [r7, #20]
 8001110:	b289      	uxth	r1, r1
 8001112:	4610      	mov	r0, r2
 8001114:	4798      	blx	r3

	return 0;
 8001116:	2300      	movs	r3, #0
}
 8001118:	4618      	mov	r0, r3
 800111a:	3718      	adds	r7, #24
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}
 8001120:	08006ca4 	.word	0x08006ca4
 8001124:	200008f0 	.word	0x200008f0
 8001128:	200008ec 	.word	0x200008ec
 800112c:	08006cbc 	.word	0x08006cbc
 8001130:	08006cc8 	.word	0x08006cc8
 8001134:	08006cd0 	.word	0x08006cd0

08001138 <spamTask>:

void spamTask(void *pvParameters)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
	while (1)
	{
		if (spam_count > 0)
 8001140:	4b08      	ldr	r3, [pc, #32]	@ (8001164 <spamTask+0x2c>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d008      	beq.n	800115a <spamTask+0x22>
		{
			printf("%s\r\n", spam_msg);
 8001148:	4907      	ldr	r1, [pc, #28]	@ (8001168 <spamTask+0x30>)
 800114a:	4808      	ldr	r0, [pc, #32]	@ (800116c <spamTask+0x34>)
 800114c:	f004 fca2 	bl	8005a94 <iprintf>
			spam_count--;
 8001150:	4b04      	ldr	r3, [pc, #16]	@ (8001164 <spamTask+0x2c>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	3b01      	subs	r3, #1
 8001156:	4a03      	ldr	r2, [pc, #12]	@ (8001164 <spamTask+0x2c>)
 8001158:	6013      	str	r3, [r2, #0]
		}
		vTaskDelay(pdMS_TO_TICKS(200));
 800115a:	20c8      	movs	r0, #200	@ 0xc8
 800115c:	f002 fffa 	bl	8004154 <vTaskDelay>
		if (spam_count > 0)
 8001160:	e7ee      	b.n	8001140 <spamTask+0x8>
 8001162:	bf00      	nop
 8001164:	200008f4 	.word	0x200008f4
 8001168:	20000000 	.word	0x20000000
 800116c:	08006cfc 	.word	0x08006cfc

08001170 <spam_shell_func>:
	}
}

int spam_shell_func(h_shell_t * h_shell, int argc, char ** argv)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b088      	sub	sp, #32
 8001174:	af02      	add	r7, sp, #8
 8001176:	60f8      	str	r0, [r7, #12]
 8001178:	60b9      	str	r1, [r7, #8]
 800117a:	607a      	str	r2, [r7, #4]
	if (argc < 3)
 800117c:	68bb      	ldr	r3, [r7, #8]
 800117e:	2b02      	cmp	r3, #2
 8001180:	dc16      	bgt.n	80011b0 <spam_shell_func+0x40>
	{
		int len = snprintf(h_shell->print_buffer, BUFFER_SIZE,
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	f503 7341 	add.w	r3, r3, #772	@ 0x304
 8001188:	4a22      	ldr	r2, [pc, #136]	@ (8001214 <spam_shell_func+0xa4>)
 800118a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800118e:	4618      	mov	r0, r3
 8001190:	f004 fcf0 	bl	8005b74 <sniprintf>
 8001194:	6138      	str	r0, [r7, #16]
		                   "Usage: s <message> <nombre>\r\n");
		h_shell->drv.transmit(h_shell->print_buffer, len);
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	f8d3 3504 	ldr.w	r3, [r3, #1284]	@ 0x504
 800119c:	68fa      	ldr	r2, [r7, #12]
 800119e:	f502 7241 	add.w	r2, r2, #772	@ 0x304
 80011a2:	6939      	ldr	r1, [r7, #16]
 80011a4:	b289      	uxth	r1, r1
 80011a6:	4610      	mov	r0, r2
 80011a8:	4798      	blx	r3
		return -1;
 80011aa:	f04f 33ff 	mov.w	r3, #4294967295
 80011ae:	e02d      	b.n	800120c <spam_shell_func+0x9c>
	}

	strncpy(spam_msg, argv[1], BUFFER_SIZE - 1);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	3304      	adds	r3, #4
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	22ff      	movs	r2, #255	@ 0xff
 80011b8:	4619      	mov	r1, r3
 80011ba:	4817      	ldr	r0, [pc, #92]	@ (8001218 <spam_shell_func+0xa8>)
 80011bc:	f004 fdf0 	bl	8005da0 <strncpy>
	spam_msg[BUFFER_SIZE - 1] = '\0';
 80011c0:	4b15      	ldr	r3, [pc, #84]	@ (8001218 <spam_shell_func+0xa8>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	f883 20ff 	strb.w	r2, [r3, #255]	@ 0xff
	spam_count = atoi(argv[2]);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	3308      	adds	r3, #8
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	4618      	mov	r0, r3
 80011d0:	f004 fb16 	bl	8005800 <atoi>
 80011d4:	4603      	mov	r3, r0
 80011d6:	461a      	mov	r2, r3
 80011d8:	4b10      	ldr	r3, [pc, #64]	@ (800121c <spam_shell_func+0xac>)
 80011da:	601a      	str	r2, [r3, #0]

	int len = snprintf(h_shell->print_buffer, BUFFER_SIZE,
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	f503 7041 	add.w	r0, r3, #772	@ 0x304
 80011e2:	4b0e      	ldr	r3, [pc, #56]	@ (800121c <spam_shell_func+0xac>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	9300      	str	r3, [sp, #0]
 80011e8:	4b0b      	ldr	r3, [pc, #44]	@ (8001218 <spam_shell_func+0xa8>)
 80011ea:	4a0d      	ldr	r2, [pc, #52]	@ (8001220 <spam_shell_func+0xb0>)
 80011ec:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80011f0:	f004 fcc0 	bl	8005b74 <sniprintf>
 80011f4:	6178      	str	r0, [r7, #20]
	                   "Spam lancé : %s x %lu\r\n", spam_msg, spam_count);
	h_shell->drv.transmit(h_shell->print_buffer, len);
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	f8d3 3504 	ldr.w	r3, [r3, #1284]	@ 0x504
 80011fc:	68fa      	ldr	r2, [r7, #12]
 80011fe:	f502 7241 	add.w	r2, r2, #772	@ 0x304
 8001202:	6979      	ldr	r1, [r7, #20]
 8001204:	b289      	uxth	r1, r1
 8001206:	4610      	mov	r0, r2
 8001208:	4798      	blx	r3

	return 0;
 800120a:	2300      	movs	r3, #0
}
 800120c:	4618      	mov	r0, r3
 800120e:	3718      	adds	r7, #24
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	08006d04 	.word	0x08006d04
 8001218:	20000000 	.word	0x20000000
 800121c:	200008f4 	.word	0x200008f4
 8001220:	08006d24 	.word	0x08006d24

08001224 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800122a:	f000 fade 	bl	80017ea <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800122e:	f000 f885 	bl	800133c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001232:	f7ff fa11 	bl	8000658 <MX_GPIO_Init>
	MX_USART1_UART_Init();
 8001236:	f000 f9fd 	bl	8001634 <MX_USART1_UART_Init>
	configASSERT(pdPASS == ret);
	ret = xTaskCreate(task_bug, "Tache 2", STACK_SIZE, \
			(void *) TASK2_DELAY, TASK2_PRIORITY, NULL);
	configASSERT(pdPASS == ret);*/

	mon_shell.drv.receive = drv_uart1_receive;
 800123a:	4b2d      	ldr	r3, [pc, #180]	@ (80012f0 <main+0xcc>)
 800123c:	4a2d      	ldr	r2, [pc, #180]	@ (80012f4 <main+0xd0>)
 800123e:	f8c3 2508 	str.w	r2, [r3, #1288]	@ 0x508
	mon_shell.drv.transmit = drv_uart1_transmit;
 8001242:	4b2b      	ldr	r3, [pc, #172]	@ (80012f0 <main+0xcc>)
 8001244:	4a2c      	ldr	r2, [pc, #176]	@ (80012f8 <main+0xd4>)
 8001246:	f8c3 2504 	str.w	r2, [r3, #1284]	@ 0x504

	shell_init(&mon_shell);
 800124a:	4829      	ldr	r0, [pc, #164]	@ (80012f0 <main+0xcc>)
 800124c:	f004 f95c 	bl	8005508 <shell_init>
	shell_add(&mon_shell, 't', ma_fonction_test, "Fonction test utilisateur");
 8001250:	4b2a      	ldr	r3, [pc, #168]	@ (80012fc <main+0xd8>)
 8001252:	4a2b      	ldr	r2, [pc, #172]	@ (8001300 <main+0xdc>)
 8001254:	2174      	movs	r1, #116	@ 0x74
 8001256:	4826      	ldr	r0, [pc, #152]	@ (80012f0 <main+0xcc>)
 8001258:	f004 f99a 	bl	8005590 <shell_add>
	xTaskCreate(shellTask, "Shell", 512, NULL, 1, NULL);
 800125c:	2300      	movs	r3, #0
 800125e:	9301      	str	r3, [sp, #4]
 8001260:	2301      	movs	r3, #1
 8001262:	9300      	str	r3, [sp, #0]
 8001264:	2300      	movs	r3, #0
 8001266:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800126a:	4926      	ldr	r1, [pc, #152]	@ (8001304 <main+0xe0>)
 800126c:	4826      	ldr	r0, [pc, #152]	@ (8001308 <main+0xe4>)
 800126e:	f002 fe38 	bl	8003ee2 <xTaskCreate>

	xTaskCreate(LedTask, "LED Task", 128, NULL, 1, &ledTaskHandle);
 8001272:	4b26      	ldr	r3, [pc, #152]	@ (800130c <main+0xe8>)
 8001274:	9301      	str	r3, [sp, #4]
 8001276:	2301      	movs	r3, #1
 8001278:	9300      	str	r3, [sp, #0]
 800127a:	2300      	movs	r3, #0
 800127c:	2280      	movs	r2, #128	@ 0x80
 800127e:	4924      	ldr	r1, [pc, #144]	@ (8001310 <main+0xec>)
 8001280:	4824      	ldr	r0, [pc, #144]	@ (8001314 <main+0xf0>)
 8001282:	f002 fe2e 	bl	8003ee2 <xTaskCreate>
	shell_add(&mon_shell, 'l', led_shell_func, "Contrôle de la LED");
 8001286:	4b24      	ldr	r3, [pc, #144]	@ (8001318 <main+0xf4>)
 8001288:	4a24      	ldr	r2, [pc, #144]	@ (800131c <main+0xf8>)
 800128a:	216c      	movs	r1, #108	@ 0x6c
 800128c:	4818      	ldr	r0, [pc, #96]	@ (80012f0 <main+0xcc>)
 800128e:	f004 f97f 	bl	8005590 <shell_add>

	xTaskCreate(spamTask, "Spam", 256, NULL, 1, &spamTaskHandle);
 8001292:	4b23      	ldr	r3, [pc, #140]	@ (8001320 <main+0xfc>)
 8001294:	9301      	str	r3, [sp, #4]
 8001296:	2301      	movs	r3, #1
 8001298:	9300      	str	r3, [sp, #0]
 800129a:	2300      	movs	r3, #0
 800129c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80012a0:	4920      	ldr	r1, [pc, #128]	@ (8001324 <main+0x100>)
 80012a2:	4821      	ldr	r0, [pc, #132]	@ (8001328 <main+0x104>)
 80012a4:	f002 fe1d 	bl	8003ee2 <xTaskCreate>
	shell_add(&mon_shell, 's', spam_shell_func, "Affiche un message plusieurs fois");
 80012a8:	4b20      	ldr	r3, [pc, #128]	@ (800132c <main+0x108>)
 80012aa:	4a21      	ldr	r2, [pc, #132]	@ (8001330 <main+0x10c>)
 80012ac:	2173      	movs	r1, #115	@ 0x73
 80012ae:	4810      	ldr	r0, [pc, #64]	@ (80012f0 <main+0xcc>)
 80012b0:	f004 f96e 	bl	8005590 <shell_add>

	vTaskStartScheduler();
 80012b4:	f003 f91a 	bl	80044ec <vTaskStartScheduler>
	/* USER CODE END 2 */

	/* Call init function for freertos objects (in cmsis_os2.c) */
	MX_FREERTOS_Init();
 80012b8:	f7ff f9aa 	bl	8000610 <MX_FREERTOS_Init>

	/* Start scheduler */
	osKernelStart();
 80012bc:	f002 fc90 	bl	8003be0 <osKernelStart>
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		//HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
		//HAL_Delay(100);
		if (HAL_GPIO_ReadPin(BUTTON_GPIO_Port, BUTTON_Pin) == GPIO_PIN_SET) {
 80012c0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80012c4:	481b      	ldr	r0, [pc, #108]	@ (8001334 <main+0x110>)
 80012c6:	f000 fd7f 	bl	8001dc8 <HAL_GPIO_ReadPin>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b01      	cmp	r3, #1
 80012ce:	d105      	bne.n	80012dc <main+0xb8>
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);  // Allume la LED
 80012d0:	2201      	movs	r2, #1
 80012d2:	2102      	movs	r1, #2
 80012d4:	4817      	ldr	r0, [pc, #92]	@ (8001334 <main+0x110>)
 80012d6:	f000 fd8f 	bl	8001df8 <HAL_GPIO_WritePin>
 80012da:	e004      	b.n	80012e6 <main+0xc2>
		} else {
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);  // Éteint la LED
 80012dc:	2200      	movs	r2, #0
 80012de:	2102      	movs	r1, #2
 80012e0:	4814      	ldr	r0, [pc, #80]	@ (8001334 <main+0x110>)
 80012e2:	f000 fd89 	bl	8001df8 <HAL_GPIO_WritePin>
		}
		printf("Test printf bien\r\n");
 80012e6:	4814      	ldr	r0, [pc, #80]	@ (8001338 <main+0x114>)
 80012e8:	f004 fc3c 	bl	8005b64 <puts>
		if (HAL_GPIO_ReadPin(BUTTON_GPIO_Port, BUTTON_Pin) == GPIO_PIN_SET) {
 80012ec:	e7e8      	b.n	80012c0 <main+0x9c>
 80012ee:	bf00      	nop
 80012f0:	200003e0 	.word	0x200003e0
 80012f4:	080053c1 	.word	0x080053c1
 80012f8:	080053e9 	.word	0x080053e9
 80012fc:	08006d40 	.word	0x08006d40
 8001300:	08000fb9 	.word	0x08000fb9
 8001304:	08006d5c 	.word	0x08006d5c
 8001308:	08001049 	.word	0x08001049
 800130c:	200008ec 	.word	0x200008ec
 8001310:	08006d64 	.word	0x08006d64
 8001314:	08000f65 	.word	0x08000f65
 8001318:	08006d70 	.word	0x08006d70
 800131c:	08001065 	.word	0x08001065
 8001320:	200008f8 	.word	0x200008f8
 8001324:	08006d84 	.word	0x08006d84
 8001328:	08001139 	.word	0x08001139
 800132c:	08006d8c 	.word	0x08006d8c
 8001330:	08001171 	.word	0x08001171
 8001334:	40022000 	.word	0x40022000
 8001338:	08006db0 	.word	0x08006db0

0800133c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b094      	sub	sp, #80	@ 0x50
 8001340:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001342:	f107 0320 	add.w	r3, r7, #32
 8001346:	2230      	movs	r2, #48	@ 0x30
 8001348:	2100      	movs	r1, #0
 800134a:	4618      	mov	r0, r3
 800134c:	f004 fd20 	bl	8005d90 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001350:	f107 030c 	add.w	r3, r7, #12
 8001354:	2200      	movs	r2, #0
 8001356:	601a      	str	r2, [r3, #0]
 8001358:	605a      	str	r2, [r3, #4]
 800135a:	609a      	str	r2, [r3, #8]
 800135c:	60da      	str	r2, [r3, #12]
 800135e:	611a      	str	r2, [r3, #16]

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 8001360:	f000 fd7e 	bl	8001e60 <HAL_PWR_EnableBkUpAccess>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001364:	4b2b      	ldr	r3, [pc, #172]	@ (8001414 <SystemClock_Config+0xd8>)
 8001366:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001368:	4a2a      	ldr	r2, [pc, #168]	@ (8001414 <SystemClock_Config+0xd8>)
 800136a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800136e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001370:	4b28      	ldr	r3, [pc, #160]	@ (8001414 <SystemClock_Config+0xd8>)
 8001372:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001374:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001378:	60bb      	str	r3, [r7, #8]
 800137a:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800137c:	4b26      	ldr	r3, [pc, #152]	@ (8001418 <SystemClock_Config+0xdc>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4a25      	ldr	r2, [pc, #148]	@ (8001418 <SystemClock_Config+0xdc>)
 8001382:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001386:	6013      	str	r3, [r2, #0]
 8001388:	4b23      	ldr	r3, [pc, #140]	@ (8001418 <SystemClock_Config+0xdc>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001390:	607b      	str	r3, [r7, #4]
 8001392:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001394:	2301      	movs	r3, #1
 8001396:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001398:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800139c:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800139e:	2302      	movs	r3, #2
 80013a0:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013a2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80013a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLM = 25;
 80013a8:	2319      	movs	r3, #25
 80013aa:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLN = 432;
 80013ac:	f44f 73d8 	mov.w	r3, #432	@ 0x1b0
 80013b0:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80013b2:	2302      	movs	r3, #2
 80013b4:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLQ = 2;
 80013b6:	2302      	movs	r3, #2
 80013b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013ba:	f107 0320 	add.w	r3, r7, #32
 80013be:	4618      	mov	r0, r3
 80013c0:	f000 fdae 	bl	8001f20 <HAL_RCC_OscConfig>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d001      	beq.n	80013ce <SystemClock_Config+0x92>
	{
		Error_Handler();
 80013ca:	f000 f827 	bl	800141c <Error_Handler>
	}

	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80013ce:	f000 fd57 	bl	8001e80 <HAL_PWREx_EnableOverDrive>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d001      	beq.n	80013dc <SystemClock_Config+0xa0>
	{
		Error_Handler();
 80013d8:	f000 f820 	bl	800141c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013dc:	230f      	movs	r3, #15
 80013de:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013e0:	2302      	movs	r3, #2
 80013e2:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013e4:	2300      	movs	r3, #0
 80013e6:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80013e8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80013ec:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80013ee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013f2:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80013f4:	f107 030c 	add.w	r3, r7, #12
 80013f8:	2107      	movs	r1, #7
 80013fa:	4618      	mov	r0, r3
 80013fc:	f001 f834 	bl	8002468 <HAL_RCC_ClockConfig>
 8001400:	4603      	mov	r3, r0
 8001402:	2b00      	cmp	r3, #0
 8001404:	d001      	beq.n	800140a <SystemClock_Config+0xce>
	{
		Error_Handler();
 8001406:	f000 f809 	bl	800141c <Error_Handler>
	}
}
 800140a:	bf00      	nop
 800140c:	3750      	adds	r7, #80	@ 0x50
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	40023800 	.word	0x40023800
 8001418:	40007000 	.word	0x40007000

0800141c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001420:	b672      	cpsid	i
}
 8001422:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001424:	bf00      	nop
 8001426:	e7fd      	b.n	8001424 <Error_Handler+0x8>

08001428 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800142e:	4b11      	ldr	r3, [pc, #68]	@ (8001474 <HAL_MspInit+0x4c>)
 8001430:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001432:	4a10      	ldr	r2, [pc, #64]	@ (8001474 <HAL_MspInit+0x4c>)
 8001434:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001438:	6413      	str	r3, [r2, #64]	@ 0x40
 800143a:	4b0e      	ldr	r3, [pc, #56]	@ (8001474 <HAL_MspInit+0x4c>)
 800143c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800143e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001442:	607b      	str	r3, [r7, #4]
 8001444:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001446:	4b0b      	ldr	r3, [pc, #44]	@ (8001474 <HAL_MspInit+0x4c>)
 8001448:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800144a:	4a0a      	ldr	r2, [pc, #40]	@ (8001474 <HAL_MspInit+0x4c>)
 800144c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001450:	6453      	str	r3, [r2, #68]	@ 0x44
 8001452:	4b08      	ldr	r3, [pc, #32]	@ (8001474 <HAL_MspInit+0x4c>)
 8001454:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001456:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800145a:	603b      	str	r3, [r7, #0]
 800145c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800145e:	2200      	movs	r2, #0
 8001460:	210f      	movs	r1, #15
 8001462:	f06f 0001 	mvn.w	r0, #1
 8001466:	f000 fada 	bl	8001a1e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800146a:	bf00      	nop
 800146c:	3708      	adds	r7, #8
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	40023800 	.word	0x40023800

08001478 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800147c:	bf00      	nop
 800147e:	e7fd      	b.n	800147c <NMI_Handler+0x4>

08001480 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001484:	bf00      	nop
 8001486:	e7fd      	b.n	8001484 <HardFault_Handler+0x4>

08001488 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800148c:	bf00      	nop
 800148e:	e7fd      	b.n	800148c <MemManage_Handler+0x4>

08001490 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001494:	bf00      	nop
 8001496:	e7fd      	b.n	8001494 <BusFault_Handler+0x4>

08001498 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800149c:	bf00      	nop
 800149e:	e7fd      	b.n	800149c <UsageFault_Handler+0x4>

080014a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014a4:	bf00      	nop
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr

080014ae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014ae:	b580      	push	{r7, lr}
 80014b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014b2:	f000 f9d7 	bl	8001864 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80014b6:	f003 fb1f 	bl	8004af8 <xTaskGetSchedulerState>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b01      	cmp	r3, #1
 80014be:	d001      	beq.n	80014c4 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80014c0:	f003 fd42 	bl	8004f48 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014c4:	bf00      	nop
 80014c6:	bd80      	pop	{r7, pc}

080014c8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b086      	sub	sp, #24
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	60f8      	str	r0, [r7, #12]
 80014d0:	60b9      	str	r1, [r7, #8]
 80014d2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014d4:	2300      	movs	r3, #0
 80014d6:	617b      	str	r3, [r7, #20]
 80014d8:	e00a      	b.n	80014f0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80014da:	f3af 8000 	nop.w
 80014de:	4601      	mov	r1, r0
 80014e0:	68bb      	ldr	r3, [r7, #8]
 80014e2:	1c5a      	adds	r2, r3, #1
 80014e4:	60ba      	str	r2, [r7, #8]
 80014e6:	b2ca      	uxtb	r2, r1
 80014e8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014ea:	697b      	ldr	r3, [r7, #20]
 80014ec:	3301      	adds	r3, #1
 80014ee:	617b      	str	r3, [r7, #20]
 80014f0:	697a      	ldr	r2, [r7, #20]
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	429a      	cmp	r2, r3
 80014f6:	dbf0      	blt.n	80014da <_read+0x12>
  }

  return len;
 80014f8:	687b      	ldr	r3, [r7, #4]
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	3718      	adds	r7, #24
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}

08001502 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001502:	b580      	push	{r7, lr}
 8001504:	b086      	sub	sp, #24
 8001506:	af00      	add	r7, sp, #0
 8001508:	60f8      	str	r0, [r7, #12]
 800150a:	60b9      	str	r1, [r7, #8]
 800150c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800150e:	2300      	movs	r3, #0
 8001510:	617b      	str	r3, [r7, #20]
 8001512:	e009      	b.n	8001528 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001514:	68bb      	ldr	r3, [r7, #8]
 8001516:	1c5a      	adds	r2, r3, #1
 8001518:	60ba      	str	r2, [r7, #8]
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	4618      	mov	r0, r3
 800151e:	f7ff fd0f 	bl	8000f40 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001522:	697b      	ldr	r3, [r7, #20]
 8001524:	3301      	adds	r3, #1
 8001526:	617b      	str	r3, [r7, #20]
 8001528:	697a      	ldr	r2, [r7, #20]
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	429a      	cmp	r2, r3
 800152e:	dbf1      	blt.n	8001514 <_write+0x12>
  }
  return len;
 8001530:	687b      	ldr	r3, [r7, #4]
}
 8001532:	4618      	mov	r0, r3
 8001534:	3718      	adds	r7, #24
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}

0800153a <_close>:

int _close(int file)
{
 800153a:	b480      	push	{r7}
 800153c:	b083      	sub	sp, #12
 800153e:	af00      	add	r7, sp, #0
 8001540:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001542:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001546:	4618      	mov	r0, r3
 8001548:	370c      	adds	r7, #12
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr

08001552 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001552:	b480      	push	{r7}
 8001554:	b083      	sub	sp, #12
 8001556:	af00      	add	r7, sp, #0
 8001558:	6078      	str	r0, [r7, #4]
 800155a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001562:	605a      	str	r2, [r3, #4]
  return 0;
 8001564:	2300      	movs	r3, #0
}
 8001566:	4618      	mov	r0, r3
 8001568:	370c      	adds	r7, #12
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr

08001572 <_isatty>:

int _isatty(int file)
{
 8001572:	b480      	push	{r7}
 8001574:	b083      	sub	sp, #12
 8001576:	af00      	add	r7, sp, #0
 8001578:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800157a:	2301      	movs	r3, #1
}
 800157c:	4618      	mov	r0, r3
 800157e:	370c      	adds	r7, #12
 8001580:	46bd      	mov	sp, r7
 8001582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001586:	4770      	bx	lr

08001588 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001588:	b480      	push	{r7}
 800158a:	b085      	sub	sp, #20
 800158c:	af00      	add	r7, sp, #0
 800158e:	60f8      	str	r0, [r7, #12]
 8001590:	60b9      	str	r1, [r7, #8]
 8001592:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001594:	2300      	movs	r3, #0
}
 8001596:	4618      	mov	r0, r3
 8001598:	3714      	adds	r7, #20
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr
	...

080015a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b086      	sub	sp, #24
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015ac:	4a14      	ldr	r2, [pc, #80]	@ (8001600 <_sbrk+0x5c>)
 80015ae:	4b15      	ldr	r3, [pc, #84]	@ (8001604 <_sbrk+0x60>)
 80015b0:	1ad3      	subs	r3, r2, r3
 80015b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015b8:	4b13      	ldr	r3, [pc, #76]	@ (8001608 <_sbrk+0x64>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d102      	bne.n	80015c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015c0:	4b11      	ldr	r3, [pc, #68]	@ (8001608 <_sbrk+0x64>)
 80015c2:	4a12      	ldr	r2, [pc, #72]	@ (800160c <_sbrk+0x68>)
 80015c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015c6:	4b10      	ldr	r3, [pc, #64]	@ (8001608 <_sbrk+0x64>)
 80015c8:	681a      	ldr	r2, [r3, #0]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	4413      	add	r3, r2
 80015ce:	693a      	ldr	r2, [r7, #16]
 80015d0:	429a      	cmp	r2, r3
 80015d2:	d207      	bcs.n	80015e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015d4:	f004 fc3e 	bl	8005e54 <__errno>
 80015d8:	4603      	mov	r3, r0
 80015da:	220c      	movs	r2, #12
 80015dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015de:	f04f 33ff 	mov.w	r3, #4294967295
 80015e2:	e009      	b.n	80015f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015e4:	4b08      	ldr	r3, [pc, #32]	@ (8001608 <_sbrk+0x64>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015ea:	4b07      	ldr	r3, [pc, #28]	@ (8001608 <_sbrk+0x64>)
 80015ec:	681a      	ldr	r2, [r3, #0]
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	4413      	add	r3, r2
 80015f2:	4a05      	ldr	r2, [pc, #20]	@ (8001608 <_sbrk+0x64>)
 80015f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015f6:	68fb      	ldr	r3, [r7, #12]
}
 80015f8:	4618      	mov	r0, r3
 80015fa:	3718      	adds	r7, #24
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	20050000 	.word	0x20050000
 8001604:	00000400 	.word	0x00000400
 8001608:	200008fc 	.word	0x200008fc
 800160c:	20004828 	.word	0x20004828

08001610 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001614:	4b06      	ldr	r3, [pc, #24]	@ (8001630 <SystemInit+0x20>)
 8001616:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800161a:	4a05      	ldr	r2, [pc, #20]	@ (8001630 <SystemInit+0x20>)
 800161c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001620:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001624:	bf00      	nop
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr
 800162e:	bf00      	nop
 8001630:	e000ed00 	.word	0xe000ed00

08001634 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001638:	4b14      	ldr	r3, [pc, #80]	@ (800168c <MX_USART1_UART_Init+0x58>)
 800163a:	4a15      	ldr	r2, [pc, #84]	@ (8001690 <MX_USART1_UART_Init+0x5c>)
 800163c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800163e:	4b13      	ldr	r3, [pc, #76]	@ (800168c <MX_USART1_UART_Init+0x58>)
 8001640:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001644:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001646:	4b11      	ldr	r3, [pc, #68]	@ (800168c <MX_USART1_UART_Init+0x58>)
 8001648:	2200      	movs	r2, #0
 800164a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800164c:	4b0f      	ldr	r3, [pc, #60]	@ (800168c <MX_USART1_UART_Init+0x58>)
 800164e:	2200      	movs	r2, #0
 8001650:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001652:	4b0e      	ldr	r3, [pc, #56]	@ (800168c <MX_USART1_UART_Init+0x58>)
 8001654:	2200      	movs	r2, #0
 8001656:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001658:	4b0c      	ldr	r3, [pc, #48]	@ (800168c <MX_USART1_UART_Init+0x58>)
 800165a:	220c      	movs	r2, #12
 800165c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800165e:	4b0b      	ldr	r3, [pc, #44]	@ (800168c <MX_USART1_UART_Init+0x58>)
 8001660:	2200      	movs	r2, #0
 8001662:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001664:	4b09      	ldr	r3, [pc, #36]	@ (800168c <MX_USART1_UART_Init+0x58>)
 8001666:	2200      	movs	r2, #0
 8001668:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800166a:	4b08      	ldr	r3, [pc, #32]	@ (800168c <MX_USART1_UART_Init+0x58>)
 800166c:	2200      	movs	r2, #0
 800166e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001670:	4b06      	ldr	r3, [pc, #24]	@ (800168c <MX_USART1_UART_Init+0x58>)
 8001672:	2200      	movs	r2, #0
 8001674:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001676:	4805      	ldr	r0, [pc, #20]	@ (800168c <MX_USART1_UART_Init+0x58>)
 8001678:	f001 fccc 	bl	8003014 <HAL_UART_Init>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d001      	beq.n	8001686 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001682:	f7ff fecb 	bl	800141c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001686:	bf00      	nop
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	20000900 	.word	0x20000900
 8001690:	40011000 	.word	0x40011000

08001694 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b0ac      	sub	sp, #176	@ 0xb0
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800169c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80016a0:	2200      	movs	r2, #0
 80016a2:	601a      	str	r2, [r3, #0]
 80016a4:	605a      	str	r2, [r3, #4]
 80016a6:	609a      	str	r2, [r3, #8]
 80016a8:	60da      	str	r2, [r3, #12]
 80016aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80016ac:	f107 0318 	add.w	r3, r7, #24
 80016b0:	2284      	movs	r2, #132	@ 0x84
 80016b2:	2100      	movs	r1, #0
 80016b4:	4618      	mov	r0, r3
 80016b6:	f004 fb6b 	bl	8005d90 <memset>
  if(uartHandle->Instance==USART1)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4a32      	ldr	r2, [pc, #200]	@ (8001788 <HAL_UART_MspInit+0xf4>)
 80016c0:	4293      	cmp	r3, r2
 80016c2:	d15c      	bne.n	800177e <HAL_UART_MspInit+0xea>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80016c4:	2340      	movs	r3, #64	@ 0x40
 80016c6:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80016c8:	2300      	movs	r3, #0
 80016ca:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016cc:	f107 0318 	add.w	r3, r7, #24
 80016d0:	4618      	mov	r0, r3
 80016d2:	f001 f8af 	bl	8002834 <HAL_RCCEx_PeriphCLKConfig>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d001      	beq.n	80016e0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80016dc:	f7ff fe9e 	bl	800141c <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80016e0:	4b2a      	ldr	r3, [pc, #168]	@ (800178c <HAL_UART_MspInit+0xf8>)
 80016e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016e4:	4a29      	ldr	r2, [pc, #164]	@ (800178c <HAL_UART_MspInit+0xf8>)
 80016e6:	f043 0310 	orr.w	r3, r3, #16
 80016ea:	6453      	str	r3, [r2, #68]	@ 0x44
 80016ec:	4b27      	ldr	r3, [pc, #156]	@ (800178c <HAL_UART_MspInit+0xf8>)
 80016ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016f0:	f003 0310 	and.w	r3, r3, #16
 80016f4:	617b      	str	r3, [r7, #20]
 80016f6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016f8:	4b24      	ldr	r3, [pc, #144]	@ (800178c <HAL_UART_MspInit+0xf8>)
 80016fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016fc:	4a23      	ldr	r2, [pc, #140]	@ (800178c <HAL_UART_MspInit+0xf8>)
 80016fe:	f043 0302 	orr.w	r3, r3, #2
 8001702:	6313      	str	r3, [r2, #48]	@ 0x30
 8001704:	4b21      	ldr	r3, [pc, #132]	@ (800178c <HAL_UART_MspInit+0xf8>)
 8001706:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001708:	f003 0302 	and.w	r3, r3, #2
 800170c:	613b      	str	r3, [r7, #16]
 800170e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001710:	4b1e      	ldr	r3, [pc, #120]	@ (800178c <HAL_UART_MspInit+0xf8>)
 8001712:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001714:	4a1d      	ldr	r2, [pc, #116]	@ (800178c <HAL_UART_MspInit+0xf8>)
 8001716:	f043 0301 	orr.w	r3, r3, #1
 800171a:	6313      	str	r3, [r2, #48]	@ 0x30
 800171c:	4b1b      	ldr	r3, [pc, #108]	@ (800178c <HAL_UART_MspInit+0xf8>)
 800171e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001720:	f003 0301 	and.w	r3, r3, #1
 8001724:	60fb      	str	r3, [r7, #12]
 8001726:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8001728:	2380      	movs	r3, #128	@ 0x80
 800172a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800172e:	2302      	movs	r3, #2
 8001730:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001734:	2300      	movs	r3, #0
 8001736:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800173a:	2300      	movs	r3, #0
 800173c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001740:	2307      	movs	r3, #7
 8001742:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001746:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800174a:	4619      	mov	r1, r3
 800174c:	4810      	ldr	r0, [pc, #64]	@ (8001790 <HAL_UART_MspInit+0xfc>)
 800174e:	f000 f98f 	bl	8001a70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8001752:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001756:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800175a:	2302      	movs	r3, #2
 800175c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001760:	2300      	movs	r3, #0
 8001762:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001766:	2300      	movs	r3, #0
 8001768:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800176c:	2307      	movs	r3, #7
 800176e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8001772:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001776:	4619      	mov	r1, r3
 8001778:	4806      	ldr	r0, [pc, #24]	@ (8001794 <HAL_UART_MspInit+0x100>)
 800177a:	f000 f979 	bl	8001a70 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800177e:	bf00      	nop
 8001780:	37b0      	adds	r7, #176	@ 0xb0
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	40011000 	.word	0x40011000
 800178c:	40023800 	.word	0x40023800
 8001790:	40020400 	.word	0x40020400
 8001794:	40020000 	.word	0x40020000

08001798 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001798:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80017d0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 800179c:	f7ff ff38 	bl	8001610 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80017a0:	480c      	ldr	r0, [pc, #48]	@ (80017d4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80017a2:	490d      	ldr	r1, [pc, #52]	@ (80017d8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80017a4:	4a0d      	ldr	r2, [pc, #52]	@ (80017dc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80017a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017a8:	e002      	b.n	80017b0 <LoopCopyDataInit>

080017aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017ae:	3304      	adds	r3, #4

080017b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017b4:	d3f9      	bcc.n	80017aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017b6:	4a0a      	ldr	r2, [pc, #40]	@ (80017e0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80017b8:	4c0a      	ldr	r4, [pc, #40]	@ (80017e4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80017ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017bc:	e001      	b.n	80017c2 <LoopFillZerobss>

080017be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017c0:	3204      	adds	r2, #4

080017c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017c4:	d3fb      	bcc.n	80017be <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80017c6:	f004 fb4b 	bl	8005e60 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017ca:	f7ff fd2b 	bl	8001224 <main>
  bx  lr    
 80017ce:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80017d0:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80017d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017d8:	2000016c 	.word	0x2000016c
  ldr r2, =_sidata
 80017dc:	08006fec 	.word	0x08006fec
  ldr r2, =_sbss
 80017e0:	2000016c 	.word	0x2000016c
  ldr r4, =_ebss
 80017e4:	20004824 	.word	0x20004824

080017e8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017e8:	e7fe      	b.n	80017e8 <ADC_IRQHandler>

080017ea <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017ea:	b580      	push	{r7, lr}
 80017ec:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017ee:	2003      	movs	r0, #3
 80017f0:	f000 f90a 	bl	8001a08 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017f4:	200f      	movs	r0, #15
 80017f6:	f000 f805 	bl	8001804 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017fa:	f7ff fe15 	bl	8001428 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017fe:	2300      	movs	r3, #0
}
 8001800:	4618      	mov	r0, r3
 8001802:	bd80      	pop	{r7, pc}

08001804 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b082      	sub	sp, #8
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800180c:	4b12      	ldr	r3, [pc, #72]	@ (8001858 <HAL_InitTick+0x54>)
 800180e:	681a      	ldr	r2, [r3, #0]
 8001810:	4b12      	ldr	r3, [pc, #72]	@ (800185c <HAL_InitTick+0x58>)
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	4619      	mov	r1, r3
 8001816:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800181a:	fbb3 f3f1 	udiv	r3, r3, r1
 800181e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001822:	4618      	mov	r0, r3
 8001824:	f000 f917 	bl	8001a56 <HAL_SYSTICK_Config>
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	d001      	beq.n	8001832 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800182e:	2301      	movs	r3, #1
 8001830:	e00e      	b.n	8001850 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2b0f      	cmp	r3, #15
 8001836:	d80a      	bhi.n	800184e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001838:	2200      	movs	r2, #0
 800183a:	6879      	ldr	r1, [r7, #4]
 800183c:	f04f 30ff 	mov.w	r0, #4294967295
 8001840:	f000 f8ed 	bl	8001a1e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001844:	4a06      	ldr	r2, [pc, #24]	@ (8001860 <HAL_InitTick+0x5c>)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800184a:	2300      	movs	r3, #0
 800184c:	e000      	b.n	8001850 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800184e:	2301      	movs	r3, #1
}
 8001850:	4618      	mov	r0, r3
 8001852:	3708      	adds	r7, #8
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}
 8001858:	20000100 	.word	0x20000100
 800185c:	20000108 	.word	0x20000108
 8001860:	20000104 	.word	0x20000104

08001864 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001868:	4b06      	ldr	r3, [pc, #24]	@ (8001884 <HAL_IncTick+0x20>)
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	461a      	mov	r2, r3
 800186e:	4b06      	ldr	r3, [pc, #24]	@ (8001888 <HAL_IncTick+0x24>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4413      	add	r3, r2
 8001874:	4a04      	ldr	r2, [pc, #16]	@ (8001888 <HAL_IncTick+0x24>)
 8001876:	6013      	str	r3, [r2, #0]
}
 8001878:	bf00      	nop
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr
 8001882:	bf00      	nop
 8001884:	20000108 	.word	0x20000108
 8001888:	20000988 	.word	0x20000988

0800188c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
  return uwTick;
 8001890:	4b03      	ldr	r3, [pc, #12]	@ (80018a0 <HAL_GetTick+0x14>)
 8001892:	681b      	ldr	r3, [r3, #0]
}
 8001894:	4618      	mov	r0, r3
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr
 800189e:	bf00      	nop
 80018a0:	20000988 	.word	0x20000988

080018a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b085      	sub	sp, #20
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	f003 0307 	and.w	r3, r3, #7
 80018b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018b4:	4b0b      	ldr	r3, [pc, #44]	@ (80018e4 <__NVIC_SetPriorityGrouping+0x40>)
 80018b6:	68db      	ldr	r3, [r3, #12]
 80018b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018ba:	68ba      	ldr	r2, [r7, #8]
 80018bc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80018c0:	4013      	ands	r3, r2
 80018c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018c8:	68bb      	ldr	r3, [r7, #8]
 80018ca:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80018cc:	4b06      	ldr	r3, [pc, #24]	@ (80018e8 <__NVIC_SetPriorityGrouping+0x44>)
 80018ce:	4313      	orrs	r3, r2
 80018d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018d2:	4a04      	ldr	r2, [pc, #16]	@ (80018e4 <__NVIC_SetPriorityGrouping+0x40>)
 80018d4:	68bb      	ldr	r3, [r7, #8]
 80018d6:	60d3      	str	r3, [r2, #12]
}
 80018d8:	bf00      	nop
 80018da:	3714      	adds	r7, #20
 80018dc:	46bd      	mov	sp, r7
 80018de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e2:	4770      	bx	lr
 80018e4:	e000ed00 	.word	0xe000ed00
 80018e8:	05fa0000 	.word	0x05fa0000

080018ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018ec:	b480      	push	{r7}
 80018ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018f0:	4b04      	ldr	r3, [pc, #16]	@ (8001904 <__NVIC_GetPriorityGrouping+0x18>)
 80018f2:	68db      	ldr	r3, [r3, #12]
 80018f4:	0a1b      	lsrs	r3, r3, #8
 80018f6:	f003 0307 	and.w	r3, r3, #7
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	46bd      	mov	sp, r7
 80018fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001902:	4770      	bx	lr
 8001904:	e000ed00 	.word	0xe000ed00

08001908 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001908:	b480      	push	{r7}
 800190a:	b083      	sub	sp, #12
 800190c:	af00      	add	r7, sp, #0
 800190e:	4603      	mov	r3, r0
 8001910:	6039      	str	r1, [r7, #0]
 8001912:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001914:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001918:	2b00      	cmp	r3, #0
 800191a:	db0a      	blt.n	8001932 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	b2da      	uxtb	r2, r3
 8001920:	490c      	ldr	r1, [pc, #48]	@ (8001954 <__NVIC_SetPriority+0x4c>)
 8001922:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001926:	0112      	lsls	r2, r2, #4
 8001928:	b2d2      	uxtb	r2, r2
 800192a:	440b      	add	r3, r1
 800192c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001930:	e00a      	b.n	8001948 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	b2da      	uxtb	r2, r3
 8001936:	4908      	ldr	r1, [pc, #32]	@ (8001958 <__NVIC_SetPriority+0x50>)
 8001938:	79fb      	ldrb	r3, [r7, #7]
 800193a:	f003 030f 	and.w	r3, r3, #15
 800193e:	3b04      	subs	r3, #4
 8001940:	0112      	lsls	r2, r2, #4
 8001942:	b2d2      	uxtb	r2, r2
 8001944:	440b      	add	r3, r1
 8001946:	761a      	strb	r2, [r3, #24]
}
 8001948:	bf00      	nop
 800194a:	370c      	adds	r7, #12
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr
 8001954:	e000e100 	.word	0xe000e100
 8001958:	e000ed00 	.word	0xe000ed00

0800195c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800195c:	b480      	push	{r7}
 800195e:	b089      	sub	sp, #36	@ 0x24
 8001960:	af00      	add	r7, sp, #0
 8001962:	60f8      	str	r0, [r7, #12]
 8001964:	60b9      	str	r1, [r7, #8]
 8001966:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	f003 0307 	and.w	r3, r3, #7
 800196e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001970:	69fb      	ldr	r3, [r7, #28]
 8001972:	f1c3 0307 	rsb	r3, r3, #7
 8001976:	2b04      	cmp	r3, #4
 8001978:	bf28      	it	cs
 800197a:	2304      	movcs	r3, #4
 800197c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800197e:	69fb      	ldr	r3, [r7, #28]
 8001980:	3304      	adds	r3, #4
 8001982:	2b06      	cmp	r3, #6
 8001984:	d902      	bls.n	800198c <NVIC_EncodePriority+0x30>
 8001986:	69fb      	ldr	r3, [r7, #28]
 8001988:	3b03      	subs	r3, #3
 800198a:	e000      	b.n	800198e <NVIC_EncodePriority+0x32>
 800198c:	2300      	movs	r3, #0
 800198e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001990:	f04f 32ff 	mov.w	r2, #4294967295
 8001994:	69bb      	ldr	r3, [r7, #24]
 8001996:	fa02 f303 	lsl.w	r3, r2, r3
 800199a:	43da      	mvns	r2, r3
 800199c:	68bb      	ldr	r3, [r7, #8]
 800199e:	401a      	ands	r2, r3
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019a4:	f04f 31ff 	mov.w	r1, #4294967295
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	fa01 f303 	lsl.w	r3, r1, r3
 80019ae:	43d9      	mvns	r1, r3
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019b4:	4313      	orrs	r3, r2
         );
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	3724      	adds	r7, #36	@ 0x24
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr
	...

080019c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b082      	sub	sp, #8
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	3b01      	subs	r3, #1
 80019d0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80019d4:	d301      	bcc.n	80019da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019d6:	2301      	movs	r3, #1
 80019d8:	e00f      	b.n	80019fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019da:	4a0a      	ldr	r2, [pc, #40]	@ (8001a04 <SysTick_Config+0x40>)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	3b01      	subs	r3, #1
 80019e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019e2:	210f      	movs	r1, #15
 80019e4:	f04f 30ff 	mov.w	r0, #4294967295
 80019e8:	f7ff ff8e 	bl	8001908 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019ec:	4b05      	ldr	r3, [pc, #20]	@ (8001a04 <SysTick_Config+0x40>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019f2:	4b04      	ldr	r3, [pc, #16]	@ (8001a04 <SysTick_Config+0x40>)
 80019f4:	2207      	movs	r2, #7
 80019f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019f8:	2300      	movs	r3, #0
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	3708      	adds	r7, #8
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	e000e010 	.word	0xe000e010

08001a08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b082      	sub	sp, #8
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a10:	6878      	ldr	r0, [r7, #4]
 8001a12:	f7ff ff47 	bl	80018a4 <__NVIC_SetPriorityGrouping>
}
 8001a16:	bf00      	nop
 8001a18:	3708      	adds	r7, #8
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}

08001a1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a1e:	b580      	push	{r7, lr}
 8001a20:	b086      	sub	sp, #24
 8001a22:	af00      	add	r7, sp, #0
 8001a24:	4603      	mov	r3, r0
 8001a26:	60b9      	str	r1, [r7, #8]
 8001a28:	607a      	str	r2, [r7, #4]
 8001a2a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a30:	f7ff ff5c 	bl	80018ec <__NVIC_GetPriorityGrouping>
 8001a34:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a36:	687a      	ldr	r2, [r7, #4]
 8001a38:	68b9      	ldr	r1, [r7, #8]
 8001a3a:	6978      	ldr	r0, [r7, #20]
 8001a3c:	f7ff ff8e 	bl	800195c <NVIC_EncodePriority>
 8001a40:	4602      	mov	r2, r0
 8001a42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a46:	4611      	mov	r1, r2
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f7ff ff5d 	bl	8001908 <__NVIC_SetPriority>
}
 8001a4e:	bf00      	nop
 8001a50:	3718      	adds	r7, #24
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}

08001a56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a56:	b580      	push	{r7, lr}
 8001a58:	b082      	sub	sp, #8
 8001a5a:	af00      	add	r7, sp, #0
 8001a5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a5e:	6878      	ldr	r0, [r7, #4]
 8001a60:	f7ff ffb0 	bl	80019c4 <SysTick_Config>
 8001a64:	4603      	mov	r3, r0
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	3708      	adds	r7, #8
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
	...

08001a70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b089      	sub	sp, #36	@ 0x24
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
 8001a78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001a82:	2300      	movs	r3, #0
 8001a84:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001a86:	2300      	movs	r3, #0
 8001a88:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	61fb      	str	r3, [r7, #28]
 8001a8e:	e175      	b.n	8001d7c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001a90:	2201      	movs	r2, #1
 8001a92:	69fb      	ldr	r3, [r7, #28]
 8001a94:	fa02 f303 	lsl.w	r3, r2, r3
 8001a98:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	697a      	ldr	r2, [r7, #20]
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8001aa4:	693a      	ldr	r2, [r7, #16]
 8001aa6:	697b      	ldr	r3, [r7, #20]
 8001aa8:	429a      	cmp	r2, r3
 8001aaa:	f040 8164 	bne.w	8001d76 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	f003 0303 	and.w	r3, r3, #3
 8001ab6:	2b01      	cmp	r3, #1
 8001ab8:	d005      	beq.n	8001ac6 <HAL_GPIO_Init+0x56>
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	f003 0303 	and.w	r3, r3, #3
 8001ac2:	2b02      	cmp	r3, #2
 8001ac4:	d130      	bne.n	8001b28 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	689b      	ldr	r3, [r3, #8]
 8001aca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001acc:	69fb      	ldr	r3, [r7, #28]
 8001ace:	005b      	lsls	r3, r3, #1
 8001ad0:	2203      	movs	r2, #3
 8001ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad6:	43db      	mvns	r3, r3
 8001ad8:	69ba      	ldr	r2, [r7, #24]
 8001ada:	4013      	ands	r3, r2
 8001adc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	68da      	ldr	r2, [r3, #12]
 8001ae2:	69fb      	ldr	r3, [r7, #28]
 8001ae4:	005b      	lsls	r3, r3, #1
 8001ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aea:	69ba      	ldr	r2, [r7, #24]
 8001aec:	4313      	orrs	r3, r2
 8001aee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	69ba      	ldr	r2, [r7, #24]
 8001af4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001afc:	2201      	movs	r2, #1
 8001afe:	69fb      	ldr	r3, [r7, #28]
 8001b00:	fa02 f303 	lsl.w	r3, r2, r3
 8001b04:	43db      	mvns	r3, r3
 8001b06:	69ba      	ldr	r2, [r7, #24]
 8001b08:	4013      	ands	r3, r2
 8001b0a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	091b      	lsrs	r3, r3, #4
 8001b12:	f003 0201 	and.w	r2, r3, #1
 8001b16:	69fb      	ldr	r3, [r7, #28]
 8001b18:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1c:	69ba      	ldr	r2, [r7, #24]
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	69ba      	ldr	r2, [r7, #24]
 8001b26:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	f003 0303 	and.w	r3, r3, #3
 8001b30:	2b03      	cmp	r3, #3
 8001b32:	d017      	beq.n	8001b64 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	68db      	ldr	r3, [r3, #12]
 8001b38:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001b3a:	69fb      	ldr	r3, [r7, #28]
 8001b3c:	005b      	lsls	r3, r3, #1
 8001b3e:	2203      	movs	r2, #3
 8001b40:	fa02 f303 	lsl.w	r3, r2, r3
 8001b44:	43db      	mvns	r3, r3
 8001b46:	69ba      	ldr	r2, [r7, #24]
 8001b48:	4013      	ands	r3, r2
 8001b4a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	689a      	ldr	r2, [r3, #8]
 8001b50:	69fb      	ldr	r3, [r7, #28]
 8001b52:	005b      	lsls	r3, r3, #1
 8001b54:	fa02 f303 	lsl.w	r3, r2, r3
 8001b58:	69ba      	ldr	r2, [r7, #24]
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	69ba      	ldr	r2, [r7, #24]
 8001b62:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	f003 0303 	and.w	r3, r3, #3
 8001b6c:	2b02      	cmp	r3, #2
 8001b6e:	d123      	bne.n	8001bb8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001b70:	69fb      	ldr	r3, [r7, #28]
 8001b72:	08da      	lsrs	r2, r3, #3
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	3208      	adds	r2, #8
 8001b78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001b7e:	69fb      	ldr	r3, [r7, #28]
 8001b80:	f003 0307 	and.w	r3, r3, #7
 8001b84:	009b      	lsls	r3, r3, #2
 8001b86:	220f      	movs	r2, #15
 8001b88:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8c:	43db      	mvns	r3, r3
 8001b8e:	69ba      	ldr	r2, [r7, #24]
 8001b90:	4013      	ands	r3, r2
 8001b92:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	691a      	ldr	r2, [r3, #16]
 8001b98:	69fb      	ldr	r3, [r7, #28]
 8001b9a:	f003 0307 	and.w	r3, r3, #7
 8001b9e:	009b      	lsls	r3, r3, #2
 8001ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba4:	69ba      	ldr	r2, [r7, #24]
 8001ba6:	4313      	orrs	r3, r2
 8001ba8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001baa:	69fb      	ldr	r3, [r7, #28]
 8001bac:	08da      	lsrs	r2, r3, #3
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	3208      	adds	r2, #8
 8001bb2:	69b9      	ldr	r1, [r7, #24]
 8001bb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001bbe:	69fb      	ldr	r3, [r7, #28]
 8001bc0:	005b      	lsls	r3, r3, #1
 8001bc2:	2203      	movs	r2, #3
 8001bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc8:	43db      	mvns	r3, r3
 8001bca:	69ba      	ldr	r2, [r7, #24]
 8001bcc:	4013      	ands	r3, r2
 8001bce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	f003 0203 	and.w	r2, r3, #3
 8001bd8:	69fb      	ldr	r3, [r7, #28]
 8001bda:	005b      	lsls	r3, r3, #1
 8001bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001be0:	69ba      	ldr	r2, [r7, #24]
 8001be2:	4313      	orrs	r3, r2
 8001be4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	69ba      	ldr	r2, [r7, #24]
 8001bea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	f000 80be 	beq.w	8001d76 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bfa:	4b66      	ldr	r3, [pc, #408]	@ (8001d94 <HAL_GPIO_Init+0x324>)
 8001bfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bfe:	4a65      	ldr	r2, [pc, #404]	@ (8001d94 <HAL_GPIO_Init+0x324>)
 8001c00:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c04:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c06:	4b63      	ldr	r3, [pc, #396]	@ (8001d94 <HAL_GPIO_Init+0x324>)
 8001c08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c0a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c0e:	60fb      	str	r3, [r7, #12]
 8001c10:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001c12:	4a61      	ldr	r2, [pc, #388]	@ (8001d98 <HAL_GPIO_Init+0x328>)
 8001c14:	69fb      	ldr	r3, [r7, #28]
 8001c16:	089b      	lsrs	r3, r3, #2
 8001c18:	3302      	adds	r3, #2
 8001c1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001c20:	69fb      	ldr	r3, [r7, #28]
 8001c22:	f003 0303 	and.w	r3, r3, #3
 8001c26:	009b      	lsls	r3, r3, #2
 8001c28:	220f      	movs	r2, #15
 8001c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2e:	43db      	mvns	r3, r3
 8001c30:	69ba      	ldr	r2, [r7, #24]
 8001c32:	4013      	ands	r3, r2
 8001c34:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	4a58      	ldr	r2, [pc, #352]	@ (8001d9c <HAL_GPIO_Init+0x32c>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d037      	beq.n	8001cae <HAL_GPIO_Init+0x23e>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	4a57      	ldr	r2, [pc, #348]	@ (8001da0 <HAL_GPIO_Init+0x330>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d031      	beq.n	8001caa <HAL_GPIO_Init+0x23a>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	4a56      	ldr	r2, [pc, #344]	@ (8001da4 <HAL_GPIO_Init+0x334>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d02b      	beq.n	8001ca6 <HAL_GPIO_Init+0x236>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	4a55      	ldr	r2, [pc, #340]	@ (8001da8 <HAL_GPIO_Init+0x338>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d025      	beq.n	8001ca2 <HAL_GPIO_Init+0x232>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	4a54      	ldr	r2, [pc, #336]	@ (8001dac <HAL_GPIO_Init+0x33c>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d01f      	beq.n	8001c9e <HAL_GPIO_Init+0x22e>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	4a53      	ldr	r2, [pc, #332]	@ (8001db0 <HAL_GPIO_Init+0x340>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d019      	beq.n	8001c9a <HAL_GPIO_Init+0x22a>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	4a52      	ldr	r2, [pc, #328]	@ (8001db4 <HAL_GPIO_Init+0x344>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d013      	beq.n	8001c96 <HAL_GPIO_Init+0x226>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	4a51      	ldr	r2, [pc, #324]	@ (8001db8 <HAL_GPIO_Init+0x348>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d00d      	beq.n	8001c92 <HAL_GPIO_Init+0x222>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	4a50      	ldr	r2, [pc, #320]	@ (8001dbc <HAL_GPIO_Init+0x34c>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d007      	beq.n	8001c8e <HAL_GPIO_Init+0x21e>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	4a4f      	ldr	r2, [pc, #316]	@ (8001dc0 <HAL_GPIO_Init+0x350>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d101      	bne.n	8001c8a <HAL_GPIO_Init+0x21a>
 8001c86:	2309      	movs	r3, #9
 8001c88:	e012      	b.n	8001cb0 <HAL_GPIO_Init+0x240>
 8001c8a:	230a      	movs	r3, #10
 8001c8c:	e010      	b.n	8001cb0 <HAL_GPIO_Init+0x240>
 8001c8e:	2308      	movs	r3, #8
 8001c90:	e00e      	b.n	8001cb0 <HAL_GPIO_Init+0x240>
 8001c92:	2307      	movs	r3, #7
 8001c94:	e00c      	b.n	8001cb0 <HAL_GPIO_Init+0x240>
 8001c96:	2306      	movs	r3, #6
 8001c98:	e00a      	b.n	8001cb0 <HAL_GPIO_Init+0x240>
 8001c9a:	2305      	movs	r3, #5
 8001c9c:	e008      	b.n	8001cb0 <HAL_GPIO_Init+0x240>
 8001c9e:	2304      	movs	r3, #4
 8001ca0:	e006      	b.n	8001cb0 <HAL_GPIO_Init+0x240>
 8001ca2:	2303      	movs	r3, #3
 8001ca4:	e004      	b.n	8001cb0 <HAL_GPIO_Init+0x240>
 8001ca6:	2302      	movs	r3, #2
 8001ca8:	e002      	b.n	8001cb0 <HAL_GPIO_Init+0x240>
 8001caa:	2301      	movs	r3, #1
 8001cac:	e000      	b.n	8001cb0 <HAL_GPIO_Init+0x240>
 8001cae:	2300      	movs	r3, #0
 8001cb0:	69fa      	ldr	r2, [r7, #28]
 8001cb2:	f002 0203 	and.w	r2, r2, #3
 8001cb6:	0092      	lsls	r2, r2, #2
 8001cb8:	4093      	lsls	r3, r2
 8001cba:	69ba      	ldr	r2, [r7, #24]
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001cc0:	4935      	ldr	r1, [pc, #212]	@ (8001d98 <HAL_GPIO_Init+0x328>)
 8001cc2:	69fb      	ldr	r3, [r7, #28]
 8001cc4:	089b      	lsrs	r3, r3, #2
 8001cc6:	3302      	adds	r3, #2
 8001cc8:	69ba      	ldr	r2, [r7, #24]
 8001cca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001cce:	4b3d      	ldr	r3, [pc, #244]	@ (8001dc4 <HAL_GPIO_Init+0x354>)
 8001cd0:	689b      	ldr	r3, [r3, #8]
 8001cd2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cd4:	693b      	ldr	r3, [r7, #16]
 8001cd6:	43db      	mvns	r3, r3
 8001cd8:	69ba      	ldr	r2, [r7, #24]
 8001cda:	4013      	ands	r3, r2
 8001cdc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d003      	beq.n	8001cf2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001cea:	69ba      	ldr	r2, [r7, #24]
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001cf2:	4a34      	ldr	r2, [pc, #208]	@ (8001dc4 <HAL_GPIO_Init+0x354>)
 8001cf4:	69bb      	ldr	r3, [r7, #24]
 8001cf6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001cf8:	4b32      	ldr	r3, [pc, #200]	@ (8001dc4 <HAL_GPIO_Init+0x354>)
 8001cfa:	68db      	ldr	r3, [r3, #12]
 8001cfc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cfe:	693b      	ldr	r3, [r7, #16]
 8001d00:	43db      	mvns	r3, r3
 8001d02:	69ba      	ldr	r2, [r7, #24]
 8001d04:	4013      	ands	r3, r2
 8001d06:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d003      	beq.n	8001d1c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001d14:	69ba      	ldr	r2, [r7, #24]
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d1c:	4a29      	ldr	r2, [pc, #164]	@ (8001dc4 <HAL_GPIO_Init+0x354>)
 8001d1e:	69bb      	ldr	r3, [r7, #24]
 8001d20:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d22:	4b28      	ldr	r3, [pc, #160]	@ (8001dc4 <HAL_GPIO_Init+0x354>)
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d28:	693b      	ldr	r3, [r7, #16]
 8001d2a:	43db      	mvns	r3, r3
 8001d2c:	69ba      	ldr	r2, [r7, #24]
 8001d2e:	4013      	ands	r3, r2
 8001d30:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d003      	beq.n	8001d46 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001d3e:	69ba      	ldr	r2, [r7, #24]
 8001d40:	693b      	ldr	r3, [r7, #16]
 8001d42:	4313      	orrs	r3, r2
 8001d44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d46:	4a1f      	ldr	r2, [pc, #124]	@ (8001dc4 <HAL_GPIO_Init+0x354>)
 8001d48:	69bb      	ldr	r3, [r7, #24]
 8001d4a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d4c:	4b1d      	ldr	r3, [pc, #116]	@ (8001dc4 <HAL_GPIO_Init+0x354>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	43db      	mvns	r3, r3
 8001d56:	69ba      	ldr	r2, [r7, #24]
 8001d58:	4013      	ands	r3, r2
 8001d5a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d003      	beq.n	8001d70 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001d68:	69ba      	ldr	r2, [r7, #24]
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d70:	4a14      	ldr	r2, [pc, #80]	@ (8001dc4 <HAL_GPIO_Init+0x354>)
 8001d72:	69bb      	ldr	r3, [r7, #24]
 8001d74:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8001d76:	69fb      	ldr	r3, [r7, #28]
 8001d78:	3301      	adds	r3, #1
 8001d7a:	61fb      	str	r3, [r7, #28]
 8001d7c:	69fb      	ldr	r3, [r7, #28]
 8001d7e:	2b0f      	cmp	r3, #15
 8001d80:	f67f ae86 	bls.w	8001a90 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001d84:	bf00      	nop
 8001d86:	bf00      	nop
 8001d88:	3724      	adds	r7, #36	@ 0x24
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr
 8001d92:	bf00      	nop
 8001d94:	40023800 	.word	0x40023800
 8001d98:	40013800 	.word	0x40013800
 8001d9c:	40020000 	.word	0x40020000
 8001da0:	40020400 	.word	0x40020400
 8001da4:	40020800 	.word	0x40020800
 8001da8:	40020c00 	.word	0x40020c00
 8001dac:	40021000 	.word	0x40021000
 8001db0:	40021400 	.word	0x40021400
 8001db4:	40021800 	.word	0x40021800
 8001db8:	40021c00 	.word	0x40021c00
 8001dbc:	40022000 	.word	0x40022000
 8001dc0:	40022400 	.word	0x40022400
 8001dc4:	40013c00 	.word	0x40013c00

08001dc8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b085      	sub	sp, #20
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
 8001dd0:	460b      	mov	r3, r1
 8001dd2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	691a      	ldr	r2, [r3, #16]
 8001dd8:	887b      	ldrh	r3, [r7, #2]
 8001dda:	4013      	ands	r3, r2
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d002      	beq.n	8001de6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001de0:	2301      	movs	r3, #1
 8001de2:	73fb      	strb	r3, [r7, #15]
 8001de4:	e001      	b.n	8001dea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001de6:	2300      	movs	r3, #0
 8001de8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001dea:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	3714      	adds	r7, #20
 8001df0:	46bd      	mov	sp, r7
 8001df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df6:	4770      	bx	lr

08001df8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b083      	sub	sp, #12
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
 8001e00:	460b      	mov	r3, r1
 8001e02:	807b      	strh	r3, [r7, #2]
 8001e04:	4613      	mov	r3, r2
 8001e06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e08:	787b      	ldrb	r3, [r7, #1]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d003      	beq.n	8001e16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e0e:	887a      	ldrh	r2, [r7, #2]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001e14:	e003      	b.n	8001e1e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001e16:	887b      	ldrh	r3, [r7, #2]
 8001e18:	041a      	lsls	r2, r3, #16
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	619a      	str	r2, [r3, #24]
}
 8001e1e:	bf00      	nop
 8001e20:	370c      	adds	r7, #12
 8001e22:	46bd      	mov	sp, r7
 8001e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e28:	4770      	bx	lr

08001e2a <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001e2a:	b480      	push	{r7}
 8001e2c:	b085      	sub	sp, #20
 8001e2e:	af00      	add	r7, sp, #0
 8001e30:	6078      	str	r0, [r7, #4]
 8001e32:	460b      	mov	r3, r1
 8001e34:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	695b      	ldr	r3, [r3, #20]
 8001e3a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001e3c:	887a      	ldrh	r2, [r7, #2]
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	4013      	ands	r3, r2
 8001e42:	041a      	lsls	r2, r3, #16
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	43d9      	mvns	r1, r3
 8001e48:	887b      	ldrh	r3, [r7, #2]
 8001e4a:	400b      	ands	r3, r1
 8001e4c:	431a      	orrs	r2, r3
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	619a      	str	r2, [r3, #24]
}
 8001e52:	bf00      	nop
 8001e54:	3714      	adds	r7, #20
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr
	...

08001e60 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001e60:	b480      	push	{r7}
 8001e62:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e64:	4b05      	ldr	r3, [pc, #20]	@ (8001e7c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a04      	ldr	r2, [pc, #16]	@ (8001e7c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001e6a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e6e:	6013      	str	r3, [r2, #0]
}
 8001e70:	bf00      	nop
 8001e72:	46bd      	mov	sp, r7
 8001e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e78:	4770      	bx	lr
 8001e7a:	bf00      	nop
 8001e7c:	40007000 	.word	0x40007000

08001e80 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b082      	sub	sp, #8
 8001e84:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001e86:	2300      	movs	r3, #0
 8001e88:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001e8a:	4b23      	ldr	r3, [pc, #140]	@ (8001f18 <HAL_PWREx_EnableOverDrive+0x98>)
 8001e8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e8e:	4a22      	ldr	r2, [pc, #136]	@ (8001f18 <HAL_PWREx_EnableOverDrive+0x98>)
 8001e90:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e94:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e96:	4b20      	ldr	r3, [pc, #128]	@ (8001f18 <HAL_PWREx_EnableOverDrive+0x98>)
 8001e98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e9e:	603b      	str	r3, [r7, #0]
 8001ea0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001ea2:	4b1e      	ldr	r3, [pc, #120]	@ (8001f1c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a1d      	ldr	r2, [pc, #116]	@ (8001f1c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001ea8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001eac:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001eae:	f7ff fced 	bl	800188c <HAL_GetTick>
 8001eb2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001eb4:	e009      	b.n	8001eca <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001eb6:	f7ff fce9 	bl	800188c <HAL_GetTick>
 8001eba:	4602      	mov	r2, r0
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	1ad3      	subs	r3, r2, r3
 8001ec0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001ec4:	d901      	bls.n	8001eca <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001ec6:	2303      	movs	r3, #3
 8001ec8:	e022      	b.n	8001f10 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001eca:	4b14      	ldr	r3, [pc, #80]	@ (8001f1c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ed2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ed6:	d1ee      	bne.n	8001eb6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001ed8:	4b10      	ldr	r3, [pc, #64]	@ (8001f1c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a0f      	ldr	r2, [pc, #60]	@ (8001f1c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001ede:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ee2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ee4:	f7ff fcd2 	bl	800188c <HAL_GetTick>
 8001ee8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001eea:	e009      	b.n	8001f00 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001eec:	f7ff fcce 	bl	800188c <HAL_GetTick>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	1ad3      	subs	r3, r2, r3
 8001ef6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001efa:	d901      	bls.n	8001f00 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001efc:	2303      	movs	r3, #3
 8001efe:	e007      	b.n	8001f10 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001f00:	4b06      	ldr	r3, [pc, #24]	@ (8001f1c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f08:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001f0c:	d1ee      	bne.n	8001eec <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001f0e:	2300      	movs	r3, #0
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	3708      	adds	r7, #8
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	40023800 	.word	0x40023800
 8001f1c:	40007000 	.word	0x40007000

08001f20 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b086      	sub	sp, #24
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d101      	bne.n	8001f36 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	e291      	b.n	800245a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f003 0301 	and.w	r3, r3, #1
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	f000 8087 	beq.w	8002052 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f44:	4b96      	ldr	r3, [pc, #600]	@ (80021a0 <HAL_RCC_OscConfig+0x280>)
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	f003 030c 	and.w	r3, r3, #12
 8001f4c:	2b04      	cmp	r3, #4
 8001f4e:	d00c      	beq.n	8001f6a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f50:	4b93      	ldr	r3, [pc, #588]	@ (80021a0 <HAL_RCC_OscConfig+0x280>)
 8001f52:	689b      	ldr	r3, [r3, #8]
 8001f54:	f003 030c 	and.w	r3, r3, #12
 8001f58:	2b08      	cmp	r3, #8
 8001f5a:	d112      	bne.n	8001f82 <HAL_RCC_OscConfig+0x62>
 8001f5c:	4b90      	ldr	r3, [pc, #576]	@ (80021a0 <HAL_RCC_OscConfig+0x280>)
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001f64:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001f68:	d10b      	bne.n	8001f82 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f6a:	4b8d      	ldr	r3, [pc, #564]	@ (80021a0 <HAL_RCC_OscConfig+0x280>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d06c      	beq.n	8002050 <HAL_RCC_OscConfig+0x130>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d168      	bne.n	8002050 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	e26b      	b.n	800245a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f8a:	d106      	bne.n	8001f9a <HAL_RCC_OscConfig+0x7a>
 8001f8c:	4b84      	ldr	r3, [pc, #528]	@ (80021a0 <HAL_RCC_OscConfig+0x280>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a83      	ldr	r2, [pc, #524]	@ (80021a0 <HAL_RCC_OscConfig+0x280>)
 8001f92:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f96:	6013      	str	r3, [r2, #0]
 8001f98:	e02e      	b.n	8001ff8 <HAL_RCC_OscConfig+0xd8>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d10c      	bne.n	8001fbc <HAL_RCC_OscConfig+0x9c>
 8001fa2:	4b7f      	ldr	r3, [pc, #508]	@ (80021a0 <HAL_RCC_OscConfig+0x280>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4a7e      	ldr	r2, [pc, #504]	@ (80021a0 <HAL_RCC_OscConfig+0x280>)
 8001fa8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001fac:	6013      	str	r3, [r2, #0]
 8001fae:	4b7c      	ldr	r3, [pc, #496]	@ (80021a0 <HAL_RCC_OscConfig+0x280>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a7b      	ldr	r2, [pc, #492]	@ (80021a0 <HAL_RCC_OscConfig+0x280>)
 8001fb4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001fb8:	6013      	str	r3, [r2, #0]
 8001fba:	e01d      	b.n	8001ff8 <HAL_RCC_OscConfig+0xd8>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001fc4:	d10c      	bne.n	8001fe0 <HAL_RCC_OscConfig+0xc0>
 8001fc6:	4b76      	ldr	r3, [pc, #472]	@ (80021a0 <HAL_RCC_OscConfig+0x280>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a75      	ldr	r2, [pc, #468]	@ (80021a0 <HAL_RCC_OscConfig+0x280>)
 8001fcc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001fd0:	6013      	str	r3, [r2, #0]
 8001fd2:	4b73      	ldr	r3, [pc, #460]	@ (80021a0 <HAL_RCC_OscConfig+0x280>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4a72      	ldr	r2, [pc, #456]	@ (80021a0 <HAL_RCC_OscConfig+0x280>)
 8001fd8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001fdc:	6013      	str	r3, [r2, #0]
 8001fde:	e00b      	b.n	8001ff8 <HAL_RCC_OscConfig+0xd8>
 8001fe0:	4b6f      	ldr	r3, [pc, #444]	@ (80021a0 <HAL_RCC_OscConfig+0x280>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a6e      	ldr	r2, [pc, #440]	@ (80021a0 <HAL_RCC_OscConfig+0x280>)
 8001fe6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001fea:	6013      	str	r3, [r2, #0]
 8001fec:	4b6c      	ldr	r3, [pc, #432]	@ (80021a0 <HAL_RCC_OscConfig+0x280>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a6b      	ldr	r2, [pc, #428]	@ (80021a0 <HAL_RCC_OscConfig+0x280>)
 8001ff2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001ff6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d013      	beq.n	8002028 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002000:	f7ff fc44 	bl	800188c <HAL_GetTick>
 8002004:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002006:	e008      	b.n	800201a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002008:	f7ff fc40 	bl	800188c <HAL_GetTick>
 800200c:	4602      	mov	r2, r0
 800200e:	693b      	ldr	r3, [r7, #16]
 8002010:	1ad3      	subs	r3, r2, r3
 8002012:	2b64      	cmp	r3, #100	@ 0x64
 8002014:	d901      	bls.n	800201a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002016:	2303      	movs	r3, #3
 8002018:	e21f      	b.n	800245a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800201a:	4b61      	ldr	r3, [pc, #388]	@ (80021a0 <HAL_RCC_OscConfig+0x280>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002022:	2b00      	cmp	r3, #0
 8002024:	d0f0      	beq.n	8002008 <HAL_RCC_OscConfig+0xe8>
 8002026:	e014      	b.n	8002052 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002028:	f7ff fc30 	bl	800188c <HAL_GetTick>
 800202c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800202e:	e008      	b.n	8002042 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002030:	f7ff fc2c 	bl	800188c <HAL_GetTick>
 8002034:	4602      	mov	r2, r0
 8002036:	693b      	ldr	r3, [r7, #16]
 8002038:	1ad3      	subs	r3, r2, r3
 800203a:	2b64      	cmp	r3, #100	@ 0x64
 800203c:	d901      	bls.n	8002042 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800203e:	2303      	movs	r3, #3
 8002040:	e20b      	b.n	800245a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002042:	4b57      	ldr	r3, [pc, #348]	@ (80021a0 <HAL_RCC_OscConfig+0x280>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800204a:	2b00      	cmp	r3, #0
 800204c:	d1f0      	bne.n	8002030 <HAL_RCC_OscConfig+0x110>
 800204e:	e000      	b.n	8002052 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002050:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f003 0302 	and.w	r3, r3, #2
 800205a:	2b00      	cmp	r3, #0
 800205c:	d069      	beq.n	8002132 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800205e:	4b50      	ldr	r3, [pc, #320]	@ (80021a0 <HAL_RCC_OscConfig+0x280>)
 8002060:	689b      	ldr	r3, [r3, #8]
 8002062:	f003 030c 	and.w	r3, r3, #12
 8002066:	2b00      	cmp	r3, #0
 8002068:	d00b      	beq.n	8002082 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800206a:	4b4d      	ldr	r3, [pc, #308]	@ (80021a0 <HAL_RCC_OscConfig+0x280>)
 800206c:	689b      	ldr	r3, [r3, #8]
 800206e:	f003 030c 	and.w	r3, r3, #12
 8002072:	2b08      	cmp	r3, #8
 8002074:	d11c      	bne.n	80020b0 <HAL_RCC_OscConfig+0x190>
 8002076:	4b4a      	ldr	r3, [pc, #296]	@ (80021a0 <HAL_RCC_OscConfig+0x280>)
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800207e:	2b00      	cmp	r3, #0
 8002080:	d116      	bne.n	80020b0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002082:	4b47      	ldr	r3, [pc, #284]	@ (80021a0 <HAL_RCC_OscConfig+0x280>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f003 0302 	and.w	r3, r3, #2
 800208a:	2b00      	cmp	r3, #0
 800208c:	d005      	beq.n	800209a <HAL_RCC_OscConfig+0x17a>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	68db      	ldr	r3, [r3, #12]
 8002092:	2b01      	cmp	r3, #1
 8002094:	d001      	beq.n	800209a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002096:	2301      	movs	r3, #1
 8002098:	e1df      	b.n	800245a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800209a:	4b41      	ldr	r3, [pc, #260]	@ (80021a0 <HAL_RCC_OscConfig+0x280>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	691b      	ldr	r3, [r3, #16]
 80020a6:	00db      	lsls	r3, r3, #3
 80020a8:	493d      	ldr	r1, [pc, #244]	@ (80021a0 <HAL_RCC_OscConfig+0x280>)
 80020aa:	4313      	orrs	r3, r2
 80020ac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020ae:	e040      	b.n	8002132 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	68db      	ldr	r3, [r3, #12]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d023      	beq.n	8002100 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020b8:	4b39      	ldr	r3, [pc, #228]	@ (80021a0 <HAL_RCC_OscConfig+0x280>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a38      	ldr	r2, [pc, #224]	@ (80021a0 <HAL_RCC_OscConfig+0x280>)
 80020be:	f043 0301 	orr.w	r3, r3, #1
 80020c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020c4:	f7ff fbe2 	bl	800188c <HAL_GetTick>
 80020c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020ca:	e008      	b.n	80020de <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020cc:	f7ff fbde 	bl	800188c <HAL_GetTick>
 80020d0:	4602      	mov	r2, r0
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	1ad3      	subs	r3, r2, r3
 80020d6:	2b02      	cmp	r3, #2
 80020d8:	d901      	bls.n	80020de <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80020da:	2303      	movs	r3, #3
 80020dc:	e1bd      	b.n	800245a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020de:	4b30      	ldr	r3, [pc, #192]	@ (80021a0 <HAL_RCC_OscConfig+0x280>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f003 0302 	and.w	r3, r3, #2
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d0f0      	beq.n	80020cc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020ea:	4b2d      	ldr	r3, [pc, #180]	@ (80021a0 <HAL_RCC_OscConfig+0x280>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	691b      	ldr	r3, [r3, #16]
 80020f6:	00db      	lsls	r3, r3, #3
 80020f8:	4929      	ldr	r1, [pc, #164]	@ (80021a0 <HAL_RCC_OscConfig+0x280>)
 80020fa:	4313      	orrs	r3, r2
 80020fc:	600b      	str	r3, [r1, #0]
 80020fe:	e018      	b.n	8002132 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002100:	4b27      	ldr	r3, [pc, #156]	@ (80021a0 <HAL_RCC_OscConfig+0x280>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a26      	ldr	r2, [pc, #152]	@ (80021a0 <HAL_RCC_OscConfig+0x280>)
 8002106:	f023 0301 	bic.w	r3, r3, #1
 800210a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800210c:	f7ff fbbe 	bl	800188c <HAL_GetTick>
 8002110:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002112:	e008      	b.n	8002126 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002114:	f7ff fbba 	bl	800188c <HAL_GetTick>
 8002118:	4602      	mov	r2, r0
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	1ad3      	subs	r3, r2, r3
 800211e:	2b02      	cmp	r3, #2
 8002120:	d901      	bls.n	8002126 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002122:	2303      	movs	r3, #3
 8002124:	e199      	b.n	800245a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002126:	4b1e      	ldr	r3, [pc, #120]	@ (80021a0 <HAL_RCC_OscConfig+0x280>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f003 0302 	and.w	r3, r3, #2
 800212e:	2b00      	cmp	r3, #0
 8002130:	d1f0      	bne.n	8002114 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f003 0308 	and.w	r3, r3, #8
 800213a:	2b00      	cmp	r3, #0
 800213c:	d038      	beq.n	80021b0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	695b      	ldr	r3, [r3, #20]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d019      	beq.n	800217a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002146:	4b16      	ldr	r3, [pc, #88]	@ (80021a0 <HAL_RCC_OscConfig+0x280>)
 8002148:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800214a:	4a15      	ldr	r2, [pc, #84]	@ (80021a0 <HAL_RCC_OscConfig+0x280>)
 800214c:	f043 0301 	orr.w	r3, r3, #1
 8002150:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002152:	f7ff fb9b 	bl	800188c <HAL_GetTick>
 8002156:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002158:	e008      	b.n	800216c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800215a:	f7ff fb97 	bl	800188c <HAL_GetTick>
 800215e:	4602      	mov	r2, r0
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	1ad3      	subs	r3, r2, r3
 8002164:	2b02      	cmp	r3, #2
 8002166:	d901      	bls.n	800216c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002168:	2303      	movs	r3, #3
 800216a:	e176      	b.n	800245a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800216c:	4b0c      	ldr	r3, [pc, #48]	@ (80021a0 <HAL_RCC_OscConfig+0x280>)
 800216e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002170:	f003 0302 	and.w	r3, r3, #2
 8002174:	2b00      	cmp	r3, #0
 8002176:	d0f0      	beq.n	800215a <HAL_RCC_OscConfig+0x23a>
 8002178:	e01a      	b.n	80021b0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800217a:	4b09      	ldr	r3, [pc, #36]	@ (80021a0 <HAL_RCC_OscConfig+0x280>)
 800217c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800217e:	4a08      	ldr	r2, [pc, #32]	@ (80021a0 <HAL_RCC_OscConfig+0x280>)
 8002180:	f023 0301 	bic.w	r3, r3, #1
 8002184:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002186:	f7ff fb81 	bl	800188c <HAL_GetTick>
 800218a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800218c:	e00a      	b.n	80021a4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800218e:	f7ff fb7d 	bl	800188c <HAL_GetTick>
 8002192:	4602      	mov	r2, r0
 8002194:	693b      	ldr	r3, [r7, #16]
 8002196:	1ad3      	subs	r3, r2, r3
 8002198:	2b02      	cmp	r3, #2
 800219a:	d903      	bls.n	80021a4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800219c:	2303      	movs	r3, #3
 800219e:	e15c      	b.n	800245a <HAL_RCC_OscConfig+0x53a>
 80021a0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021a4:	4b91      	ldr	r3, [pc, #580]	@ (80023ec <HAL_RCC_OscConfig+0x4cc>)
 80021a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80021a8:	f003 0302 	and.w	r3, r3, #2
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d1ee      	bne.n	800218e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f003 0304 	and.w	r3, r3, #4
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	f000 80a4 	beq.w	8002306 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021be:	4b8b      	ldr	r3, [pc, #556]	@ (80023ec <HAL_RCC_OscConfig+0x4cc>)
 80021c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d10d      	bne.n	80021e6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80021ca:	4b88      	ldr	r3, [pc, #544]	@ (80023ec <HAL_RCC_OscConfig+0x4cc>)
 80021cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021ce:	4a87      	ldr	r2, [pc, #540]	@ (80023ec <HAL_RCC_OscConfig+0x4cc>)
 80021d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80021d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80021d6:	4b85      	ldr	r3, [pc, #532]	@ (80023ec <HAL_RCC_OscConfig+0x4cc>)
 80021d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021de:	60bb      	str	r3, [r7, #8]
 80021e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021e2:	2301      	movs	r3, #1
 80021e4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021e6:	4b82      	ldr	r3, [pc, #520]	@ (80023f0 <HAL_RCC_OscConfig+0x4d0>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d118      	bne.n	8002224 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80021f2:	4b7f      	ldr	r3, [pc, #508]	@ (80023f0 <HAL_RCC_OscConfig+0x4d0>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4a7e      	ldr	r2, [pc, #504]	@ (80023f0 <HAL_RCC_OscConfig+0x4d0>)
 80021f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021fe:	f7ff fb45 	bl	800188c <HAL_GetTick>
 8002202:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002204:	e008      	b.n	8002218 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002206:	f7ff fb41 	bl	800188c <HAL_GetTick>
 800220a:	4602      	mov	r2, r0
 800220c:	693b      	ldr	r3, [r7, #16]
 800220e:	1ad3      	subs	r3, r2, r3
 8002210:	2b64      	cmp	r3, #100	@ 0x64
 8002212:	d901      	bls.n	8002218 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002214:	2303      	movs	r3, #3
 8002216:	e120      	b.n	800245a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002218:	4b75      	ldr	r3, [pc, #468]	@ (80023f0 <HAL_RCC_OscConfig+0x4d0>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002220:	2b00      	cmp	r3, #0
 8002222:	d0f0      	beq.n	8002206 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	689b      	ldr	r3, [r3, #8]
 8002228:	2b01      	cmp	r3, #1
 800222a:	d106      	bne.n	800223a <HAL_RCC_OscConfig+0x31a>
 800222c:	4b6f      	ldr	r3, [pc, #444]	@ (80023ec <HAL_RCC_OscConfig+0x4cc>)
 800222e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002230:	4a6e      	ldr	r2, [pc, #440]	@ (80023ec <HAL_RCC_OscConfig+0x4cc>)
 8002232:	f043 0301 	orr.w	r3, r3, #1
 8002236:	6713      	str	r3, [r2, #112]	@ 0x70
 8002238:	e02d      	b.n	8002296 <HAL_RCC_OscConfig+0x376>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d10c      	bne.n	800225c <HAL_RCC_OscConfig+0x33c>
 8002242:	4b6a      	ldr	r3, [pc, #424]	@ (80023ec <HAL_RCC_OscConfig+0x4cc>)
 8002244:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002246:	4a69      	ldr	r2, [pc, #420]	@ (80023ec <HAL_RCC_OscConfig+0x4cc>)
 8002248:	f023 0301 	bic.w	r3, r3, #1
 800224c:	6713      	str	r3, [r2, #112]	@ 0x70
 800224e:	4b67      	ldr	r3, [pc, #412]	@ (80023ec <HAL_RCC_OscConfig+0x4cc>)
 8002250:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002252:	4a66      	ldr	r2, [pc, #408]	@ (80023ec <HAL_RCC_OscConfig+0x4cc>)
 8002254:	f023 0304 	bic.w	r3, r3, #4
 8002258:	6713      	str	r3, [r2, #112]	@ 0x70
 800225a:	e01c      	b.n	8002296 <HAL_RCC_OscConfig+0x376>
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	689b      	ldr	r3, [r3, #8]
 8002260:	2b05      	cmp	r3, #5
 8002262:	d10c      	bne.n	800227e <HAL_RCC_OscConfig+0x35e>
 8002264:	4b61      	ldr	r3, [pc, #388]	@ (80023ec <HAL_RCC_OscConfig+0x4cc>)
 8002266:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002268:	4a60      	ldr	r2, [pc, #384]	@ (80023ec <HAL_RCC_OscConfig+0x4cc>)
 800226a:	f043 0304 	orr.w	r3, r3, #4
 800226e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002270:	4b5e      	ldr	r3, [pc, #376]	@ (80023ec <HAL_RCC_OscConfig+0x4cc>)
 8002272:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002274:	4a5d      	ldr	r2, [pc, #372]	@ (80023ec <HAL_RCC_OscConfig+0x4cc>)
 8002276:	f043 0301 	orr.w	r3, r3, #1
 800227a:	6713      	str	r3, [r2, #112]	@ 0x70
 800227c:	e00b      	b.n	8002296 <HAL_RCC_OscConfig+0x376>
 800227e:	4b5b      	ldr	r3, [pc, #364]	@ (80023ec <HAL_RCC_OscConfig+0x4cc>)
 8002280:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002282:	4a5a      	ldr	r2, [pc, #360]	@ (80023ec <HAL_RCC_OscConfig+0x4cc>)
 8002284:	f023 0301 	bic.w	r3, r3, #1
 8002288:	6713      	str	r3, [r2, #112]	@ 0x70
 800228a:	4b58      	ldr	r3, [pc, #352]	@ (80023ec <HAL_RCC_OscConfig+0x4cc>)
 800228c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800228e:	4a57      	ldr	r2, [pc, #348]	@ (80023ec <HAL_RCC_OscConfig+0x4cc>)
 8002290:	f023 0304 	bic.w	r3, r3, #4
 8002294:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	689b      	ldr	r3, [r3, #8]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d015      	beq.n	80022ca <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800229e:	f7ff faf5 	bl	800188c <HAL_GetTick>
 80022a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022a4:	e00a      	b.n	80022bc <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022a6:	f7ff faf1 	bl	800188c <HAL_GetTick>
 80022aa:	4602      	mov	r2, r0
 80022ac:	693b      	ldr	r3, [r7, #16]
 80022ae:	1ad3      	subs	r3, r2, r3
 80022b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d901      	bls.n	80022bc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80022b8:	2303      	movs	r3, #3
 80022ba:	e0ce      	b.n	800245a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022bc:	4b4b      	ldr	r3, [pc, #300]	@ (80023ec <HAL_RCC_OscConfig+0x4cc>)
 80022be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022c0:	f003 0302 	and.w	r3, r3, #2
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d0ee      	beq.n	80022a6 <HAL_RCC_OscConfig+0x386>
 80022c8:	e014      	b.n	80022f4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022ca:	f7ff fadf 	bl	800188c <HAL_GetTick>
 80022ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022d0:	e00a      	b.n	80022e8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022d2:	f7ff fadb 	bl	800188c <HAL_GetTick>
 80022d6:	4602      	mov	r2, r0
 80022d8:	693b      	ldr	r3, [r7, #16]
 80022da:	1ad3      	subs	r3, r2, r3
 80022dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d901      	bls.n	80022e8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80022e4:	2303      	movs	r3, #3
 80022e6:	e0b8      	b.n	800245a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022e8:	4b40      	ldr	r3, [pc, #256]	@ (80023ec <HAL_RCC_OscConfig+0x4cc>)
 80022ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022ec:	f003 0302 	and.w	r3, r3, #2
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d1ee      	bne.n	80022d2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80022f4:	7dfb      	ldrb	r3, [r7, #23]
 80022f6:	2b01      	cmp	r3, #1
 80022f8:	d105      	bne.n	8002306 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022fa:	4b3c      	ldr	r3, [pc, #240]	@ (80023ec <HAL_RCC_OscConfig+0x4cc>)
 80022fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022fe:	4a3b      	ldr	r2, [pc, #236]	@ (80023ec <HAL_RCC_OscConfig+0x4cc>)
 8002300:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002304:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	699b      	ldr	r3, [r3, #24]
 800230a:	2b00      	cmp	r3, #0
 800230c:	f000 80a4 	beq.w	8002458 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002310:	4b36      	ldr	r3, [pc, #216]	@ (80023ec <HAL_RCC_OscConfig+0x4cc>)
 8002312:	689b      	ldr	r3, [r3, #8]
 8002314:	f003 030c 	and.w	r3, r3, #12
 8002318:	2b08      	cmp	r3, #8
 800231a:	d06b      	beq.n	80023f4 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	699b      	ldr	r3, [r3, #24]
 8002320:	2b02      	cmp	r3, #2
 8002322:	d149      	bne.n	80023b8 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002324:	4b31      	ldr	r3, [pc, #196]	@ (80023ec <HAL_RCC_OscConfig+0x4cc>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a30      	ldr	r2, [pc, #192]	@ (80023ec <HAL_RCC_OscConfig+0x4cc>)
 800232a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800232e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002330:	f7ff faac 	bl	800188c <HAL_GetTick>
 8002334:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002336:	e008      	b.n	800234a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002338:	f7ff faa8 	bl	800188c <HAL_GetTick>
 800233c:	4602      	mov	r2, r0
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	1ad3      	subs	r3, r2, r3
 8002342:	2b02      	cmp	r3, #2
 8002344:	d901      	bls.n	800234a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002346:	2303      	movs	r3, #3
 8002348:	e087      	b.n	800245a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800234a:	4b28      	ldr	r3, [pc, #160]	@ (80023ec <HAL_RCC_OscConfig+0x4cc>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002352:	2b00      	cmp	r3, #0
 8002354:	d1f0      	bne.n	8002338 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	69da      	ldr	r2, [r3, #28]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6a1b      	ldr	r3, [r3, #32]
 800235e:	431a      	orrs	r2, r3
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002364:	019b      	lsls	r3, r3, #6
 8002366:	431a      	orrs	r2, r3
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800236c:	085b      	lsrs	r3, r3, #1
 800236e:	3b01      	subs	r3, #1
 8002370:	041b      	lsls	r3, r3, #16
 8002372:	431a      	orrs	r2, r3
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002378:	061b      	lsls	r3, r3, #24
 800237a:	4313      	orrs	r3, r2
 800237c:	4a1b      	ldr	r2, [pc, #108]	@ (80023ec <HAL_RCC_OscConfig+0x4cc>)
 800237e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002382:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002384:	4b19      	ldr	r3, [pc, #100]	@ (80023ec <HAL_RCC_OscConfig+0x4cc>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a18      	ldr	r2, [pc, #96]	@ (80023ec <HAL_RCC_OscConfig+0x4cc>)
 800238a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800238e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002390:	f7ff fa7c 	bl	800188c <HAL_GetTick>
 8002394:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002396:	e008      	b.n	80023aa <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002398:	f7ff fa78 	bl	800188c <HAL_GetTick>
 800239c:	4602      	mov	r2, r0
 800239e:	693b      	ldr	r3, [r7, #16]
 80023a0:	1ad3      	subs	r3, r2, r3
 80023a2:	2b02      	cmp	r3, #2
 80023a4:	d901      	bls.n	80023aa <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80023a6:	2303      	movs	r3, #3
 80023a8:	e057      	b.n	800245a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023aa:	4b10      	ldr	r3, [pc, #64]	@ (80023ec <HAL_RCC_OscConfig+0x4cc>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d0f0      	beq.n	8002398 <HAL_RCC_OscConfig+0x478>
 80023b6:	e04f      	b.n	8002458 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023b8:	4b0c      	ldr	r3, [pc, #48]	@ (80023ec <HAL_RCC_OscConfig+0x4cc>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a0b      	ldr	r2, [pc, #44]	@ (80023ec <HAL_RCC_OscConfig+0x4cc>)
 80023be:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80023c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023c4:	f7ff fa62 	bl	800188c <HAL_GetTick>
 80023c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023ca:	e008      	b.n	80023de <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023cc:	f7ff fa5e 	bl	800188c <HAL_GetTick>
 80023d0:	4602      	mov	r2, r0
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	1ad3      	subs	r3, r2, r3
 80023d6:	2b02      	cmp	r3, #2
 80023d8:	d901      	bls.n	80023de <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80023da:	2303      	movs	r3, #3
 80023dc:	e03d      	b.n	800245a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023de:	4b03      	ldr	r3, [pc, #12]	@ (80023ec <HAL_RCC_OscConfig+0x4cc>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d1f0      	bne.n	80023cc <HAL_RCC_OscConfig+0x4ac>
 80023ea:	e035      	b.n	8002458 <HAL_RCC_OscConfig+0x538>
 80023ec:	40023800 	.word	0x40023800
 80023f0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80023f4:	4b1b      	ldr	r3, [pc, #108]	@ (8002464 <HAL_RCC_OscConfig+0x544>)
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	699b      	ldr	r3, [r3, #24]
 80023fe:	2b01      	cmp	r3, #1
 8002400:	d028      	beq.n	8002454 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800240c:	429a      	cmp	r2, r3
 800240e:	d121      	bne.n	8002454 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800241a:	429a      	cmp	r2, r3
 800241c:	d11a      	bne.n	8002454 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800241e:	68fa      	ldr	r2, [r7, #12]
 8002420:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002424:	4013      	ands	r3, r2
 8002426:	687a      	ldr	r2, [r7, #4]
 8002428:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800242a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800242c:	4293      	cmp	r3, r2
 800242e:	d111      	bne.n	8002454 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800243a:	085b      	lsrs	r3, r3, #1
 800243c:	3b01      	subs	r3, #1
 800243e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002440:	429a      	cmp	r2, r3
 8002442:	d107      	bne.n	8002454 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800244e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002450:	429a      	cmp	r2, r3
 8002452:	d001      	beq.n	8002458 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002454:	2301      	movs	r3, #1
 8002456:	e000      	b.n	800245a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002458:	2300      	movs	r3, #0
}
 800245a:	4618      	mov	r0, r3
 800245c:	3718      	adds	r7, #24
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	40023800 	.word	0x40023800

08002468 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b084      	sub	sp, #16
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
 8002470:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002472:	2300      	movs	r3, #0
 8002474:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d101      	bne.n	8002480 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800247c:	2301      	movs	r3, #1
 800247e:	e0d0      	b.n	8002622 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002480:	4b6a      	ldr	r3, [pc, #424]	@ (800262c <HAL_RCC_ClockConfig+0x1c4>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f003 030f 	and.w	r3, r3, #15
 8002488:	683a      	ldr	r2, [r7, #0]
 800248a:	429a      	cmp	r2, r3
 800248c:	d910      	bls.n	80024b0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800248e:	4b67      	ldr	r3, [pc, #412]	@ (800262c <HAL_RCC_ClockConfig+0x1c4>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f023 020f 	bic.w	r2, r3, #15
 8002496:	4965      	ldr	r1, [pc, #404]	@ (800262c <HAL_RCC_ClockConfig+0x1c4>)
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	4313      	orrs	r3, r2
 800249c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800249e:	4b63      	ldr	r3, [pc, #396]	@ (800262c <HAL_RCC_ClockConfig+0x1c4>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f003 030f 	and.w	r3, r3, #15
 80024a6:	683a      	ldr	r2, [r7, #0]
 80024a8:	429a      	cmp	r2, r3
 80024aa:	d001      	beq.n	80024b0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80024ac:	2301      	movs	r3, #1
 80024ae:	e0b8      	b.n	8002622 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f003 0302 	and.w	r3, r3, #2
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d020      	beq.n	80024fe <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f003 0304 	and.w	r3, r3, #4
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d005      	beq.n	80024d4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024c8:	4b59      	ldr	r3, [pc, #356]	@ (8002630 <HAL_RCC_ClockConfig+0x1c8>)
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	4a58      	ldr	r2, [pc, #352]	@ (8002630 <HAL_RCC_ClockConfig+0x1c8>)
 80024ce:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80024d2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f003 0308 	and.w	r3, r3, #8
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d005      	beq.n	80024ec <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80024e0:	4b53      	ldr	r3, [pc, #332]	@ (8002630 <HAL_RCC_ClockConfig+0x1c8>)
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	4a52      	ldr	r2, [pc, #328]	@ (8002630 <HAL_RCC_ClockConfig+0x1c8>)
 80024e6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80024ea:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024ec:	4b50      	ldr	r3, [pc, #320]	@ (8002630 <HAL_RCC_ClockConfig+0x1c8>)
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	689b      	ldr	r3, [r3, #8]
 80024f8:	494d      	ldr	r1, [pc, #308]	@ (8002630 <HAL_RCC_ClockConfig+0x1c8>)
 80024fa:	4313      	orrs	r3, r2
 80024fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f003 0301 	and.w	r3, r3, #1
 8002506:	2b00      	cmp	r3, #0
 8002508:	d040      	beq.n	800258c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	2b01      	cmp	r3, #1
 8002510:	d107      	bne.n	8002522 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002512:	4b47      	ldr	r3, [pc, #284]	@ (8002630 <HAL_RCC_ClockConfig+0x1c8>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800251a:	2b00      	cmp	r3, #0
 800251c:	d115      	bne.n	800254a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	e07f      	b.n	8002622 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	2b02      	cmp	r3, #2
 8002528:	d107      	bne.n	800253a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800252a:	4b41      	ldr	r3, [pc, #260]	@ (8002630 <HAL_RCC_ClockConfig+0x1c8>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002532:	2b00      	cmp	r3, #0
 8002534:	d109      	bne.n	800254a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	e073      	b.n	8002622 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800253a:	4b3d      	ldr	r3, [pc, #244]	@ (8002630 <HAL_RCC_ClockConfig+0x1c8>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f003 0302 	and.w	r3, r3, #2
 8002542:	2b00      	cmp	r3, #0
 8002544:	d101      	bne.n	800254a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	e06b      	b.n	8002622 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800254a:	4b39      	ldr	r3, [pc, #228]	@ (8002630 <HAL_RCC_ClockConfig+0x1c8>)
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	f023 0203 	bic.w	r2, r3, #3
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	4936      	ldr	r1, [pc, #216]	@ (8002630 <HAL_RCC_ClockConfig+0x1c8>)
 8002558:	4313      	orrs	r3, r2
 800255a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800255c:	f7ff f996 	bl	800188c <HAL_GetTick>
 8002560:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002562:	e00a      	b.n	800257a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002564:	f7ff f992 	bl	800188c <HAL_GetTick>
 8002568:	4602      	mov	r2, r0
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	1ad3      	subs	r3, r2, r3
 800256e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002572:	4293      	cmp	r3, r2
 8002574:	d901      	bls.n	800257a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002576:	2303      	movs	r3, #3
 8002578:	e053      	b.n	8002622 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800257a:	4b2d      	ldr	r3, [pc, #180]	@ (8002630 <HAL_RCC_ClockConfig+0x1c8>)
 800257c:	689b      	ldr	r3, [r3, #8]
 800257e:	f003 020c 	and.w	r2, r3, #12
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	009b      	lsls	r3, r3, #2
 8002588:	429a      	cmp	r2, r3
 800258a:	d1eb      	bne.n	8002564 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800258c:	4b27      	ldr	r3, [pc, #156]	@ (800262c <HAL_RCC_ClockConfig+0x1c4>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f003 030f 	and.w	r3, r3, #15
 8002594:	683a      	ldr	r2, [r7, #0]
 8002596:	429a      	cmp	r2, r3
 8002598:	d210      	bcs.n	80025bc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800259a:	4b24      	ldr	r3, [pc, #144]	@ (800262c <HAL_RCC_ClockConfig+0x1c4>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f023 020f 	bic.w	r2, r3, #15
 80025a2:	4922      	ldr	r1, [pc, #136]	@ (800262c <HAL_RCC_ClockConfig+0x1c4>)
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	4313      	orrs	r3, r2
 80025a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025aa:	4b20      	ldr	r3, [pc, #128]	@ (800262c <HAL_RCC_ClockConfig+0x1c4>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f003 030f 	and.w	r3, r3, #15
 80025b2:	683a      	ldr	r2, [r7, #0]
 80025b4:	429a      	cmp	r2, r3
 80025b6:	d001      	beq.n	80025bc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80025b8:	2301      	movs	r3, #1
 80025ba:	e032      	b.n	8002622 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f003 0304 	and.w	r3, r3, #4
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d008      	beq.n	80025da <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025c8:	4b19      	ldr	r3, [pc, #100]	@ (8002630 <HAL_RCC_ClockConfig+0x1c8>)
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	68db      	ldr	r3, [r3, #12]
 80025d4:	4916      	ldr	r1, [pc, #88]	@ (8002630 <HAL_RCC_ClockConfig+0x1c8>)
 80025d6:	4313      	orrs	r3, r2
 80025d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 0308 	and.w	r3, r3, #8
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d009      	beq.n	80025fa <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80025e6:	4b12      	ldr	r3, [pc, #72]	@ (8002630 <HAL_RCC_ClockConfig+0x1c8>)
 80025e8:	689b      	ldr	r3, [r3, #8]
 80025ea:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	691b      	ldr	r3, [r3, #16]
 80025f2:	00db      	lsls	r3, r3, #3
 80025f4:	490e      	ldr	r1, [pc, #56]	@ (8002630 <HAL_RCC_ClockConfig+0x1c8>)
 80025f6:	4313      	orrs	r3, r2
 80025f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80025fa:	f000 f821 	bl	8002640 <HAL_RCC_GetSysClockFreq>
 80025fe:	4602      	mov	r2, r0
 8002600:	4b0b      	ldr	r3, [pc, #44]	@ (8002630 <HAL_RCC_ClockConfig+0x1c8>)
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	091b      	lsrs	r3, r3, #4
 8002606:	f003 030f 	and.w	r3, r3, #15
 800260a:	490a      	ldr	r1, [pc, #40]	@ (8002634 <HAL_RCC_ClockConfig+0x1cc>)
 800260c:	5ccb      	ldrb	r3, [r1, r3]
 800260e:	fa22 f303 	lsr.w	r3, r2, r3
 8002612:	4a09      	ldr	r2, [pc, #36]	@ (8002638 <HAL_RCC_ClockConfig+0x1d0>)
 8002614:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002616:	4b09      	ldr	r3, [pc, #36]	@ (800263c <HAL_RCC_ClockConfig+0x1d4>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4618      	mov	r0, r3
 800261c:	f7ff f8f2 	bl	8001804 <HAL_InitTick>

  return HAL_OK;
 8002620:	2300      	movs	r3, #0
}
 8002622:	4618      	mov	r0, r3
 8002624:	3710      	adds	r7, #16
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}
 800262a:	bf00      	nop
 800262c:	40023c00 	.word	0x40023c00
 8002630:	40023800 	.word	0x40023800
 8002634:	08006e88 	.word	0x08006e88
 8002638:	20000100 	.word	0x20000100
 800263c:	20000104 	.word	0x20000104

08002640 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002640:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002644:	b090      	sub	sp, #64	@ 0x40
 8002646:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002648:	2300      	movs	r3, #0
 800264a:	637b      	str	r3, [r7, #52]	@ 0x34
 800264c:	2300      	movs	r3, #0
 800264e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002650:	2300      	movs	r3, #0
 8002652:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8002654:	2300      	movs	r3, #0
 8002656:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002658:	4b59      	ldr	r3, [pc, #356]	@ (80027c0 <HAL_RCC_GetSysClockFreq+0x180>)
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	f003 030c 	and.w	r3, r3, #12
 8002660:	2b08      	cmp	r3, #8
 8002662:	d00d      	beq.n	8002680 <HAL_RCC_GetSysClockFreq+0x40>
 8002664:	2b08      	cmp	r3, #8
 8002666:	f200 80a1 	bhi.w	80027ac <HAL_RCC_GetSysClockFreq+0x16c>
 800266a:	2b00      	cmp	r3, #0
 800266c:	d002      	beq.n	8002674 <HAL_RCC_GetSysClockFreq+0x34>
 800266e:	2b04      	cmp	r3, #4
 8002670:	d003      	beq.n	800267a <HAL_RCC_GetSysClockFreq+0x3a>
 8002672:	e09b      	b.n	80027ac <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002674:	4b53      	ldr	r3, [pc, #332]	@ (80027c4 <HAL_RCC_GetSysClockFreq+0x184>)
 8002676:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002678:	e09b      	b.n	80027b2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800267a:	4b53      	ldr	r3, [pc, #332]	@ (80027c8 <HAL_RCC_GetSysClockFreq+0x188>)
 800267c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800267e:	e098      	b.n	80027b2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002680:	4b4f      	ldr	r3, [pc, #316]	@ (80027c0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002688:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800268a:	4b4d      	ldr	r3, [pc, #308]	@ (80027c0 <HAL_RCC_GetSysClockFreq+0x180>)
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002692:	2b00      	cmp	r3, #0
 8002694:	d028      	beq.n	80026e8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002696:	4b4a      	ldr	r3, [pc, #296]	@ (80027c0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	099b      	lsrs	r3, r3, #6
 800269c:	2200      	movs	r2, #0
 800269e:	623b      	str	r3, [r7, #32]
 80026a0:	627a      	str	r2, [r7, #36]	@ 0x24
 80026a2:	6a3b      	ldr	r3, [r7, #32]
 80026a4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80026a8:	2100      	movs	r1, #0
 80026aa:	4b47      	ldr	r3, [pc, #284]	@ (80027c8 <HAL_RCC_GetSysClockFreq+0x188>)
 80026ac:	fb03 f201 	mul.w	r2, r3, r1
 80026b0:	2300      	movs	r3, #0
 80026b2:	fb00 f303 	mul.w	r3, r0, r3
 80026b6:	4413      	add	r3, r2
 80026b8:	4a43      	ldr	r2, [pc, #268]	@ (80027c8 <HAL_RCC_GetSysClockFreq+0x188>)
 80026ba:	fba0 1202 	umull	r1, r2, r0, r2
 80026be:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80026c0:	460a      	mov	r2, r1
 80026c2:	62ba      	str	r2, [r7, #40]	@ 0x28
 80026c4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80026c6:	4413      	add	r3, r2
 80026c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80026ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026cc:	2200      	movs	r2, #0
 80026ce:	61bb      	str	r3, [r7, #24]
 80026d0:	61fa      	str	r2, [r7, #28]
 80026d2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80026d6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80026da:	f7fd fde9 	bl	80002b0 <__aeabi_uldivmod>
 80026de:	4602      	mov	r2, r0
 80026e0:	460b      	mov	r3, r1
 80026e2:	4613      	mov	r3, r2
 80026e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80026e6:	e053      	b.n	8002790 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026e8:	4b35      	ldr	r3, [pc, #212]	@ (80027c0 <HAL_RCC_GetSysClockFreq+0x180>)
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	099b      	lsrs	r3, r3, #6
 80026ee:	2200      	movs	r2, #0
 80026f0:	613b      	str	r3, [r7, #16]
 80026f2:	617a      	str	r2, [r7, #20]
 80026f4:	693b      	ldr	r3, [r7, #16]
 80026f6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80026fa:	f04f 0b00 	mov.w	fp, #0
 80026fe:	4652      	mov	r2, sl
 8002700:	465b      	mov	r3, fp
 8002702:	f04f 0000 	mov.w	r0, #0
 8002706:	f04f 0100 	mov.w	r1, #0
 800270a:	0159      	lsls	r1, r3, #5
 800270c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002710:	0150      	lsls	r0, r2, #5
 8002712:	4602      	mov	r2, r0
 8002714:	460b      	mov	r3, r1
 8002716:	ebb2 080a 	subs.w	r8, r2, sl
 800271a:	eb63 090b 	sbc.w	r9, r3, fp
 800271e:	f04f 0200 	mov.w	r2, #0
 8002722:	f04f 0300 	mov.w	r3, #0
 8002726:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800272a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800272e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002732:	ebb2 0408 	subs.w	r4, r2, r8
 8002736:	eb63 0509 	sbc.w	r5, r3, r9
 800273a:	f04f 0200 	mov.w	r2, #0
 800273e:	f04f 0300 	mov.w	r3, #0
 8002742:	00eb      	lsls	r3, r5, #3
 8002744:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002748:	00e2      	lsls	r2, r4, #3
 800274a:	4614      	mov	r4, r2
 800274c:	461d      	mov	r5, r3
 800274e:	eb14 030a 	adds.w	r3, r4, sl
 8002752:	603b      	str	r3, [r7, #0]
 8002754:	eb45 030b 	adc.w	r3, r5, fp
 8002758:	607b      	str	r3, [r7, #4]
 800275a:	f04f 0200 	mov.w	r2, #0
 800275e:	f04f 0300 	mov.w	r3, #0
 8002762:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002766:	4629      	mov	r1, r5
 8002768:	028b      	lsls	r3, r1, #10
 800276a:	4621      	mov	r1, r4
 800276c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002770:	4621      	mov	r1, r4
 8002772:	028a      	lsls	r2, r1, #10
 8002774:	4610      	mov	r0, r2
 8002776:	4619      	mov	r1, r3
 8002778:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800277a:	2200      	movs	r2, #0
 800277c:	60bb      	str	r3, [r7, #8]
 800277e:	60fa      	str	r2, [r7, #12]
 8002780:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002784:	f7fd fd94 	bl	80002b0 <__aeabi_uldivmod>
 8002788:	4602      	mov	r2, r0
 800278a:	460b      	mov	r3, r1
 800278c:	4613      	mov	r3, r2
 800278e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002790:	4b0b      	ldr	r3, [pc, #44]	@ (80027c0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	0c1b      	lsrs	r3, r3, #16
 8002796:	f003 0303 	and.w	r3, r3, #3
 800279a:	3301      	adds	r3, #1
 800279c:	005b      	lsls	r3, r3, #1
 800279e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80027a0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80027a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80027a8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80027aa:	e002      	b.n	80027b2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80027ac:	4b05      	ldr	r3, [pc, #20]	@ (80027c4 <HAL_RCC_GetSysClockFreq+0x184>)
 80027ae:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80027b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80027b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	3740      	adds	r7, #64	@ 0x40
 80027b8:	46bd      	mov	sp, r7
 80027ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80027be:	bf00      	nop
 80027c0:	40023800 	.word	0x40023800
 80027c4:	00f42400 	.word	0x00f42400
 80027c8:	017d7840 	.word	0x017d7840

080027cc <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027cc:	b480      	push	{r7}
 80027ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027d0:	4b03      	ldr	r3, [pc, #12]	@ (80027e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80027d2:	681b      	ldr	r3, [r3, #0]
}
 80027d4:	4618      	mov	r0, r3
 80027d6:	46bd      	mov	sp, r7
 80027d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027dc:	4770      	bx	lr
 80027de:	bf00      	nop
 80027e0:	20000100 	.word	0x20000100

080027e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80027e8:	f7ff fff0 	bl	80027cc <HAL_RCC_GetHCLKFreq>
 80027ec:	4602      	mov	r2, r0
 80027ee:	4b05      	ldr	r3, [pc, #20]	@ (8002804 <HAL_RCC_GetPCLK1Freq+0x20>)
 80027f0:	689b      	ldr	r3, [r3, #8]
 80027f2:	0a9b      	lsrs	r3, r3, #10
 80027f4:	f003 0307 	and.w	r3, r3, #7
 80027f8:	4903      	ldr	r1, [pc, #12]	@ (8002808 <HAL_RCC_GetPCLK1Freq+0x24>)
 80027fa:	5ccb      	ldrb	r3, [r1, r3]
 80027fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002800:	4618      	mov	r0, r3
 8002802:	bd80      	pop	{r7, pc}
 8002804:	40023800 	.word	0x40023800
 8002808:	08006e98 	.word	0x08006e98

0800280c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002810:	f7ff ffdc 	bl	80027cc <HAL_RCC_GetHCLKFreq>
 8002814:	4602      	mov	r2, r0
 8002816:	4b05      	ldr	r3, [pc, #20]	@ (800282c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002818:	689b      	ldr	r3, [r3, #8]
 800281a:	0b5b      	lsrs	r3, r3, #13
 800281c:	f003 0307 	and.w	r3, r3, #7
 8002820:	4903      	ldr	r1, [pc, #12]	@ (8002830 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002822:	5ccb      	ldrb	r3, [r1, r3]
 8002824:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002828:	4618      	mov	r0, r3
 800282a:	bd80      	pop	{r7, pc}
 800282c:	40023800 	.word	0x40023800
 8002830:	08006e98 	.word	0x08006e98

08002834 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b088      	sub	sp, #32
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800283c:	2300      	movs	r3, #0
 800283e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002840:	2300      	movs	r3, #0
 8002842:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002844:	2300      	movs	r3, #0
 8002846:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002848:	2300      	movs	r3, #0
 800284a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800284c:	2300      	movs	r3, #0
 800284e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f003 0301 	and.w	r3, r3, #1
 8002858:	2b00      	cmp	r3, #0
 800285a:	d012      	beq.n	8002882 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800285c:	4b69      	ldr	r3, [pc, #420]	@ (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800285e:	689b      	ldr	r3, [r3, #8]
 8002860:	4a68      	ldr	r2, [pc, #416]	@ (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002862:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002866:	6093      	str	r3, [r2, #8]
 8002868:	4b66      	ldr	r3, [pc, #408]	@ (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800286a:	689a      	ldr	r2, [r3, #8]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002870:	4964      	ldr	r1, [pc, #400]	@ (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002872:	4313      	orrs	r3, r2
 8002874:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800287a:	2b00      	cmp	r3, #0
 800287c:	d101      	bne.n	8002882 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800287e:	2301      	movs	r3, #1
 8002880:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800288a:	2b00      	cmp	r3, #0
 800288c:	d017      	beq.n	80028be <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800288e:	4b5d      	ldr	r3, [pc, #372]	@ (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002890:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002894:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800289c:	4959      	ldr	r1, [pc, #356]	@ (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800289e:	4313      	orrs	r3, r2
 80028a0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028a8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80028ac:	d101      	bne.n	80028b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80028ae:	2301      	movs	r3, #1
 80028b0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d101      	bne.n	80028be <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80028ba:	2301      	movs	r3, #1
 80028bc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d017      	beq.n	80028fa <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80028ca:	4b4e      	ldr	r3, [pc, #312]	@ (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80028d0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028d8:	494a      	ldr	r1, [pc, #296]	@ (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028da:	4313      	orrs	r3, r2
 80028dc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028e4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80028e8:	d101      	bne.n	80028ee <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80028ea:	2301      	movs	r3, #1
 80028ec:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d101      	bne.n	80028fa <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80028f6:	2301      	movs	r3, #1
 80028f8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002902:	2b00      	cmp	r3, #0
 8002904:	d001      	beq.n	800290a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002906:	2301      	movs	r3, #1
 8002908:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f003 0320 	and.w	r3, r3, #32
 8002912:	2b00      	cmp	r3, #0
 8002914:	f000 808b 	beq.w	8002a2e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002918:	4b3a      	ldr	r3, [pc, #232]	@ (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800291a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800291c:	4a39      	ldr	r2, [pc, #228]	@ (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800291e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002922:	6413      	str	r3, [r2, #64]	@ 0x40
 8002924:	4b37      	ldr	r3, [pc, #220]	@ (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002926:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002928:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800292c:	60bb      	str	r3, [r7, #8]
 800292e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002930:	4b35      	ldr	r3, [pc, #212]	@ (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a34      	ldr	r2, [pc, #208]	@ (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002936:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800293a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800293c:	f7fe ffa6 	bl	800188c <HAL_GetTick>
 8002940:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002942:	e008      	b.n	8002956 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002944:	f7fe ffa2 	bl	800188c <HAL_GetTick>
 8002948:	4602      	mov	r2, r0
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	1ad3      	subs	r3, r2, r3
 800294e:	2b64      	cmp	r3, #100	@ 0x64
 8002950:	d901      	bls.n	8002956 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002952:	2303      	movs	r3, #3
 8002954:	e357      	b.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002956:	4b2c      	ldr	r3, [pc, #176]	@ (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800295e:	2b00      	cmp	r3, #0
 8002960:	d0f0      	beq.n	8002944 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002962:	4b28      	ldr	r3, [pc, #160]	@ (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002964:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002966:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800296a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800296c:	693b      	ldr	r3, [r7, #16]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d035      	beq.n	80029de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002976:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800297a:	693a      	ldr	r2, [r7, #16]
 800297c:	429a      	cmp	r2, r3
 800297e:	d02e      	beq.n	80029de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002980:	4b20      	ldr	r3, [pc, #128]	@ (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002982:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002984:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002988:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800298a:	4b1e      	ldr	r3, [pc, #120]	@ (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800298c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800298e:	4a1d      	ldr	r2, [pc, #116]	@ (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002990:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002994:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002996:	4b1b      	ldr	r3, [pc, #108]	@ (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002998:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800299a:	4a1a      	ldr	r2, [pc, #104]	@ (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800299c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80029a0:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80029a2:	4a18      	ldr	r2, [pc, #96]	@ (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029a4:	693b      	ldr	r3, [r7, #16]
 80029a6:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80029a8:	4b16      	ldr	r3, [pc, #88]	@ (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029ac:	f003 0301 	and.w	r3, r3, #1
 80029b0:	2b01      	cmp	r3, #1
 80029b2:	d114      	bne.n	80029de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029b4:	f7fe ff6a 	bl	800188c <HAL_GetTick>
 80029b8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029ba:	e00a      	b.n	80029d2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029bc:	f7fe ff66 	bl	800188c <HAL_GetTick>
 80029c0:	4602      	mov	r2, r0
 80029c2:	697b      	ldr	r3, [r7, #20]
 80029c4:	1ad3      	subs	r3, r2, r3
 80029c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d901      	bls.n	80029d2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80029ce:	2303      	movs	r3, #3
 80029d0:	e319      	b.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029d2:	4b0c      	ldr	r3, [pc, #48]	@ (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029d6:	f003 0302 	and.w	r3, r3, #2
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d0ee      	beq.n	80029bc <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80029e6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80029ea:	d111      	bne.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80029ec:	4b05      	ldr	r3, [pc, #20]	@ (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029ee:	689b      	ldr	r3, [r3, #8]
 80029f0:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80029f8:	4b04      	ldr	r3, [pc, #16]	@ (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80029fa:	400b      	ands	r3, r1
 80029fc:	4901      	ldr	r1, [pc, #4]	@ (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029fe:	4313      	orrs	r3, r2
 8002a00:	608b      	str	r3, [r1, #8]
 8002a02:	e00b      	b.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002a04:	40023800 	.word	0x40023800
 8002a08:	40007000 	.word	0x40007000
 8002a0c:	0ffffcff 	.word	0x0ffffcff
 8002a10:	4baa      	ldr	r3, [pc, #680]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a12:	689b      	ldr	r3, [r3, #8]
 8002a14:	4aa9      	ldr	r2, [pc, #676]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a16:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8002a1a:	6093      	str	r3, [r2, #8]
 8002a1c:	4ba7      	ldr	r3, [pc, #668]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a1e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a28:	49a4      	ldr	r1, [pc, #656]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f003 0310 	and.w	r3, r3, #16
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d010      	beq.n	8002a5c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002a3a:	4ba0      	ldr	r3, [pc, #640]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002a40:	4a9e      	ldr	r2, [pc, #632]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a42:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002a46:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002a4a:	4b9c      	ldr	r3, [pc, #624]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a4c:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a54:	4999      	ldr	r1, [pc, #612]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a56:	4313      	orrs	r3, r2
 8002a58:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d00a      	beq.n	8002a7e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002a68:	4b94      	ldr	r3, [pc, #592]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a6e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002a76:	4991      	ldr	r1, [pc, #580]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d00a      	beq.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002a8a:	4b8c      	ldr	r3, [pc, #560]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a90:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002a98:	4988      	ldr	r1, [pc, #544]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d00a      	beq.n	8002ac2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002aac:	4b83      	ldr	r3, [pc, #524]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002aae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ab2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002aba:	4980      	ldr	r1, [pc, #512]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002abc:	4313      	orrs	r3, r2
 8002abe:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d00a      	beq.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002ace:	4b7b      	ldr	r3, [pc, #492]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ad0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ad4:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002adc:	4977      	ldr	r1, [pc, #476]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d00a      	beq.n	8002b06 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002af0:	4b72      	ldr	r3, [pc, #456]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002af2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002af6:	f023 0203 	bic.w	r2, r3, #3
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002afe:	496f      	ldr	r1, [pc, #444]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b00:	4313      	orrs	r3, r2
 8002b02:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d00a      	beq.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002b12:	4b6a      	ldr	r3, [pc, #424]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b18:	f023 020c 	bic.w	r2, r3, #12
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b20:	4966      	ldr	r1, [pc, #408]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b22:	4313      	orrs	r3, r2
 8002b24:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d00a      	beq.n	8002b4a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002b34:	4b61      	ldr	r3, [pc, #388]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b3a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b42:	495e      	ldr	r1, [pc, #376]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b44:	4313      	orrs	r3, r2
 8002b46:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d00a      	beq.n	8002b6c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002b56:	4b59      	ldr	r3, [pc, #356]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b5c:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b64:	4955      	ldr	r1, [pc, #340]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b66:	4313      	orrs	r3, r2
 8002b68:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d00a      	beq.n	8002b8e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002b78:	4b50      	ldr	r3, [pc, #320]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b7e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b86:	494d      	ldr	r1, [pc, #308]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d00a      	beq.n	8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002b9a:	4b48      	ldr	r3, [pc, #288]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ba0:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ba8:	4944      	ldr	r1, [pc, #272]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002baa:	4313      	orrs	r3, r2
 8002bac:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d00a      	beq.n	8002bd2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002bbc:	4b3f      	ldr	r3, [pc, #252]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002bbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bc2:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bca:	493c      	ldr	r1, [pc, #240]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d00a      	beq.n	8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002bde:	4b37      	ldr	r3, [pc, #220]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002be0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002be4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002bec:	4933      	ldr	r1, [pc, #204]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d00a      	beq.n	8002c16 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002c00:	4b2e      	ldr	r3, [pc, #184]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c06:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002c0e:	492b      	ldr	r1, [pc, #172]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c10:	4313      	orrs	r3, r2
 8002c12:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d011      	beq.n	8002c46 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002c22:	4b26      	ldr	r3, [pc, #152]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c28:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002c30:	4922      	ldr	r1, [pc, #136]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c32:	4313      	orrs	r3, r2
 8002c34:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002c3c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002c40:	d101      	bne.n	8002c46 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002c42:	2301      	movs	r3, #1
 8002c44:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 0308 	and.w	r3, r3, #8
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d001      	beq.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002c52:	2301      	movs	r3, #1
 8002c54:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d00a      	beq.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002c62:	4b16      	ldr	r3, [pc, #88]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c68:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c70:	4912      	ldr	r1, [pc, #72]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c72:	4313      	orrs	r3, r2
 8002c74:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d00b      	beq.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002c84:	4b0d      	ldr	r3, [pc, #52]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c8a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002c94:	4909      	ldr	r1, [pc, #36]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c96:	4313      	orrs	r3, r2
 8002c98:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002c9c:	69fb      	ldr	r3, [r7, #28]
 8002c9e:	2b01      	cmp	r3, #1
 8002ca0:	d006      	beq.n	8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	f000 80d9 	beq.w	8002e62 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002cb0:	4b02      	ldr	r3, [pc, #8]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a01      	ldr	r2, [pc, #4]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002cb6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002cba:	e001      	b.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8002cbc:	40023800 	.word	0x40023800
 8002cc0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002cc2:	f7fe fde3 	bl	800188c <HAL_GetTick>
 8002cc6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002cc8:	e008      	b.n	8002cdc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002cca:	f7fe fddf 	bl	800188c <HAL_GetTick>
 8002cce:	4602      	mov	r2, r0
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	1ad3      	subs	r3, r2, r3
 8002cd4:	2b64      	cmp	r3, #100	@ 0x64
 8002cd6:	d901      	bls.n	8002cdc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002cd8:	2303      	movs	r3, #3
 8002cda:	e194      	b.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002cdc:	4b6c      	ldr	r3, [pc, #432]	@ (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d1f0      	bne.n	8002cca <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f003 0301 	and.w	r3, r3, #1
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d021      	beq.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d11d      	bne.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002cfc:	4b64      	ldr	r3, [pc, #400]	@ (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002cfe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002d02:	0c1b      	lsrs	r3, r3, #16
 8002d04:	f003 0303 	and.w	r3, r3, #3
 8002d08:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002d0a:	4b61      	ldr	r3, [pc, #388]	@ (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002d0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002d10:	0e1b      	lsrs	r3, r3, #24
 8002d12:	f003 030f 	and.w	r3, r3, #15
 8002d16:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	019a      	lsls	r2, r3, #6
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	041b      	lsls	r3, r3, #16
 8002d22:	431a      	orrs	r2, r3
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	061b      	lsls	r3, r3, #24
 8002d28:	431a      	orrs	r2, r3
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	071b      	lsls	r3, r3, #28
 8002d30:	4957      	ldr	r1, [pc, #348]	@ (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002d32:	4313      	orrs	r3, r2
 8002d34:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d004      	beq.n	8002d4e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d48:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002d4c:	d00a      	beq.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d02e      	beq.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d5e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002d62:	d129      	bne.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002d64:	4b4a      	ldr	r3, [pc, #296]	@ (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002d66:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002d6a:	0c1b      	lsrs	r3, r3, #16
 8002d6c:	f003 0303 	and.w	r3, r3, #3
 8002d70:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002d72:	4b47      	ldr	r3, [pc, #284]	@ (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002d74:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002d78:	0f1b      	lsrs	r3, r3, #28
 8002d7a:	f003 0307 	and.w	r3, r3, #7
 8002d7e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	019a      	lsls	r2, r3, #6
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	041b      	lsls	r3, r3, #16
 8002d8a:	431a      	orrs	r2, r3
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	68db      	ldr	r3, [r3, #12]
 8002d90:	061b      	lsls	r3, r3, #24
 8002d92:	431a      	orrs	r2, r3
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	071b      	lsls	r3, r3, #28
 8002d98:	493d      	ldr	r1, [pc, #244]	@ (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002da0:	4b3b      	ldr	r3, [pc, #236]	@ (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002da2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002da6:	f023 021f 	bic.w	r2, r3, #31
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dae:	3b01      	subs	r3, #1
 8002db0:	4937      	ldr	r1, [pc, #220]	@ (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002db2:	4313      	orrs	r3, r2
 8002db4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d01d      	beq.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002dc4:	4b32      	ldr	r3, [pc, #200]	@ (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002dc6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002dca:	0e1b      	lsrs	r3, r3, #24
 8002dcc:	f003 030f 	and.w	r3, r3, #15
 8002dd0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002dd2:	4b2f      	ldr	r3, [pc, #188]	@ (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002dd4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002dd8:	0f1b      	lsrs	r3, r3, #28
 8002dda:	f003 0307 	and.w	r3, r3, #7
 8002dde:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	019a      	lsls	r2, r3, #6
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	691b      	ldr	r3, [r3, #16]
 8002dea:	041b      	lsls	r3, r3, #16
 8002dec:	431a      	orrs	r2, r3
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	061b      	lsls	r3, r3, #24
 8002df2:	431a      	orrs	r2, r3
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	071b      	lsls	r3, r3, #28
 8002df8:	4925      	ldr	r1, [pc, #148]	@ (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d011      	beq.n	8002e30 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	019a      	lsls	r2, r3, #6
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	691b      	ldr	r3, [r3, #16]
 8002e16:	041b      	lsls	r3, r3, #16
 8002e18:	431a      	orrs	r2, r3
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	68db      	ldr	r3, [r3, #12]
 8002e1e:	061b      	lsls	r3, r3, #24
 8002e20:	431a      	orrs	r2, r3
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	689b      	ldr	r3, [r3, #8]
 8002e26:	071b      	lsls	r3, r3, #28
 8002e28:	4919      	ldr	r1, [pc, #100]	@ (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002e30:	4b17      	ldr	r3, [pc, #92]	@ (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a16      	ldr	r2, [pc, #88]	@ (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002e36:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002e3a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e3c:	f7fe fd26 	bl	800188c <HAL_GetTick>
 8002e40:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002e42:	e008      	b.n	8002e56 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002e44:	f7fe fd22 	bl	800188c <HAL_GetTick>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	1ad3      	subs	r3, r2, r3
 8002e4e:	2b64      	cmp	r3, #100	@ 0x64
 8002e50:	d901      	bls.n	8002e56 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002e52:	2303      	movs	r3, #3
 8002e54:	e0d7      	b.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002e56:	4b0e      	ldr	r3, [pc, #56]	@ (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d0f0      	beq.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002e62:	69bb      	ldr	r3, [r7, #24]
 8002e64:	2b01      	cmp	r3, #1
 8002e66:	f040 80cd 	bne.w	8003004 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002e6a:	4b09      	ldr	r3, [pc, #36]	@ (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a08      	ldr	r2, [pc, #32]	@ (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002e70:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e74:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e76:	f7fe fd09 	bl	800188c <HAL_GetTick>
 8002e7a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002e7c:	e00a      	b.n	8002e94 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002e7e:	f7fe fd05 	bl	800188c <HAL_GetTick>
 8002e82:	4602      	mov	r2, r0
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	1ad3      	subs	r3, r2, r3
 8002e88:	2b64      	cmp	r3, #100	@ 0x64
 8002e8a:	d903      	bls.n	8002e94 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002e8c:	2303      	movs	r3, #3
 8002e8e:	e0ba      	b.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8002e90:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002e94:	4b5e      	ldr	r3, [pc, #376]	@ (8003010 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002e9c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002ea0:	d0ed      	beq.n	8002e7e <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d003      	beq.n	8002eb6 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d009      	beq.n	8002eca <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d02e      	beq.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d12a      	bne.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002eca:	4b51      	ldr	r3, [pc, #324]	@ (8003010 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002ecc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ed0:	0c1b      	lsrs	r3, r3, #16
 8002ed2:	f003 0303 	and.w	r3, r3, #3
 8002ed6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002ed8:	4b4d      	ldr	r3, [pc, #308]	@ (8003010 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002eda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ede:	0f1b      	lsrs	r3, r3, #28
 8002ee0:	f003 0307 	and.w	r3, r3, #7
 8002ee4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	695b      	ldr	r3, [r3, #20]
 8002eea:	019a      	lsls	r2, r3, #6
 8002eec:	693b      	ldr	r3, [r7, #16]
 8002eee:	041b      	lsls	r3, r3, #16
 8002ef0:	431a      	orrs	r2, r3
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	699b      	ldr	r3, [r3, #24]
 8002ef6:	061b      	lsls	r3, r3, #24
 8002ef8:	431a      	orrs	r2, r3
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	071b      	lsls	r3, r3, #28
 8002efe:	4944      	ldr	r1, [pc, #272]	@ (8003010 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002f00:	4313      	orrs	r3, r2
 8002f02:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002f06:	4b42      	ldr	r3, [pc, #264]	@ (8003010 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002f08:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002f0c:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f14:	3b01      	subs	r3, #1
 8002f16:	021b      	lsls	r3, r3, #8
 8002f18:	493d      	ldr	r1, [pc, #244]	@ (8003010 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d022      	beq.n	8002f72 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002f30:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002f34:	d11d      	bne.n	8002f72 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002f36:	4b36      	ldr	r3, [pc, #216]	@ (8003010 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002f38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f3c:	0e1b      	lsrs	r3, r3, #24
 8002f3e:	f003 030f 	and.w	r3, r3, #15
 8002f42:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002f44:	4b32      	ldr	r3, [pc, #200]	@ (8003010 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002f46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f4a:	0f1b      	lsrs	r3, r3, #28
 8002f4c:	f003 0307 	and.w	r3, r3, #7
 8002f50:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	695b      	ldr	r3, [r3, #20]
 8002f56:	019a      	lsls	r2, r3, #6
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6a1b      	ldr	r3, [r3, #32]
 8002f5c:	041b      	lsls	r3, r3, #16
 8002f5e:	431a      	orrs	r2, r3
 8002f60:	693b      	ldr	r3, [r7, #16]
 8002f62:	061b      	lsls	r3, r3, #24
 8002f64:	431a      	orrs	r2, r3
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	071b      	lsls	r3, r3, #28
 8002f6a:	4929      	ldr	r1, [pc, #164]	@ (8003010 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f003 0308 	and.w	r3, r3, #8
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d028      	beq.n	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002f7e:	4b24      	ldr	r3, [pc, #144]	@ (8003010 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002f80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f84:	0e1b      	lsrs	r3, r3, #24
 8002f86:	f003 030f 	and.w	r3, r3, #15
 8002f8a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002f8c:	4b20      	ldr	r3, [pc, #128]	@ (8003010 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002f8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f92:	0c1b      	lsrs	r3, r3, #16
 8002f94:	f003 0303 	and.w	r3, r3, #3
 8002f98:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	695b      	ldr	r3, [r3, #20]
 8002f9e:	019a      	lsls	r2, r3, #6
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	041b      	lsls	r3, r3, #16
 8002fa4:	431a      	orrs	r2, r3
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	061b      	lsls	r3, r3, #24
 8002faa:	431a      	orrs	r2, r3
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	69db      	ldr	r3, [r3, #28]
 8002fb0:	071b      	lsls	r3, r3, #28
 8002fb2:	4917      	ldr	r1, [pc, #92]	@ (8003010 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002fba:	4b15      	ldr	r3, [pc, #84]	@ (8003010 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002fbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002fc0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fc8:	4911      	ldr	r1, [pc, #68]	@ (8003010 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002fd0:	4b0f      	ldr	r3, [pc, #60]	@ (8003010 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a0e      	ldr	r2, [pc, #56]	@ (8003010 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002fd6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002fda:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002fdc:	f7fe fc56 	bl	800188c <HAL_GetTick>
 8002fe0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002fe2:	e008      	b.n	8002ff6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002fe4:	f7fe fc52 	bl	800188c <HAL_GetTick>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	697b      	ldr	r3, [r7, #20]
 8002fec:	1ad3      	subs	r3, r2, r3
 8002fee:	2b64      	cmp	r3, #100	@ 0x64
 8002ff0:	d901      	bls.n	8002ff6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002ff2:	2303      	movs	r3, #3
 8002ff4:	e007      	b.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002ff6:	4b06      	ldr	r3, [pc, #24]	@ (8003010 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002ffe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003002:	d1ef      	bne.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8003004:	2300      	movs	r3, #0
}
 8003006:	4618      	mov	r0, r3
 8003008:	3720      	adds	r7, #32
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}
 800300e:	bf00      	nop
 8003010:	40023800 	.word	0x40023800

08003014 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b082      	sub	sp, #8
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d101      	bne.n	8003026 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	e040      	b.n	80030a8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800302a:	2b00      	cmp	r3, #0
 800302c:	d106      	bne.n	800303c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2200      	movs	r2, #0
 8003032:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003036:	6878      	ldr	r0, [r7, #4]
 8003038:	f7fe fb2c 	bl	8001694 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2224      	movs	r2, #36	@ 0x24
 8003040:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	681a      	ldr	r2, [r3, #0]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f022 0201 	bic.w	r2, r2, #1
 8003050:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003056:	2b00      	cmp	r3, #0
 8003058:	d002      	beq.n	8003060 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800305a:	6878      	ldr	r0, [r7, #4]
 800305c:	f000 fbde 	bl	800381c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003060:	6878      	ldr	r0, [r7, #4]
 8003062:	f000 f977 	bl	8003354 <UART_SetConfig>
 8003066:	4603      	mov	r3, r0
 8003068:	2b01      	cmp	r3, #1
 800306a:	d101      	bne.n	8003070 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800306c:	2301      	movs	r3, #1
 800306e:	e01b      	b.n	80030a8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	685a      	ldr	r2, [r3, #4]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800307e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	689a      	ldr	r2, [r3, #8]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800308e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	681a      	ldr	r2, [r3, #0]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f042 0201 	orr.w	r2, r2, #1
 800309e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80030a0:	6878      	ldr	r0, [r7, #4]
 80030a2:	f000 fc5d 	bl	8003960 <UART_CheckIdleState>
 80030a6:	4603      	mov	r3, r0
}
 80030a8:	4618      	mov	r0, r3
 80030aa:	3708      	adds	r7, #8
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bd80      	pop	{r7, pc}

080030b0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b08a      	sub	sp, #40	@ 0x28
 80030b4:	af02      	add	r7, sp, #8
 80030b6:	60f8      	str	r0, [r7, #12]
 80030b8:	60b9      	str	r1, [r7, #8]
 80030ba:	603b      	str	r3, [r7, #0]
 80030bc:	4613      	mov	r3, r2
 80030be:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80030c4:	2b20      	cmp	r3, #32
 80030c6:	d177      	bne.n	80031b8 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d002      	beq.n	80030d4 <HAL_UART_Transmit+0x24>
 80030ce:	88fb      	ldrh	r3, [r7, #6]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d101      	bne.n	80030d8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80030d4:	2301      	movs	r3, #1
 80030d6:	e070      	b.n	80031ba <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	2200      	movs	r2, #0
 80030dc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	2221      	movs	r2, #33	@ 0x21
 80030e4:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80030e6:	f7fe fbd1 	bl	800188c <HAL_GetTick>
 80030ea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	88fa      	ldrh	r2, [r7, #6]
 80030f0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	88fa      	ldrh	r2, [r7, #6]
 80030f8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	689b      	ldr	r3, [r3, #8]
 8003100:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003104:	d108      	bne.n	8003118 <HAL_UART_Transmit+0x68>
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	691b      	ldr	r3, [r3, #16]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d104      	bne.n	8003118 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800310e:	2300      	movs	r3, #0
 8003110:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003112:	68bb      	ldr	r3, [r7, #8]
 8003114:	61bb      	str	r3, [r7, #24]
 8003116:	e003      	b.n	8003120 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800311c:	2300      	movs	r3, #0
 800311e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003120:	e02f      	b.n	8003182 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	9300      	str	r3, [sp, #0]
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	2200      	movs	r2, #0
 800312a:	2180      	movs	r1, #128	@ 0x80
 800312c:	68f8      	ldr	r0, [r7, #12]
 800312e:	f000 fc6e 	bl	8003a0e <UART_WaitOnFlagUntilTimeout>
 8003132:	4603      	mov	r3, r0
 8003134:	2b00      	cmp	r3, #0
 8003136:	d004      	beq.n	8003142 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	2220      	movs	r2, #32
 800313c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800313e:	2303      	movs	r3, #3
 8003140:	e03b      	b.n	80031ba <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8003142:	69fb      	ldr	r3, [r7, #28]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d10b      	bne.n	8003160 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003148:	69bb      	ldr	r3, [r7, #24]
 800314a:	881b      	ldrh	r3, [r3, #0]
 800314c:	461a      	mov	r2, r3
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003156:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003158:	69bb      	ldr	r3, [r7, #24]
 800315a:	3302      	adds	r3, #2
 800315c:	61bb      	str	r3, [r7, #24]
 800315e:	e007      	b.n	8003170 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003160:	69fb      	ldr	r3, [r7, #28]
 8003162:	781a      	ldrb	r2, [r3, #0]
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800316a:	69fb      	ldr	r3, [r7, #28]
 800316c:	3301      	adds	r3, #1
 800316e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003176:	b29b      	uxth	r3, r3
 8003178:	3b01      	subs	r3, #1
 800317a:	b29a      	uxth	r2, r3
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003188:	b29b      	uxth	r3, r3
 800318a:	2b00      	cmp	r3, #0
 800318c:	d1c9      	bne.n	8003122 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	9300      	str	r3, [sp, #0]
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	2200      	movs	r2, #0
 8003196:	2140      	movs	r1, #64	@ 0x40
 8003198:	68f8      	ldr	r0, [r7, #12]
 800319a:	f000 fc38 	bl	8003a0e <UART_WaitOnFlagUntilTimeout>
 800319e:	4603      	mov	r3, r0
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d004      	beq.n	80031ae <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	2220      	movs	r2, #32
 80031a8:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80031aa:	2303      	movs	r3, #3
 80031ac:	e005      	b.n	80031ba <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	2220      	movs	r2, #32
 80031b2:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80031b4:	2300      	movs	r3, #0
 80031b6:	e000      	b.n	80031ba <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80031b8:	2302      	movs	r3, #2
  }
}
 80031ba:	4618      	mov	r0, r3
 80031bc:	3720      	adds	r7, #32
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}

080031c2 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031c2:	b580      	push	{r7, lr}
 80031c4:	b08a      	sub	sp, #40	@ 0x28
 80031c6:	af02      	add	r7, sp, #8
 80031c8:	60f8      	str	r0, [r7, #12]
 80031ca:	60b9      	str	r1, [r7, #8]
 80031cc:	603b      	str	r3, [r7, #0]
 80031ce:	4613      	mov	r3, r2
 80031d0:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80031d8:	2b20      	cmp	r3, #32
 80031da:	f040 80b5 	bne.w	8003348 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 80031de:	68bb      	ldr	r3, [r7, #8]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d002      	beq.n	80031ea <HAL_UART_Receive+0x28>
 80031e4:	88fb      	ldrh	r3, [r7, #6]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d101      	bne.n	80031ee <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80031ea:	2301      	movs	r3, #1
 80031ec:	e0ad      	b.n	800334a <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	2200      	movs	r2, #0
 80031f2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	2222      	movs	r2, #34	@ 0x22
 80031fa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	2200      	movs	r2, #0
 8003202:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003204:	f7fe fb42 	bl	800188c <HAL_GetTick>
 8003208:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	88fa      	ldrh	r2, [r7, #6]
 800320e:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	88fa      	ldrh	r2, [r7, #6]
 8003216:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	689b      	ldr	r3, [r3, #8]
 800321e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003222:	d10e      	bne.n	8003242 <HAL_UART_Receive+0x80>
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	691b      	ldr	r3, [r3, #16]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d105      	bne.n	8003238 <HAL_UART_Receive+0x76>
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8003232:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003236:	e02d      	b.n	8003294 <HAL_UART_Receive+0xd2>
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	22ff      	movs	r2, #255	@ 0xff
 800323c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003240:	e028      	b.n	8003294 <HAL_UART_Receive+0xd2>
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d10d      	bne.n	8003266 <HAL_UART_Receive+0xa4>
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	691b      	ldr	r3, [r3, #16]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d104      	bne.n	800325c <HAL_UART_Receive+0x9a>
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	22ff      	movs	r2, #255	@ 0xff
 8003256:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800325a:	e01b      	b.n	8003294 <HAL_UART_Receive+0xd2>
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	227f      	movs	r2, #127	@ 0x7f
 8003260:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003264:	e016      	b.n	8003294 <HAL_UART_Receive+0xd2>
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	689b      	ldr	r3, [r3, #8]
 800326a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800326e:	d10d      	bne.n	800328c <HAL_UART_Receive+0xca>
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	691b      	ldr	r3, [r3, #16]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d104      	bne.n	8003282 <HAL_UART_Receive+0xc0>
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	227f      	movs	r2, #127	@ 0x7f
 800327c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003280:	e008      	b.n	8003294 <HAL_UART_Receive+0xd2>
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	223f      	movs	r2, #63	@ 0x3f
 8003286:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800328a:	e003      	b.n	8003294 <HAL_UART_Receive+0xd2>
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	2200      	movs	r2, #0
 8003290:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800329a:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80032a4:	d108      	bne.n	80032b8 <HAL_UART_Receive+0xf6>
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	691b      	ldr	r3, [r3, #16]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d104      	bne.n	80032b8 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80032ae:	2300      	movs	r3, #0
 80032b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80032b2:	68bb      	ldr	r3, [r7, #8]
 80032b4:	61bb      	str	r3, [r7, #24]
 80032b6:	e003      	b.n	80032c0 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80032b8:	68bb      	ldr	r3, [r7, #8]
 80032ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80032bc:	2300      	movs	r3, #0
 80032be:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80032c0:	e036      	b.n	8003330 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	9300      	str	r3, [sp, #0]
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	2200      	movs	r2, #0
 80032ca:	2120      	movs	r1, #32
 80032cc:	68f8      	ldr	r0, [r7, #12]
 80032ce:	f000 fb9e 	bl	8003a0e <UART_WaitOnFlagUntilTimeout>
 80032d2:	4603      	mov	r3, r0
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d005      	beq.n	80032e4 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	2220      	movs	r2, #32
 80032dc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 80032e0:	2303      	movs	r3, #3
 80032e2:	e032      	b.n	800334a <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 80032e4:	69fb      	ldr	r3, [r7, #28]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d10c      	bne.n	8003304 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032f0:	b29a      	uxth	r2, r3
 80032f2:	8a7b      	ldrh	r3, [r7, #18]
 80032f4:	4013      	ands	r3, r2
 80032f6:	b29a      	uxth	r2, r3
 80032f8:	69bb      	ldr	r3, [r7, #24]
 80032fa:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80032fc:	69bb      	ldr	r3, [r7, #24]
 80032fe:	3302      	adds	r3, #2
 8003300:	61bb      	str	r3, [r7, #24]
 8003302:	e00c      	b.n	800331e <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800330a:	b2da      	uxtb	r2, r3
 800330c:	8a7b      	ldrh	r3, [r7, #18]
 800330e:	b2db      	uxtb	r3, r3
 8003310:	4013      	ands	r3, r2
 8003312:	b2da      	uxtb	r2, r3
 8003314:	69fb      	ldr	r3, [r7, #28]
 8003316:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8003318:	69fb      	ldr	r3, [r7, #28]
 800331a:	3301      	adds	r3, #1
 800331c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003324:	b29b      	uxth	r3, r3
 8003326:	3b01      	subs	r3, #1
 8003328:	b29a      	uxth	r2, r3
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003336:	b29b      	uxth	r3, r3
 8003338:	2b00      	cmp	r3, #0
 800333a:	d1c2      	bne.n	80032c2 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	2220      	movs	r2, #32
 8003340:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 8003344:	2300      	movs	r3, #0
 8003346:	e000      	b.n	800334a <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 8003348:	2302      	movs	r3, #2
  }
}
 800334a:	4618      	mov	r0, r3
 800334c:	3720      	adds	r7, #32
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}
	...

08003354 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b088      	sub	sp, #32
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800335c:	2300      	movs	r3, #0
 800335e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	689a      	ldr	r2, [r3, #8]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	691b      	ldr	r3, [r3, #16]
 8003368:	431a      	orrs	r2, r3
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	695b      	ldr	r3, [r3, #20]
 800336e:	431a      	orrs	r2, r3
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	69db      	ldr	r3, [r3, #28]
 8003374:	4313      	orrs	r3, r2
 8003376:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	681a      	ldr	r2, [r3, #0]
 800337e:	4ba6      	ldr	r3, [pc, #664]	@ (8003618 <UART_SetConfig+0x2c4>)
 8003380:	4013      	ands	r3, r2
 8003382:	687a      	ldr	r2, [r7, #4]
 8003384:	6812      	ldr	r2, [r2, #0]
 8003386:	6979      	ldr	r1, [r7, #20]
 8003388:	430b      	orrs	r3, r1
 800338a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	68da      	ldr	r2, [r3, #12]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	430a      	orrs	r2, r1
 80033a0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	699b      	ldr	r3, [r3, #24]
 80033a6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6a1b      	ldr	r3, [r3, #32]
 80033ac:	697a      	ldr	r2, [r7, #20]
 80033ae:	4313      	orrs	r3, r2
 80033b0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	689b      	ldr	r3, [r3, #8]
 80033b8:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	697a      	ldr	r2, [r7, #20]
 80033c2:	430a      	orrs	r2, r1
 80033c4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a94      	ldr	r2, [pc, #592]	@ (800361c <UART_SetConfig+0x2c8>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d120      	bne.n	8003412 <UART_SetConfig+0xbe>
 80033d0:	4b93      	ldr	r3, [pc, #588]	@ (8003620 <UART_SetConfig+0x2cc>)
 80033d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033d6:	f003 0303 	and.w	r3, r3, #3
 80033da:	2b03      	cmp	r3, #3
 80033dc:	d816      	bhi.n	800340c <UART_SetConfig+0xb8>
 80033de:	a201      	add	r2, pc, #4	@ (adr r2, 80033e4 <UART_SetConfig+0x90>)
 80033e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033e4:	080033f5 	.word	0x080033f5
 80033e8:	08003401 	.word	0x08003401
 80033ec:	080033fb 	.word	0x080033fb
 80033f0:	08003407 	.word	0x08003407
 80033f4:	2301      	movs	r3, #1
 80033f6:	77fb      	strb	r3, [r7, #31]
 80033f8:	e150      	b.n	800369c <UART_SetConfig+0x348>
 80033fa:	2302      	movs	r3, #2
 80033fc:	77fb      	strb	r3, [r7, #31]
 80033fe:	e14d      	b.n	800369c <UART_SetConfig+0x348>
 8003400:	2304      	movs	r3, #4
 8003402:	77fb      	strb	r3, [r7, #31]
 8003404:	e14a      	b.n	800369c <UART_SetConfig+0x348>
 8003406:	2308      	movs	r3, #8
 8003408:	77fb      	strb	r3, [r7, #31]
 800340a:	e147      	b.n	800369c <UART_SetConfig+0x348>
 800340c:	2310      	movs	r3, #16
 800340e:	77fb      	strb	r3, [r7, #31]
 8003410:	e144      	b.n	800369c <UART_SetConfig+0x348>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a83      	ldr	r2, [pc, #524]	@ (8003624 <UART_SetConfig+0x2d0>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d132      	bne.n	8003482 <UART_SetConfig+0x12e>
 800341c:	4b80      	ldr	r3, [pc, #512]	@ (8003620 <UART_SetConfig+0x2cc>)
 800341e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003422:	f003 030c 	and.w	r3, r3, #12
 8003426:	2b0c      	cmp	r3, #12
 8003428:	d828      	bhi.n	800347c <UART_SetConfig+0x128>
 800342a:	a201      	add	r2, pc, #4	@ (adr r2, 8003430 <UART_SetConfig+0xdc>)
 800342c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003430:	08003465 	.word	0x08003465
 8003434:	0800347d 	.word	0x0800347d
 8003438:	0800347d 	.word	0x0800347d
 800343c:	0800347d 	.word	0x0800347d
 8003440:	08003471 	.word	0x08003471
 8003444:	0800347d 	.word	0x0800347d
 8003448:	0800347d 	.word	0x0800347d
 800344c:	0800347d 	.word	0x0800347d
 8003450:	0800346b 	.word	0x0800346b
 8003454:	0800347d 	.word	0x0800347d
 8003458:	0800347d 	.word	0x0800347d
 800345c:	0800347d 	.word	0x0800347d
 8003460:	08003477 	.word	0x08003477
 8003464:	2300      	movs	r3, #0
 8003466:	77fb      	strb	r3, [r7, #31]
 8003468:	e118      	b.n	800369c <UART_SetConfig+0x348>
 800346a:	2302      	movs	r3, #2
 800346c:	77fb      	strb	r3, [r7, #31]
 800346e:	e115      	b.n	800369c <UART_SetConfig+0x348>
 8003470:	2304      	movs	r3, #4
 8003472:	77fb      	strb	r3, [r7, #31]
 8003474:	e112      	b.n	800369c <UART_SetConfig+0x348>
 8003476:	2308      	movs	r3, #8
 8003478:	77fb      	strb	r3, [r7, #31]
 800347a:	e10f      	b.n	800369c <UART_SetConfig+0x348>
 800347c:	2310      	movs	r3, #16
 800347e:	77fb      	strb	r3, [r7, #31]
 8003480:	e10c      	b.n	800369c <UART_SetConfig+0x348>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a68      	ldr	r2, [pc, #416]	@ (8003628 <UART_SetConfig+0x2d4>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d120      	bne.n	80034ce <UART_SetConfig+0x17a>
 800348c:	4b64      	ldr	r3, [pc, #400]	@ (8003620 <UART_SetConfig+0x2cc>)
 800348e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003492:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003496:	2b30      	cmp	r3, #48	@ 0x30
 8003498:	d013      	beq.n	80034c2 <UART_SetConfig+0x16e>
 800349a:	2b30      	cmp	r3, #48	@ 0x30
 800349c:	d814      	bhi.n	80034c8 <UART_SetConfig+0x174>
 800349e:	2b20      	cmp	r3, #32
 80034a0:	d009      	beq.n	80034b6 <UART_SetConfig+0x162>
 80034a2:	2b20      	cmp	r3, #32
 80034a4:	d810      	bhi.n	80034c8 <UART_SetConfig+0x174>
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d002      	beq.n	80034b0 <UART_SetConfig+0x15c>
 80034aa:	2b10      	cmp	r3, #16
 80034ac:	d006      	beq.n	80034bc <UART_SetConfig+0x168>
 80034ae:	e00b      	b.n	80034c8 <UART_SetConfig+0x174>
 80034b0:	2300      	movs	r3, #0
 80034b2:	77fb      	strb	r3, [r7, #31]
 80034b4:	e0f2      	b.n	800369c <UART_SetConfig+0x348>
 80034b6:	2302      	movs	r3, #2
 80034b8:	77fb      	strb	r3, [r7, #31]
 80034ba:	e0ef      	b.n	800369c <UART_SetConfig+0x348>
 80034bc:	2304      	movs	r3, #4
 80034be:	77fb      	strb	r3, [r7, #31]
 80034c0:	e0ec      	b.n	800369c <UART_SetConfig+0x348>
 80034c2:	2308      	movs	r3, #8
 80034c4:	77fb      	strb	r3, [r7, #31]
 80034c6:	e0e9      	b.n	800369c <UART_SetConfig+0x348>
 80034c8:	2310      	movs	r3, #16
 80034ca:	77fb      	strb	r3, [r7, #31]
 80034cc:	e0e6      	b.n	800369c <UART_SetConfig+0x348>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a56      	ldr	r2, [pc, #344]	@ (800362c <UART_SetConfig+0x2d8>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d120      	bne.n	800351a <UART_SetConfig+0x1c6>
 80034d8:	4b51      	ldr	r3, [pc, #324]	@ (8003620 <UART_SetConfig+0x2cc>)
 80034da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034de:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80034e2:	2bc0      	cmp	r3, #192	@ 0xc0
 80034e4:	d013      	beq.n	800350e <UART_SetConfig+0x1ba>
 80034e6:	2bc0      	cmp	r3, #192	@ 0xc0
 80034e8:	d814      	bhi.n	8003514 <UART_SetConfig+0x1c0>
 80034ea:	2b80      	cmp	r3, #128	@ 0x80
 80034ec:	d009      	beq.n	8003502 <UART_SetConfig+0x1ae>
 80034ee:	2b80      	cmp	r3, #128	@ 0x80
 80034f0:	d810      	bhi.n	8003514 <UART_SetConfig+0x1c0>
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d002      	beq.n	80034fc <UART_SetConfig+0x1a8>
 80034f6:	2b40      	cmp	r3, #64	@ 0x40
 80034f8:	d006      	beq.n	8003508 <UART_SetConfig+0x1b4>
 80034fa:	e00b      	b.n	8003514 <UART_SetConfig+0x1c0>
 80034fc:	2300      	movs	r3, #0
 80034fe:	77fb      	strb	r3, [r7, #31]
 8003500:	e0cc      	b.n	800369c <UART_SetConfig+0x348>
 8003502:	2302      	movs	r3, #2
 8003504:	77fb      	strb	r3, [r7, #31]
 8003506:	e0c9      	b.n	800369c <UART_SetConfig+0x348>
 8003508:	2304      	movs	r3, #4
 800350a:	77fb      	strb	r3, [r7, #31]
 800350c:	e0c6      	b.n	800369c <UART_SetConfig+0x348>
 800350e:	2308      	movs	r3, #8
 8003510:	77fb      	strb	r3, [r7, #31]
 8003512:	e0c3      	b.n	800369c <UART_SetConfig+0x348>
 8003514:	2310      	movs	r3, #16
 8003516:	77fb      	strb	r3, [r7, #31]
 8003518:	e0c0      	b.n	800369c <UART_SetConfig+0x348>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a44      	ldr	r2, [pc, #272]	@ (8003630 <UART_SetConfig+0x2dc>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d125      	bne.n	8003570 <UART_SetConfig+0x21c>
 8003524:	4b3e      	ldr	r3, [pc, #248]	@ (8003620 <UART_SetConfig+0x2cc>)
 8003526:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800352a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800352e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003532:	d017      	beq.n	8003564 <UART_SetConfig+0x210>
 8003534:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003538:	d817      	bhi.n	800356a <UART_SetConfig+0x216>
 800353a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800353e:	d00b      	beq.n	8003558 <UART_SetConfig+0x204>
 8003540:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003544:	d811      	bhi.n	800356a <UART_SetConfig+0x216>
 8003546:	2b00      	cmp	r3, #0
 8003548:	d003      	beq.n	8003552 <UART_SetConfig+0x1fe>
 800354a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800354e:	d006      	beq.n	800355e <UART_SetConfig+0x20a>
 8003550:	e00b      	b.n	800356a <UART_SetConfig+0x216>
 8003552:	2300      	movs	r3, #0
 8003554:	77fb      	strb	r3, [r7, #31]
 8003556:	e0a1      	b.n	800369c <UART_SetConfig+0x348>
 8003558:	2302      	movs	r3, #2
 800355a:	77fb      	strb	r3, [r7, #31]
 800355c:	e09e      	b.n	800369c <UART_SetConfig+0x348>
 800355e:	2304      	movs	r3, #4
 8003560:	77fb      	strb	r3, [r7, #31]
 8003562:	e09b      	b.n	800369c <UART_SetConfig+0x348>
 8003564:	2308      	movs	r3, #8
 8003566:	77fb      	strb	r3, [r7, #31]
 8003568:	e098      	b.n	800369c <UART_SetConfig+0x348>
 800356a:	2310      	movs	r3, #16
 800356c:	77fb      	strb	r3, [r7, #31]
 800356e:	e095      	b.n	800369c <UART_SetConfig+0x348>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a2f      	ldr	r2, [pc, #188]	@ (8003634 <UART_SetConfig+0x2e0>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d125      	bne.n	80035c6 <UART_SetConfig+0x272>
 800357a:	4b29      	ldr	r3, [pc, #164]	@ (8003620 <UART_SetConfig+0x2cc>)
 800357c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003580:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003584:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003588:	d017      	beq.n	80035ba <UART_SetConfig+0x266>
 800358a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800358e:	d817      	bhi.n	80035c0 <UART_SetConfig+0x26c>
 8003590:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003594:	d00b      	beq.n	80035ae <UART_SetConfig+0x25a>
 8003596:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800359a:	d811      	bhi.n	80035c0 <UART_SetConfig+0x26c>
 800359c:	2b00      	cmp	r3, #0
 800359e:	d003      	beq.n	80035a8 <UART_SetConfig+0x254>
 80035a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80035a4:	d006      	beq.n	80035b4 <UART_SetConfig+0x260>
 80035a6:	e00b      	b.n	80035c0 <UART_SetConfig+0x26c>
 80035a8:	2301      	movs	r3, #1
 80035aa:	77fb      	strb	r3, [r7, #31]
 80035ac:	e076      	b.n	800369c <UART_SetConfig+0x348>
 80035ae:	2302      	movs	r3, #2
 80035b0:	77fb      	strb	r3, [r7, #31]
 80035b2:	e073      	b.n	800369c <UART_SetConfig+0x348>
 80035b4:	2304      	movs	r3, #4
 80035b6:	77fb      	strb	r3, [r7, #31]
 80035b8:	e070      	b.n	800369c <UART_SetConfig+0x348>
 80035ba:	2308      	movs	r3, #8
 80035bc:	77fb      	strb	r3, [r7, #31]
 80035be:	e06d      	b.n	800369c <UART_SetConfig+0x348>
 80035c0:	2310      	movs	r3, #16
 80035c2:	77fb      	strb	r3, [r7, #31]
 80035c4:	e06a      	b.n	800369c <UART_SetConfig+0x348>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a1b      	ldr	r2, [pc, #108]	@ (8003638 <UART_SetConfig+0x2e4>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d138      	bne.n	8003642 <UART_SetConfig+0x2ee>
 80035d0:	4b13      	ldr	r3, [pc, #76]	@ (8003620 <UART_SetConfig+0x2cc>)
 80035d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035d6:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80035da:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80035de:	d017      	beq.n	8003610 <UART_SetConfig+0x2bc>
 80035e0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80035e4:	d82a      	bhi.n	800363c <UART_SetConfig+0x2e8>
 80035e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80035ea:	d00b      	beq.n	8003604 <UART_SetConfig+0x2b0>
 80035ec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80035f0:	d824      	bhi.n	800363c <UART_SetConfig+0x2e8>
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d003      	beq.n	80035fe <UART_SetConfig+0x2aa>
 80035f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80035fa:	d006      	beq.n	800360a <UART_SetConfig+0x2b6>
 80035fc:	e01e      	b.n	800363c <UART_SetConfig+0x2e8>
 80035fe:	2300      	movs	r3, #0
 8003600:	77fb      	strb	r3, [r7, #31]
 8003602:	e04b      	b.n	800369c <UART_SetConfig+0x348>
 8003604:	2302      	movs	r3, #2
 8003606:	77fb      	strb	r3, [r7, #31]
 8003608:	e048      	b.n	800369c <UART_SetConfig+0x348>
 800360a:	2304      	movs	r3, #4
 800360c:	77fb      	strb	r3, [r7, #31]
 800360e:	e045      	b.n	800369c <UART_SetConfig+0x348>
 8003610:	2308      	movs	r3, #8
 8003612:	77fb      	strb	r3, [r7, #31]
 8003614:	e042      	b.n	800369c <UART_SetConfig+0x348>
 8003616:	bf00      	nop
 8003618:	efff69f3 	.word	0xefff69f3
 800361c:	40011000 	.word	0x40011000
 8003620:	40023800 	.word	0x40023800
 8003624:	40004400 	.word	0x40004400
 8003628:	40004800 	.word	0x40004800
 800362c:	40004c00 	.word	0x40004c00
 8003630:	40005000 	.word	0x40005000
 8003634:	40011400 	.word	0x40011400
 8003638:	40007800 	.word	0x40007800
 800363c:	2310      	movs	r3, #16
 800363e:	77fb      	strb	r3, [r7, #31]
 8003640:	e02c      	b.n	800369c <UART_SetConfig+0x348>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a72      	ldr	r2, [pc, #456]	@ (8003810 <UART_SetConfig+0x4bc>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d125      	bne.n	8003698 <UART_SetConfig+0x344>
 800364c:	4b71      	ldr	r3, [pc, #452]	@ (8003814 <UART_SetConfig+0x4c0>)
 800364e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003652:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8003656:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800365a:	d017      	beq.n	800368c <UART_SetConfig+0x338>
 800365c:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003660:	d817      	bhi.n	8003692 <UART_SetConfig+0x33e>
 8003662:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003666:	d00b      	beq.n	8003680 <UART_SetConfig+0x32c>
 8003668:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800366c:	d811      	bhi.n	8003692 <UART_SetConfig+0x33e>
 800366e:	2b00      	cmp	r3, #0
 8003670:	d003      	beq.n	800367a <UART_SetConfig+0x326>
 8003672:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003676:	d006      	beq.n	8003686 <UART_SetConfig+0x332>
 8003678:	e00b      	b.n	8003692 <UART_SetConfig+0x33e>
 800367a:	2300      	movs	r3, #0
 800367c:	77fb      	strb	r3, [r7, #31]
 800367e:	e00d      	b.n	800369c <UART_SetConfig+0x348>
 8003680:	2302      	movs	r3, #2
 8003682:	77fb      	strb	r3, [r7, #31]
 8003684:	e00a      	b.n	800369c <UART_SetConfig+0x348>
 8003686:	2304      	movs	r3, #4
 8003688:	77fb      	strb	r3, [r7, #31]
 800368a:	e007      	b.n	800369c <UART_SetConfig+0x348>
 800368c:	2308      	movs	r3, #8
 800368e:	77fb      	strb	r3, [r7, #31]
 8003690:	e004      	b.n	800369c <UART_SetConfig+0x348>
 8003692:	2310      	movs	r3, #16
 8003694:	77fb      	strb	r3, [r7, #31]
 8003696:	e001      	b.n	800369c <UART_SetConfig+0x348>
 8003698:	2310      	movs	r3, #16
 800369a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	69db      	ldr	r3, [r3, #28]
 80036a0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80036a4:	d15b      	bne.n	800375e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80036a6:	7ffb      	ldrb	r3, [r7, #31]
 80036a8:	2b08      	cmp	r3, #8
 80036aa:	d828      	bhi.n	80036fe <UART_SetConfig+0x3aa>
 80036ac:	a201      	add	r2, pc, #4	@ (adr r2, 80036b4 <UART_SetConfig+0x360>)
 80036ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036b2:	bf00      	nop
 80036b4:	080036d9 	.word	0x080036d9
 80036b8:	080036e1 	.word	0x080036e1
 80036bc:	080036e9 	.word	0x080036e9
 80036c0:	080036ff 	.word	0x080036ff
 80036c4:	080036ef 	.word	0x080036ef
 80036c8:	080036ff 	.word	0x080036ff
 80036cc:	080036ff 	.word	0x080036ff
 80036d0:	080036ff 	.word	0x080036ff
 80036d4:	080036f7 	.word	0x080036f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80036d8:	f7ff f884 	bl	80027e4 <HAL_RCC_GetPCLK1Freq>
 80036dc:	61b8      	str	r0, [r7, #24]
        break;
 80036de:	e013      	b.n	8003708 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80036e0:	f7ff f894 	bl	800280c <HAL_RCC_GetPCLK2Freq>
 80036e4:	61b8      	str	r0, [r7, #24]
        break;
 80036e6:	e00f      	b.n	8003708 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80036e8:	4b4b      	ldr	r3, [pc, #300]	@ (8003818 <UART_SetConfig+0x4c4>)
 80036ea:	61bb      	str	r3, [r7, #24]
        break;
 80036ec:	e00c      	b.n	8003708 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80036ee:	f7fe ffa7 	bl	8002640 <HAL_RCC_GetSysClockFreq>
 80036f2:	61b8      	str	r0, [r7, #24]
        break;
 80036f4:	e008      	b.n	8003708 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80036f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80036fa:	61bb      	str	r3, [r7, #24]
        break;
 80036fc:	e004      	b.n	8003708 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80036fe:	2300      	movs	r3, #0
 8003700:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	77bb      	strb	r3, [r7, #30]
        break;
 8003706:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003708:	69bb      	ldr	r3, [r7, #24]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d074      	beq.n	80037f8 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800370e:	69bb      	ldr	r3, [r7, #24]
 8003710:	005a      	lsls	r2, r3, #1
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	085b      	lsrs	r3, r3, #1
 8003718:	441a      	add	r2, r3
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003722:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003724:	693b      	ldr	r3, [r7, #16]
 8003726:	2b0f      	cmp	r3, #15
 8003728:	d916      	bls.n	8003758 <UART_SetConfig+0x404>
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003730:	d212      	bcs.n	8003758 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	b29b      	uxth	r3, r3
 8003736:	f023 030f 	bic.w	r3, r3, #15
 800373a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800373c:	693b      	ldr	r3, [r7, #16]
 800373e:	085b      	lsrs	r3, r3, #1
 8003740:	b29b      	uxth	r3, r3
 8003742:	f003 0307 	and.w	r3, r3, #7
 8003746:	b29a      	uxth	r2, r3
 8003748:	89fb      	ldrh	r3, [r7, #14]
 800374a:	4313      	orrs	r3, r2
 800374c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	89fa      	ldrh	r2, [r7, #14]
 8003754:	60da      	str	r2, [r3, #12]
 8003756:	e04f      	b.n	80037f8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003758:	2301      	movs	r3, #1
 800375a:	77bb      	strb	r3, [r7, #30]
 800375c:	e04c      	b.n	80037f8 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800375e:	7ffb      	ldrb	r3, [r7, #31]
 8003760:	2b08      	cmp	r3, #8
 8003762:	d828      	bhi.n	80037b6 <UART_SetConfig+0x462>
 8003764:	a201      	add	r2, pc, #4	@ (adr r2, 800376c <UART_SetConfig+0x418>)
 8003766:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800376a:	bf00      	nop
 800376c:	08003791 	.word	0x08003791
 8003770:	08003799 	.word	0x08003799
 8003774:	080037a1 	.word	0x080037a1
 8003778:	080037b7 	.word	0x080037b7
 800377c:	080037a7 	.word	0x080037a7
 8003780:	080037b7 	.word	0x080037b7
 8003784:	080037b7 	.word	0x080037b7
 8003788:	080037b7 	.word	0x080037b7
 800378c:	080037af 	.word	0x080037af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003790:	f7ff f828 	bl	80027e4 <HAL_RCC_GetPCLK1Freq>
 8003794:	61b8      	str	r0, [r7, #24]
        break;
 8003796:	e013      	b.n	80037c0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003798:	f7ff f838 	bl	800280c <HAL_RCC_GetPCLK2Freq>
 800379c:	61b8      	str	r0, [r7, #24]
        break;
 800379e:	e00f      	b.n	80037c0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80037a0:	4b1d      	ldr	r3, [pc, #116]	@ (8003818 <UART_SetConfig+0x4c4>)
 80037a2:	61bb      	str	r3, [r7, #24]
        break;
 80037a4:	e00c      	b.n	80037c0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80037a6:	f7fe ff4b 	bl	8002640 <HAL_RCC_GetSysClockFreq>
 80037aa:	61b8      	str	r0, [r7, #24]
        break;
 80037ac:	e008      	b.n	80037c0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80037ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80037b2:	61bb      	str	r3, [r7, #24]
        break;
 80037b4:	e004      	b.n	80037c0 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80037b6:	2300      	movs	r3, #0
 80037b8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	77bb      	strb	r3, [r7, #30]
        break;
 80037be:	bf00      	nop
    }

    if (pclk != 0U)
 80037c0:	69bb      	ldr	r3, [r7, #24]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d018      	beq.n	80037f8 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	085a      	lsrs	r2, r3, #1
 80037cc:	69bb      	ldr	r3, [r7, #24]
 80037ce:	441a      	add	r2, r3
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80037d8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80037da:	693b      	ldr	r3, [r7, #16]
 80037dc:	2b0f      	cmp	r3, #15
 80037de:	d909      	bls.n	80037f4 <UART_SetConfig+0x4a0>
 80037e0:	693b      	ldr	r3, [r7, #16]
 80037e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80037e6:	d205      	bcs.n	80037f4 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80037e8:	693b      	ldr	r3, [r7, #16]
 80037ea:	b29a      	uxth	r2, r3
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	60da      	str	r2, [r3, #12]
 80037f2:	e001      	b.n	80037f8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80037f4:	2301      	movs	r3, #1
 80037f6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2200      	movs	r2, #0
 80037fc:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2200      	movs	r2, #0
 8003802:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003804:	7fbb      	ldrb	r3, [r7, #30]
}
 8003806:	4618      	mov	r0, r3
 8003808:	3720      	adds	r7, #32
 800380a:	46bd      	mov	sp, r7
 800380c:	bd80      	pop	{r7, pc}
 800380e:	bf00      	nop
 8003810:	40007c00 	.word	0x40007c00
 8003814:	40023800 	.word	0x40023800
 8003818:	00f42400 	.word	0x00f42400

0800381c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800381c:	b480      	push	{r7}
 800381e:	b083      	sub	sp, #12
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003828:	f003 0308 	and.w	r3, r3, #8
 800382c:	2b00      	cmp	r3, #0
 800382e:	d00a      	beq.n	8003846 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	430a      	orrs	r2, r1
 8003844:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800384a:	f003 0301 	and.w	r3, r3, #1
 800384e:	2b00      	cmp	r3, #0
 8003850:	d00a      	beq.n	8003868 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	430a      	orrs	r2, r1
 8003866:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800386c:	f003 0302 	and.w	r3, r3, #2
 8003870:	2b00      	cmp	r3, #0
 8003872:	d00a      	beq.n	800388a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	430a      	orrs	r2, r1
 8003888:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800388e:	f003 0304 	and.w	r3, r3, #4
 8003892:	2b00      	cmp	r3, #0
 8003894:	d00a      	beq.n	80038ac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	430a      	orrs	r2, r1
 80038aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038b0:	f003 0310 	and.w	r3, r3, #16
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d00a      	beq.n	80038ce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	689b      	ldr	r3, [r3, #8]
 80038be:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	430a      	orrs	r2, r1
 80038cc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038d2:	f003 0320 	and.w	r3, r3, #32
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d00a      	beq.n	80038f0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	689b      	ldr	r3, [r3, #8]
 80038e0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	430a      	orrs	r2, r1
 80038ee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d01a      	beq.n	8003932 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	430a      	orrs	r2, r1
 8003910:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003916:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800391a:	d10a      	bne.n	8003932 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	430a      	orrs	r2, r1
 8003930:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003936:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800393a:	2b00      	cmp	r3, #0
 800393c:	d00a      	beq.n	8003954 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	430a      	orrs	r2, r1
 8003952:	605a      	str	r2, [r3, #4]
  }
}
 8003954:	bf00      	nop
 8003956:	370c      	adds	r7, #12
 8003958:	46bd      	mov	sp, r7
 800395a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395e:	4770      	bx	lr

08003960 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b08c      	sub	sp, #48	@ 0x30
 8003964:	af02      	add	r7, sp, #8
 8003966:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2200      	movs	r2, #0
 800396c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003970:	f7fd ff8c 	bl	800188c <HAL_GetTick>
 8003974:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f003 0308 	and.w	r3, r3, #8
 8003980:	2b08      	cmp	r3, #8
 8003982:	d12e      	bne.n	80039e2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003984:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003988:	9300      	str	r3, [sp, #0]
 800398a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800398c:	2200      	movs	r2, #0
 800398e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003992:	6878      	ldr	r0, [r7, #4]
 8003994:	f000 f83b 	bl	8003a0e <UART_WaitOnFlagUntilTimeout>
 8003998:	4603      	mov	r3, r0
 800399a:	2b00      	cmp	r3, #0
 800399c:	d021      	beq.n	80039e2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039a4:	693b      	ldr	r3, [r7, #16]
 80039a6:	e853 3f00 	ldrex	r3, [r3]
 80039aa:	60fb      	str	r3, [r7, #12]
   return(result);
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80039b2:	623b      	str	r3, [r7, #32]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	461a      	mov	r2, r3
 80039ba:	6a3b      	ldr	r3, [r7, #32]
 80039bc:	61fb      	str	r3, [r7, #28]
 80039be:	61ba      	str	r2, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039c0:	69b9      	ldr	r1, [r7, #24]
 80039c2:	69fa      	ldr	r2, [r7, #28]
 80039c4:	e841 2300 	strex	r3, r2, [r1]
 80039c8:	617b      	str	r3, [r7, #20]
   return(result);
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d1e6      	bne.n	800399e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2220      	movs	r2, #32
 80039d4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2200      	movs	r2, #0
 80039da:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80039de:	2303      	movs	r3, #3
 80039e0:	e011      	b.n	8003a06 <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2220      	movs	r2, #32
 80039e6:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2220      	movs	r2, #32
 80039ec:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2200      	movs	r2, #0
 80039f4:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2200      	movs	r2, #0
 80039fa:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2200      	movs	r2, #0
 8003a00:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003a04:	2300      	movs	r3, #0
}
 8003a06:	4618      	mov	r0, r3
 8003a08:	3728      	adds	r7, #40	@ 0x28
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bd80      	pop	{r7, pc}

08003a0e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003a0e:	b580      	push	{r7, lr}
 8003a10:	b084      	sub	sp, #16
 8003a12:	af00      	add	r7, sp, #0
 8003a14:	60f8      	str	r0, [r7, #12]
 8003a16:	60b9      	str	r1, [r7, #8]
 8003a18:	603b      	str	r3, [r7, #0]
 8003a1a:	4613      	mov	r3, r2
 8003a1c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a1e:	e04f      	b.n	8003ac0 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a20:	69bb      	ldr	r3, [r7, #24]
 8003a22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a26:	d04b      	beq.n	8003ac0 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a28:	f7fd ff30 	bl	800188c <HAL_GetTick>
 8003a2c:	4602      	mov	r2, r0
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	1ad3      	subs	r3, r2, r3
 8003a32:	69ba      	ldr	r2, [r7, #24]
 8003a34:	429a      	cmp	r2, r3
 8003a36:	d302      	bcc.n	8003a3e <UART_WaitOnFlagUntilTimeout+0x30>
 8003a38:	69bb      	ldr	r3, [r7, #24]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d101      	bne.n	8003a42 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003a3e:	2303      	movs	r3, #3
 8003a40:	e04e      	b.n	8003ae0 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f003 0304 	and.w	r3, r3, #4
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d037      	beq.n	8003ac0 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	2b80      	cmp	r3, #128	@ 0x80
 8003a54:	d034      	beq.n	8003ac0 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	2b40      	cmp	r3, #64	@ 0x40
 8003a5a:	d031      	beq.n	8003ac0 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	69db      	ldr	r3, [r3, #28]
 8003a62:	f003 0308 	and.w	r3, r3, #8
 8003a66:	2b08      	cmp	r3, #8
 8003a68:	d110      	bne.n	8003a8c <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	2208      	movs	r2, #8
 8003a70:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003a72:	68f8      	ldr	r0, [r7, #12]
 8003a74:	f000 f838 	bl	8003ae8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	2208      	movs	r2, #8
 8003a7c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	2200      	movs	r2, #0
 8003a84:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003a88:	2301      	movs	r3, #1
 8003a8a:	e029      	b.n	8003ae0 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	69db      	ldr	r3, [r3, #28]
 8003a92:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003a96:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003a9a:	d111      	bne.n	8003ac0 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003aa4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003aa6:	68f8      	ldr	r0, [r7, #12]
 8003aa8:	f000 f81e 	bl	8003ae8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	2220      	movs	r2, #32
 8003ab0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003abc:	2303      	movs	r3, #3
 8003abe:	e00f      	b.n	8003ae0 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	69da      	ldr	r2, [r3, #28]
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	4013      	ands	r3, r2
 8003aca:	68ba      	ldr	r2, [r7, #8]
 8003acc:	429a      	cmp	r2, r3
 8003ace:	bf0c      	ite	eq
 8003ad0:	2301      	moveq	r3, #1
 8003ad2:	2300      	movne	r3, #0
 8003ad4:	b2db      	uxtb	r3, r3
 8003ad6:	461a      	mov	r2, r3
 8003ad8:	79fb      	ldrb	r3, [r7, #7]
 8003ada:	429a      	cmp	r2, r3
 8003adc:	d0a0      	beq.n	8003a20 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003ade:	2300      	movs	r3, #0
}
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	3710      	adds	r7, #16
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bd80      	pop	{r7, pc}

08003ae8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	b095      	sub	sp, #84	@ 0x54
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003af6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003af8:	e853 3f00 	ldrex	r3, [r3]
 8003afc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003afe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b00:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003b04:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	461a      	mov	r2, r3
 8003b0c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003b0e:	643b      	str	r3, [r7, #64]	@ 0x40
 8003b10:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b12:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003b14:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003b16:	e841 2300 	strex	r3, r2, [r1]
 8003b1a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003b1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d1e6      	bne.n	8003af0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	3308      	adds	r3, #8
 8003b28:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b2a:	6a3b      	ldr	r3, [r7, #32]
 8003b2c:	e853 3f00 	ldrex	r3, [r3]
 8003b30:	61fb      	str	r3, [r7, #28]
   return(result);
 8003b32:	69fb      	ldr	r3, [r7, #28]
 8003b34:	f023 0301 	bic.w	r3, r3, #1
 8003b38:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	3308      	adds	r3, #8
 8003b40:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003b42:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003b44:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b46:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003b48:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003b4a:	e841 2300 	strex	r3, r2, [r1]
 8003b4e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003b50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d1e5      	bne.n	8003b22 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b5a:	2b01      	cmp	r3, #1
 8003b5c:	d118      	bne.n	8003b90 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	e853 3f00 	ldrex	r3, [r3]
 8003b6a:	60bb      	str	r3, [r7, #8]
   return(result);
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	f023 0310 	bic.w	r3, r3, #16
 8003b72:	647b      	str	r3, [r7, #68]	@ 0x44
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	461a      	mov	r2, r3
 8003b7a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003b7c:	61bb      	str	r3, [r7, #24]
 8003b7e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b80:	6979      	ldr	r1, [r7, #20]
 8003b82:	69ba      	ldr	r2, [r7, #24]
 8003b84:	e841 2300 	strex	r3, r2, [r1]
 8003b88:	613b      	str	r3, [r7, #16]
   return(result);
 8003b8a:	693b      	ldr	r3, [r7, #16]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d1e6      	bne.n	8003b5e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2220      	movs	r2, #32
 8003b94:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003ba4:	bf00      	nop
 8003ba6:	3754      	adds	r7, #84	@ 0x54
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bae:	4770      	bx	lr

08003bb0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b085      	sub	sp, #20
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003bba:	2300      	movs	r3, #0
 8003bbc:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003bbe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003bc2:	2b84      	cmp	r3, #132	@ 0x84
 8003bc4:	d005      	beq.n	8003bd2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003bc6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	4413      	add	r3, r2
 8003bce:	3303      	adds	r3, #3
 8003bd0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	3714      	adds	r7, #20
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bde:	4770      	bx	lr

08003be0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003be4:	f000 fc82 	bl	80044ec <vTaskStartScheduler>
  
  return osOK;
 8003be8:	2300      	movs	r3, #0
}
 8003bea:	4618      	mov	r0, r3
 8003bec:	bd80      	pop	{r7, pc}

08003bee <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003bee:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003bf0:	b089      	sub	sp, #36	@ 0x24
 8003bf2:	af04      	add	r7, sp, #16
 8003bf4:	6078      	str	r0, [r7, #4]
 8003bf6:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	695b      	ldr	r3, [r3, #20]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d020      	beq.n	8003c42 <osThreadCreate+0x54>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	699b      	ldr	r3, [r3, #24]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d01c      	beq.n	8003c42 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	685c      	ldr	r4, [r3, #4]
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	691e      	ldr	r6, [r3, #16]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	f7ff ffc8 	bl	8003bb0 <makeFreeRtosPriority>
 8003c20:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	695b      	ldr	r3, [r3, #20]
 8003c26:	687a      	ldr	r2, [r7, #4]
 8003c28:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003c2a:	9202      	str	r2, [sp, #8]
 8003c2c:	9301      	str	r3, [sp, #4]
 8003c2e:	9100      	str	r1, [sp, #0]
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	4632      	mov	r2, r6
 8003c34:	4629      	mov	r1, r5
 8003c36:	4620      	mov	r0, r4
 8003c38:	f000 f8ed 	bl	8003e16 <xTaskCreateStatic>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	60fb      	str	r3, [r7, #12]
 8003c40:	e01c      	b.n	8003c7c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	685c      	ldr	r4, [r3, #4]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003c4e:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003c56:	4618      	mov	r0, r3
 8003c58:	f7ff ffaa 	bl	8003bb0 <makeFreeRtosPriority>
 8003c5c:	4602      	mov	r2, r0
 8003c5e:	f107 030c 	add.w	r3, r7, #12
 8003c62:	9301      	str	r3, [sp, #4]
 8003c64:	9200      	str	r2, [sp, #0]
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	4632      	mov	r2, r6
 8003c6a:	4629      	mov	r1, r5
 8003c6c:	4620      	mov	r0, r4
 8003c6e:	f000 f938 	bl	8003ee2 <xTaskCreate>
 8003c72:	4603      	mov	r3, r0
 8003c74:	2b01      	cmp	r3, #1
 8003c76:	d001      	beq.n	8003c7c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003c78:	2300      	movs	r3, #0
 8003c7a:	e000      	b.n	8003c7e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
}
 8003c7e:	4618      	mov	r0, r3
 8003c80:	3714      	adds	r7, #20
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003c86 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003c86:	b580      	push	{r7, lr}
 8003c88:	b084      	sub	sp, #16
 8003c8a:	af00      	add	r7, sp, #0
 8003c8c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d001      	beq.n	8003c9c <osDelay+0x16>
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	e000      	b.n	8003c9e <osDelay+0x18>
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	f000 fa58 	bl	8004154 <vTaskDelay>
  
  return osOK;
 8003ca4:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	3710      	adds	r7, #16
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bd80      	pop	{r7, pc}

08003cae <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003cae:	b480      	push	{r7}
 8003cb0:	b083      	sub	sp, #12
 8003cb2:	af00      	add	r7, sp, #0
 8003cb4:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	f103 0208 	add.w	r2, r3, #8
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	f04f 32ff 	mov.w	r2, #4294967295
 8003cc6:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	f103 0208 	add.w	r2, r3, #8
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	f103 0208 	add.w	r2, r3, #8
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003ce2:	bf00      	nop
 8003ce4:	370c      	adds	r7, #12
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cec:	4770      	bx	lr

08003cee <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003cee:	b480      	push	{r7}
 8003cf0:	b083      	sub	sp, #12
 8003cf2:	af00      	add	r7, sp, #0
 8003cf4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003cfc:	bf00      	nop
 8003cfe:	370c      	adds	r7, #12
 8003d00:	46bd      	mov	sp, r7
 8003d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d06:	4770      	bx	lr

08003d08 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003d08:	b480      	push	{r7}
 8003d0a:	b085      	sub	sp, #20
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
 8003d10:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	68fa      	ldr	r2, [r7, #12]
 8003d1c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	689a      	ldr	r2, [r3, #8]
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	689b      	ldr	r3, [r3, #8]
 8003d2a:	683a      	ldr	r2, [r7, #0]
 8003d2c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	683a      	ldr	r2, [r7, #0]
 8003d32:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	687a      	ldr	r2, [r7, #4]
 8003d38:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	1c5a      	adds	r2, r3, #1
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	601a      	str	r2, [r3, #0]
}
 8003d44:	bf00      	nop
 8003d46:	3714      	adds	r7, #20
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4e:	4770      	bx	lr

08003d50 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003d50:	b480      	push	{r7}
 8003d52:	b085      	sub	sp, #20
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
 8003d58:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d66:	d103      	bne.n	8003d70 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	691b      	ldr	r3, [r3, #16]
 8003d6c:	60fb      	str	r3, [r7, #12]
 8003d6e:	e00c      	b.n	8003d8a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	3308      	adds	r3, #8
 8003d74:	60fb      	str	r3, [r7, #12]
 8003d76:	e002      	b.n	8003d7e <vListInsert+0x2e>
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	60fb      	str	r3, [r7, #12]
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	68ba      	ldr	r2, [r7, #8]
 8003d86:	429a      	cmp	r2, r3
 8003d88:	d2f6      	bcs.n	8003d78 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	685a      	ldr	r2, [r3, #4]
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	683a      	ldr	r2, [r7, #0]
 8003d98:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	68fa      	ldr	r2, [r7, #12]
 8003d9e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	683a      	ldr	r2, [r7, #0]
 8003da4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	687a      	ldr	r2, [r7, #4]
 8003daa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	1c5a      	adds	r2, r3, #1
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	601a      	str	r2, [r3, #0]
}
 8003db6:	bf00      	nop
 8003db8:	3714      	adds	r7, #20
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc0:	4770      	bx	lr

08003dc2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003dc2:	b480      	push	{r7}
 8003dc4:	b085      	sub	sp, #20
 8003dc6:	af00      	add	r7, sp, #0
 8003dc8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	691b      	ldr	r3, [r3, #16]
 8003dce:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	687a      	ldr	r2, [r7, #4]
 8003dd6:	6892      	ldr	r2, [r2, #8]
 8003dd8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	689b      	ldr	r3, [r3, #8]
 8003dde:	687a      	ldr	r2, [r7, #4]
 8003de0:	6852      	ldr	r2, [r2, #4]
 8003de2:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	687a      	ldr	r2, [r7, #4]
 8003dea:	429a      	cmp	r2, r3
 8003dec:	d103      	bne.n	8003df6 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	689a      	ldr	r2, [r3, #8]
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	1e5a      	subs	r2, r3, #1
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
}
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	3714      	adds	r7, #20
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e14:	4770      	bx	lr

08003e16 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003e16:	b580      	push	{r7, lr}
 8003e18:	b08e      	sub	sp, #56	@ 0x38
 8003e1a:	af04      	add	r7, sp, #16
 8003e1c:	60f8      	str	r0, [r7, #12]
 8003e1e:	60b9      	str	r1, [r7, #8]
 8003e20:	607a      	str	r2, [r7, #4]
 8003e22:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003e24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d10d      	bne.n	8003e46 <xTaskCreateStatic+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003e2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e2e:	b672      	cpsid	i
 8003e30:	f383 8811 	msr	BASEPRI, r3
 8003e34:	f3bf 8f6f 	isb	sy
 8003e38:	f3bf 8f4f 	dsb	sy
 8003e3c:	b662      	cpsie	i
 8003e3e:	623b      	str	r3, [r7, #32]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003e40:	bf00      	nop
 8003e42:	bf00      	nop
 8003e44:	e7fd      	b.n	8003e42 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8003e46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d10d      	bne.n	8003e68 <xTaskCreateStatic+0x52>
	__asm volatile
 8003e4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e50:	b672      	cpsid	i
 8003e52:	f383 8811 	msr	BASEPRI, r3
 8003e56:	f3bf 8f6f 	isb	sy
 8003e5a:	f3bf 8f4f 	dsb	sy
 8003e5e:	b662      	cpsie	i
 8003e60:	61fb      	str	r3, [r7, #28]
}
 8003e62:	bf00      	nop
 8003e64:	bf00      	nop
 8003e66:	e7fd      	b.n	8003e64 <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003e68:	2354      	movs	r3, #84	@ 0x54
 8003e6a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003e6c:	693b      	ldr	r3, [r7, #16]
 8003e6e:	2b54      	cmp	r3, #84	@ 0x54
 8003e70:	d00d      	beq.n	8003e8e <xTaskCreateStatic+0x78>
	__asm volatile
 8003e72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e76:	b672      	cpsid	i
 8003e78:	f383 8811 	msr	BASEPRI, r3
 8003e7c:	f3bf 8f6f 	isb	sy
 8003e80:	f3bf 8f4f 	dsb	sy
 8003e84:	b662      	cpsie	i
 8003e86:	61bb      	str	r3, [r7, #24]
}
 8003e88:	bf00      	nop
 8003e8a:	bf00      	nop
 8003e8c:	e7fd      	b.n	8003e8a <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003e8e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003e90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d01e      	beq.n	8003ed4 <xTaskCreateStatic+0xbe>
 8003e96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d01b      	beq.n	8003ed4 <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003e9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e9e:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003ea0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ea2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003ea4:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003ea6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ea8:	2202      	movs	r2, #2
 8003eaa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003eae:	2300      	movs	r3, #0
 8003eb0:	9303      	str	r3, [sp, #12]
 8003eb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eb4:	9302      	str	r3, [sp, #8]
 8003eb6:	f107 0314 	add.w	r3, r7, #20
 8003eba:	9301      	str	r3, [sp, #4]
 8003ebc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ebe:	9300      	str	r3, [sp, #0]
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	687a      	ldr	r2, [r7, #4]
 8003ec4:	68b9      	ldr	r1, [r7, #8]
 8003ec6:	68f8      	ldr	r0, [r7, #12]
 8003ec8:	f000 f850 	bl	8003f6c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003ecc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003ece:	f000 f8d7 	bl	8004080 <prvAddNewTaskToReadyList>
 8003ed2:	e001      	b.n	8003ed8 <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003ed8:	697b      	ldr	r3, [r7, #20]
	}
 8003eda:	4618      	mov	r0, r3
 8003edc:	3728      	adds	r7, #40	@ 0x28
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bd80      	pop	{r7, pc}

08003ee2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003ee2:	b580      	push	{r7, lr}
 8003ee4:	b08c      	sub	sp, #48	@ 0x30
 8003ee6:	af04      	add	r7, sp, #16
 8003ee8:	60f8      	str	r0, [r7, #12]
 8003eea:	60b9      	str	r1, [r7, #8]
 8003eec:	603b      	str	r3, [r7, #0]
 8003eee:	4613      	mov	r3, r2
 8003ef0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003ef2:	88fb      	ldrh	r3, [r7, #6]
 8003ef4:	009b      	lsls	r3, r3, #2
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	f001 f878 	bl	8004fec <pvPortMalloc>
 8003efc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003efe:	697b      	ldr	r3, [r7, #20]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d00e      	beq.n	8003f22 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003f04:	2054      	movs	r0, #84	@ 0x54
 8003f06:	f001 f871 	bl	8004fec <pvPortMalloc>
 8003f0a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003f0c:	69fb      	ldr	r3, [r7, #28]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d003      	beq.n	8003f1a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003f12:	69fb      	ldr	r3, [r7, #28]
 8003f14:	697a      	ldr	r2, [r7, #20]
 8003f16:	631a      	str	r2, [r3, #48]	@ 0x30
 8003f18:	e005      	b.n	8003f26 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003f1a:	6978      	ldr	r0, [r7, #20]
 8003f1c:	f001 f934 	bl	8005188 <vPortFree>
 8003f20:	e001      	b.n	8003f26 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003f22:	2300      	movs	r3, #0
 8003f24:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003f26:	69fb      	ldr	r3, [r7, #28]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d017      	beq.n	8003f5c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003f2c:	69fb      	ldr	r3, [r7, #28]
 8003f2e:	2200      	movs	r2, #0
 8003f30:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003f34:	88fa      	ldrh	r2, [r7, #6]
 8003f36:	2300      	movs	r3, #0
 8003f38:	9303      	str	r3, [sp, #12]
 8003f3a:	69fb      	ldr	r3, [r7, #28]
 8003f3c:	9302      	str	r3, [sp, #8]
 8003f3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f40:	9301      	str	r3, [sp, #4]
 8003f42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f44:	9300      	str	r3, [sp, #0]
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	68b9      	ldr	r1, [r7, #8]
 8003f4a:	68f8      	ldr	r0, [r7, #12]
 8003f4c:	f000 f80e 	bl	8003f6c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003f50:	69f8      	ldr	r0, [r7, #28]
 8003f52:	f000 f895 	bl	8004080 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003f56:	2301      	movs	r3, #1
 8003f58:	61bb      	str	r3, [r7, #24]
 8003f5a:	e002      	b.n	8003f62 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003f5c:	f04f 33ff 	mov.w	r3, #4294967295
 8003f60:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003f62:	69bb      	ldr	r3, [r7, #24]
	}
 8003f64:	4618      	mov	r0, r3
 8003f66:	3720      	adds	r7, #32
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	bd80      	pop	{r7, pc}

08003f6c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b088      	sub	sp, #32
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	60f8      	str	r0, [r7, #12]
 8003f74:	60b9      	str	r1, [r7, #8]
 8003f76:	607a      	str	r2, [r7, #4]
 8003f78:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003f7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f7c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003f7e:	6879      	ldr	r1, [r7, #4]
 8003f80:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8003f84:	440b      	add	r3, r1
 8003f86:	009b      	lsls	r3, r3, #2
 8003f88:	4413      	add	r3, r2
 8003f8a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003f8c:	69bb      	ldr	r3, [r7, #24]
 8003f8e:	f023 0307 	bic.w	r3, r3, #7
 8003f92:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003f94:	69bb      	ldr	r3, [r7, #24]
 8003f96:	f003 0307 	and.w	r3, r3, #7
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d00d      	beq.n	8003fba <prvInitialiseNewTask+0x4e>
	__asm volatile
 8003f9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fa2:	b672      	cpsid	i
 8003fa4:	f383 8811 	msr	BASEPRI, r3
 8003fa8:	f3bf 8f6f 	isb	sy
 8003fac:	f3bf 8f4f 	dsb	sy
 8003fb0:	b662      	cpsie	i
 8003fb2:	617b      	str	r3, [r7, #20]
}
 8003fb4:	bf00      	nop
 8003fb6:	bf00      	nop
 8003fb8:	e7fd      	b.n	8003fb6 <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d01f      	beq.n	8004000 <prvInitialiseNewTask+0x94>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	61fb      	str	r3, [r7, #28]
 8003fc4:	e012      	b.n	8003fec <prvInitialiseNewTask+0x80>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003fc6:	68ba      	ldr	r2, [r7, #8]
 8003fc8:	69fb      	ldr	r3, [r7, #28]
 8003fca:	4413      	add	r3, r2
 8003fcc:	7819      	ldrb	r1, [r3, #0]
 8003fce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003fd0:	69fb      	ldr	r3, [r7, #28]
 8003fd2:	4413      	add	r3, r2
 8003fd4:	3334      	adds	r3, #52	@ 0x34
 8003fd6:	460a      	mov	r2, r1
 8003fd8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003fda:	68ba      	ldr	r2, [r7, #8]
 8003fdc:	69fb      	ldr	r3, [r7, #28]
 8003fde:	4413      	add	r3, r2
 8003fe0:	781b      	ldrb	r3, [r3, #0]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d006      	beq.n	8003ff4 <prvInitialiseNewTask+0x88>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003fe6:	69fb      	ldr	r3, [r7, #28]
 8003fe8:	3301      	adds	r3, #1
 8003fea:	61fb      	str	r3, [r7, #28]
 8003fec:	69fb      	ldr	r3, [r7, #28]
 8003fee:	2b0f      	cmp	r3, #15
 8003ff0:	d9e9      	bls.n	8003fc6 <prvInitialiseNewTask+0x5a>
 8003ff2:	e000      	b.n	8003ff6 <prvInitialiseNewTask+0x8a>
			{
				break;
 8003ff4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003ff6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003ffe:	e003      	b.n	8004008 <prvInitialiseNewTask+0x9c>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004000:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004002:	2200      	movs	r2, #0
 8004004:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004008:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800400a:	2b06      	cmp	r3, #6
 800400c:	d901      	bls.n	8004012 <prvInitialiseNewTask+0xa6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800400e:	2306      	movs	r3, #6
 8004010:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004012:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004014:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004016:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004018:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800401a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800401c:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800401e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004020:	2200      	movs	r2, #0
 8004022:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004024:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004026:	3304      	adds	r3, #4
 8004028:	4618      	mov	r0, r3
 800402a:	f7ff fe60 	bl	8003cee <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800402e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004030:	3318      	adds	r3, #24
 8004032:	4618      	mov	r0, r3
 8004034:	f7ff fe5b 	bl	8003cee <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004038:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800403a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800403c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800403e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004040:	f1c3 0207 	rsb	r2, r3, #7
 8004044:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004046:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004048:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800404a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800404c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800404e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004050:	2200      	movs	r2, #0
 8004052:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004054:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004056:	2200      	movs	r2, #0
 8004058:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800405c:	683a      	ldr	r2, [r7, #0]
 800405e:	68f9      	ldr	r1, [r7, #12]
 8004060:	69b8      	ldr	r0, [r7, #24]
 8004062:	f000 fdcd 	bl	8004c00 <pxPortInitialiseStack>
 8004066:	4602      	mov	r2, r0
 8004068:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800406a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800406c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800406e:	2b00      	cmp	r3, #0
 8004070:	d002      	beq.n	8004078 <prvInitialiseNewTask+0x10c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004072:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004074:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004076:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004078:	bf00      	nop
 800407a:	3720      	adds	r7, #32
 800407c:	46bd      	mov	sp, r7
 800407e:	bd80      	pop	{r7, pc}

08004080 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b082      	sub	sp, #8
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004088:	f000 fec8 	bl	8004e1c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800408c:	4b2a      	ldr	r3, [pc, #168]	@ (8004138 <prvAddNewTaskToReadyList+0xb8>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	3301      	adds	r3, #1
 8004092:	4a29      	ldr	r2, [pc, #164]	@ (8004138 <prvAddNewTaskToReadyList+0xb8>)
 8004094:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004096:	4b29      	ldr	r3, [pc, #164]	@ (800413c <prvAddNewTaskToReadyList+0xbc>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d109      	bne.n	80040b2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800409e:	4a27      	ldr	r2, [pc, #156]	@ (800413c <prvAddNewTaskToReadyList+0xbc>)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80040a4:	4b24      	ldr	r3, [pc, #144]	@ (8004138 <prvAddNewTaskToReadyList+0xb8>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	2b01      	cmp	r3, #1
 80040aa:	d110      	bne.n	80040ce <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80040ac:	f000 fc64 	bl	8004978 <prvInitialiseTaskLists>
 80040b0:	e00d      	b.n	80040ce <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80040b2:	4b23      	ldr	r3, [pc, #140]	@ (8004140 <prvAddNewTaskToReadyList+0xc0>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d109      	bne.n	80040ce <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80040ba:	4b20      	ldr	r3, [pc, #128]	@ (800413c <prvAddNewTaskToReadyList+0xbc>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040c4:	429a      	cmp	r2, r3
 80040c6:	d802      	bhi.n	80040ce <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80040c8:	4a1c      	ldr	r2, [pc, #112]	@ (800413c <prvAddNewTaskToReadyList+0xbc>)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80040ce:	4b1d      	ldr	r3, [pc, #116]	@ (8004144 <prvAddNewTaskToReadyList+0xc4>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	3301      	adds	r3, #1
 80040d4:	4a1b      	ldr	r2, [pc, #108]	@ (8004144 <prvAddNewTaskToReadyList+0xc4>)
 80040d6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040dc:	2201      	movs	r2, #1
 80040de:	409a      	lsls	r2, r3
 80040e0:	4b19      	ldr	r3, [pc, #100]	@ (8004148 <prvAddNewTaskToReadyList+0xc8>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4313      	orrs	r3, r2
 80040e6:	4a18      	ldr	r2, [pc, #96]	@ (8004148 <prvAddNewTaskToReadyList+0xc8>)
 80040e8:	6013      	str	r3, [r2, #0]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80040ee:	4613      	mov	r3, r2
 80040f0:	009b      	lsls	r3, r3, #2
 80040f2:	4413      	add	r3, r2
 80040f4:	009b      	lsls	r3, r3, #2
 80040f6:	4a15      	ldr	r2, [pc, #84]	@ (800414c <prvAddNewTaskToReadyList+0xcc>)
 80040f8:	441a      	add	r2, r3
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	3304      	adds	r3, #4
 80040fe:	4619      	mov	r1, r3
 8004100:	4610      	mov	r0, r2
 8004102:	f7ff fe01 	bl	8003d08 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004106:	f000 febf 	bl	8004e88 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800410a:	4b0d      	ldr	r3, [pc, #52]	@ (8004140 <prvAddNewTaskToReadyList+0xc0>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d00e      	beq.n	8004130 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004112:	4b0a      	ldr	r3, [pc, #40]	@ (800413c <prvAddNewTaskToReadyList+0xbc>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800411c:	429a      	cmp	r2, r3
 800411e:	d207      	bcs.n	8004130 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004120:	4b0b      	ldr	r3, [pc, #44]	@ (8004150 <prvAddNewTaskToReadyList+0xd0>)
 8004122:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004126:	601a      	str	r2, [r3, #0]
 8004128:	f3bf 8f4f 	dsb	sy
 800412c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004130:	bf00      	nop
 8004132:	3708      	adds	r7, #8
 8004134:	46bd      	mov	sp, r7
 8004136:	bd80      	pop	{r7, pc}
 8004138:	20000a8c 	.word	0x20000a8c
 800413c:	2000098c 	.word	0x2000098c
 8004140:	20000a98 	.word	0x20000a98
 8004144:	20000aa8 	.word	0x20000aa8
 8004148:	20000a94 	.word	0x20000a94
 800414c:	20000990 	.word	0x20000990
 8004150:	e000ed04 	.word	0xe000ed04

08004154 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004154:	b580      	push	{r7, lr}
 8004156:	b084      	sub	sp, #16
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800415c:	2300      	movs	r3, #0
 800415e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d01a      	beq.n	800419c <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004166:	4b15      	ldr	r3, [pc, #84]	@ (80041bc <vTaskDelay+0x68>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d00d      	beq.n	800418a <vTaskDelay+0x36>
	__asm volatile
 800416e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004172:	b672      	cpsid	i
 8004174:	f383 8811 	msr	BASEPRI, r3
 8004178:	f3bf 8f6f 	isb	sy
 800417c:	f3bf 8f4f 	dsb	sy
 8004180:	b662      	cpsie	i
 8004182:	60bb      	str	r3, [r7, #8]
}
 8004184:	bf00      	nop
 8004186:	bf00      	nop
 8004188:	e7fd      	b.n	8004186 <vTaskDelay+0x32>
			vTaskSuspendAll();
 800418a:	f000 fa15 	bl	80045b8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800418e:	2100      	movs	r1, #0
 8004190:	6878      	ldr	r0, [r7, #4]
 8004192:	f000 fccf 	bl	8004b34 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004196:	f000 fa1d 	bl	80045d4 <xTaskResumeAll>
 800419a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d107      	bne.n	80041b2 <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 80041a2:	4b07      	ldr	r3, [pc, #28]	@ (80041c0 <vTaskDelay+0x6c>)
 80041a4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80041a8:	601a      	str	r2, [r3, #0]
 80041aa:	f3bf 8f4f 	dsb	sy
 80041ae:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80041b2:	bf00      	nop
 80041b4:	3710      	adds	r7, #16
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bd80      	pop	{r7, pc}
 80041ba:	bf00      	nop
 80041bc:	20000ab4 	.word	0x20000ab4
 80041c0:	e000ed04 	.word	0xe000ed04

080041c4 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b088      	sub	sp, #32
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 80041d0:	69bb      	ldr	r3, [r7, #24]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d10d      	bne.n	80041f2 <eTaskGetState+0x2e>
	__asm volatile
 80041d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041da:	b672      	cpsid	i
 80041dc:	f383 8811 	msr	BASEPRI, r3
 80041e0:	f3bf 8f6f 	isb	sy
 80041e4:	f3bf 8f4f 	dsb	sy
 80041e8:	b662      	cpsie	i
 80041ea:	60bb      	str	r3, [r7, #8]
}
 80041ec:	bf00      	nop
 80041ee:	bf00      	nop
 80041f0:	e7fd      	b.n	80041ee <eTaskGetState+0x2a>

		if( pxTCB == pxCurrentTCB )
 80041f2:	4b24      	ldr	r3, [pc, #144]	@ (8004284 <eTaskGetState+0xc0>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	69ba      	ldr	r2, [r7, #24]
 80041f8:	429a      	cmp	r2, r3
 80041fa:	d102      	bne.n	8004202 <eTaskGetState+0x3e>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 80041fc:	2300      	movs	r3, #0
 80041fe:	77fb      	strb	r3, [r7, #31]
 8004200:	e03a      	b.n	8004278 <eTaskGetState+0xb4>
		}
		else
		{
			taskENTER_CRITICAL();
 8004202:	f000 fe0b 	bl	8004e1c <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 8004206:	69bb      	ldr	r3, [r7, #24]
 8004208:	695b      	ldr	r3, [r3, #20]
 800420a:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 800420c:	4b1e      	ldr	r3, [pc, #120]	@ (8004288 <eTaskGetState+0xc4>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 8004212:	4b1e      	ldr	r3, [pc, #120]	@ (800428c <eTaskGetState+0xc8>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 8004218:	f000 fe36 	bl	8004e88 <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 800421c:	697a      	ldr	r2, [r7, #20]
 800421e:	693b      	ldr	r3, [r7, #16]
 8004220:	429a      	cmp	r2, r3
 8004222:	d003      	beq.n	800422c <eTaskGetState+0x68>
 8004224:	697a      	ldr	r2, [r7, #20]
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	429a      	cmp	r2, r3
 800422a:	d102      	bne.n	8004232 <eTaskGetState+0x6e>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 800422c:	2302      	movs	r3, #2
 800422e:	77fb      	strb	r3, [r7, #31]
 8004230:	e022      	b.n	8004278 <eTaskGetState+0xb4>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 8004232:	697b      	ldr	r3, [r7, #20]
 8004234:	4a16      	ldr	r2, [pc, #88]	@ (8004290 <eTaskGetState+0xcc>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d112      	bne.n	8004260 <eTaskGetState+0x9c>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 800423a:	69bb      	ldr	r3, [r7, #24]
 800423c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800423e:	2b00      	cmp	r3, #0
 8004240:	d10b      	bne.n	800425a <eTaskGetState+0x96>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8004242:	69bb      	ldr	r3, [r7, #24]
 8004244:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004248:	b2db      	uxtb	r3, r3
 800424a:	2b01      	cmp	r3, #1
 800424c:	d102      	bne.n	8004254 <eTaskGetState+0x90>
							{
								eReturn = eBlocked;
 800424e:	2302      	movs	r3, #2
 8004250:	77fb      	strb	r3, [r7, #31]
 8004252:	e011      	b.n	8004278 <eTaskGetState+0xb4>
							}
							else
							{
								eReturn = eSuspended;
 8004254:	2303      	movs	r3, #3
 8004256:	77fb      	strb	r3, [r7, #31]
 8004258:	e00e      	b.n	8004278 <eTaskGetState+0xb4>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 800425a:	2302      	movs	r3, #2
 800425c:	77fb      	strb	r3, [r7, #31]
 800425e:	e00b      	b.n	8004278 <eTaskGetState+0xb4>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 8004260:	697b      	ldr	r3, [r7, #20]
 8004262:	4a0c      	ldr	r2, [pc, #48]	@ (8004294 <eTaskGetState+0xd0>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d002      	beq.n	800426e <eTaskGetState+0xaa>
 8004268:	697b      	ldr	r3, [r7, #20]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d102      	bne.n	8004274 <eTaskGetState+0xb0>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 800426e:	2304      	movs	r3, #4
 8004270:	77fb      	strb	r3, [r7, #31]
 8004272:	e001      	b.n	8004278 <eTaskGetState+0xb4>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 8004274:	2301      	movs	r3, #1
 8004276:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 8004278:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800427a:	4618      	mov	r0, r3
 800427c:	3720      	adds	r7, #32
 800427e:	46bd      	mov	sp, r7
 8004280:	bd80      	pop	{r7, pc}
 8004282:	bf00      	nop
 8004284:	2000098c 	.word	0x2000098c
 8004288:	20000a44 	.word	0x20000a44
 800428c:	20000a48 	.word	0x20000a48
 8004290:	20000a78 	.word	0x20000a78
 8004294:	20000a60 	.word	0x20000a60

08004298 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8004298:	b580      	push	{r7, lr}
 800429a:	b084      	sub	sp, #16
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80042a0:	f000 fdbc 	bl	8004e1c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d102      	bne.n	80042b0 <vTaskSuspend+0x18>
 80042aa:	4b3e      	ldr	r3, [pc, #248]	@ (80043a4 <vTaskSuspend+0x10c>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	e000      	b.n	80042b2 <vTaskSuspend+0x1a>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	3304      	adds	r3, #4
 80042b8:	4618      	mov	r0, r3
 80042ba:	f7ff fd82 	bl	8003dc2 <uxListRemove>
 80042be:	4603      	mov	r3, r0
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d115      	bne.n	80042f0 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80042c8:	4937      	ldr	r1, [pc, #220]	@ (80043a8 <vTaskSuspend+0x110>)
 80042ca:	4613      	mov	r3, r2
 80042cc:	009b      	lsls	r3, r3, #2
 80042ce:	4413      	add	r3, r2
 80042d0:	009b      	lsls	r3, r3, #2
 80042d2:	440b      	add	r3, r1
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d10a      	bne.n	80042f0 <vTaskSuspend+0x58>
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042de:	2201      	movs	r2, #1
 80042e0:	fa02 f303 	lsl.w	r3, r2, r3
 80042e4:	43da      	mvns	r2, r3
 80042e6:	4b31      	ldr	r3, [pc, #196]	@ (80043ac <vTaskSuspend+0x114>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4013      	ands	r3, r2
 80042ec:	4a2f      	ldr	r2, [pc, #188]	@ (80043ac <vTaskSuspend+0x114>)
 80042ee:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d004      	beq.n	8004302 <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	3318      	adds	r3, #24
 80042fc:	4618      	mov	r0, r3
 80042fe:	f7ff fd60 	bl	8003dc2 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	3304      	adds	r3, #4
 8004306:	4619      	mov	r1, r3
 8004308:	4829      	ldr	r0, [pc, #164]	@ (80043b0 <vTaskSuspend+0x118>)
 800430a:	f7ff fcfd 	bl	8003d08 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004314:	b2db      	uxtb	r3, r3
 8004316:	2b01      	cmp	r3, #1
 8004318:	d103      	bne.n	8004322 <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	2200      	movs	r2, #0
 800431e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8004322:	f000 fdb1 	bl	8004e88 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8004326:	4b23      	ldr	r3, [pc, #140]	@ (80043b4 <vTaskSuspend+0x11c>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d005      	beq.n	800433a <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800432e:	f000 fd75 	bl	8004e1c <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8004332:	f000 fbc1 	bl	8004ab8 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8004336:	f000 fda7 	bl	8004e88 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800433a:	4b1a      	ldr	r3, [pc, #104]	@ (80043a4 <vTaskSuspend+0x10c>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	68fa      	ldr	r2, [r7, #12]
 8004340:	429a      	cmp	r2, r3
 8004342:	d12a      	bne.n	800439a <vTaskSuspend+0x102>
		{
			if( xSchedulerRunning != pdFALSE )
 8004344:	4b1b      	ldr	r3, [pc, #108]	@ (80043b4 <vTaskSuspend+0x11c>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d01a      	beq.n	8004382 <vTaskSuspend+0xea>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800434c:	4b1a      	ldr	r3, [pc, #104]	@ (80043b8 <vTaskSuspend+0x120>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d00d      	beq.n	8004370 <vTaskSuspend+0xd8>
	__asm volatile
 8004354:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004358:	b672      	cpsid	i
 800435a:	f383 8811 	msr	BASEPRI, r3
 800435e:	f3bf 8f6f 	isb	sy
 8004362:	f3bf 8f4f 	dsb	sy
 8004366:	b662      	cpsie	i
 8004368:	60bb      	str	r3, [r7, #8]
}
 800436a:	bf00      	nop
 800436c:	bf00      	nop
 800436e:	e7fd      	b.n	800436c <vTaskSuspend+0xd4>
				portYIELD_WITHIN_API();
 8004370:	4b12      	ldr	r3, [pc, #72]	@ (80043bc <vTaskSuspend+0x124>)
 8004372:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004376:	601a      	str	r2, [r3, #0]
 8004378:	f3bf 8f4f 	dsb	sy
 800437c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004380:	e00b      	b.n	800439a <vTaskSuspend+0x102>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8004382:	4b0b      	ldr	r3, [pc, #44]	@ (80043b0 <vTaskSuspend+0x118>)
 8004384:	681a      	ldr	r2, [r3, #0]
 8004386:	4b0e      	ldr	r3, [pc, #56]	@ (80043c0 <vTaskSuspend+0x128>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	429a      	cmp	r2, r3
 800438c:	d103      	bne.n	8004396 <vTaskSuspend+0xfe>
					pxCurrentTCB = NULL;
 800438e:	4b05      	ldr	r3, [pc, #20]	@ (80043a4 <vTaskSuspend+0x10c>)
 8004390:	2200      	movs	r2, #0
 8004392:	601a      	str	r2, [r3, #0]
	}
 8004394:	e001      	b.n	800439a <vTaskSuspend+0x102>
					vTaskSwitchContext();
 8004396:	f000 fa79 	bl	800488c <vTaskSwitchContext>
	}
 800439a:	bf00      	nop
 800439c:	3710      	adds	r7, #16
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}
 80043a2:	bf00      	nop
 80043a4:	2000098c 	.word	0x2000098c
 80043a8:	20000990 	.word	0x20000990
 80043ac:	20000a94 	.word	0x20000a94
 80043b0:	20000a78 	.word	0x20000a78
 80043b4:	20000a98 	.word	0x20000a98
 80043b8:	20000ab4 	.word	0x20000ab4
 80043bc:	e000ed04 	.word	0xe000ed04
 80043c0:	20000a8c 	.word	0x20000a8c

080043c4 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 80043c4:	b480      	push	{r7}
 80043c6:	b087      	sub	sp, #28
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 80043cc:	2300      	movs	r3, #0
 80043ce:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d10d      	bne.n	80043f6 <prvTaskIsTaskSuspended+0x32>
	__asm volatile
 80043da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043de:	b672      	cpsid	i
 80043e0:	f383 8811 	msr	BASEPRI, r3
 80043e4:	f3bf 8f6f 	isb	sy
 80043e8:	f3bf 8f4f 	dsb	sy
 80043ec:	b662      	cpsie	i
 80043ee:	60fb      	str	r3, [r7, #12]
}
 80043f0:	bf00      	nop
 80043f2:	bf00      	nop
 80043f4:	e7fd      	b.n	80043f2 <prvTaskIsTaskSuspended+0x2e>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 80043f6:	693b      	ldr	r3, [r7, #16]
 80043f8:	695b      	ldr	r3, [r3, #20]
 80043fa:	4a0a      	ldr	r2, [pc, #40]	@ (8004424 <prvTaskIsTaskSuspended+0x60>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d10a      	bne.n	8004416 <prvTaskIsTaskSuspended+0x52>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8004400:	693b      	ldr	r3, [r7, #16]
 8004402:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004404:	4a08      	ldr	r2, [pc, #32]	@ (8004428 <prvTaskIsTaskSuspended+0x64>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d005      	beq.n	8004416 <prvTaskIsTaskSuspended+0x52>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 800440a:	693b      	ldr	r3, [r7, #16]
 800440c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800440e:	2b00      	cmp	r3, #0
 8004410:	d101      	bne.n	8004416 <prvTaskIsTaskSuspended+0x52>
				{
					xReturn = pdTRUE;
 8004412:	2301      	movs	r3, #1
 8004414:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004416:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8004418:	4618      	mov	r0, r3
 800441a:	371c      	adds	r7, #28
 800441c:	46bd      	mov	sp, r7
 800441e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004422:	4770      	bx	lr
 8004424:	20000a78 	.word	0x20000a78
 8004428:	20000a4c 	.word	0x20000a4c

0800442c <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 800442c:	b580      	push	{r7, lr}
 800442e:	b084      	sub	sp, #16
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d10d      	bne.n	800445a <vTaskResume+0x2e>
	__asm volatile
 800443e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004442:	b672      	cpsid	i
 8004444:	f383 8811 	msr	BASEPRI, r3
 8004448:	f3bf 8f6f 	isb	sy
 800444c:	f3bf 8f4f 	dsb	sy
 8004450:	b662      	cpsie	i
 8004452:	60bb      	str	r3, [r7, #8]
}
 8004454:	bf00      	nop
 8004456:	bf00      	nop
 8004458:	e7fd      	b.n	8004456 <vTaskResume+0x2a>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 800445a:	4b20      	ldr	r3, [pc, #128]	@ (80044dc <vTaskResume+0xb0>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	68fa      	ldr	r2, [r7, #12]
 8004460:	429a      	cmp	r2, r3
 8004462:	d037      	beq.n	80044d4 <vTaskResume+0xa8>
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d034      	beq.n	80044d4 <vTaskResume+0xa8>
		{
			taskENTER_CRITICAL();
 800446a:	f000 fcd7 	bl	8004e1c <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800446e:	68f8      	ldr	r0, [r7, #12]
 8004470:	f7ff ffa8 	bl	80043c4 <prvTaskIsTaskSuspended>
 8004474:	4603      	mov	r3, r0
 8004476:	2b00      	cmp	r3, #0
 8004478:	d02a      	beq.n	80044d0 <vTaskResume+0xa4>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	3304      	adds	r3, #4
 800447e:	4618      	mov	r0, r3
 8004480:	f7ff fc9f 	bl	8003dc2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004488:	2201      	movs	r2, #1
 800448a:	409a      	lsls	r2, r3
 800448c:	4b14      	ldr	r3, [pc, #80]	@ (80044e0 <vTaskResume+0xb4>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4313      	orrs	r3, r2
 8004492:	4a13      	ldr	r2, [pc, #76]	@ (80044e0 <vTaskResume+0xb4>)
 8004494:	6013      	str	r3, [r2, #0]
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800449a:	4613      	mov	r3, r2
 800449c:	009b      	lsls	r3, r3, #2
 800449e:	4413      	add	r3, r2
 80044a0:	009b      	lsls	r3, r3, #2
 80044a2:	4a10      	ldr	r2, [pc, #64]	@ (80044e4 <vTaskResume+0xb8>)
 80044a4:	441a      	add	r2, r3
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	3304      	adds	r3, #4
 80044aa:	4619      	mov	r1, r3
 80044ac:	4610      	mov	r0, r2
 80044ae:	f7ff fc2b 	bl	8003d08 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044b6:	4b09      	ldr	r3, [pc, #36]	@ (80044dc <vTaskResume+0xb0>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044bc:	429a      	cmp	r2, r3
 80044be:	d307      	bcc.n	80044d0 <vTaskResume+0xa4>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 80044c0:	4b09      	ldr	r3, [pc, #36]	@ (80044e8 <vTaskResume+0xbc>)
 80044c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80044c6:	601a      	str	r2, [r3, #0]
 80044c8:	f3bf 8f4f 	dsb	sy
 80044cc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 80044d0:	f000 fcda 	bl	8004e88 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80044d4:	bf00      	nop
 80044d6:	3710      	adds	r7, #16
 80044d8:	46bd      	mov	sp, r7
 80044da:	bd80      	pop	{r7, pc}
 80044dc:	2000098c 	.word	0x2000098c
 80044e0:	20000a94 	.word	0x20000a94
 80044e4:	20000990 	.word	0x20000990
 80044e8:	e000ed04 	.word	0xe000ed04

080044ec <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b08a      	sub	sp, #40	@ 0x28
 80044f0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80044f2:	2300      	movs	r3, #0
 80044f4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80044f6:	2300      	movs	r3, #0
 80044f8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80044fa:	463a      	mov	r2, r7
 80044fc:	1d39      	adds	r1, r7, #4
 80044fe:	f107 0308 	add.w	r3, r7, #8
 8004502:	4618      	mov	r0, r3
 8004504:	f7fc f86a 	bl	80005dc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004508:	6839      	ldr	r1, [r7, #0]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	68ba      	ldr	r2, [r7, #8]
 800450e:	9202      	str	r2, [sp, #8]
 8004510:	9301      	str	r3, [sp, #4]
 8004512:	2300      	movs	r3, #0
 8004514:	9300      	str	r3, [sp, #0]
 8004516:	2300      	movs	r3, #0
 8004518:	460a      	mov	r2, r1
 800451a:	4921      	ldr	r1, [pc, #132]	@ (80045a0 <vTaskStartScheduler+0xb4>)
 800451c:	4821      	ldr	r0, [pc, #132]	@ (80045a4 <vTaskStartScheduler+0xb8>)
 800451e:	f7ff fc7a 	bl	8003e16 <xTaskCreateStatic>
 8004522:	4603      	mov	r3, r0
 8004524:	4a20      	ldr	r2, [pc, #128]	@ (80045a8 <vTaskStartScheduler+0xbc>)
 8004526:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004528:	4b1f      	ldr	r3, [pc, #124]	@ (80045a8 <vTaskStartScheduler+0xbc>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d002      	beq.n	8004536 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004530:	2301      	movs	r3, #1
 8004532:	617b      	str	r3, [r7, #20]
 8004534:	e001      	b.n	800453a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004536:	2300      	movs	r3, #0
 8004538:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800453a:	697b      	ldr	r3, [r7, #20]
 800453c:	2b01      	cmp	r3, #1
 800453e:	d118      	bne.n	8004572 <vTaskStartScheduler+0x86>
	__asm volatile
 8004540:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004544:	b672      	cpsid	i
 8004546:	f383 8811 	msr	BASEPRI, r3
 800454a:	f3bf 8f6f 	isb	sy
 800454e:	f3bf 8f4f 	dsb	sy
 8004552:	b662      	cpsie	i
 8004554:	613b      	str	r3, [r7, #16]
}
 8004556:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004558:	4b14      	ldr	r3, [pc, #80]	@ (80045ac <vTaskStartScheduler+0xc0>)
 800455a:	f04f 32ff 	mov.w	r2, #4294967295
 800455e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004560:	4b13      	ldr	r3, [pc, #76]	@ (80045b0 <vTaskStartScheduler+0xc4>)
 8004562:	2201      	movs	r2, #1
 8004564:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004566:	4b13      	ldr	r3, [pc, #76]	@ (80045b4 <vTaskStartScheduler+0xc8>)
 8004568:	2200      	movs	r2, #0
 800456a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800456c:	f000 fbd8 	bl	8004d20 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004570:	e011      	b.n	8004596 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004572:	697b      	ldr	r3, [r7, #20]
 8004574:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004578:	d10d      	bne.n	8004596 <vTaskStartScheduler+0xaa>
	__asm volatile
 800457a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800457e:	b672      	cpsid	i
 8004580:	f383 8811 	msr	BASEPRI, r3
 8004584:	f3bf 8f6f 	isb	sy
 8004588:	f3bf 8f4f 	dsb	sy
 800458c:	b662      	cpsie	i
 800458e:	60fb      	str	r3, [r7, #12]
}
 8004590:	bf00      	nop
 8004592:	bf00      	nop
 8004594:	e7fd      	b.n	8004592 <vTaskStartScheduler+0xa6>
}
 8004596:	bf00      	nop
 8004598:	3718      	adds	r7, #24
 800459a:	46bd      	mov	sp, r7
 800459c:	bd80      	pop	{r7, pc}
 800459e:	bf00      	nop
 80045a0:	08006dc4 	.word	0x08006dc4
 80045a4:	08004949 	.word	0x08004949
 80045a8:	20000ab0 	.word	0x20000ab0
 80045ac:	20000aac 	.word	0x20000aac
 80045b0:	20000a98 	.word	0x20000a98
 80045b4:	20000a90 	.word	0x20000a90

080045b8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80045b8:	b480      	push	{r7}
 80045ba:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80045bc:	4b04      	ldr	r3, [pc, #16]	@ (80045d0 <vTaskSuspendAll+0x18>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	3301      	adds	r3, #1
 80045c2:	4a03      	ldr	r2, [pc, #12]	@ (80045d0 <vTaskSuspendAll+0x18>)
 80045c4:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80045c6:	bf00      	nop
 80045c8:	46bd      	mov	sp, r7
 80045ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ce:	4770      	bx	lr
 80045d0:	20000ab4 	.word	0x20000ab4

080045d4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b084      	sub	sp, #16
 80045d8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80045da:	2300      	movs	r3, #0
 80045dc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80045de:	2300      	movs	r3, #0
 80045e0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80045e2:	4b43      	ldr	r3, [pc, #268]	@ (80046f0 <xTaskResumeAll+0x11c>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d10d      	bne.n	8004606 <xTaskResumeAll+0x32>
	__asm volatile
 80045ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045ee:	b672      	cpsid	i
 80045f0:	f383 8811 	msr	BASEPRI, r3
 80045f4:	f3bf 8f6f 	isb	sy
 80045f8:	f3bf 8f4f 	dsb	sy
 80045fc:	b662      	cpsie	i
 80045fe:	603b      	str	r3, [r7, #0]
}
 8004600:	bf00      	nop
 8004602:	bf00      	nop
 8004604:	e7fd      	b.n	8004602 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004606:	f000 fc09 	bl	8004e1c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800460a:	4b39      	ldr	r3, [pc, #228]	@ (80046f0 <xTaskResumeAll+0x11c>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	3b01      	subs	r3, #1
 8004610:	4a37      	ldr	r2, [pc, #220]	@ (80046f0 <xTaskResumeAll+0x11c>)
 8004612:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004614:	4b36      	ldr	r3, [pc, #216]	@ (80046f0 <xTaskResumeAll+0x11c>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d161      	bne.n	80046e0 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800461c:	4b35      	ldr	r3, [pc, #212]	@ (80046f4 <xTaskResumeAll+0x120>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d05d      	beq.n	80046e0 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004624:	e02e      	b.n	8004684 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004626:	4b34      	ldr	r3, [pc, #208]	@ (80046f8 <xTaskResumeAll+0x124>)
 8004628:	68db      	ldr	r3, [r3, #12]
 800462a:	68db      	ldr	r3, [r3, #12]
 800462c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	3318      	adds	r3, #24
 8004632:	4618      	mov	r0, r3
 8004634:	f7ff fbc5 	bl	8003dc2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	3304      	adds	r3, #4
 800463c:	4618      	mov	r0, r3
 800463e:	f7ff fbc0 	bl	8003dc2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004646:	2201      	movs	r2, #1
 8004648:	409a      	lsls	r2, r3
 800464a:	4b2c      	ldr	r3, [pc, #176]	@ (80046fc <xTaskResumeAll+0x128>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4313      	orrs	r3, r2
 8004650:	4a2a      	ldr	r2, [pc, #168]	@ (80046fc <xTaskResumeAll+0x128>)
 8004652:	6013      	str	r3, [r2, #0]
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004658:	4613      	mov	r3, r2
 800465a:	009b      	lsls	r3, r3, #2
 800465c:	4413      	add	r3, r2
 800465e:	009b      	lsls	r3, r3, #2
 8004660:	4a27      	ldr	r2, [pc, #156]	@ (8004700 <xTaskResumeAll+0x12c>)
 8004662:	441a      	add	r2, r3
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	3304      	adds	r3, #4
 8004668:	4619      	mov	r1, r3
 800466a:	4610      	mov	r0, r2
 800466c:	f7ff fb4c 	bl	8003d08 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004674:	4b23      	ldr	r3, [pc, #140]	@ (8004704 <xTaskResumeAll+0x130>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800467a:	429a      	cmp	r2, r3
 800467c:	d302      	bcc.n	8004684 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 800467e:	4b22      	ldr	r3, [pc, #136]	@ (8004708 <xTaskResumeAll+0x134>)
 8004680:	2201      	movs	r2, #1
 8004682:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004684:	4b1c      	ldr	r3, [pc, #112]	@ (80046f8 <xTaskResumeAll+0x124>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d1cc      	bne.n	8004626 <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d001      	beq.n	8004696 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004692:	f000 fa11 	bl	8004ab8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004696:	4b1d      	ldr	r3, [pc, #116]	@ (800470c <xTaskResumeAll+0x138>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d010      	beq.n	80046c4 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80046a2:	f000 f837 	bl	8004714 <xTaskIncrementTick>
 80046a6:	4603      	mov	r3, r0
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d002      	beq.n	80046b2 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 80046ac:	4b16      	ldr	r3, [pc, #88]	@ (8004708 <xTaskResumeAll+0x134>)
 80046ae:	2201      	movs	r2, #1
 80046b0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	3b01      	subs	r3, #1
 80046b6:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d1f1      	bne.n	80046a2 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 80046be:	4b13      	ldr	r3, [pc, #76]	@ (800470c <xTaskResumeAll+0x138>)
 80046c0:	2200      	movs	r2, #0
 80046c2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80046c4:	4b10      	ldr	r3, [pc, #64]	@ (8004708 <xTaskResumeAll+0x134>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d009      	beq.n	80046e0 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80046cc:	2301      	movs	r3, #1
 80046ce:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80046d0:	4b0f      	ldr	r3, [pc, #60]	@ (8004710 <xTaskResumeAll+0x13c>)
 80046d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80046d6:	601a      	str	r2, [r3, #0]
 80046d8:	f3bf 8f4f 	dsb	sy
 80046dc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80046e0:	f000 fbd2 	bl	8004e88 <vPortExitCritical>

	return xAlreadyYielded;
 80046e4:	68bb      	ldr	r3, [r7, #8]
}
 80046e6:	4618      	mov	r0, r3
 80046e8:	3710      	adds	r7, #16
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bd80      	pop	{r7, pc}
 80046ee:	bf00      	nop
 80046f0:	20000ab4 	.word	0x20000ab4
 80046f4:	20000a8c 	.word	0x20000a8c
 80046f8:	20000a4c 	.word	0x20000a4c
 80046fc:	20000a94 	.word	0x20000a94
 8004700:	20000990 	.word	0x20000990
 8004704:	2000098c 	.word	0x2000098c
 8004708:	20000aa0 	.word	0x20000aa0
 800470c:	20000a9c 	.word	0x20000a9c
 8004710:	e000ed04 	.word	0xe000ed04

08004714 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b086      	sub	sp, #24
 8004718:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800471a:	2300      	movs	r3, #0
 800471c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800471e:	4b50      	ldr	r3, [pc, #320]	@ (8004860 <xTaskIncrementTick+0x14c>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	2b00      	cmp	r3, #0
 8004724:	f040 808b 	bne.w	800483e <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004728:	4b4e      	ldr	r3, [pc, #312]	@ (8004864 <xTaskIncrementTick+0x150>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	3301      	adds	r3, #1
 800472e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004730:	4a4c      	ldr	r2, [pc, #304]	@ (8004864 <xTaskIncrementTick+0x150>)
 8004732:	693b      	ldr	r3, [r7, #16]
 8004734:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004736:	693b      	ldr	r3, [r7, #16]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d123      	bne.n	8004784 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 800473c:	4b4a      	ldr	r3, [pc, #296]	@ (8004868 <xTaskIncrementTick+0x154>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d00d      	beq.n	8004762 <xTaskIncrementTick+0x4e>
	__asm volatile
 8004746:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800474a:	b672      	cpsid	i
 800474c:	f383 8811 	msr	BASEPRI, r3
 8004750:	f3bf 8f6f 	isb	sy
 8004754:	f3bf 8f4f 	dsb	sy
 8004758:	b662      	cpsie	i
 800475a:	603b      	str	r3, [r7, #0]
}
 800475c:	bf00      	nop
 800475e:	bf00      	nop
 8004760:	e7fd      	b.n	800475e <xTaskIncrementTick+0x4a>
 8004762:	4b41      	ldr	r3, [pc, #260]	@ (8004868 <xTaskIncrementTick+0x154>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	60fb      	str	r3, [r7, #12]
 8004768:	4b40      	ldr	r3, [pc, #256]	@ (800486c <xTaskIncrementTick+0x158>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4a3e      	ldr	r2, [pc, #248]	@ (8004868 <xTaskIncrementTick+0x154>)
 800476e:	6013      	str	r3, [r2, #0]
 8004770:	4a3e      	ldr	r2, [pc, #248]	@ (800486c <xTaskIncrementTick+0x158>)
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	6013      	str	r3, [r2, #0]
 8004776:	4b3e      	ldr	r3, [pc, #248]	@ (8004870 <xTaskIncrementTick+0x15c>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	3301      	adds	r3, #1
 800477c:	4a3c      	ldr	r2, [pc, #240]	@ (8004870 <xTaskIncrementTick+0x15c>)
 800477e:	6013      	str	r3, [r2, #0]
 8004780:	f000 f99a 	bl	8004ab8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004784:	4b3b      	ldr	r3, [pc, #236]	@ (8004874 <xTaskIncrementTick+0x160>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	693a      	ldr	r2, [r7, #16]
 800478a:	429a      	cmp	r2, r3
 800478c:	d348      	bcc.n	8004820 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800478e:	4b36      	ldr	r3, [pc, #216]	@ (8004868 <xTaskIncrementTick+0x154>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d104      	bne.n	80047a2 <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004798:	4b36      	ldr	r3, [pc, #216]	@ (8004874 <xTaskIncrementTick+0x160>)
 800479a:	f04f 32ff 	mov.w	r2, #4294967295
 800479e:	601a      	str	r2, [r3, #0]
					break;
 80047a0:	e03e      	b.n	8004820 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80047a2:	4b31      	ldr	r3, [pc, #196]	@ (8004868 <xTaskIncrementTick+0x154>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	68db      	ldr	r3, [r3, #12]
 80047a8:	68db      	ldr	r3, [r3, #12]
 80047aa:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	685b      	ldr	r3, [r3, #4]
 80047b0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80047b2:	693a      	ldr	r2, [r7, #16]
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	429a      	cmp	r2, r3
 80047b8:	d203      	bcs.n	80047c2 <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80047ba:	4a2e      	ldr	r2, [pc, #184]	@ (8004874 <xTaskIncrementTick+0x160>)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80047c0:	e02e      	b.n	8004820 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80047c2:	68bb      	ldr	r3, [r7, #8]
 80047c4:	3304      	adds	r3, #4
 80047c6:	4618      	mov	r0, r3
 80047c8:	f7ff fafb 	bl	8003dc2 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d004      	beq.n	80047de <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80047d4:	68bb      	ldr	r3, [r7, #8]
 80047d6:	3318      	adds	r3, #24
 80047d8:	4618      	mov	r0, r3
 80047da:	f7ff faf2 	bl	8003dc2 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80047de:	68bb      	ldr	r3, [r7, #8]
 80047e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047e2:	2201      	movs	r2, #1
 80047e4:	409a      	lsls	r2, r3
 80047e6:	4b24      	ldr	r3, [pc, #144]	@ (8004878 <xTaskIncrementTick+0x164>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4313      	orrs	r3, r2
 80047ec:	4a22      	ldr	r2, [pc, #136]	@ (8004878 <xTaskIncrementTick+0x164>)
 80047ee:	6013      	str	r3, [r2, #0]
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047f4:	4613      	mov	r3, r2
 80047f6:	009b      	lsls	r3, r3, #2
 80047f8:	4413      	add	r3, r2
 80047fa:	009b      	lsls	r3, r3, #2
 80047fc:	4a1f      	ldr	r2, [pc, #124]	@ (800487c <xTaskIncrementTick+0x168>)
 80047fe:	441a      	add	r2, r3
 8004800:	68bb      	ldr	r3, [r7, #8]
 8004802:	3304      	adds	r3, #4
 8004804:	4619      	mov	r1, r3
 8004806:	4610      	mov	r0, r2
 8004808:	f7ff fa7e 	bl	8003d08 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800480c:	68bb      	ldr	r3, [r7, #8]
 800480e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004810:	4b1b      	ldr	r3, [pc, #108]	@ (8004880 <xTaskIncrementTick+0x16c>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004816:	429a      	cmp	r2, r3
 8004818:	d3b9      	bcc.n	800478e <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 800481a:	2301      	movs	r3, #1
 800481c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800481e:	e7b6      	b.n	800478e <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004820:	4b17      	ldr	r3, [pc, #92]	@ (8004880 <xTaskIncrementTick+0x16c>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004826:	4915      	ldr	r1, [pc, #84]	@ (800487c <xTaskIncrementTick+0x168>)
 8004828:	4613      	mov	r3, r2
 800482a:	009b      	lsls	r3, r3, #2
 800482c:	4413      	add	r3, r2
 800482e:	009b      	lsls	r3, r3, #2
 8004830:	440b      	add	r3, r1
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	2b01      	cmp	r3, #1
 8004836:	d907      	bls.n	8004848 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8004838:	2301      	movs	r3, #1
 800483a:	617b      	str	r3, [r7, #20]
 800483c:	e004      	b.n	8004848 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800483e:	4b11      	ldr	r3, [pc, #68]	@ (8004884 <xTaskIncrementTick+0x170>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	3301      	adds	r3, #1
 8004844:	4a0f      	ldr	r2, [pc, #60]	@ (8004884 <xTaskIncrementTick+0x170>)
 8004846:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004848:	4b0f      	ldr	r3, [pc, #60]	@ (8004888 <xTaskIncrementTick+0x174>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d001      	beq.n	8004854 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8004850:	2301      	movs	r3, #1
 8004852:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004854:	697b      	ldr	r3, [r7, #20]
}
 8004856:	4618      	mov	r0, r3
 8004858:	3718      	adds	r7, #24
 800485a:	46bd      	mov	sp, r7
 800485c:	bd80      	pop	{r7, pc}
 800485e:	bf00      	nop
 8004860:	20000ab4 	.word	0x20000ab4
 8004864:	20000a90 	.word	0x20000a90
 8004868:	20000a44 	.word	0x20000a44
 800486c:	20000a48 	.word	0x20000a48
 8004870:	20000aa4 	.word	0x20000aa4
 8004874:	20000aac 	.word	0x20000aac
 8004878:	20000a94 	.word	0x20000a94
 800487c:	20000990 	.word	0x20000990
 8004880:	2000098c 	.word	0x2000098c
 8004884:	20000a9c 	.word	0x20000a9c
 8004888:	20000aa0 	.word	0x20000aa0

0800488c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800488c:	b480      	push	{r7}
 800488e:	b087      	sub	sp, #28
 8004890:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004892:	4b28      	ldr	r3, [pc, #160]	@ (8004934 <vTaskSwitchContext+0xa8>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d003      	beq.n	80048a2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800489a:	4b27      	ldr	r3, [pc, #156]	@ (8004938 <vTaskSwitchContext+0xac>)
 800489c:	2201      	movs	r2, #1
 800489e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80048a0:	e042      	b.n	8004928 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 80048a2:	4b25      	ldr	r3, [pc, #148]	@ (8004938 <vTaskSwitchContext+0xac>)
 80048a4:	2200      	movs	r2, #0
 80048a6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80048a8:	4b24      	ldr	r3, [pc, #144]	@ (800493c <vTaskSwitchContext+0xb0>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	fab3 f383 	clz	r3, r3
 80048b4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80048b6:	7afb      	ldrb	r3, [r7, #11]
 80048b8:	f1c3 031f 	rsb	r3, r3, #31
 80048bc:	617b      	str	r3, [r7, #20]
 80048be:	4920      	ldr	r1, [pc, #128]	@ (8004940 <vTaskSwitchContext+0xb4>)
 80048c0:	697a      	ldr	r2, [r7, #20]
 80048c2:	4613      	mov	r3, r2
 80048c4:	009b      	lsls	r3, r3, #2
 80048c6:	4413      	add	r3, r2
 80048c8:	009b      	lsls	r3, r3, #2
 80048ca:	440b      	add	r3, r1
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d10d      	bne.n	80048ee <vTaskSwitchContext+0x62>
	__asm volatile
 80048d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048d6:	b672      	cpsid	i
 80048d8:	f383 8811 	msr	BASEPRI, r3
 80048dc:	f3bf 8f6f 	isb	sy
 80048e0:	f3bf 8f4f 	dsb	sy
 80048e4:	b662      	cpsie	i
 80048e6:	607b      	str	r3, [r7, #4]
}
 80048e8:	bf00      	nop
 80048ea:	bf00      	nop
 80048ec:	e7fd      	b.n	80048ea <vTaskSwitchContext+0x5e>
 80048ee:	697a      	ldr	r2, [r7, #20]
 80048f0:	4613      	mov	r3, r2
 80048f2:	009b      	lsls	r3, r3, #2
 80048f4:	4413      	add	r3, r2
 80048f6:	009b      	lsls	r3, r3, #2
 80048f8:	4a11      	ldr	r2, [pc, #68]	@ (8004940 <vTaskSwitchContext+0xb4>)
 80048fa:	4413      	add	r3, r2
 80048fc:	613b      	str	r3, [r7, #16]
 80048fe:	693b      	ldr	r3, [r7, #16]
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	685a      	ldr	r2, [r3, #4]
 8004904:	693b      	ldr	r3, [r7, #16]
 8004906:	605a      	str	r2, [r3, #4]
 8004908:	693b      	ldr	r3, [r7, #16]
 800490a:	685a      	ldr	r2, [r3, #4]
 800490c:	693b      	ldr	r3, [r7, #16]
 800490e:	3308      	adds	r3, #8
 8004910:	429a      	cmp	r2, r3
 8004912:	d104      	bne.n	800491e <vTaskSwitchContext+0x92>
 8004914:	693b      	ldr	r3, [r7, #16]
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	685a      	ldr	r2, [r3, #4]
 800491a:	693b      	ldr	r3, [r7, #16]
 800491c:	605a      	str	r2, [r3, #4]
 800491e:	693b      	ldr	r3, [r7, #16]
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	68db      	ldr	r3, [r3, #12]
 8004924:	4a07      	ldr	r2, [pc, #28]	@ (8004944 <vTaskSwitchContext+0xb8>)
 8004926:	6013      	str	r3, [r2, #0]
}
 8004928:	bf00      	nop
 800492a:	371c      	adds	r7, #28
 800492c:	46bd      	mov	sp, r7
 800492e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004932:	4770      	bx	lr
 8004934:	20000ab4 	.word	0x20000ab4
 8004938:	20000aa0 	.word	0x20000aa0
 800493c:	20000a94 	.word	0x20000a94
 8004940:	20000990 	.word	0x20000990
 8004944:	2000098c 	.word	0x2000098c

08004948 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b082      	sub	sp, #8
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004950:	f000 f852 	bl	80049f8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004954:	4b06      	ldr	r3, [pc, #24]	@ (8004970 <prvIdleTask+0x28>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	2b01      	cmp	r3, #1
 800495a:	d9f9      	bls.n	8004950 <prvIdleTask+0x8>
			{
				taskYIELD();
 800495c:	4b05      	ldr	r3, [pc, #20]	@ (8004974 <prvIdleTask+0x2c>)
 800495e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004962:	601a      	str	r2, [r3, #0]
 8004964:	f3bf 8f4f 	dsb	sy
 8004968:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800496c:	e7f0      	b.n	8004950 <prvIdleTask+0x8>
 800496e:	bf00      	nop
 8004970:	20000990 	.word	0x20000990
 8004974:	e000ed04 	.word	0xe000ed04

08004978 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b082      	sub	sp, #8
 800497c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800497e:	2300      	movs	r3, #0
 8004980:	607b      	str	r3, [r7, #4]
 8004982:	e00c      	b.n	800499e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004984:	687a      	ldr	r2, [r7, #4]
 8004986:	4613      	mov	r3, r2
 8004988:	009b      	lsls	r3, r3, #2
 800498a:	4413      	add	r3, r2
 800498c:	009b      	lsls	r3, r3, #2
 800498e:	4a12      	ldr	r2, [pc, #72]	@ (80049d8 <prvInitialiseTaskLists+0x60>)
 8004990:	4413      	add	r3, r2
 8004992:	4618      	mov	r0, r3
 8004994:	f7ff f98b 	bl	8003cae <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	3301      	adds	r3, #1
 800499c:	607b      	str	r3, [r7, #4]
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2b06      	cmp	r3, #6
 80049a2:	d9ef      	bls.n	8004984 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80049a4:	480d      	ldr	r0, [pc, #52]	@ (80049dc <prvInitialiseTaskLists+0x64>)
 80049a6:	f7ff f982 	bl	8003cae <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80049aa:	480d      	ldr	r0, [pc, #52]	@ (80049e0 <prvInitialiseTaskLists+0x68>)
 80049ac:	f7ff f97f 	bl	8003cae <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80049b0:	480c      	ldr	r0, [pc, #48]	@ (80049e4 <prvInitialiseTaskLists+0x6c>)
 80049b2:	f7ff f97c 	bl	8003cae <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80049b6:	480c      	ldr	r0, [pc, #48]	@ (80049e8 <prvInitialiseTaskLists+0x70>)
 80049b8:	f7ff f979 	bl	8003cae <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80049bc:	480b      	ldr	r0, [pc, #44]	@ (80049ec <prvInitialiseTaskLists+0x74>)
 80049be:	f7ff f976 	bl	8003cae <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80049c2:	4b0b      	ldr	r3, [pc, #44]	@ (80049f0 <prvInitialiseTaskLists+0x78>)
 80049c4:	4a05      	ldr	r2, [pc, #20]	@ (80049dc <prvInitialiseTaskLists+0x64>)
 80049c6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80049c8:	4b0a      	ldr	r3, [pc, #40]	@ (80049f4 <prvInitialiseTaskLists+0x7c>)
 80049ca:	4a05      	ldr	r2, [pc, #20]	@ (80049e0 <prvInitialiseTaskLists+0x68>)
 80049cc:	601a      	str	r2, [r3, #0]
}
 80049ce:	bf00      	nop
 80049d0:	3708      	adds	r7, #8
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bd80      	pop	{r7, pc}
 80049d6:	bf00      	nop
 80049d8:	20000990 	.word	0x20000990
 80049dc:	20000a1c 	.word	0x20000a1c
 80049e0:	20000a30 	.word	0x20000a30
 80049e4:	20000a4c 	.word	0x20000a4c
 80049e8:	20000a60 	.word	0x20000a60
 80049ec:	20000a78 	.word	0x20000a78
 80049f0:	20000a44 	.word	0x20000a44
 80049f4:	20000a48 	.word	0x20000a48

080049f8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b082      	sub	sp, #8
 80049fc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80049fe:	e019      	b.n	8004a34 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004a00:	f000 fa0c 	bl	8004e1c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a04:	4b10      	ldr	r3, [pc, #64]	@ (8004a48 <prvCheckTasksWaitingTermination+0x50>)
 8004a06:	68db      	ldr	r3, [r3, #12]
 8004a08:	68db      	ldr	r3, [r3, #12]
 8004a0a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	3304      	adds	r3, #4
 8004a10:	4618      	mov	r0, r3
 8004a12:	f7ff f9d6 	bl	8003dc2 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004a16:	4b0d      	ldr	r3, [pc, #52]	@ (8004a4c <prvCheckTasksWaitingTermination+0x54>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	3b01      	subs	r3, #1
 8004a1c:	4a0b      	ldr	r2, [pc, #44]	@ (8004a4c <prvCheckTasksWaitingTermination+0x54>)
 8004a1e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004a20:	4b0b      	ldr	r3, [pc, #44]	@ (8004a50 <prvCheckTasksWaitingTermination+0x58>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	3b01      	subs	r3, #1
 8004a26:	4a0a      	ldr	r2, [pc, #40]	@ (8004a50 <prvCheckTasksWaitingTermination+0x58>)
 8004a28:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004a2a:	f000 fa2d 	bl	8004e88 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004a2e:	6878      	ldr	r0, [r7, #4]
 8004a30:	f000 f810 	bl	8004a54 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004a34:	4b06      	ldr	r3, [pc, #24]	@ (8004a50 <prvCheckTasksWaitingTermination+0x58>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d1e1      	bne.n	8004a00 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004a3c:	bf00      	nop
 8004a3e:	bf00      	nop
 8004a40:	3708      	adds	r7, #8
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bd80      	pop	{r7, pc}
 8004a46:	bf00      	nop
 8004a48:	20000a60 	.word	0x20000a60
 8004a4c:	20000a8c 	.word	0x20000a8c
 8004a50:	20000a74 	.word	0x20000a74

08004a54 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b084      	sub	sp, #16
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d108      	bne.n	8004a78 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	f000 fb8c 	bl	8005188 <vPortFree>
				vPortFree( pxTCB );
 8004a70:	6878      	ldr	r0, [r7, #4]
 8004a72:	f000 fb89 	bl	8005188 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004a76:	e01b      	b.n	8004ab0 <prvDeleteTCB+0x5c>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004a7e:	2b01      	cmp	r3, #1
 8004a80:	d103      	bne.n	8004a8a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004a82:	6878      	ldr	r0, [r7, #4]
 8004a84:	f000 fb80 	bl	8005188 <vPortFree>
	}
 8004a88:	e012      	b.n	8004ab0 <prvDeleteTCB+0x5c>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004a90:	2b02      	cmp	r3, #2
 8004a92:	d00d      	beq.n	8004ab0 <prvDeleteTCB+0x5c>
	__asm volatile
 8004a94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a98:	b672      	cpsid	i
 8004a9a:	f383 8811 	msr	BASEPRI, r3
 8004a9e:	f3bf 8f6f 	isb	sy
 8004aa2:	f3bf 8f4f 	dsb	sy
 8004aa6:	b662      	cpsie	i
 8004aa8:	60fb      	str	r3, [r7, #12]
}
 8004aaa:	bf00      	nop
 8004aac:	bf00      	nop
 8004aae:	e7fd      	b.n	8004aac <prvDeleteTCB+0x58>
	}
 8004ab0:	bf00      	nop
 8004ab2:	3710      	adds	r7, #16
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	bd80      	pop	{r7, pc}

08004ab8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004ab8:	b480      	push	{r7}
 8004aba:	b083      	sub	sp, #12
 8004abc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004abe:	4b0c      	ldr	r3, [pc, #48]	@ (8004af0 <prvResetNextTaskUnblockTime+0x38>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d104      	bne.n	8004ad2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004ac8:	4b0a      	ldr	r3, [pc, #40]	@ (8004af4 <prvResetNextTaskUnblockTime+0x3c>)
 8004aca:	f04f 32ff 	mov.w	r2, #4294967295
 8004ace:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004ad0:	e008      	b.n	8004ae4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ad2:	4b07      	ldr	r3, [pc, #28]	@ (8004af0 <prvResetNextTaskUnblockTime+0x38>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	68db      	ldr	r3, [r3, #12]
 8004ad8:	68db      	ldr	r3, [r3, #12]
 8004ada:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	4a04      	ldr	r2, [pc, #16]	@ (8004af4 <prvResetNextTaskUnblockTime+0x3c>)
 8004ae2:	6013      	str	r3, [r2, #0]
}
 8004ae4:	bf00      	nop
 8004ae6:	370c      	adds	r7, #12
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aee:	4770      	bx	lr
 8004af0:	20000a44 	.word	0x20000a44
 8004af4:	20000aac 	.word	0x20000aac

08004af8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004af8:	b480      	push	{r7}
 8004afa:	b083      	sub	sp, #12
 8004afc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004afe:	4b0b      	ldr	r3, [pc, #44]	@ (8004b2c <xTaskGetSchedulerState+0x34>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d102      	bne.n	8004b0c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004b06:	2301      	movs	r3, #1
 8004b08:	607b      	str	r3, [r7, #4]
 8004b0a:	e008      	b.n	8004b1e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004b0c:	4b08      	ldr	r3, [pc, #32]	@ (8004b30 <xTaskGetSchedulerState+0x38>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d102      	bne.n	8004b1a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004b14:	2302      	movs	r3, #2
 8004b16:	607b      	str	r3, [r7, #4]
 8004b18:	e001      	b.n	8004b1e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004b1e:	687b      	ldr	r3, [r7, #4]
	}
 8004b20:	4618      	mov	r0, r3
 8004b22:	370c      	adds	r7, #12
 8004b24:	46bd      	mov	sp, r7
 8004b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2a:	4770      	bx	lr
 8004b2c:	20000a98 	.word	0x20000a98
 8004b30:	20000ab4 	.word	0x20000ab4

08004b34 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b084      	sub	sp, #16
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
 8004b3c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004b3e:	4b29      	ldr	r3, [pc, #164]	@ (8004be4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004b44:	4b28      	ldr	r3, [pc, #160]	@ (8004be8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	3304      	adds	r3, #4
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	f7ff f939 	bl	8003dc2 <uxListRemove>
 8004b50:	4603      	mov	r3, r0
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d10b      	bne.n	8004b6e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004b56:	4b24      	ldr	r3, [pc, #144]	@ (8004be8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b5c:	2201      	movs	r2, #1
 8004b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b62:	43da      	mvns	r2, r3
 8004b64:	4b21      	ldr	r3, [pc, #132]	@ (8004bec <prvAddCurrentTaskToDelayedList+0xb8>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4013      	ands	r3, r2
 8004b6a:	4a20      	ldr	r2, [pc, #128]	@ (8004bec <prvAddCurrentTaskToDelayedList+0xb8>)
 8004b6c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b74:	d10a      	bne.n	8004b8c <prvAddCurrentTaskToDelayedList+0x58>
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d007      	beq.n	8004b8c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004b7c:	4b1a      	ldr	r3, [pc, #104]	@ (8004be8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	3304      	adds	r3, #4
 8004b82:	4619      	mov	r1, r3
 8004b84:	481a      	ldr	r0, [pc, #104]	@ (8004bf0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004b86:	f7ff f8bf 	bl	8003d08 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004b8a:	e026      	b.n	8004bda <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004b8c:	68fa      	ldr	r2, [r7, #12]
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	4413      	add	r3, r2
 8004b92:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004b94:	4b14      	ldr	r3, [pc, #80]	@ (8004be8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	68ba      	ldr	r2, [r7, #8]
 8004b9a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004b9c:	68ba      	ldr	r2, [r7, #8]
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	429a      	cmp	r2, r3
 8004ba2:	d209      	bcs.n	8004bb8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004ba4:	4b13      	ldr	r3, [pc, #76]	@ (8004bf4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004ba6:	681a      	ldr	r2, [r3, #0]
 8004ba8:	4b0f      	ldr	r3, [pc, #60]	@ (8004be8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	3304      	adds	r3, #4
 8004bae:	4619      	mov	r1, r3
 8004bb0:	4610      	mov	r0, r2
 8004bb2:	f7ff f8cd 	bl	8003d50 <vListInsert>
}
 8004bb6:	e010      	b.n	8004bda <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004bb8:	4b0f      	ldr	r3, [pc, #60]	@ (8004bf8 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004bba:	681a      	ldr	r2, [r3, #0]
 8004bbc:	4b0a      	ldr	r3, [pc, #40]	@ (8004be8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	3304      	adds	r3, #4
 8004bc2:	4619      	mov	r1, r3
 8004bc4:	4610      	mov	r0, r2
 8004bc6:	f7ff f8c3 	bl	8003d50 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004bca:	4b0c      	ldr	r3, [pc, #48]	@ (8004bfc <prvAddCurrentTaskToDelayedList+0xc8>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	68ba      	ldr	r2, [r7, #8]
 8004bd0:	429a      	cmp	r2, r3
 8004bd2:	d202      	bcs.n	8004bda <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004bd4:	4a09      	ldr	r2, [pc, #36]	@ (8004bfc <prvAddCurrentTaskToDelayedList+0xc8>)
 8004bd6:	68bb      	ldr	r3, [r7, #8]
 8004bd8:	6013      	str	r3, [r2, #0]
}
 8004bda:	bf00      	nop
 8004bdc:	3710      	adds	r7, #16
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bd80      	pop	{r7, pc}
 8004be2:	bf00      	nop
 8004be4:	20000a90 	.word	0x20000a90
 8004be8:	2000098c 	.word	0x2000098c
 8004bec:	20000a94 	.word	0x20000a94
 8004bf0:	20000a78 	.word	0x20000a78
 8004bf4:	20000a48 	.word	0x20000a48
 8004bf8:	20000a44 	.word	0x20000a44
 8004bfc:	20000aac 	.word	0x20000aac

08004c00 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004c00:	b480      	push	{r7}
 8004c02:	b085      	sub	sp, #20
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	60f8      	str	r0, [r7, #12]
 8004c08:	60b9      	str	r1, [r7, #8]
 8004c0a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	3b04      	subs	r3, #4
 8004c10:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004c18:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	3b04      	subs	r3, #4
 8004c1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	f023 0201 	bic.w	r2, r3, #1
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	3b04      	subs	r3, #4
 8004c2e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004c30:	4a0c      	ldr	r2, [pc, #48]	@ (8004c64 <pxPortInitialiseStack+0x64>)
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	3b14      	subs	r3, #20
 8004c3a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004c3c:	687a      	ldr	r2, [r7, #4]
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	3b04      	subs	r3, #4
 8004c46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	f06f 0202 	mvn.w	r2, #2
 8004c4e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	3b20      	subs	r3, #32
 8004c54:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004c56:	68fb      	ldr	r3, [r7, #12]
}
 8004c58:	4618      	mov	r0, r3
 8004c5a:	3714      	adds	r7, #20
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c62:	4770      	bx	lr
 8004c64:	08004c69 	.word	0x08004c69

08004c68 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004c68:	b480      	push	{r7}
 8004c6a:	b085      	sub	sp, #20
 8004c6c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004c6e:	2300      	movs	r3, #0
 8004c70:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004c72:	4b15      	ldr	r3, [pc, #84]	@ (8004cc8 <prvTaskExitError+0x60>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c7a:	d00d      	beq.n	8004c98 <prvTaskExitError+0x30>
	__asm volatile
 8004c7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c80:	b672      	cpsid	i
 8004c82:	f383 8811 	msr	BASEPRI, r3
 8004c86:	f3bf 8f6f 	isb	sy
 8004c8a:	f3bf 8f4f 	dsb	sy
 8004c8e:	b662      	cpsie	i
 8004c90:	60fb      	str	r3, [r7, #12]
}
 8004c92:	bf00      	nop
 8004c94:	bf00      	nop
 8004c96:	e7fd      	b.n	8004c94 <prvTaskExitError+0x2c>
	__asm volatile
 8004c98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c9c:	b672      	cpsid	i
 8004c9e:	f383 8811 	msr	BASEPRI, r3
 8004ca2:	f3bf 8f6f 	isb	sy
 8004ca6:	f3bf 8f4f 	dsb	sy
 8004caa:	b662      	cpsie	i
 8004cac:	60bb      	str	r3, [r7, #8]
}
 8004cae:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004cb0:	bf00      	nop
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d0fc      	beq.n	8004cb2 <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004cb8:	bf00      	nop
 8004cba:	bf00      	nop
 8004cbc:	3714      	adds	r7, #20
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc4:	4770      	bx	lr
 8004cc6:	bf00      	nop
 8004cc8:	2000010c 	.word	0x2000010c
 8004ccc:	00000000 	.word	0x00000000

08004cd0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004cd0:	4b07      	ldr	r3, [pc, #28]	@ (8004cf0 <pxCurrentTCBConst2>)
 8004cd2:	6819      	ldr	r1, [r3, #0]
 8004cd4:	6808      	ldr	r0, [r1, #0]
 8004cd6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cda:	f380 8809 	msr	PSP, r0
 8004cde:	f3bf 8f6f 	isb	sy
 8004ce2:	f04f 0000 	mov.w	r0, #0
 8004ce6:	f380 8811 	msr	BASEPRI, r0
 8004cea:	4770      	bx	lr
 8004cec:	f3af 8000 	nop.w

08004cf0 <pxCurrentTCBConst2>:
 8004cf0:	2000098c 	.word	0x2000098c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004cf4:	bf00      	nop
 8004cf6:	bf00      	nop

08004cf8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004cf8:	4808      	ldr	r0, [pc, #32]	@ (8004d1c <prvPortStartFirstTask+0x24>)
 8004cfa:	6800      	ldr	r0, [r0, #0]
 8004cfc:	6800      	ldr	r0, [r0, #0]
 8004cfe:	f380 8808 	msr	MSP, r0
 8004d02:	f04f 0000 	mov.w	r0, #0
 8004d06:	f380 8814 	msr	CONTROL, r0
 8004d0a:	b662      	cpsie	i
 8004d0c:	b661      	cpsie	f
 8004d0e:	f3bf 8f4f 	dsb	sy
 8004d12:	f3bf 8f6f 	isb	sy
 8004d16:	df00      	svc	0
 8004d18:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004d1a:	bf00      	nop
 8004d1c:	e000ed08 	.word	0xe000ed08

08004d20 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b084      	sub	sp, #16
 8004d24:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004d26:	4b37      	ldr	r3, [pc, #220]	@ (8004e04 <xPortStartScheduler+0xe4>)
 8004d28:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	781b      	ldrb	r3, [r3, #0]
 8004d2e:	b2db      	uxtb	r3, r3
 8004d30:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	22ff      	movs	r2, #255	@ 0xff
 8004d36:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	781b      	ldrb	r3, [r3, #0]
 8004d3c:	b2db      	uxtb	r3, r3
 8004d3e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004d40:	78fb      	ldrb	r3, [r7, #3]
 8004d42:	b2db      	uxtb	r3, r3
 8004d44:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004d48:	b2da      	uxtb	r2, r3
 8004d4a:	4b2f      	ldr	r3, [pc, #188]	@ (8004e08 <xPortStartScheduler+0xe8>)
 8004d4c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004d4e:	4b2f      	ldr	r3, [pc, #188]	@ (8004e0c <xPortStartScheduler+0xec>)
 8004d50:	2207      	movs	r2, #7
 8004d52:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004d54:	e009      	b.n	8004d6a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8004d56:	4b2d      	ldr	r3, [pc, #180]	@ (8004e0c <xPortStartScheduler+0xec>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	3b01      	subs	r3, #1
 8004d5c:	4a2b      	ldr	r2, [pc, #172]	@ (8004e0c <xPortStartScheduler+0xec>)
 8004d5e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004d60:	78fb      	ldrb	r3, [r7, #3]
 8004d62:	b2db      	uxtb	r3, r3
 8004d64:	005b      	lsls	r3, r3, #1
 8004d66:	b2db      	uxtb	r3, r3
 8004d68:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004d6a:	78fb      	ldrb	r3, [r7, #3]
 8004d6c:	b2db      	uxtb	r3, r3
 8004d6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d72:	2b80      	cmp	r3, #128	@ 0x80
 8004d74:	d0ef      	beq.n	8004d56 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004d76:	4b25      	ldr	r3, [pc, #148]	@ (8004e0c <xPortStartScheduler+0xec>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f1c3 0307 	rsb	r3, r3, #7
 8004d7e:	2b04      	cmp	r3, #4
 8004d80:	d00d      	beq.n	8004d9e <xPortStartScheduler+0x7e>
	__asm volatile
 8004d82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d86:	b672      	cpsid	i
 8004d88:	f383 8811 	msr	BASEPRI, r3
 8004d8c:	f3bf 8f6f 	isb	sy
 8004d90:	f3bf 8f4f 	dsb	sy
 8004d94:	b662      	cpsie	i
 8004d96:	60bb      	str	r3, [r7, #8]
}
 8004d98:	bf00      	nop
 8004d9a:	bf00      	nop
 8004d9c:	e7fd      	b.n	8004d9a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004d9e:	4b1b      	ldr	r3, [pc, #108]	@ (8004e0c <xPortStartScheduler+0xec>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	021b      	lsls	r3, r3, #8
 8004da4:	4a19      	ldr	r2, [pc, #100]	@ (8004e0c <xPortStartScheduler+0xec>)
 8004da6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004da8:	4b18      	ldr	r3, [pc, #96]	@ (8004e0c <xPortStartScheduler+0xec>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004db0:	4a16      	ldr	r2, [pc, #88]	@ (8004e0c <xPortStartScheduler+0xec>)
 8004db2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	b2da      	uxtb	r2, r3
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004dbc:	4b14      	ldr	r3, [pc, #80]	@ (8004e10 <xPortStartScheduler+0xf0>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4a13      	ldr	r2, [pc, #76]	@ (8004e10 <xPortStartScheduler+0xf0>)
 8004dc2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004dc6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004dc8:	4b11      	ldr	r3, [pc, #68]	@ (8004e10 <xPortStartScheduler+0xf0>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4a10      	ldr	r2, [pc, #64]	@ (8004e10 <xPortStartScheduler+0xf0>)
 8004dce:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004dd2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004dd4:	f000 f8dc 	bl	8004f90 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004dd8:	4b0e      	ldr	r3, [pc, #56]	@ (8004e14 <xPortStartScheduler+0xf4>)
 8004dda:	2200      	movs	r2, #0
 8004ddc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004dde:	f000 f8fb 	bl	8004fd8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004de2:	4b0d      	ldr	r3, [pc, #52]	@ (8004e18 <xPortStartScheduler+0xf8>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4a0c      	ldr	r2, [pc, #48]	@ (8004e18 <xPortStartScheduler+0xf8>)
 8004de8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8004dec:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004dee:	f7ff ff83 	bl	8004cf8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004df2:	f7ff fd4b 	bl	800488c <vTaskSwitchContext>
	prvTaskExitError();
 8004df6:	f7ff ff37 	bl	8004c68 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004dfa:	2300      	movs	r3, #0
}
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	3710      	adds	r7, #16
 8004e00:	46bd      	mov	sp, r7
 8004e02:	bd80      	pop	{r7, pc}
 8004e04:	e000e400 	.word	0xe000e400
 8004e08:	20000ab8 	.word	0x20000ab8
 8004e0c:	20000abc 	.word	0x20000abc
 8004e10:	e000ed20 	.word	0xe000ed20
 8004e14:	2000010c 	.word	0x2000010c
 8004e18:	e000ef34 	.word	0xe000ef34

08004e1c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	b083      	sub	sp, #12
 8004e20:	af00      	add	r7, sp, #0
	__asm volatile
 8004e22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e26:	b672      	cpsid	i
 8004e28:	f383 8811 	msr	BASEPRI, r3
 8004e2c:	f3bf 8f6f 	isb	sy
 8004e30:	f3bf 8f4f 	dsb	sy
 8004e34:	b662      	cpsie	i
 8004e36:	607b      	str	r3, [r7, #4]
}
 8004e38:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004e3a:	4b11      	ldr	r3, [pc, #68]	@ (8004e80 <vPortEnterCritical+0x64>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	3301      	adds	r3, #1
 8004e40:	4a0f      	ldr	r2, [pc, #60]	@ (8004e80 <vPortEnterCritical+0x64>)
 8004e42:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004e44:	4b0e      	ldr	r3, [pc, #56]	@ (8004e80 <vPortEnterCritical+0x64>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	2b01      	cmp	r3, #1
 8004e4a:	d112      	bne.n	8004e72 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004e4c:	4b0d      	ldr	r3, [pc, #52]	@ (8004e84 <vPortEnterCritical+0x68>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	b2db      	uxtb	r3, r3
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d00d      	beq.n	8004e72 <vPortEnterCritical+0x56>
	__asm volatile
 8004e56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e5a:	b672      	cpsid	i
 8004e5c:	f383 8811 	msr	BASEPRI, r3
 8004e60:	f3bf 8f6f 	isb	sy
 8004e64:	f3bf 8f4f 	dsb	sy
 8004e68:	b662      	cpsie	i
 8004e6a:	603b      	str	r3, [r7, #0]
}
 8004e6c:	bf00      	nop
 8004e6e:	bf00      	nop
 8004e70:	e7fd      	b.n	8004e6e <vPortEnterCritical+0x52>
	}
}
 8004e72:	bf00      	nop
 8004e74:	370c      	adds	r7, #12
 8004e76:	46bd      	mov	sp, r7
 8004e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7c:	4770      	bx	lr
 8004e7e:	bf00      	nop
 8004e80:	2000010c 	.word	0x2000010c
 8004e84:	e000ed04 	.word	0xe000ed04

08004e88 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004e88:	b480      	push	{r7}
 8004e8a:	b083      	sub	sp, #12
 8004e8c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004e8e:	4b13      	ldr	r3, [pc, #76]	@ (8004edc <vPortExitCritical+0x54>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d10d      	bne.n	8004eb2 <vPortExitCritical+0x2a>
	__asm volatile
 8004e96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e9a:	b672      	cpsid	i
 8004e9c:	f383 8811 	msr	BASEPRI, r3
 8004ea0:	f3bf 8f6f 	isb	sy
 8004ea4:	f3bf 8f4f 	dsb	sy
 8004ea8:	b662      	cpsie	i
 8004eaa:	607b      	str	r3, [r7, #4]
}
 8004eac:	bf00      	nop
 8004eae:	bf00      	nop
 8004eb0:	e7fd      	b.n	8004eae <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8004eb2:	4b0a      	ldr	r3, [pc, #40]	@ (8004edc <vPortExitCritical+0x54>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	3b01      	subs	r3, #1
 8004eb8:	4a08      	ldr	r2, [pc, #32]	@ (8004edc <vPortExitCritical+0x54>)
 8004eba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004ebc:	4b07      	ldr	r3, [pc, #28]	@ (8004edc <vPortExitCritical+0x54>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d105      	bne.n	8004ed0 <vPortExitCritical+0x48>
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004ece:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004ed0:	bf00      	nop
 8004ed2:	370c      	adds	r7, #12
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eda:	4770      	bx	lr
 8004edc:	2000010c 	.word	0x2000010c

08004ee0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004ee0:	f3ef 8009 	mrs	r0, PSP
 8004ee4:	f3bf 8f6f 	isb	sy
 8004ee8:	4b15      	ldr	r3, [pc, #84]	@ (8004f40 <pxCurrentTCBConst>)
 8004eea:	681a      	ldr	r2, [r3, #0]
 8004eec:	f01e 0f10 	tst.w	lr, #16
 8004ef0:	bf08      	it	eq
 8004ef2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004ef6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004efa:	6010      	str	r0, [r2, #0]
 8004efc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004f00:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004f04:	b672      	cpsid	i
 8004f06:	f380 8811 	msr	BASEPRI, r0
 8004f0a:	f3bf 8f4f 	dsb	sy
 8004f0e:	f3bf 8f6f 	isb	sy
 8004f12:	b662      	cpsie	i
 8004f14:	f7ff fcba 	bl	800488c <vTaskSwitchContext>
 8004f18:	f04f 0000 	mov.w	r0, #0
 8004f1c:	f380 8811 	msr	BASEPRI, r0
 8004f20:	bc09      	pop	{r0, r3}
 8004f22:	6819      	ldr	r1, [r3, #0]
 8004f24:	6808      	ldr	r0, [r1, #0]
 8004f26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f2a:	f01e 0f10 	tst.w	lr, #16
 8004f2e:	bf08      	it	eq
 8004f30:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004f34:	f380 8809 	msr	PSP, r0
 8004f38:	f3bf 8f6f 	isb	sy
 8004f3c:	4770      	bx	lr
 8004f3e:	bf00      	nop

08004f40 <pxCurrentTCBConst>:
 8004f40:	2000098c 	.word	0x2000098c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004f44:	bf00      	nop
 8004f46:	bf00      	nop

08004f48 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b082      	sub	sp, #8
 8004f4c:	af00      	add	r7, sp, #0
	__asm volatile
 8004f4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f52:	b672      	cpsid	i
 8004f54:	f383 8811 	msr	BASEPRI, r3
 8004f58:	f3bf 8f6f 	isb	sy
 8004f5c:	f3bf 8f4f 	dsb	sy
 8004f60:	b662      	cpsie	i
 8004f62:	607b      	str	r3, [r7, #4]
}
 8004f64:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004f66:	f7ff fbd5 	bl	8004714 <xTaskIncrementTick>
 8004f6a:	4603      	mov	r3, r0
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d003      	beq.n	8004f78 <xPortSysTickHandler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004f70:	4b06      	ldr	r3, [pc, #24]	@ (8004f8c <xPortSysTickHandler+0x44>)
 8004f72:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004f76:	601a      	str	r2, [r3, #0]
 8004f78:	2300      	movs	r3, #0
 8004f7a:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	f383 8811 	msr	BASEPRI, r3
}
 8004f82:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004f84:	bf00      	nop
 8004f86:	3708      	adds	r7, #8
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	bd80      	pop	{r7, pc}
 8004f8c:	e000ed04 	.word	0xe000ed04

08004f90 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004f90:	b480      	push	{r7}
 8004f92:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004f94:	4b0b      	ldr	r3, [pc, #44]	@ (8004fc4 <vPortSetupTimerInterrupt+0x34>)
 8004f96:	2200      	movs	r2, #0
 8004f98:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004f9a:	4b0b      	ldr	r3, [pc, #44]	@ (8004fc8 <vPortSetupTimerInterrupt+0x38>)
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004fa0:	4b0a      	ldr	r3, [pc, #40]	@ (8004fcc <vPortSetupTimerInterrupt+0x3c>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4a0a      	ldr	r2, [pc, #40]	@ (8004fd0 <vPortSetupTimerInterrupt+0x40>)
 8004fa6:	fba2 2303 	umull	r2, r3, r2, r3
 8004faa:	099b      	lsrs	r3, r3, #6
 8004fac:	4a09      	ldr	r2, [pc, #36]	@ (8004fd4 <vPortSetupTimerInterrupt+0x44>)
 8004fae:	3b01      	subs	r3, #1
 8004fb0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004fb2:	4b04      	ldr	r3, [pc, #16]	@ (8004fc4 <vPortSetupTimerInterrupt+0x34>)
 8004fb4:	2207      	movs	r2, #7
 8004fb6:	601a      	str	r2, [r3, #0]
}
 8004fb8:	bf00      	nop
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc0:	4770      	bx	lr
 8004fc2:	bf00      	nop
 8004fc4:	e000e010 	.word	0xe000e010
 8004fc8:	e000e018 	.word	0xe000e018
 8004fcc:	20000100 	.word	0x20000100
 8004fd0:	10624dd3 	.word	0x10624dd3
 8004fd4:	e000e014 	.word	0xe000e014

08004fd8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004fd8:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8004fe8 <vPortEnableVFP+0x10>
 8004fdc:	6801      	ldr	r1, [r0, #0]
 8004fde:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8004fe2:	6001      	str	r1, [r0, #0]
 8004fe4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004fe6:	bf00      	nop
 8004fe8:	e000ed88 	.word	0xe000ed88

08004fec <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b08a      	sub	sp, #40	@ 0x28
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004ff8:	f7ff fade 	bl	80045b8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004ffc:	4b5d      	ldr	r3, [pc, #372]	@ (8005174 <pvPortMalloc+0x188>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d101      	bne.n	8005008 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005004:	f000 f920 	bl	8005248 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005008:	4b5b      	ldr	r3, [pc, #364]	@ (8005178 <pvPortMalloc+0x18c>)
 800500a:	681a      	ldr	r2, [r3, #0]
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	4013      	ands	r3, r2
 8005010:	2b00      	cmp	r3, #0
 8005012:	f040 8094 	bne.w	800513e <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d020      	beq.n	800505e <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 800501c:	2208      	movs	r2, #8
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	4413      	add	r3, r2
 8005022:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	f003 0307 	and.w	r3, r3, #7
 800502a:	2b00      	cmp	r3, #0
 800502c:	d017      	beq.n	800505e <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	f023 0307 	bic.w	r3, r3, #7
 8005034:	3308      	adds	r3, #8
 8005036:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	f003 0307 	and.w	r3, r3, #7
 800503e:	2b00      	cmp	r3, #0
 8005040:	d00d      	beq.n	800505e <pvPortMalloc+0x72>
	__asm volatile
 8005042:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005046:	b672      	cpsid	i
 8005048:	f383 8811 	msr	BASEPRI, r3
 800504c:	f3bf 8f6f 	isb	sy
 8005050:	f3bf 8f4f 	dsb	sy
 8005054:	b662      	cpsie	i
 8005056:	617b      	str	r3, [r7, #20]
}
 8005058:	bf00      	nop
 800505a:	bf00      	nop
 800505c:	e7fd      	b.n	800505a <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d06c      	beq.n	800513e <pvPortMalloc+0x152>
 8005064:	4b45      	ldr	r3, [pc, #276]	@ (800517c <pvPortMalloc+0x190>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	687a      	ldr	r2, [r7, #4]
 800506a:	429a      	cmp	r2, r3
 800506c:	d867      	bhi.n	800513e <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800506e:	4b44      	ldr	r3, [pc, #272]	@ (8005180 <pvPortMalloc+0x194>)
 8005070:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005072:	4b43      	ldr	r3, [pc, #268]	@ (8005180 <pvPortMalloc+0x194>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005078:	e004      	b.n	8005084 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 800507a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800507c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800507e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005084:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005086:	685b      	ldr	r3, [r3, #4]
 8005088:	687a      	ldr	r2, [r7, #4]
 800508a:	429a      	cmp	r2, r3
 800508c:	d903      	bls.n	8005096 <pvPortMalloc+0xaa>
 800508e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d1f1      	bne.n	800507a <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005096:	4b37      	ldr	r3, [pc, #220]	@ (8005174 <pvPortMalloc+0x188>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800509c:	429a      	cmp	r2, r3
 800509e:	d04e      	beq.n	800513e <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80050a0:	6a3b      	ldr	r3, [r7, #32]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	2208      	movs	r2, #8
 80050a6:	4413      	add	r3, r2
 80050a8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80050aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050ac:	681a      	ldr	r2, [r3, #0]
 80050ae:	6a3b      	ldr	r3, [r7, #32]
 80050b0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80050b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050b4:	685a      	ldr	r2, [r3, #4]
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	1ad2      	subs	r2, r2, r3
 80050ba:	2308      	movs	r3, #8
 80050bc:	005b      	lsls	r3, r3, #1
 80050be:	429a      	cmp	r2, r3
 80050c0:	d922      	bls.n	8005108 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80050c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	4413      	add	r3, r2
 80050c8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80050ca:	69bb      	ldr	r3, [r7, #24]
 80050cc:	f003 0307 	and.w	r3, r3, #7
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d00d      	beq.n	80050f0 <pvPortMalloc+0x104>
	__asm volatile
 80050d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050d8:	b672      	cpsid	i
 80050da:	f383 8811 	msr	BASEPRI, r3
 80050de:	f3bf 8f6f 	isb	sy
 80050e2:	f3bf 8f4f 	dsb	sy
 80050e6:	b662      	cpsie	i
 80050e8:	613b      	str	r3, [r7, #16]
}
 80050ea:	bf00      	nop
 80050ec:	bf00      	nop
 80050ee:	e7fd      	b.n	80050ec <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80050f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050f2:	685a      	ldr	r2, [r3, #4]
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	1ad2      	subs	r2, r2, r3
 80050f8:	69bb      	ldr	r3, [r7, #24]
 80050fa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80050fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050fe:	687a      	ldr	r2, [r7, #4]
 8005100:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005102:	69b8      	ldr	r0, [r7, #24]
 8005104:	f000 f902 	bl	800530c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005108:	4b1c      	ldr	r3, [pc, #112]	@ (800517c <pvPortMalloc+0x190>)
 800510a:	681a      	ldr	r2, [r3, #0]
 800510c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	1ad3      	subs	r3, r2, r3
 8005112:	4a1a      	ldr	r2, [pc, #104]	@ (800517c <pvPortMalloc+0x190>)
 8005114:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005116:	4b19      	ldr	r3, [pc, #100]	@ (800517c <pvPortMalloc+0x190>)
 8005118:	681a      	ldr	r2, [r3, #0]
 800511a:	4b1a      	ldr	r3, [pc, #104]	@ (8005184 <pvPortMalloc+0x198>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	429a      	cmp	r2, r3
 8005120:	d203      	bcs.n	800512a <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005122:	4b16      	ldr	r3, [pc, #88]	@ (800517c <pvPortMalloc+0x190>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	4a17      	ldr	r2, [pc, #92]	@ (8005184 <pvPortMalloc+0x198>)
 8005128:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800512a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800512c:	685a      	ldr	r2, [r3, #4]
 800512e:	4b12      	ldr	r3, [pc, #72]	@ (8005178 <pvPortMalloc+0x18c>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	431a      	orrs	r2, r3
 8005134:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005136:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005138:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800513a:	2200      	movs	r2, #0
 800513c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800513e:	f7ff fa49 	bl	80045d4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005142:	69fb      	ldr	r3, [r7, #28]
 8005144:	f003 0307 	and.w	r3, r3, #7
 8005148:	2b00      	cmp	r3, #0
 800514a:	d00d      	beq.n	8005168 <pvPortMalloc+0x17c>
	__asm volatile
 800514c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005150:	b672      	cpsid	i
 8005152:	f383 8811 	msr	BASEPRI, r3
 8005156:	f3bf 8f6f 	isb	sy
 800515a:	f3bf 8f4f 	dsb	sy
 800515e:	b662      	cpsie	i
 8005160:	60fb      	str	r3, [r7, #12]
}
 8005162:	bf00      	nop
 8005164:	bf00      	nop
 8005166:	e7fd      	b.n	8005164 <pvPortMalloc+0x178>
	return pvReturn;
 8005168:	69fb      	ldr	r3, [r7, #28]
}
 800516a:	4618      	mov	r0, r3
 800516c:	3728      	adds	r7, #40	@ 0x28
 800516e:	46bd      	mov	sp, r7
 8005170:	bd80      	pop	{r7, pc}
 8005172:	bf00      	nop
 8005174:	200046c8 	.word	0x200046c8
 8005178:	200046d4 	.word	0x200046d4
 800517c:	200046cc 	.word	0x200046cc
 8005180:	200046c0 	.word	0x200046c0
 8005184:	200046d0 	.word	0x200046d0

08005188 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b086      	sub	sp, #24
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d04e      	beq.n	8005238 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800519a:	2308      	movs	r3, #8
 800519c:	425b      	negs	r3, r3
 800519e:	697a      	ldr	r2, [r7, #20]
 80051a0:	4413      	add	r3, r2
 80051a2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80051a4:	697b      	ldr	r3, [r7, #20]
 80051a6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80051a8:	693b      	ldr	r3, [r7, #16]
 80051aa:	685a      	ldr	r2, [r3, #4]
 80051ac:	4b24      	ldr	r3, [pc, #144]	@ (8005240 <vPortFree+0xb8>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4013      	ands	r3, r2
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d10d      	bne.n	80051d2 <vPortFree+0x4a>
	__asm volatile
 80051b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051ba:	b672      	cpsid	i
 80051bc:	f383 8811 	msr	BASEPRI, r3
 80051c0:	f3bf 8f6f 	isb	sy
 80051c4:	f3bf 8f4f 	dsb	sy
 80051c8:	b662      	cpsie	i
 80051ca:	60fb      	str	r3, [r7, #12]
}
 80051cc:	bf00      	nop
 80051ce:	bf00      	nop
 80051d0:	e7fd      	b.n	80051ce <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80051d2:	693b      	ldr	r3, [r7, #16]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d00d      	beq.n	80051f6 <vPortFree+0x6e>
	__asm volatile
 80051da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051de:	b672      	cpsid	i
 80051e0:	f383 8811 	msr	BASEPRI, r3
 80051e4:	f3bf 8f6f 	isb	sy
 80051e8:	f3bf 8f4f 	dsb	sy
 80051ec:	b662      	cpsie	i
 80051ee:	60bb      	str	r3, [r7, #8]
}
 80051f0:	bf00      	nop
 80051f2:	bf00      	nop
 80051f4:	e7fd      	b.n	80051f2 <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80051f6:	693b      	ldr	r3, [r7, #16]
 80051f8:	685a      	ldr	r2, [r3, #4]
 80051fa:	4b11      	ldr	r3, [pc, #68]	@ (8005240 <vPortFree+0xb8>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	4013      	ands	r3, r2
 8005200:	2b00      	cmp	r3, #0
 8005202:	d019      	beq.n	8005238 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005204:	693b      	ldr	r3, [r7, #16]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d115      	bne.n	8005238 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800520c:	693b      	ldr	r3, [r7, #16]
 800520e:	685a      	ldr	r2, [r3, #4]
 8005210:	4b0b      	ldr	r3, [pc, #44]	@ (8005240 <vPortFree+0xb8>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	43db      	mvns	r3, r3
 8005216:	401a      	ands	r2, r3
 8005218:	693b      	ldr	r3, [r7, #16]
 800521a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800521c:	f7ff f9cc 	bl	80045b8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005220:	693b      	ldr	r3, [r7, #16]
 8005222:	685a      	ldr	r2, [r3, #4]
 8005224:	4b07      	ldr	r3, [pc, #28]	@ (8005244 <vPortFree+0xbc>)
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4413      	add	r3, r2
 800522a:	4a06      	ldr	r2, [pc, #24]	@ (8005244 <vPortFree+0xbc>)
 800522c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800522e:	6938      	ldr	r0, [r7, #16]
 8005230:	f000 f86c 	bl	800530c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005234:	f7ff f9ce 	bl	80045d4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005238:	bf00      	nop
 800523a:	3718      	adds	r7, #24
 800523c:	46bd      	mov	sp, r7
 800523e:	bd80      	pop	{r7, pc}
 8005240:	200046d4 	.word	0x200046d4
 8005244:	200046cc 	.word	0x200046cc

08005248 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005248:	b480      	push	{r7}
 800524a:	b085      	sub	sp, #20
 800524c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800524e:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8005252:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005254:	4b27      	ldr	r3, [pc, #156]	@ (80052f4 <prvHeapInit+0xac>)
 8005256:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	f003 0307 	and.w	r3, r3, #7
 800525e:	2b00      	cmp	r3, #0
 8005260:	d00c      	beq.n	800527c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	3307      	adds	r3, #7
 8005266:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	f023 0307 	bic.w	r3, r3, #7
 800526e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005270:	68ba      	ldr	r2, [r7, #8]
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	1ad3      	subs	r3, r2, r3
 8005276:	4a1f      	ldr	r2, [pc, #124]	@ (80052f4 <prvHeapInit+0xac>)
 8005278:	4413      	add	r3, r2
 800527a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005280:	4a1d      	ldr	r2, [pc, #116]	@ (80052f8 <prvHeapInit+0xb0>)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005286:	4b1c      	ldr	r3, [pc, #112]	@ (80052f8 <prvHeapInit+0xb0>)
 8005288:	2200      	movs	r2, #0
 800528a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	68ba      	ldr	r2, [r7, #8]
 8005290:	4413      	add	r3, r2
 8005292:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005294:	2208      	movs	r2, #8
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	1a9b      	subs	r3, r3, r2
 800529a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	f023 0307 	bic.w	r3, r3, #7
 80052a2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	4a15      	ldr	r2, [pc, #84]	@ (80052fc <prvHeapInit+0xb4>)
 80052a8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80052aa:	4b14      	ldr	r3, [pc, #80]	@ (80052fc <prvHeapInit+0xb4>)
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	2200      	movs	r2, #0
 80052b0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80052b2:	4b12      	ldr	r3, [pc, #72]	@ (80052fc <prvHeapInit+0xb4>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	2200      	movs	r2, #0
 80052b8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	68fa      	ldr	r2, [r7, #12]
 80052c2:	1ad2      	subs	r2, r2, r3
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80052c8:	4b0c      	ldr	r3, [pc, #48]	@ (80052fc <prvHeapInit+0xb4>)
 80052ca:	681a      	ldr	r2, [r3, #0]
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	685b      	ldr	r3, [r3, #4]
 80052d4:	4a0a      	ldr	r2, [pc, #40]	@ (8005300 <prvHeapInit+0xb8>)
 80052d6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	685b      	ldr	r3, [r3, #4]
 80052dc:	4a09      	ldr	r2, [pc, #36]	@ (8005304 <prvHeapInit+0xbc>)
 80052de:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80052e0:	4b09      	ldr	r3, [pc, #36]	@ (8005308 <prvHeapInit+0xc0>)
 80052e2:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80052e6:	601a      	str	r2, [r3, #0]
}
 80052e8:	bf00      	nop
 80052ea:	3714      	adds	r7, #20
 80052ec:	46bd      	mov	sp, r7
 80052ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f2:	4770      	bx	lr
 80052f4:	20000ac0 	.word	0x20000ac0
 80052f8:	200046c0 	.word	0x200046c0
 80052fc:	200046c8 	.word	0x200046c8
 8005300:	200046d0 	.word	0x200046d0
 8005304:	200046cc 	.word	0x200046cc
 8005308:	200046d4 	.word	0x200046d4

0800530c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800530c:	b480      	push	{r7}
 800530e:	b085      	sub	sp, #20
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005314:	4b28      	ldr	r3, [pc, #160]	@ (80053b8 <prvInsertBlockIntoFreeList+0xac>)
 8005316:	60fb      	str	r3, [r7, #12]
 8005318:	e002      	b.n	8005320 <prvInsertBlockIntoFreeList+0x14>
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	60fb      	str	r3, [r7, #12]
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	687a      	ldr	r2, [r7, #4]
 8005326:	429a      	cmp	r2, r3
 8005328:	d8f7      	bhi.n	800531a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	685b      	ldr	r3, [r3, #4]
 8005332:	68ba      	ldr	r2, [r7, #8]
 8005334:	4413      	add	r3, r2
 8005336:	687a      	ldr	r2, [r7, #4]
 8005338:	429a      	cmp	r2, r3
 800533a:	d108      	bne.n	800534e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	685a      	ldr	r2, [r3, #4]
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	685b      	ldr	r3, [r3, #4]
 8005344:	441a      	add	r2, r3
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	685b      	ldr	r3, [r3, #4]
 8005356:	68ba      	ldr	r2, [r7, #8]
 8005358:	441a      	add	r2, r3
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	429a      	cmp	r2, r3
 8005360:	d118      	bne.n	8005394 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681a      	ldr	r2, [r3, #0]
 8005366:	4b15      	ldr	r3, [pc, #84]	@ (80053bc <prvInsertBlockIntoFreeList+0xb0>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	429a      	cmp	r2, r3
 800536c:	d00d      	beq.n	800538a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	685a      	ldr	r2, [r3, #4]
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	685b      	ldr	r3, [r3, #4]
 8005378:	441a      	add	r2, r3
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	681a      	ldr	r2, [r3, #0]
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	601a      	str	r2, [r3, #0]
 8005388:	e008      	b.n	800539c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800538a:	4b0c      	ldr	r3, [pc, #48]	@ (80053bc <prvInsertBlockIntoFreeList+0xb0>)
 800538c:	681a      	ldr	r2, [r3, #0]
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	601a      	str	r2, [r3, #0]
 8005392:	e003      	b.n	800539c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681a      	ldr	r2, [r3, #0]
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800539c:	68fa      	ldr	r2, [r7, #12]
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	429a      	cmp	r2, r3
 80053a2:	d002      	beq.n	80053aa <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	687a      	ldr	r2, [r7, #4]
 80053a8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80053aa:	bf00      	nop
 80053ac:	3714      	adds	r7, #20
 80053ae:	46bd      	mov	sp, r7
 80053b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b4:	4770      	bx	lr
 80053b6:	bf00      	nop
 80053b8:	200046c0 	.word	0x200046c0
 80053bc:	200046c8 	.word	0x200046c8

080053c0 <drv_uart1_receive>:

#include "usart.h"
#include "gpio.h"

uint8_t drv_uart1_receive(char * pData, uint16_t size)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b082      	sub	sp, #8
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
 80053c8:	460b      	mov	r3, r1
 80053ca:	807b      	strh	r3, [r7, #2]
	HAL_UART_Receive(&huart1, (uint8_t*)(pData), size, HAL_MAX_DELAY);
 80053cc:	887a      	ldrh	r2, [r7, #2]
 80053ce:	f04f 33ff 	mov.w	r3, #4294967295
 80053d2:	6879      	ldr	r1, [r7, #4]
 80053d4:	4803      	ldr	r0, [pc, #12]	@ (80053e4 <drv_uart1_receive+0x24>)
 80053d6:	f7fd fef4 	bl	80031c2 <HAL_UART_Receive>

	return 0;	// Life's too short for error management
 80053da:	2300      	movs	r3, #0
}
 80053dc:	4618      	mov	r0, r3
 80053de:	3708      	adds	r7, #8
 80053e0:	46bd      	mov	sp, r7
 80053e2:	bd80      	pop	{r7, pc}
 80053e4:	20000900 	.word	0x20000900

080053e8 <drv_uart1_transmit>:

uint8_t drv_uart1_transmit(const char * pData, uint16_t size)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b082      	sub	sp, #8
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
 80053f0:	460b      	mov	r3, r1
 80053f2:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit(&huart1, (uint8_t*)pData, size, HAL_MAX_DELAY);
 80053f4:	887a      	ldrh	r2, [r7, #2]
 80053f6:	f04f 33ff 	mov.w	r3, #4294967295
 80053fa:	6879      	ldr	r1, [r7, #4]
 80053fc:	4803      	ldr	r0, [pc, #12]	@ (800540c <drv_uart1_transmit+0x24>)
 80053fe:	f7fd fe57 	bl	80030b0 <HAL_UART_Transmit>

	return 0;	// Srsly, don't do that kids
 8005402:	2300      	movs	r3, #0
}
 8005404:	4618      	mov	r0, r3
 8005406:	3708      	adds	r7, #8
 8005408:	46bd      	mov	sp, r7
 800540a:	bd80      	pop	{r7, pc}
 800540c:	20000900 	.word	0x20000900

08005410 <sh_help>:

#include "shell.h"

#include <stdio.h>

static int sh_help(h_shell_t * h_shell, int argc, char ** argv) {
 8005410:	b590      	push	{r4, r7, lr}
 8005412:	b08b      	sub	sp, #44	@ 0x2c
 8005414:	af02      	add	r7, sp, #8
 8005416:	60f8      	str	r0, [r7, #12]
 8005418:	60b9      	str	r1, [r7, #8]
 800541a:	607a      	str	r2, [r7, #4]
	int size;

	size = snprintf(h_shell->print_buffer, BUFFER_SIZE, "sh_help appelé avec %d argument(s)\r\n", argc);
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	f503 7041 	add.w	r0, r3, #772	@ 0x304
 8005422:	68bb      	ldr	r3, [r7, #8]
 8005424:	4a35      	ldr	r2, [pc, #212]	@ (80054fc <sh_help+0xec>)
 8005426:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800542a:	f000 fba3 	bl	8005b74 <sniprintf>
 800542e:	6178      	str	r0, [r7, #20]
	h_shell->drv.transmit(h_shell->print_buffer, size);
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	f8d3 3504 	ldr.w	r3, [r3, #1284]	@ 0x504
 8005436:	68fa      	ldr	r2, [r7, #12]
 8005438:	f502 7241 	add.w	r2, r2, #772	@ 0x304
 800543c:	6979      	ldr	r1, [r7, #20]
 800543e:	b289      	uxth	r1, r1
 8005440:	4610      	mov	r0, r2
 8005442:	4798      	blx	r3

	for(int i = 0; i < argc; i++) {
 8005444:	2300      	movs	r3, #0
 8005446:	61fb      	str	r3, [r7, #28]
 8005448:	e01c      	b.n	8005484 <sh_help+0x74>
		size = snprintf(h_shell->print_buffer, BUFFER_SIZE, "argv[%d] = %s\r\n", i, argv[i]);
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	f503 7041 	add.w	r0, r3, #772	@ 0x304
 8005450:	69fb      	ldr	r3, [r7, #28]
 8005452:	009b      	lsls	r3, r3, #2
 8005454:	687a      	ldr	r2, [r7, #4]
 8005456:	4413      	add	r3, r2
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	9300      	str	r3, [sp, #0]
 800545c:	69fb      	ldr	r3, [r7, #28]
 800545e:	4a28      	ldr	r2, [pc, #160]	@ (8005500 <sh_help+0xf0>)
 8005460:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005464:	f000 fb86 	bl	8005b74 <sniprintf>
 8005468:	6178      	str	r0, [r7, #20]
		h_shell->drv.transmit(h_shell->print_buffer, size);
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	f8d3 3504 	ldr.w	r3, [r3, #1284]	@ 0x504
 8005470:	68fa      	ldr	r2, [r7, #12]
 8005472:	f502 7241 	add.w	r2, r2, #772	@ 0x304
 8005476:	6979      	ldr	r1, [r7, #20]
 8005478:	b289      	uxth	r1, r1
 800547a:	4610      	mov	r0, r2
 800547c:	4798      	blx	r3
	for(int i = 0; i < argc; i++) {
 800547e:	69fb      	ldr	r3, [r7, #28]
 8005480:	3301      	adds	r3, #1
 8005482:	61fb      	str	r3, [r7, #28]
 8005484:	69fa      	ldr	r2, [r7, #28]
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	429a      	cmp	r2, r3
 800548a:	dbde      	blt.n	800544a <sh_help+0x3a>
	}

	for(int i = 0 ; i < h_shell->func_list_size ; i++) {
 800548c:	2300      	movs	r3, #0
 800548e:	61bb      	str	r3, [r7, #24]
 8005490:	e02a      	b.n	80054e8 <sh_help+0xd8>
		size = snprintf(h_shell->print_buffer, BUFFER_SIZE, "%c: %s\r\n", h_shell->func_list[i].c, h_shell->func_list[i].description);
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	f503 7041 	add.w	r0, r3, #772	@ 0x304
 8005498:	68f9      	ldr	r1, [r7, #12]
 800549a:	69ba      	ldr	r2, [r7, #24]
 800549c:	4613      	mov	r3, r2
 800549e:	005b      	lsls	r3, r3, #1
 80054a0:	4413      	add	r3, r2
 80054a2:	009b      	lsls	r3, r3, #2
 80054a4:	440b      	add	r3, r1
 80054a6:	3304      	adds	r3, #4
 80054a8:	781b      	ldrb	r3, [r3, #0]
 80054aa:	461c      	mov	r4, r3
 80054ac:	68f9      	ldr	r1, [r7, #12]
 80054ae:	69ba      	ldr	r2, [r7, #24]
 80054b0:	4613      	mov	r3, r2
 80054b2:	005b      	lsls	r3, r3, #1
 80054b4:	4413      	add	r3, r2
 80054b6:	009b      	lsls	r3, r3, #2
 80054b8:	440b      	add	r3, r1
 80054ba:	330c      	adds	r3, #12
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	9300      	str	r3, [sp, #0]
 80054c0:	4623      	mov	r3, r4
 80054c2:	4a10      	ldr	r2, [pc, #64]	@ (8005504 <sh_help+0xf4>)
 80054c4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80054c8:	f000 fb54 	bl	8005b74 <sniprintf>
 80054cc:	6178      	str	r0, [r7, #20]
		h_shell->drv.transmit(h_shell->print_buffer, size);
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	f8d3 3504 	ldr.w	r3, [r3, #1284]	@ 0x504
 80054d4:	68fa      	ldr	r2, [r7, #12]
 80054d6:	f502 7241 	add.w	r2, r2, #772	@ 0x304
 80054da:	6979      	ldr	r1, [r7, #20]
 80054dc:	b289      	uxth	r1, r1
 80054de:	4610      	mov	r0, r2
 80054e0:	4798      	blx	r3
	for(int i = 0 ; i < h_shell->func_list_size ; i++) {
 80054e2:	69bb      	ldr	r3, [r7, #24]
 80054e4:	3301      	adds	r3, #1
 80054e6:	61bb      	str	r3, [r7, #24]
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	69ba      	ldr	r2, [r7, #24]
 80054ee:	429a      	cmp	r2, r3
 80054f0:	dbcf      	blt.n	8005492 <sh_help+0x82>
	}
	return 0;
 80054f2:	2300      	movs	r3, #0
}
 80054f4:	4618      	mov	r0, r3
 80054f6:	3724      	adds	r7, #36	@ 0x24
 80054f8:	46bd      	mov	sp, r7
 80054fa:	bd90      	pop	{r4, r7, pc}
 80054fc:	08006dcc 	.word	0x08006dcc
 8005500:	08006df4 	.word	0x08006df4
 8005504:	08006e04 	.word	0x08006e04

08005508 <shell_init>:

void shell_init(h_shell_t * h_shell) {
 8005508:	b580      	push	{r7, lr}
 800550a:	b084      	sub	sp, #16
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
	int size = 0;
 8005510:	2300      	movs	r3, #0
 8005512:	60fb      	str	r3, [r7, #12]

	h_shell->func_list_size = 0;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2200      	movs	r2, #0
 8005518:	601a      	str	r2, [r3, #0]

	size = snprintf (h_shell->print_buffer, BUFFER_SIZE, "\r\n\r\n===== Monsieur Shell v0.2 =====\r\n");
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	f503 7341 	add.w	r3, r3, #772	@ 0x304
 8005520:	4a17      	ldr	r2, [pc, #92]	@ (8005580 <shell_init+0x78>)
 8005522:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005526:	4618      	mov	r0, r3
 8005528:	f000 fb24 	bl	8005b74 <sniprintf>
 800552c:	60f8      	str	r0, [r7, #12]
	h_shell->drv.transmit(h_shell->print_buffer, size);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	f8d3 3504 	ldr.w	r3, [r3, #1284]	@ 0x504
 8005534:	687a      	ldr	r2, [r7, #4]
 8005536:	f502 7241 	add.w	r2, r2, #772	@ 0x304
 800553a:	68f9      	ldr	r1, [r7, #12]
 800553c:	b289      	uxth	r1, r1
 800553e:	4610      	mov	r0, r2
 8005540:	4798      	blx	r3

	size = snprintf (h_shell->print_buffer, BUFFER_SIZE, "Correction TD (v0.2.1 du coup?)\r\n");
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	f503 7341 	add.w	r3, r3, #772	@ 0x304
 8005548:	4a0e      	ldr	r2, [pc, #56]	@ (8005584 <shell_init+0x7c>)
 800554a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800554e:	4618      	mov	r0, r3
 8005550:	f000 fb10 	bl	8005b74 <sniprintf>
 8005554:	60f8      	str	r0, [r7, #12]
	h_shell->drv.transmit(h_shell->print_buffer, size);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	f8d3 3504 	ldr.w	r3, [r3, #1284]	@ 0x504
 800555c:	687a      	ldr	r2, [r7, #4]
 800555e:	f502 7241 	add.w	r2, r2, #772	@ 0x304
 8005562:	68f9      	ldr	r1, [r7, #12]
 8005564:	b289      	uxth	r1, r1
 8005566:	4610      	mov	r0, r2
 8005568:	4798      	blx	r3

	shell_add(h_shell, 'h', sh_help, "Help");
 800556a:	4b07      	ldr	r3, [pc, #28]	@ (8005588 <shell_init+0x80>)
 800556c:	4a07      	ldr	r2, [pc, #28]	@ (800558c <shell_init+0x84>)
 800556e:	2168      	movs	r1, #104	@ 0x68
 8005570:	6878      	ldr	r0, [r7, #4]
 8005572:	f000 f80d 	bl	8005590 <shell_add>
}
 8005576:	bf00      	nop
 8005578:	3710      	adds	r7, #16
 800557a:	46bd      	mov	sp, r7
 800557c:	bd80      	pop	{r7, pc}
 800557e:	bf00      	nop
 8005580:	08006e10 	.word	0x08006e10
 8005584:	08006e38 	.word	0x08006e38
 8005588:	08006e5c 	.word	0x08006e5c
 800558c:	08005411 	.word	0x08005411

08005590 <shell_add>:

int shell_add(h_shell_t * h_shell, char c, shell_func_pointer_t pfunc, char * description) {
 8005590:	b480      	push	{r7}
 8005592:	b085      	sub	sp, #20
 8005594:	af00      	add	r7, sp, #0
 8005596:	60f8      	str	r0, [r7, #12]
 8005598:	607a      	str	r2, [r7, #4]
 800559a:	603b      	str	r3, [r7, #0]
 800559c:	460b      	mov	r3, r1
 800559e:	72fb      	strb	r3, [r7, #11]
	if (h_shell->func_list_size < SHELL_FUNC_LIST_MAX_SIZE) {
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	2b3f      	cmp	r3, #63	@ 0x3f
 80055a6:	dc27      	bgt.n	80055f8 <shell_add+0x68>
		h_shell->func_list[h_shell->func_list_size].c = c;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681a      	ldr	r2, [r3, #0]
 80055ac:	68f9      	ldr	r1, [r7, #12]
 80055ae:	4613      	mov	r3, r2
 80055b0:	005b      	lsls	r3, r3, #1
 80055b2:	4413      	add	r3, r2
 80055b4:	009b      	lsls	r3, r3, #2
 80055b6:	440b      	add	r3, r1
 80055b8:	3304      	adds	r3, #4
 80055ba:	7afa      	ldrb	r2, [r7, #11]
 80055bc:	701a      	strb	r2, [r3, #0]
		h_shell->func_list[h_shell->func_list_size].func = pfunc;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681a      	ldr	r2, [r3, #0]
 80055c2:	68f9      	ldr	r1, [r7, #12]
 80055c4:	4613      	mov	r3, r2
 80055c6:	005b      	lsls	r3, r3, #1
 80055c8:	4413      	add	r3, r2
 80055ca:	009b      	lsls	r3, r3, #2
 80055cc:	440b      	add	r3, r1
 80055ce:	3308      	adds	r3, #8
 80055d0:	687a      	ldr	r2, [r7, #4]
 80055d2:	601a      	str	r2, [r3, #0]
		h_shell->func_list[h_shell->func_list_size].description = description;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681a      	ldr	r2, [r3, #0]
 80055d8:	68f9      	ldr	r1, [r7, #12]
 80055da:	4613      	mov	r3, r2
 80055dc:	005b      	lsls	r3, r3, #1
 80055de:	4413      	add	r3, r2
 80055e0:	009b      	lsls	r3, r3, #2
 80055e2:	440b      	add	r3, r1
 80055e4:	330c      	adds	r3, #12
 80055e6:	683a      	ldr	r2, [r7, #0]
 80055e8:	601a      	str	r2, [r3, #0]
		h_shell->func_list_size++;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	1c5a      	adds	r2, r3, #1
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	601a      	str	r2, [r3, #0]
		return 0;
 80055f4:	2300      	movs	r3, #0
 80055f6:	e001      	b.n	80055fc <shell_add+0x6c>
	}

	return -1;
 80055f8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80055fc:	4618      	mov	r0, r3
 80055fe:	3714      	adds	r7, #20
 8005600:	46bd      	mov	sp, r7
 8005602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005606:	4770      	bx	lr

08005608 <shell_exec>:

static int shell_exec(h_shell_t * h_shell, char * buf) {
 8005608:	b580      	push	{r7, lr}
 800560a:	b090      	sub	sp, #64	@ 0x40
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
 8005610:	6039      	str	r1, [r7, #0]
	int i;

	char c = buf[0];
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	781b      	ldrb	r3, [r3, #0]
 8005616:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

	int argc;
	char * argv[ARGC_MAX];
	char *p;

	for(i = 0 ; i < h_shell->func_list_size ; i++) {
 800561a:	2300      	movs	r3, #0
 800561c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800561e:	e041      	b.n	80056a4 <shell_exec+0x9c>
		if (h_shell->func_list[i].c == c) {
 8005620:	6879      	ldr	r1, [r7, #4]
 8005622:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005624:	4613      	mov	r3, r2
 8005626:	005b      	lsls	r3, r3, #1
 8005628:	4413      	add	r3, r2
 800562a:	009b      	lsls	r3, r3, #2
 800562c:	440b      	add	r3, r1
 800562e:	3304      	adds	r3, #4
 8005630:	781b      	ldrb	r3, [r3, #0]
 8005632:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 8005636:	429a      	cmp	r2, r3
 8005638:	d131      	bne.n	800569e <shell_exec+0x96>
			argc = 1;
 800563a:	2301      	movs	r3, #1
 800563c:	63bb      	str	r3, [r7, #56]	@ 0x38
			argv[0] = buf;
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	60fb      	str	r3, [r7, #12]

			for(p = buf ; *p != '\0' && argc < ARGC_MAX ; p++){
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	637b      	str	r3, [r7, #52]	@ 0x34
 8005646:	e013      	b.n	8005670 <shell_exec+0x68>
				if(*p == ' ') {
 8005648:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800564a:	781b      	ldrb	r3, [r3, #0]
 800564c:	2b20      	cmp	r3, #32
 800564e:	d10c      	bne.n	800566a <shell_exec+0x62>
					*p = '\0';
 8005650:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005652:	2200      	movs	r2, #0
 8005654:	701a      	strb	r2, [r3, #0]
					argv[argc++] = p+1;
 8005656:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005658:	1c5a      	adds	r2, r3, #1
 800565a:	63ba      	str	r2, [r7, #56]	@ 0x38
 800565c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800565e:	3201      	adds	r2, #1
 8005660:	009b      	lsls	r3, r3, #2
 8005662:	3340      	adds	r3, #64	@ 0x40
 8005664:	443b      	add	r3, r7
 8005666:	f843 2c34 	str.w	r2, [r3, #-52]
			for(p = buf ; *p != '\0' && argc < ARGC_MAX ; p++){
 800566a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800566c:	3301      	adds	r3, #1
 800566e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005670:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005672:	781b      	ldrb	r3, [r3, #0]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d002      	beq.n	800567e <shell_exec+0x76>
 8005678:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800567a:	2b07      	cmp	r3, #7
 800567c:	dde4      	ble.n	8005648 <shell_exec+0x40>
				}
			}

			return h_shell->func_list[i].func(h_shell, argc, argv);
 800567e:	6879      	ldr	r1, [r7, #4]
 8005680:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005682:	4613      	mov	r3, r2
 8005684:	005b      	lsls	r3, r3, #1
 8005686:	4413      	add	r3, r2
 8005688:	009b      	lsls	r3, r3, #2
 800568a:	440b      	add	r3, r1
 800568c:	3308      	adds	r3, #8
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f107 020c 	add.w	r2, r7, #12
 8005694:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005696:	6878      	ldr	r0, [r7, #4]
 8005698:	4798      	blx	r3
 800569a:	4603      	mov	r3, r0
 800569c:	e01e      	b.n	80056dc <shell_exec+0xd4>
	for(i = 0 ; i < h_shell->func_list_size ; i++) {
 800569e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80056a0:	3301      	adds	r3, #1
 80056a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80056aa:	429a      	cmp	r2, r3
 80056ac:	dbb8      	blt.n	8005620 <shell_exec+0x18>
		}
	}

	int size;
	size = snprintf (h_shell->print_buffer, BUFFER_SIZE, "%c: no such command\r\n", c);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	f503 7041 	add.w	r0, r3, #772	@ 0x304
 80056b4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80056b8:	4a0a      	ldr	r2, [pc, #40]	@ (80056e4 <shell_exec+0xdc>)
 80056ba:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80056be:	f000 fa59 	bl	8005b74 <sniprintf>
 80056c2:	62f8      	str	r0, [r7, #44]	@ 0x2c
	h_shell->drv.transmit(h_shell->print_buffer, size);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	f8d3 3504 	ldr.w	r3, [r3, #1284]	@ 0x504
 80056ca:	687a      	ldr	r2, [r7, #4]
 80056cc:	f502 7241 	add.w	r2, r2, #772	@ 0x304
 80056d0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80056d2:	b289      	uxth	r1, r1
 80056d4:	4610      	mov	r0, r2
 80056d6:	4798      	blx	r3
	return -1;
 80056d8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80056dc:	4618      	mov	r0, r3
 80056de:	3740      	adds	r7, #64	@ 0x40
 80056e0:	46bd      	mov	sp, r7
 80056e2:	bd80      	pop	{r7, pc}
 80056e4:	08006e64 	.word	0x08006e64

080056e8 <shell_run>:

static const char backspace[] = "\b \b";
static const char prompt[] = "> ";

int shell_run(h_shell_t * h_shell) {
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b086      	sub	sp, #24
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
	int reading = 0;
 80056f0:	2300      	movs	r3, #0
 80056f2:	617b      	str	r3, [r7, #20]
	int pos = 0;
 80056f4:	2300      	movs	r3, #0
 80056f6:	613b      	str	r3, [r7, #16]

	while (1) {
		h_shell->drv.transmit(prompt, 2);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	f8d3 3504 	ldr.w	r3, [r3, #1284]	@ 0x504
 80056fe:	2102      	movs	r1, #2
 8005700:	483b      	ldr	r0, [pc, #236]	@ (80057f0 <shell_run+0x108>)
 8005702:	4798      	blx	r3
		reading = 1;
 8005704:	2301      	movs	r3, #1
 8005706:	617b      	str	r3, [r7, #20]

		while(reading) {
 8005708:	e066      	b.n	80057d8 <shell_run+0xf0>
			char c;
			h_shell->drv.receive(&c, 1);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 8005710:	f107 020b 	add.w	r2, r7, #11
 8005714:	2101      	movs	r1, #1
 8005716:	4610      	mov	r0, r2
 8005718:	4798      	blx	r3
			int size;

			switch (c) {
 800571a:	7afb      	ldrb	r3, [r7, #11]
 800571c:	2b08      	cmp	r3, #8
 800571e:	d038      	beq.n	8005792 <shell_run+0xaa>
 8005720:	2b0d      	cmp	r3, #13
 8005722:	d143      	bne.n	80057ac <shell_run+0xc4>
			//process RETURN key
			case '\r':
				//case '\n':
				size = snprintf (h_shell->print_buffer, BUFFER_SIZE, "\r\n");
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	f503 7341 	add.w	r3, r3, #772	@ 0x304
 800572a:	4a32      	ldr	r2, [pc, #200]	@ (80057f4 <shell_run+0x10c>)
 800572c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005730:	4618      	mov	r0, r3
 8005732:	f000 fa1f 	bl	8005b74 <sniprintf>
 8005736:	60f8      	str	r0, [r7, #12]
				h_shell->drv.transmit(h_shell->print_buffer, size);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	@ 0x504
 800573e:	687a      	ldr	r2, [r7, #4]
 8005740:	f502 7241 	add.w	r2, r2, #772	@ 0x304
 8005744:	68f9      	ldr	r1, [r7, #12]
 8005746:	b289      	uxth	r1, r1
 8005748:	4610      	mov	r0, r2
 800574a:	4798      	blx	r3
				h_shell->cmd_buffer[pos++] = 0;     //add \0 char at end of string
 800574c:	693b      	ldr	r3, [r7, #16]
 800574e:	1c5a      	adds	r2, r3, #1
 8005750:	613a      	str	r2, [r7, #16]
 8005752:	687a      	ldr	r2, [r7, #4]
 8005754:	4413      	add	r3, r2
 8005756:	2200      	movs	r2, #0
 8005758:	f883 2404 	strb.w	r2, [r3, #1028]	@ 0x404
				size = snprintf (h_shell->print_buffer, BUFFER_SIZE, ":%s\r\n", h_shell->cmd_buffer);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	f503 7041 	add.w	r0, r3, #772	@ 0x304
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005768:	4a23      	ldr	r2, [pc, #140]	@ (80057f8 <shell_run+0x110>)
 800576a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800576e:	f000 fa01 	bl	8005b74 <sniprintf>
 8005772:	60f8      	str	r0, [r7, #12]
				h_shell->drv.transmit(h_shell->print_buffer, size);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	f8d3 3504 	ldr.w	r3, [r3, #1284]	@ 0x504
 800577a:	687a      	ldr	r2, [r7, #4]
 800577c:	f502 7241 	add.w	r2, r2, #772	@ 0x304
 8005780:	68f9      	ldr	r1, [r7, #12]
 8005782:	b289      	uxth	r1, r1
 8005784:	4610      	mov	r0, r2
 8005786:	4798      	blx	r3
				reading = 0;        //exit read loop
 8005788:	2300      	movs	r3, #0
 800578a:	617b      	str	r3, [r7, #20]
				pos = 0;            //reset buffer
 800578c:	2300      	movs	r3, #0
 800578e:	613b      	str	r3, [r7, #16]
				break;
 8005790:	e022      	b.n	80057d8 <shell_run+0xf0>
				//backspace
			case '\b':
				if (pos > 0) {      //is there a char to delete?
 8005792:	693b      	ldr	r3, [r7, #16]
 8005794:	2b00      	cmp	r3, #0
 8005796:	dd1e      	ble.n	80057d6 <shell_run+0xee>
					pos--;          //remove it in buffer
 8005798:	693b      	ldr	r3, [r7, #16]
 800579a:	3b01      	subs	r3, #1
 800579c:	613b      	str	r3, [r7, #16]

					h_shell->drv.transmit(backspace, 3);	// delete the char on the terminal
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	f8d3 3504 	ldr.w	r3, [r3, #1284]	@ 0x504
 80057a4:	2103      	movs	r1, #3
 80057a6:	4815      	ldr	r0, [pc, #84]	@ (80057fc <shell_run+0x114>)
 80057a8:	4798      	blx	r3
				}
				break;
 80057aa:	e014      	b.n	80057d6 <shell_run+0xee>
				//other characters
			default:
				//only store characters if buffer has space
				if (pos < BUFFER_SIZE) {
 80057ac:	693b      	ldr	r3, [r7, #16]
 80057ae:	2bff      	cmp	r3, #255	@ 0xff
 80057b0:	dc12      	bgt.n	80057d8 <shell_run+0xf0>
					h_shell->drv.transmit(&c, 1);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	f8d3 3504 	ldr.w	r3, [r3, #1284]	@ 0x504
 80057b8:	f107 020b 	add.w	r2, r7, #11
 80057bc:	2101      	movs	r1, #1
 80057be:	4610      	mov	r0, r2
 80057c0:	4798      	blx	r3
					h_shell->cmd_buffer[pos++] = c; //store
 80057c2:	693b      	ldr	r3, [r7, #16]
 80057c4:	1c5a      	adds	r2, r3, #1
 80057c6:	613a      	str	r2, [r7, #16]
 80057c8:	7af9      	ldrb	r1, [r7, #11]
 80057ca:	687a      	ldr	r2, [r7, #4]
 80057cc:	4413      	add	r3, r2
 80057ce:	460a      	mov	r2, r1
 80057d0:	f883 2404 	strb.w	r2, [r3, #1028]	@ 0x404
 80057d4:	e000      	b.n	80057d8 <shell_run+0xf0>
				break;
 80057d6:	bf00      	nop
		while(reading) {
 80057d8:	697b      	ldr	r3, [r7, #20]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d195      	bne.n	800570a <shell_run+0x22>
				}
			}
		}
		shell_exec(h_shell, h_shell->cmd_buffer);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80057e4:	4619      	mov	r1, r3
 80057e6:	6878      	ldr	r0, [r7, #4]
 80057e8:	f7ff ff0e 	bl	8005608 <shell_exec>
		h_shell->drv.transmit(prompt, 2);
 80057ec:	e784      	b.n	80056f8 <shell_run+0x10>
 80057ee:	bf00      	nop
 80057f0:	08006ea4 	.word	0x08006ea4
 80057f4:	08006e7c 	.word	0x08006e7c
 80057f8:	08006e80 	.word	0x08006e80
 80057fc:	08006ea0 	.word	0x08006ea0

08005800 <atoi>:
 8005800:	220a      	movs	r2, #10
 8005802:	2100      	movs	r1, #0
 8005804:	f000 b87a 	b.w	80058fc <strtol>

08005808 <_strtol_l.isra.0>:
 8005808:	2b24      	cmp	r3, #36	@ 0x24
 800580a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800580e:	4686      	mov	lr, r0
 8005810:	4690      	mov	r8, r2
 8005812:	d801      	bhi.n	8005818 <_strtol_l.isra.0+0x10>
 8005814:	2b01      	cmp	r3, #1
 8005816:	d106      	bne.n	8005826 <_strtol_l.isra.0+0x1e>
 8005818:	f000 fb1c 	bl	8005e54 <__errno>
 800581c:	2316      	movs	r3, #22
 800581e:	6003      	str	r3, [r0, #0]
 8005820:	2000      	movs	r0, #0
 8005822:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005826:	4834      	ldr	r0, [pc, #208]	@ (80058f8 <_strtol_l.isra.0+0xf0>)
 8005828:	460d      	mov	r5, r1
 800582a:	462a      	mov	r2, r5
 800582c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005830:	5d06      	ldrb	r6, [r0, r4]
 8005832:	f016 0608 	ands.w	r6, r6, #8
 8005836:	d1f8      	bne.n	800582a <_strtol_l.isra.0+0x22>
 8005838:	2c2d      	cmp	r4, #45	@ 0x2d
 800583a:	d110      	bne.n	800585e <_strtol_l.isra.0+0x56>
 800583c:	782c      	ldrb	r4, [r5, #0]
 800583e:	2601      	movs	r6, #1
 8005840:	1c95      	adds	r5, r2, #2
 8005842:	f033 0210 	bics.w	r2, r3, #16
 8005846:	d115      	bne.n	8005874 <_strtol_l.isra.0+0x6c>
 8005848:	2c30      	cmp	r4, #48	@ 0x30
 800584a:	d10d      	bne.n	8005868 <_strtol_l.isra.0+0x60>
 800584c:	782a      	ldrb	r2, [r5, #0]
 800584e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8005852:	2a58      	cmp	r2, #88	@ 0x58
 8005854:	d108      	bne.n	8005868 <_strtol_l.isra.0+0x60>
 8005856:	786c      	ldrb	r4, [r5, #1]
 8005858:	3502      	adds	r5, #2
 800585a:	2310      	movs	r3, #16
 800585c:	e00a      	b.n	8005874 <_strtol_l.isra.0+0x6c>
 800585e:	2c2b      	cmp	r4, #43	@ 0x2b
 8005860:	bf04      	itt	eq
 8005862:	782c      	ldrbeq	r4, [r5, #0]
 8005864:	1c95      	addeq	r5, r2, #2
 8005866:	e7ec      	b.n	8005842 <_strtol_l.isra.0+0x3a>
 8005868:	2b00      	cmp	r3, #0
 800586a:	d1f6      	bne.n	800585a <_strtol_l.isra.0+0x52>
 800586c:	2c30      	cmp	r4, #48	@ 0x30
 800586e:	bf14      	ite	ne
 8005870:	230a      	movne	r3, #10
 8005872:	2308      	moveq	r3, #8
 8005874:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8005878:	f10c 3cff 	add.w	ip, ip, #4294967295
 800587c:	2200      	movs	r2, #0
 800587e:	fbbc f9f3 	udiv	r9, ip, r3
 8005882:	4610      	mov	r0, r2
 8005884:	fb03 ca19 	mls	sl, r3, r9, ip
 8005888:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800588c:	2f09      	cmp	r7, #9
 800588e:	d80f      	bhi.n	80058b0 <_strtol_l.isra.0+0xa8>
 8005890:	463c      	mov	r4, r7
 8005892:	42a3      	cmp	r3, r4
 8005894:	dd1b      	ble.n	80058ce <_strtol_l.isra.0+0xc6>
 8005896:	1c57      	adds	r7, r2, #1
 8005898:	d007      	beq.n	80058aa <_strtol_l.isra.0+0xa2>
 800589a:	4581      	cmp	r9, r0
 800589c:	d314      	bcc.n	80058c8 <_strtol_l.isra.0+0xc0>
 800589e:	d101      	bne.n	80058a4 <_strtol_l.isra.0+0x9c>
 80058a0:	45a2      	cmp	sl, r4
 80058a2:	db11      	blt.n	80058c8 <_strtol_l.isra.0+0xc0>
 80058a4:	fb00 4003 	mla	r0, r0, r3, r4
 80058a8:	2201      	movs	r2, #1
 80058aa:	f815 4b01 	ldrb.w	r4, [r5], #1
 80058ae:	e7eb      	b.n	8005888 <_strtol_l.isra.0+0x80>
 80058b0:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80058b4:	2f19      	cmp	r7, #25
 80058b6:	d801      	bhi.n	80058bc <_strtol_l.isra.0+0xb4>
 80058b8:	3c37      	subs	r4, #55	@ 0x37
 80058ba:	e7ea      	b.n	8005892 <_strtol_l.isra.0+0x8a>
 80058bc:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80058c0:	2f19      	cmp	r7, #25
 80058c2:	d804      	bhi.n	80058ce <_strtol_l.isra.0+0xc6>
 80058c4:	3c57      	subs	r4, #87	@ 0x57
 80058c6:	e7e4      	b.n	8005892 <_strtol_l.isra.0+0x8a>
 80058c8:	f04f 32ff 	mov.w	r2, #4294967295
 80058cc:	e7ed      	b.n	80058aa <_strtol_l.isra.0+0xa2>
 80058ce:	1c53      	adds	r3, r2, #1
 80058d0:	d108      	bne.n	80058e4 <_strtol_l.isra.0+0xdc>
 80058d2:	2322      	movs	r3, #34	@ 0x22
 80058d4:	f8ce 3000 	str.w	r3, [lr]
 80058d8:	4660      	mov	r0, ip
 80058da:	f1b8 0f00 	cmp.w	r8, #0
 80058de:	d0a0      	beq.n	8005822 <_strtol_l.isra.0+0x1a>
 80058e0:	1e69      	subs	r1, r5, #1
 80058e2:	e006      	b.n	80058f2 <_strtol_l.isra.0+0xea>
 80058e4:	b106      	cbz	r6, 80058e8 <_strtol_l.isra.0+0xe0>
 80058e6:	4240      	negs	r0, r0
 80058e8:	f1b8 0f00 	cmp.w	r8, #0
 80058ec:	d099      	beq.n	8005822 <_strtol_l.isra.0+0x1a>
 80058ee:	2a00      	cmp	r2, #0
 80058f0:	d1f6      	bne.n	80058e0 <_strtol_l.isra.0+0xd8>
 80058f2:	f8c8 1000 	str.w	r1, [r8]
 80058f6:	e794      	b.n	8005822 <_strtol_l.isra.0+0x1a>
 80058f8:	08006ea8 	.word	0x08006ea8

080058fc <strtol>:
 80058fc:	4613      	mov	r3, r2
 80058fe:	460a      	mov	r2, r1
 8005900:	4601      	mov	r1, r0
 8005902:	4802      	ldr	r0, [pc, #8]	@ (800590c <strtol+0x10>)
 8005904:	6800      	ldr	r0, [r0, #0]
 8005906:	f7ff bf7f 	b.w	8005808 <_strtol_l.isra.0>
 800590a:	bf00      	nop
 800590c:	2000011c 	.word	0x2000011c

08005910 <std>:
 8005910:	2300      	movs	r3, #0
 8005912:	b510      	push	{r4, lr}
 8005914:	4604      	mov	r4, r0
 8005916:	e9c0 3300 	strd	r3, r3, [r0]
 800591a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800591e:	6083      	str	r3, [r0, #8]
 8005920:	8181      	strh	r1, [r0, #12]
 8005922:	6643      	str	r3, [r0, #100]	@ 0x64
 8005924:	81c2      	strh	r2, [r0, #14]
 8005926:	6183      	str	r3, [r0, #24]
 8005928:	4619      	mov	r1, r3
 800592a:	2208      	movs	r2, #8
 800592c:	305c      	adds	r0, #92	@ 0x5c
 800592e:	f000 fa2f 	bl	8005d90 <memset>
 8005932:	4b0d      	ldr	r3, [pc, #52]	@ (8005968 <std+0x58>)
 8005934:	6263      	str	r3, [r4, #36]	@ 0x24
 8005936:	4b0d      	ldr	r3, [pc, #52]	@ (800596c <std+0x5c>)
 8005938:	62a3      	str	r3, [r4, #40]	@ 0x28
 800593a:	4b0d      	ldr	r3, [pc, #52]	@ (8005970 <std+0x60>)
 800593c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800593e:	4b0d      	ldr	r3, [pc, #52]	@ (8005974 <std+0x64>)
 8005940:	6323      	str	r3, [r4, #48]	@ 0x30
 8005942:	4b0d      	ldr	r3, [pc, #52]	@ (8005978 <std+0x68>)
 8005944:	6224      	str	r4, [r4, #32]
 8005946:	429c      	cmp	r4, r3
 8005948:	d006      	beq.n	8005958 <std+0x48>
 800594a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800594e:	4294      	cmp	r4, r2
 8005950:	d002      	beq.n	8005958 <std+0x48>
 8005952:	33d0      	adds	r3, #208	@ 0xd0
 8005954:	429c      	cmp	r4, r3
 8005956:	d105      	bne.n	8005964 <std+0x54>
 8005958:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800595c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005960:	f000 baa2 	b.w	8005ea8 <__retarget_lock_init_recursive>
 8005964:	bd10      	pop	{r4, pc}
 8005966:	bf00      	nop
 8005968:	08005be1 	.word	0x08005be1
 800596c:	08005c03 	.word	0x08005c03
 8005970:	08005c3b 	.word	0x08005c3b
 8005974:	08005c5f 	.word	0x08005c5f
 8005978:	200046d8 	.word	0x200046d8

0800597c <stdio_exit_handler>:
 800597c:	4a02      	ldr	r2, [pc, #8]	@ (8005988 <stdio_exit_handler+0xc>)
 800597e:	4903      	ldr	r1, [pc, #12]	@ (800598c <stdio_exit_handler+0x10>)
 8005980:	4803      	ldr	r0, [pc, #12]	@ (8005990 <stdio_exit_handler+0x14>)
 8005982:	f000 b869 	b.w	8005a58 <_fwalk_sglue>
 8005986:	bf00      	nop
 8005988:	20000110 	.word	0x20000110
 800598c:	08006a11 	.word	0x08006a11
 8005990:	20000120 	.word	0x20000120

08005994 <cleanup_stdio>:
 8005994:	6841      	ldr	r1, [r0, #4]
 8005996:	4b0c      	ldr	r3, [pc, #48]	@ (80059c8 <cleanup_stdio+0x34>)
 8005998:	4299      	cmp	r1, r3
 800599a:	b510      	push	{r4, lr}
 800599c:	4604      	mov	r4, r0
 800599e:	d001      	beq.n	80059a4 <cleanup_stdio+0x10>
 80059a0:	f001 f836 	bl	8006a10 <_fflush_r>
 80059a4:	68a1      	ldr	r1, [r4, #8]
 80059a6:	4b09      	ldr	r3, [pc, #36]	@ (80059cc <cleanup_stdio+0x38>)
 80059a8:	4299      	cmp	r1, r3
 80059aa:	d002      	beq.n	80059b2 <cleanup_stdio+0x1e>
 80059ac:	4620      	mov	r0, r4
 80059ae:	f001 f82f 	bl	8006a10 <_fflush_r>
 80059b2:	68e1      	ldr	r1, [r4, #12]
 80059b4:	4b06      	ldr	r3, [pc, #24]	@ (80059d0 <cleanup_stdio+0x3c>)
 80059b6:	4299      	cmp	r1, r3
 80059b8:	d004      	beq.n	80059c4 <cleanup_stdio+0x30>
 80059ba:	4620      	mov	r0, r4
 80059bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80059c0:	f001 b826 	b.w	8006a10 <_fflush_r>
 80059c4:	bd10      	pop	{r4, pc}
 80059c6:	bf00      	nop
 80059c8:	200046d8 	.word	0x200046d8
 80059cc:	20004740 	.word	0x20004740
 80059d0:	200047a8 	.word	0x200047a8

080059d4 <global_stdio_init.part.0>:
 80059d4:	b510      	push	{r4, lr}
 80059d6:	4b0b      	ldr	r3, [pc, #44]	@ (8005a04 <global_stdio_init.part.0+0x30>)
 80059d8:	4c0b      	ldr	r4, [pc, #44]	@ (8005a08 <global_stdio_init.part.0+0x34>)
 80059da:	4a0c      	ldr	r2, [pc, #48]	@ (8005a0c <global_stdio_init.part.0+0x38>)
 80059dc:	601a      	str	r2, [r3, #0]
 80059de:	4620      	mov	r0, r4
 80059e0:	2200      	movs	r2, #0
 80059e2:	2104      	movs	r1, #4
 80059e4:	f7ff ff94 	bl	8005910 <std>
 80059e8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80059ec:	2201      	movs	r2, #1
 80059ee:	2109      	movs	r1, #9
 80059f0:	f7ff ff8e 	bl	8005910 <std>
 80059f4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80059f8:	2202      	movs	r2, #2
 80059fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80059fe:	2112      	movs	r1, #18
 8005a00:	f7ff bf86 	b.w	8005910 <std>
 8005a04:	20004810 	.word	0x20004810
 8005a08:	200046d8 	.word	0x200046d8
 8005a0c:	0800597d 	.word	0x0800597d

08005a10 <__sfp_lock_acquire>:
 8005a10:	4801      	ldr	r0, [pc, #4]	@ (8005a18 <__sfp_lock_acquire+0x8>)
 8005a12:	f000 ba4a 	b.w	8005eaa <__retarget_lock_acquire_recursive>
 8005a16:	bf00      	nop
 8005a18:	20004819 	.word	0x20004819

08005a1c <__sfp_lock_release>:
 8005a1c:	4801      	ldr	r0, [pc, #4]	@ (8005a24 <__sfp_lock_release+0x8>)
 8005a1e:	f000 ba45 	b.w	8005eac <__retarget_lock_release_recursive>
 8005a22:	bf00      	nop
 8005a24:	20004819 	.word	0x20004819

08005a28 <__sinit>:
 8005a28:	b510      	push	{r4, lr}
 8005a2a:	4604      	mov	r4, r0
 8005a2c:	f7ff fff0 	bl	8005a10 <__sfp_lock_acquire>
 8005a30:	6a23      	ldr	r3, [r4, #32]
 8005a32:	b11b      	cbz	r3, 8005a3c <__sinit+0x14>
 8005a34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a38:	f7ff bff0 	b.w	8005a1c <__sfp_lock_release>
 8005a3c:	4b04      	ldr	r3, [pc, #16]	@ (8005a50 <__sinit+0x28>)
 8005a3e:	6223      	str	r3, [r4, #32]
 8005a40:	4b04      	ldr	r3, [pc, #16]	@ (8005a54 <__sinit+0x2c>)
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d1f5      	bne.n	8005a34 <__sinit+0xc>
 8005a48:	f7ff ffc4 	bl	80059d4 <global_stdio_init.part.0>
 8005a4c:	e7f2      	b.n	8005a34 <__sinit+0xc>
 8005a4e:	bf00      	nop
 8005a50:	08005995 	.word	0x08005995
 8005a54:	20004810 	.word	0x20004810

08005a58 <_fwalk_sglue>:
 8005a58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005a5c:	4607      	mov	r7, r0
 8005a5e:	4688      	mov	r8, r1
 8005a60:	4614      	mov	r4, r2
 8005a62:	2600      	movs	r6, #0
 8005a64:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005a68:	f1b9 0901 	subs.w	r9, r9, #1
 8005a6c:	d505      	bpl.n	8005a7a <_fwalk_sglue+0x22>
 8005a6e:	6824      	ldr	r4, [r4, #0]
 8005a70:	2c00      	cmp	r4, #0
 8005a72:	d1f7      	bne.n	8005a64 <_fwalk_sglue+0xc>
 8005a74:	4630      	mov	r0, r6
 8005a76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005a7a:	89ab      	ldrh	r3, [r5, #12]
 8005a7c:	2b01      	cmp	r3, #1
 8005a7e:	d907      	bls.n	8005a90 <_fwalk_sglue+0x38>
 8005a80:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005a84:	3301      	adds	r3, #1
 8005a86:	d003      	beq.n	8005a90 <_fwalk_sglue+0x38>
 8005a88:	4629      	mov	r1, r5
 8005a8a:	4638      	mov	r0, r7
 8005a8c:	47c0      	blx	r8
 8005a8e:	4306      	orrs	r6, r0
 8005a90:	3568      	adds	r5, #104	@ 0x68
 8005a92:	e7e9      	b.n	8005a68 <_fwalk_sglue+0x10>

08005a94 <iprintf>:
 8005a94:	b40f      	push	{r0, r1, r2, r3}
 8005a96:	b507      	push	{r0, r1, r2, lr}
 8005a98:	4906      	ldr	r1, [pc, #24]	@ (8005ab4 <iprintf+0x20>)
 8005a9a:	ab04      	add	r3, sp, #16
 8005a9c:	6808      	ldr	r0, [r1, #0]
 8005a9e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005aa2:	6881      	ldr	r1, [r0, #8]
 8005aa4:	9301      	str	r3, [sp, #4]
 8005aa6:	f000 fc8b 	bl	80063c0 <_vfiprintf_r>
 8005aaa:	b003      	add	sp, #12
 8005aac:	f85d eb04 	ldr.w	lr, [sp], #4
 8005ab0:	b004      	add	sp, #16
 8005ab2:	4770      	bx	lr
 8005ab4:	2000011c 	.word	0x2000011c

08005ab8 <_puts_r>:
 8005ab8:	6a03      	ldr	r3, [r0, #32]
 8005aba:	b570      	push	{r4, r5, r6, lr}
 8005abc:	6884      	ldr	r4, [r0, #8]
 8005abe:	4605      	mov	r5, r0
 8005ac0:	460e      	mov	r6, r1
 8005ac2:	b90b      	cbnz	r3, 8005ac8 <_puts_r+0x10>
 8005ac4:	f7ff ffb0 	bl	8005a28 <__sinit>
 8005ac8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005aca:	07db      	lsls	r3, r3, #31
 8005acc:	d405      	bmi.n	8005ada <_puts_r+0x22>
 8005ace:	89a3      	ldrh	r3, [r4, #12]
 8005ad0:	0598      	lsls	r0, r3, #22
 8005ad2:	d402      	bmi.n	8005ada <_puts_r+0x22>
 8005ad4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005ad6:	f000 f9e8 	bl	8005eaa <__retarget_lock_acquire_recursive>
 8005ada:	89a3      	ldrh	r3, [r4, #12]
 8005adc:	0719      	lsls	r1, r3, #28
 8005ade:	d502      	bpl.n	8005ae6 <_puts_r+0x2e>
 8005ae0:	6923      	ldr	r3, [r4, #16]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d135      	bne.n	8005b52 <_puts_r+0x9a>
 8005ae6:	4621      	mov	r1, r4
 8005ae8:	4628      	mov	r0, r5
 8005aea:	f000 f8fb 	bl	8005ce4 <__swsetup_r>
 8005aee:	b380      	cbz	r0, 8005b52 <_puts_r+0x9a>
 8005af0:	f04f 35ff 	mov.w	r5, #4294967295
 8005af4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005af6:	07da      	lsls	r2, r3, #31
 8005af8:	d405      	bmi.n	8005b06 <_puts_r+0x4e>
 8005afa:	89a3      	ldrh	r3, [r4, #12]
 8005afc:	059b      	lsls	r3, r3, #22
 8005afe:	d402      	bmi.n	8005b06 <_puts_r+0x4e>
 8005b00:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005b02:	f000 f9d3 	bl	8005eac <__retarget_lock_release_recursive>
 8005b06:	4628      	mov	r0, r5
 8005b08:	bd70      	pop	{r4, r5, r6, pc}
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	da04      	bge.n	8005b18 <_puts_r+0x60>
 8005b0e:	69a2      	ldr	r2, [r4, #24]
 8005b10:	429a      	cmp	r2, r3
 8005b12:	dc17      	bgt.n	8005b44 <_puts_r+0x8c>
 8005b14:	290a      	cmp	r1, #10
 8005b16:	d015      	beq.n	8005b44 <_puts_r+0x8c>
 8005b18:	6823      	ldr	r3, [r4, #0]
 8005b1a:	1c5a      	adds	r2, r3, #1
 8005b1c:	6022      	str	r2, [r4, #0]
 8005b1e:	7019      	strb	r1, [r3, #0]
 8005b20:	68a3      	ldr	r3, [r4, #8]
 8005b22:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005b26:	3b01      	subs	r3, #1
 8005b28:	60a3      	str	r3, [r4, #8]
 8005b2a:	2900      	cmp	r1, #0
 8005b2c:	d1ed      	bne.n	8005b0a <_puts_r+0x52>
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	da11      	bge.n	8005b56 <_puts_r+0x9e>
 8005b32:	4622      	mov	r2, r4
 8005b34:	210a      	movs	r1, #10
 8005b36:	4628      	mov	r0, r5
 8005b38:	f000 f895 	bl	8005c66 <__swbuf_r>
 8005b3c:	3001      	adds	r0, #1
 8005b3e:	d0d7      	beq.n	8005af0 <_puts_r+0x38>
 8005b40:	250a      	movs	r5, #10
 8005b42:	e7d7      	b.n	8005af4 <_puts_r+0x3c>
 8005b44:	4622      	mov	r2, r4
 8005b46:	4628      	mov	r0, r5
 8005b48:	f000 f88d 	bl	8005c66 <__swbuf_r>
 8005b4c:	3001      	adds	r0, #1
 8005b4e:	d1e7      	bne.n	8005b20 <_puts_r+0x68>
 8005b50:	e7ce      	b.n	8005af0 <_puts_r+0x38>
 8005b52:	3e01      	subs	r6, #1
 8005b54:	e7e4      	b.n	8005b20 <_puts_r+0x68>
 8005b56:	6823      	ldr	r3, [r4, #0]
 8005b58:	1c5a      	adds	r2, r3, #1
 8005b5a:	6022      	str	r2, [r4, #0]
 8005b5c:	220a      	movs	r2, #10
 8005b5e:	701a      	strb	r2, [r3, #0]
 8005b60:	e7ee      	b.n	8005b40 <_puts_r+0x88>
	...

08005b64 <puts>:
 8005b64:	4b02      	ldr	r3, [pc, #8]	@ (8005b70 <puts+0xc>)
 8005b66:	4601      	mov	r1, r0
 8005b68:	6818      	ldr	r0, [r3, #0]
 8005b6a:	f7ff bfa5 	b.w	8005ab8 <_puts_r>
 8005b6e:	bf00      	nop
 8005b70:	2000011c 	.word	0x2000011c

08005b74 <sniprintf>:
 8005b74:	b40c      	push	{r2, r3}
 8005b76:	b530      	push	{r4, r5, lr}
 8005b78:	4b18      	ldr	r3, [pc, #96]	@ (8005bdc <sniprintf+0x68>)
 8005b7a:	1e0c      	subs	r4, r1, #0
 8005b7c:	681d      	ldr	r5, [r3, #0]
 8005b7e:	b09d      	sub	sp, #116	@ 0x74
 8005b80:	da08      	bge.n	8005b94 <sniprintf+0x20>
 8005b82:	238b      	movs	r3, #139	@ 0x8b
 8005b84:	602b      	str	r3, [r5, #0]
 8005b86:	f04f 30ff 	mov.w	r0, #4294967295
 8005b8a:	b01d      	add	sp, #116	@ 0x74
 8005b8c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005b90:	b002      	add	sp, #8
 8005b92:	4770      	bx	lr
 8005b94:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8005b98:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005b9c:	f04f 0300 	mov.w	r3, #0
 8005ba0:	931b      	str	r3, [sp, #108]	@ 0x6c
 8005ba2:	bf14      	ite	ne
 8005ba4:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005ba8:	4623      	moveq	r3, r4
 8005baa:	9304      	str	r3, [sp, #16]
 8005bac:	9307      	str	r3, [sp, #28]
 8005bae:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005bb2:	9002      	str	r0, [sp, #8]
 8005bb4:	9006      	str	r0, [sp, #24]
 8005bb6:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005bba:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8005bbc:	ab21      	add	r3, sp, #132	@ 0x84
 8005bbe:	a902      	add	r1, sp, #8
 8005bc0:	4628      	mov	r0, r5
 8005bc2:	9301      	str	r3, [sp, #4]
 8005bc4:	f000 fad6 	bl	8006174 <_svfiprintf_r>
 8005bc8:	1c43      	adds	r3, r0, #1
 8005bca:	bfbc      	itt	lt
 8005bcc:	238b      	movlt	r3, #139	@ 0x8b
 8005bce:	602b      	strlt	r3, [r5, #0]
 8005bd0:	2c00      	cmp	r4, #0
 8005bd2:	d0da      	beq.n	8005b8a <sniprintf+0x16>
 8005bd4:	9b02      	ldr	r3, [sp, #8]
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	701a      	strb	r2, [r3, #0]
 8005bda:	e7d6      	b.n	8005b8a <sniprintf+0x16>
 8005bdc:	2000011c 	.word	0x2000011c

08005be0 <__sread>:
 8005be0:	b510      	push	{r4, lr}
 8005be2:	460c      	mov	r4, r1
 8005be4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005be8:	f000 f910 	bl	8005e0c <_read_r>
 8005bec:	2800      	cmp	r0, #0
 8005bee:	bfab      	itete	ge
 8005bf0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005bf2:	89a3      	ldrhlt	r3, [r4, #12]
 8005bf4:	181b      	addge	r3, r3, r0
 8005bf6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005bfa:	bfac      	ite	ge
 8005bfc:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005bfe:	81a3      	strhlt	r3, [r4, #12]
 8005c00:	bd10      	pop	{r4, pc}

08005c02 <__swrite>:
 8005c02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c06:	461f      	mov	r7, r3
 8005c08:	898b      	ldrh	r3, [r1, #12]
 8005c0a:	05db      	lsls	r3, r3, #23
 8005c0c:	4605      	mov	r5, r0
 8005c0e:	460c      	mov	r4, r1
 8005c10:	4616      	mov	r6, r2
 8005c12:	d505      	bpl.n	8005c20 <__swrite+0x1e>
 8005c14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c18:	2302      	movs	r3, #2
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	f000 f8e4 	bl	8005de8 <_lseek_r>
 8005c20:	89a3      	ldrh	r3, [r4, #12]
 8005c22:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005c26:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005c2a:	81a3      	strh	r3, [r4, #12]
 8005c2c:	4632      	mov	r2, r6
 8005c2e:	463b      	mov	r3, r7
 8005c30:	4628      	mov	r0, r5
 8005c32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005c36:	f000 b8fb 	b.w	8005e30 <_write_r>

08005c3a <__sseek>:
 8005c3a:	b510      	push	{r4, lr}
 8005c3c:	460c      	mov	r4, r1
 8005c3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c42:	f000 f8d1 	bl	8005de8 <_lseek_r>
 8005c46:	1c43      	adds	r3, r0, #1
 8005c48:	89a3      	ldrh	r3, [r4, #12]
 8005c4a:	bf15      	itete	ne
 8005c4c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005c4e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005c52:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005c56:	81a3      	strheq	r3, [r4, #12]
 8005c58:	bf18      	it	ne
 8005c5a:	81a3      	strhne	r3, [r4, #12]
 8005c5c:	bd10      	pop	{r4, pc}

08005c5e <__sclose>:
 8005c5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c62:	f000 b8b1 	b.w	8005dc8 <_close_r>

08005c66 <__swbuf_r>:
 8005c66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c68:	460e      	mov	r6, r1
 8005c6a:	4614      	mov	r4, r2
 8005c6c:	4605      	mov	r5, r0
 8005c6e:	b118      	cbz	r0, 8005c78 <__swbuf_r+0x12>
 8005c70:	6a03      	ldr	r3, [r0, #32]
 8005c72:	b90b      	cbnz	r3, 8005c78 <__swbuf_r+0x12>
 8005c74:	f7ff fed8 	bl	8005a28 <__sinit>
 8005c78:	69a3      	ldr	r3, [r4, #24]
 8005c7a:	60a3      	str	r3, [r4, #8]
 8005c7c:	89a3      	ldrh	r3, [r4, #12]
 8005c7e:	071a      	lsls	r2, r3, #28
 8005c80:	d501      	bpl.n	8005c86 <__swbuf_r+0x20>
 8005c82:	6923      	ldr	r3, [r4, #16]
 8005c84:	b943      	cbnz	r3, 8005c98 <__swbuf_r+0x32>
 8005c86:	4621      	mov	r1, r4
 8005c88:	4628      	mov	r0, r5
 8005c8a:	f000 f82b 	bl	8005ce4 <__swsetup_r>
 8005c8e:	b118      	cbz	r0, 8005c98 <__swbuf_r+0x32>
 8005c90:	f04f 37ff 	mov.w	r7, #4294967295
 8005c94:	4638      	mov	r0, r7
 8005c96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005c98:	6823      	ldr	r3, [r4, #0]
 8005c9a:	6922      	ldr	r2, [r4, #16]
 8005c9c:	1a98      	subs	r0, r3, r2
 8005c9e:	6963      	ldr	r3, [r4, #20]
 8005ca0:	b2f6      	uxtb	r6, r6
 8005ca2:	4283      	cmp	r3, r0
 8005ca4:	4637      	mov	r7, r6
 8005ca6:	dc05      	bgt.n	8005cb4 <__swbuf_r+0x4e>
 8005ca8:	4621      	mov	r1, r4
 8005caa:	4628      	mov	r0, r5
 8005cac:	f000 feb0 	bl	8006a10 <_fflush_r>
 8005cb0:	2800      	cmp	r0, #0
 8005cb2:	d1ed      	bne.n	8005c90 <__swbuf_r+0x2a>
 8005cb4:	68a3      	ldr	r3, [r4, #8]
 8005cb6:	3b01      	subs	r3, #1
 8005cb8:	60a3      	str	r3, [r4, #8]
 8005cba:	6823      	ldr	r3, [r4, #0]
 8005cbc:	1c5a      	adds	r2, r3, #1
 8005cbe:	6022      	str	r2, [r4, #0]
 8005cc0:	701e      	strb	r6, [r3, #0]
 8005cc2:	6962      	ldr	r2, [r4, #20]
 8005cc4:	1c43      	adds	r3, r0, #1
 8005cc6:	429a      	cmp	r2, r3
 8005cc8:	d004      	beq.n	8005cd4 <__swbuf_r+0x6e>
 8005cca:	89a3      	ldrh	r3, [r4, #12]
 8005ccc:	07db      	lsls	r3, r3, #31
 8005cce:	d5e1      	bpl.n	8005c94 <__swbuf_r+0x2e>
 8005cd0:	2e0a      	cmp	r6, #10
 8005cd2:	d1df      	bne.n	8005c94 <__swbuf_r+0x2e>
 8005cd4:	4621      	mov	r1, r4
 8005cd6:	4628      	mov	r0, r5
 8005cd8:	f000 fe9a 	bl	8006a10 <_fflush_r>
 8005cdc:	2800      	cmp	r0, #0
 8005cde:	d0d9      	beq.n	8005c94 <__swbuf_r+0x2e>
 8005ce0:	e7d6      	b.n	8005c90 <__swbuf_r+0x2a>
	...

08005ce4 <__swsetup_r>:
 8005ce4:	b538      	push	{r3, r4, r5, lr}
 8005ce6:	4b29      	ldr	r3, [pc, #164]	@ (8005d8c <__swsetup_r+0xa8>)
 8005ce8:	4605      	mov	r5, r0
 8005cea:	6818      	ldr	r0, [r3, #0]
 8005cec:	460c      	mov	r4, r1
 8005cee:	b118      	cbz	r0, 8005cf8 <__swsetup_r+0x14>
 8005cf0:	6a03      	ldr	r3, [r0, #32]
 8005cf2:	b90b      	cbnz	r3, 8005cf8 <__swsetup_r+0x14>
 8005cf4:	f7ff fe98 	bl	8005a28 <__sinit>
 8005cf8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005cfc:	0719      	lsls	r1, r3, #28
 8005cfe:	d422      	bmi.n	8005d46 <__swsetup_r+0x62>
 8005d00:	06da      	lsls	r2, r3, #27
 8005d02:	d407      	bmi.n	8005d14 <__swsetup_r+0x30>
 8005d04:	2209      	movs	r2, #9
 8005d06:	602a      	str	r2, [r5, #0]
 8005d08:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005d0c:	81a3      	strh	r3, [r4, #12]
 8005d0e:	f04f 30ff 	mov.w	r0, #4294967295
 8005d12:	e033      	b.n	8005d7c <__swsetup_r+0x98>
 8005d14:	0758      	lsls	r0, r3, #29
 8005d16:	d512      	bpl.n	8005d3e <__swsetup_r+0x5a>
 8005d18:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005d1a:	b141      	cbz	r1, 8005d2e <__swsetup_r+0x4a>
 8005d1c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005d20:	4299      	cmp	r1, r3
 8005d22:	d002      	beq.n	8005d2a <__swsetup_r+0x46>
 8005d24:	4628      	mov	r0, r5
 8005d26:	f000 f8d1 	bl	8005ecc <_free_r>
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	6363      	str	r3, [r4, #52]	@ 0x34
 8005d2e:	89a3      	ldrh	r3, [r4, #12]
 8005d30:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005d34:	81a3      	strh	r3, [r4, #12]
 8005d36:	2300      	movs	r3, #0
 8005d38:	6063      	str	r3, [r4, #4]
 8005d3a:	6923      	ldr	r3, [r4, #16]
 8005d3c:	6023      	str	r3, [r4, #0]
 8005d3e:	89a3      	ldrh	r3, [r4, #12]
 8005d40:	f043 0308 	orr.w	r3, r3, #8
 8005d44:	81a3      	strh	r3, [r4, #12]
 8005d46:	6923      	ldr	r3, [r4, #16]
 8005d48:	b94b      	cbnz	r3, 8005d5e <__swsetup_r+0x7a>
 8005d4a:	89a3      	ldrh	r3, [r4, #12]
 8005d4c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005d50:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005d54:	d003      	beq.n	8005d5e <__swsetup_r+0x7a>
 8005d56:	4621      	mov	r1, r4
 8005d58:	4628      	mov	r0, r5
 8005d5a:	f000 fea7 	bl	8006aac <__smakebuf_r>
 8005d5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d62:	f013 0201 	ands.w	r2, r3, #1
 8005d66:	d00a      	beq.n	8005d7e <__swsetup_r+0x9a>
 8005d68:	2200      	movs	r2, #0
 8005d6a:	60a2      	str	r2, [r4, #8]
 8005d6c:	6962      	ldr	r2, [r4, #20]
 8005d6e:	4252      	negs	r2, r2
 8005d70:	61a2      	str	r2, [r4, #24]
 8005d72:	6922      	ldr	r2, [r4, #16]
 8005d74:	b942      	cbnz	r2, 8005d88 <__swsetup_r+0xa4>
 8005d76:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005d7a:	d1c5      	bne.n	8005d08 <__swsetup_r+0x24>
 8005d7c:	bd38      	pop	{r3, r4, r5, pc}
 8005d7e:	0799      	lsls	r1, r3, #30
 8005d80:	bf58      	it	pl
 8005d82:	6962      	ldrpl	r2, [r4, #20]
 8005d84:	60a2      	str	r2, [r4, #8]
 8005d86:	e7f4      	b.n	8005d72 <__swsetup_r+0x8e>
 8005d88:	2000      	movs	r0, #0
 8005d8a:	e7f7      	b.n	8005d7c <__swsetup_r+0x98>
 8005d8c:	2000011c 	.word	0x2000011c

08005d90 <memset>:
 8005d90:	4402      	add	r2, r0
 8005d92:	4603      	mov	r3, r0
 8005d94:	4293      	cmp	r3, r2
 8005d96:	d100      	bne.n	8005d9a <memset+0xa>
 8005d98:	4770      	bx	lr
 8005d9a:	f803 1b01 	strb.w	r1, [r3], #1
 8005d9e:	e7f9      	b.n	8005d94 <memset+0x4>

08005da0 <strncpy>:
 8005da0:	b510      	push	{r4, lr}
 8005da2:	3901      	subs	r1, #1
 8005da4:	4603      	mov	r3, r0
 8005da6:	b132      	cbz	r2, 8005db6 <strncpy+0x16>
 8005da8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8005dac:	f803 4b01 	strb.w	r4, [r3], #1
 8005db0:	3a01      	subs	r2, #1
 8005db2:	2c00      	cmp	r4, #0
 8005db4:	d1f7      	bne.n	8005da6 <strncpy+0x6>
 8005db6:	441a      	add	r2, r3
 8005db8:	2100      	movs	r1, #0
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d100      	bne.n	8005dc0 <strncpy+0x20>
 8005dbe:	bd10      	pop	{r4, pc}
 8005dc0:	f803 1b01 	strb.w	r1, [r3], #1
 8005dc4:	e7f9      	b.n	8005dba <strncpy+0x1a>
	...

08005dc8 <_close_r>:
 8005dc8:	b538      	push	{r3, r4, r5, lr}
 8005dca:	4d06      	ldr	r5, [pc, #24]	@ (8005de4 <_close_r+0x1c>)
 8005dcc:	2300      	movs	r3, #0
 8005dce:	4604      	mov	r4, r0
 8005dd0:	4608      	mov	r0, r1
 8005dd2:	602b      	str	r3, [r5, #0]
 8005dd4:	f7fb fbb1 	bl	800153a <_close>
 8005dd8:	1c43      	adds	r3, r0, #1
 8005dda:	d102      	bne.n	8005de2 <_close_r+0x1a>
 8005ddc:	682b      	ldr	r3, [r5, #0]
 8005dde:	b103      	cbz	r3, 8005de2 <_close_r+0x1a>
 8005de0:	6023      	str	r3, [r4, #0]
 8005de2:	bd38      	pop	{r3, r4, r5, pc}
 8005de4:	20004814 	.word	0x20004814

08005de8 <_lseek_r>:
 8005de8:	b538      	push	{r3, r4, r5, lr}
 8005dea:	4d07      	ldr	r5, [pc, #28]	@ (8005e08 <_lseek_r+0x20>)
 8005dec:	4604      	mov	r4, r0
 8005dee:	4608      	mov	r0, r1
 8005df0:	4611      	mov	r1, r2
 8005df2:	2200      	movs	r2, #0
 8005df4:	602a      	str	r2, [r5, #0]
 8005df6:	461a      	mov	r2, r3
 8005df8:	f7fb fbc6 	bl	8001588 <_lseek>
 8005dfc:	1c43      	adds	r3, r0, #1
 8005dfe:	d102      	bne.n	8005e06 <_lseek_r+0x1e>
 8005e00:	682b      	ldr	r3, [r5, #0]
 8005e02:	b103      	cbz	r3, 8005e06 <_lseek_r+0x1e>
 8005e04:	6023      	str	r3, [r4, #0]
 8005e06:	bd38      	pop	{r3, r4, r5, pc}
 8005e08:	20004814 	.word	0x20004814

08005e0c <_read_r>:
 8005e0c:	b538      	push	{r3, r4, r5, lr}
 8005e0e:	4d07      	ldr	r5, [pc, #28]	@ (8005e2c <_read_r+0x20>)
 8005e10:	4604      	mov	r4, r0
 8005e12:	4608      	mov	r0, r1
 8005e14:	4611      	mov	r1, r2
 8005e16:	2200      	movs	r2, #0
 8005e18:	602a      	str	r2, [r5, #0]
 8005e1a:	461a      	mov	r2, r3
 8005e1c:	f7fb fb54 	bl	80014c8 <_read>
 8005e20:	1c43      	adds	r3, r0, #1
 8005e22:	d102      	bne.n	8005e2a <_read_r+0x1e>
 8005e24:	682b      	ldr	r3, [r5, #0]
 8005e26:	b103      	cbz	r3, 8005e2a <_read_r+0x1e>
 8005e28:	6023      	str	r3, [r4, #0]
 8005e2a:	bd38      	pop	{r3, r4, r5, pc}
 8005e2c:	20004814 	.word	0x20004814

08005e30 <_write_r>:
 8005e30:	b538      	push	{r3, r4, r5, lr}
 8005e32:	4d07      	ldr	r5, [pc, #28]	@ (8005e50 <_write_r+0x20>)
 8005e34:	4604      	mov	r4, r0
 8005e36:	4608      	mov	r0, r1
 8005e38:	4611      	mov	r1, r2
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	602a      	str	r2, [r5, #0]
 8005e3e:	461a      	mov	r2, r3
 8005e40:	f7fb fb5f 	bl	8001502 <_write>
 8005e44:	1c43      	adds	r3, r0, #1
 8005e46:	d102      	bne.n	8005e4e <_write_r+0x1e>
 8005e48:	682b      	ldr	r3, [r5, #0]
 8005e4a:	b103      	cbz	r3, 8005e4e <_write_r+0x1e>
 8005e4c:	6023      	str	r3, [r4, #0]
 8005e4e:	bd38      	pop	{r3, r4, r5, pc}
 8005e50:	20004814 	.word	0x20004814

08005e54 <__errno>:
 8005e54:	4b01      	ldr	r3, [pc, #4]	@ (8005e5c <__errno+0x8>)
 8005e56:	6818      	ldr	r0, [r3, #0]
 8005e58:	4770      	bx	lr
 8005e5a:	bf00      	nop
 8005e5c:	2000011c 	.word	0x2000011c

08005e60 <__libc_init_array>:
 8005e60:	b570      	push	{r4, r5, r6, lr}
 8005e62:	4d0d      	ldr	r5, [pc, #52]	@ (8005e98 <__libc_init_array+0x38>)
 8005e64:	4c0d      	ldr	r4, [pc, #52]	@ (8005e9c <__libc_init_array+0x3c>)
 8005e66:	1b64      	subs	r4, r4, r5
 8005e68:	10a4      	asrs	r4, r4, #2
 8005e6a:	2600      	movs	r6, #0
 8005e6c:	42a6      	cmp	r6, r4
 8005e6e:	d109      	bne.n	8005e84 <__libc_init_array+0x24>
 8005e70:	4d0b      	ldr	r5, [pc, #44]	@ (8005ea0 <__libc_init_array+0x40>)
 8005e72:	4c0c      	ldr	r4, [pc, #48]	@ (8005ea4 <__libc_init_array+0x44>)
 8005e74:	f000 fed8 	bl	8006c28 <_init>
 8005e78:	1b64      	subs	r4, r4, r5
 8005e7a:	10a4      	asrs	r4, r4, #2
 8005e7c:	2600      	movs	r6, #0
 8005e7e:	42a6      	cmp	r6, r4
 8005e80:	d105      	bne.n	8005e8e <__libc_init_array+0x2e>
 8005e82:	bd70      	pop	{r4, r5, r6, pc}
 8005e84:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e88:	4798      	blx	r3
 8005e8a:	3601      	adds	r6, #1
 8005e8c:	e7ee      	b.n	8005e6c <__libc_init_array+0xc>
 8005e8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e92:	4798      	blx	r3
 8005e94:	3601      	adds	r6, #1
 8005e96:	e7f2      	b.n	8005e7e <__libc_init_array+0x1e>
 8005e98:	08006fe4 	.word	0x08006fe4
 8005e9c:	08006fe4 	.word	0x08006fe4
 8005ea0:	08006fe4 	.word	0x08006fe4
 8005ea4:	08006fe8 	.word	0x08006fe8

08005ea8 <__retarget_lock_init_recursive>:
 8005ea8:	4770      	bx	lr

08005eaa <__retarget_lock_acquire_recursive>:
 8005eaa:	4770      	bx	lr

08005eac <__retarget_lock_release_recursive>:
 8005eac:	4770      	bx	lr

08005eae <memcpy>:
 8005eae:	440a      	add	r2, r1
 8005eb0:	4291      	cmp	r1, r2
 8005eb2:	f100 33ff 	add.w	r3, r0, #4294967295
 8005eb6:	d100      	bne.n	8005eba <memcpy+0xc>
 8005eb8:	4770      	bx	lr
 8005eba:	b510      	push	{r4, lr}
 8005ebc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005ec0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005ec4:	4291      	cmp	r1, r2
 8005ec6:	d1f9      	bne.n	8005ebc <memcpy+0xe>
 8005ec8:	bd10      	pop	{r4, pc}
	...

08005ecc <_free_r>:
 8005ecc:	b538      	push	{r3, r4, r5, lr}
 8005ece:	4605      	mov	r5, r0
 8005ed0:	2900      	cmp	r1, #0
 8005ed2:	d041      	beq.n	8005f58 <_free_r+0x8c>
 8005ed4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005ed8:	1f0c      	subs	r4, r1, #4
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	bfb8      	it	lt
 8005ede:	18e4      	addlt	r4, r4, r3
 8005ee0:	f000 f8e0 	bl	80060a4 <__malloc_lock>
 8005ee4:	4a1d      	ldr	r2, [pc, #116]	@ (8005f5c <_free_r+0x90>)
 8005ee6:	6813      	ldr	r3, [r2, #0]
 8005ee8:	b933      	cbnz	r3, 8005ef8 <_free_r+0x2c>
 8005eea:	6063      	str	r3, [r4, #4]
 8005eec:	6014      	str	r4, [r2, #0]
 8005eee:	4628      	mov	r0, r5
 8005ef0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005ef4:	f000 b8dc 	b.w	80060b0 <__malloc_unlock>
 8005ef8:	42a3      	cmp	r3, r4
 8005efa:	d908      	bls.n	8005f0e <_free_r+0x42>
 8005efc:	6820      	ldr	r0, [r4, #0]
 8005efe:	1821      	adds	r1, r4, r0
 8005f00:	428b      	cmp	r3, r1
 8005f02:	bf01      	itttt	eq
 8005f04:	6819      	ldreq	r1, [r3, #0]
 8005f06:	685b      	ldreq	r3, [r3, #4]
 8005f08:	1809      	addeq	r1, r1, r0
 8005f0a:	6021      	streq	r1, [r4, #0]
 8005f0c:	e7ed      	b.n	8005eea <_free_r+0x1e>
 8005f0e:	461a      	mov	r2, r3
 8005f10:	685b      	ldr	r3, [r3, #4]
 8005f12:	b10b      	cbz	r3, 8005f18 <_free_r+0x4c>
 8005f14:	42a3      	cmp	r3, r4
 8005f16:	d9fa      	bls.n	8005f0e <_free_r+0x42>
 8005f18:	6811      	ldr	r1, [r2, #0]
 8005f1a:	1850      	adds	r0, r2, r1
 8005f1c:	42a0      	cmp	r0, r4
 8005f1e:	d10b      	bne.n	8005f38 <_free_r+0x6c>
 8005f20:	6820      	ldr	r0, [r4, #0]
 8005f22:	4401      	add	r1, r0
 8005f24:	1850      	adds	r0, r2, r1
 8005f26:	4283      	cmp	r3, r0
 8005f28:	6011      	str	r1, [r2, #0]
 8005f2a:	d1e0      	bne.n	8005eee <_free_r+0x22>
 8005f2c:	6818      	ldr	r0, [r3, #0]
 8005f2e:	685b      	ldr	r3, [r3, #4]
 8005f30:	6053      	str	r3, [r2, #4]
 8005f32:	4408      	add	r0, r1
 8005f34:	6010      	str	r0, [r2, #0]
 8005f36:	e7da      	b.n	8005eee <_free_r+0x22>
 8005f38:	d902      	bls.n	8005f40 <_free_r+0x74>
 8005f3a:	230c      	movs	r3, #12
 8005f3c:	602b      	str	r3, [r5, #0]
 8005f3e:	e7d6      	b.n	8005eee <_free_r+0x22>
 8005f40:	6820      	ldr	r0, [r4, #0]
 8005f42:	1821      	adds	r1, r4, r0
 8005f44:	428b      	cmp	r3, r1
 8005f46:	bf04      	itt	eq
 8005f48:	6819      	ldreq	r1, [r3, #0]
 8005f4a:	685b      	ldreq	r3, [r3, #4]
 8005f4c:	6063      	str	r3, [r4, #4]
 8005f4e:	bf04      	itt	eq
 8005f50:	1809      	addeq	r1, r1, r0
 8005f52:	6021      	streq	r1, [r4, #0]
 8005f54:	6054      	str	r4, [r2, #4]
 8005f56:	e7ca      	b.n	8005eee <_free_r+0x22>
 8005f58:	bd38      	pop	{r3, r4, r5, pc}
 8005f5a:	bf00      	nop
 8005f5c:	20004820 	.word	0x20004820

08005f60 <sbrk_aligned>:
 8005f60:	b570      	push	{r4, r5, r6, lr}
 8005f62:	4e0f      	ldr	r6, [pc, #60]	@ (8005fa0 <sbrk_aligned+0x40>)
 8005f64:	460c      	mov	r4, r1
 8005f66:	6831      	ldr	r1, [r6, #0]
 8005f68:	4605      	mov	r5, r0
 8005f6a:	b911      	cbnz	r1, 8005f72 <sbrk_aligned+0x12>
 8005f6c:	f000 fe16 	bl	8006b9c <_sbrk_r>
 8005f70:	6030      	str	r0, [r6, #0]
 8005f72:	4621      	mov	r1, r4
 8005f74:	4628      	mov	r0, r5
 8005f76:	f000 fe11 	bl	8006b9c <_sbrk_r>
 8005f7a:	1c43      	adds	r3, r0, #1
 8005f7c:	d103      	bne.n	8005f86 <sbrk_aligned+0x26>
 8005f7e:	f04f 34ff 	mov.w	r4, #4294967295
 8005f82:	4620      	mov	r0, r4
 8005f84:	bd70      	pop	{r4, r5, r6, pc}
 8005f86:	1cc4      	adds	r4, r0, #3
 8005f88:	f024 0403 	bic.w	r4, r4, #3
 8005f8c:	42a0      	cmp	r0, r4
 8005f8e:	d0f8      	beq.n	8005f82 <sbrk_aligned+0x22>
 8005f90:	1a21      	subs	r1, r4, r0
 8005f92:	4628      	mov	r0, r5
 8005f94:	f000 fe02 	bl	8006b9c <_sbrk_r>
 8005f98:	3001      	adds	r0, #1
 8005f9a:	d1f2      	bne.n	8005f82 <sbrk_aligned+0x22>
 8005f9c:	e7ef      	b.n	8005f7e <sbrk_aligned+0x1e>
 8005f9e:	bf00      	nop
 8005fa0:	2000481c 	.word	0x2000481c

08005fa4 <_malloc_r>:
 8005fa4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005fa8:	1ccd      	adds	r5, r1, #3
 8005faa:	f025 0503 	bic.w	r5, r5, #3
 8005fae:	3508      	adds	r5, #8
 8005fb0:	2d0c      	cmp	r5, #12
 8005fb2:	bf38      	it	cc
 8005fb4:	250c      	movcc	r5, #12
 8005fb6:	2d00      	cmp	r5, #0
 8005fb8:	4606      	mov	r6, r0
 8005fba:	db01      	blt.n	8005fc0 <_malloc_r+0x1c>
 8005fbc:	42a9      	cmp	r1, r5
 8005fbe:	d904      	bls.n	8005fca <_malloc_r+0x26>
 8005fc0:	230c      	movs	r3, #12
 8005fc2:	6033      	str	r3, [r6, #0]
 8005fc4:	2000      	movs	r0, #0
 8005fc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005fca:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80060a0 <_malloc_r+0xfc>
 8005fce:	f000 f869 	bl	80060a4 <__malloc_lock>
 8005fd2:	f8d8 3000 	ldr.w	r3, [r8]
 8005fd6:	461c      	mov	r4, r3
 8005fd8:	bb44      	cbnz	r4, 800602c <_malloc_r+0x88>
 8005fda:	4629      	mov	r1, r5
 8005fdc:	4630      	mov	r0, r6
 8005fde:	f7ff ffbf 	bl	8005f60 <sbrk_aligned>
 8005fe2:	1c43      	adds	r3, r0, #1
 8005fe4:	4604      	mov	r4, r0
 8005fe6:	d158      	bne.n	800609a <_malloc_r+0xf6>
 8005fe8:	f8d8 4000 	ldr.w	r4, [r8]
 8005fec:	4627      	mov	r7, r4
 8005fee:	2f00      	cmp	r7, #0
 8005ff0:	d143      	bne.n	800607a <_malloc_r+0xd6>
 8005ff2:	2c00      	cmp	r4, #0
 8005ff4:	d04b      	beq.n	800608e <_malloc_r+0xea>
 8005ff6:	6823      	ldr	r3, [r4, #0]
 8005ff8:	4639      	mov	r1, r7
 8005ffa:	4630      	mov	r0, r6
 8005ffc:	eb04 0903 	add.w	r9, r4, r3
 8006000:	f000 fdcc 	bl	8006b9c <_sbrk_r>
 8006004:	4581      	cmp	r9, r0
 8006006:	d142      	bne.n	800608e <_malloc_r+0xea>
 8006008:	6821      	ldr	r1, [r4, #0]
 800600a:	1a6d      	subs	r5, r5, r1
 800600c:	4629      	mov	r1, r5
 800600e:	4630      	mov	r0, r6
 8006010:	f7ff ffa6 	bl	8005f60 <sbrk_aligned>
 8006014:	3001      	adds	r0, #1
 8006016:	d03a      	beq.n	800608e <_malloc_r+0xea>
 8006018:	6823      	ldr	r3, [r4, #0]
 800601a:	442b      	add	r3, r5
 800601c:	6023      	str	r3, [r4, #0]
 800601e:	f8d8 3000 	ldr.w	r3, [r8]
 8006022:	685a      	ldr	r2, [r3, #4]
 8006024:	bb62      	cbnz	r2, 8006080 <_malloc_r+0xdc>
 8006026:	f8c8 7000 	str.w	r7, [r8]
 800602a:	e00f      	b.n	800604c <_malloc_r+0xa8>
 800602c:	6822      	ldr	r2, [r4, #0]
 800602e:	1b52      	subs	r2, r2, r5
 8006030:	d420      	bmi.n	8006074 <_malloc_r+0xd0>
 8006032:	2a0b      	cmp	r2, #11
 8006034:	d917      	bls.n	8006066 <_malloc_r+0xc2>
 8006036:	1961      	adds	r1, r4, r5
 8006038:	42a3      	cmp	r3, r4
 800603a:	6025      	str	r5, [r4, #0]
 800603c:	bf18      	it	ne
 800603e:	6059      	strne	r1, [r3, #4]
 8006040:	6863      	ldr	r3, [r4, #4]
 8006042:	bf08      	it	eq
 8006044:	f8c8 1000 	streq.w	r1, [r8]
 8006048:	5162      	str	r2, [r4, r5]
 800604a:	604b      	str	r3, [r1, #4]
 800604c:	4630      	mov	r0, r6
 800604e:	f000 f82f 	bl	80060b0 <__malloc_unlock>
 8006052:	f104 000b 	add.w	r0, r4, #11
 8006056:	1d23      	adds	r3, r4, #4
 8006058:	f020 0007 	bic.w	r0, r0, #7
 800605c:	1ac2      	subs	r2, r0, r3
 800605e:	bf1c      	itt	ne
 8006060:	1a1b      	subne	r3, r3, r0
 8006062:	50a3      	strne	r3, [r4, r2]
 8006064:	e7af      	b.n	8005fc6 <_malloc_r+0x22>
 8006066:	6862      	ldr	r2, [r4, #4]
 8006068:	42a3      	cmp	r3, r4
 800606a:	bf0c      	ite	eq
 800606c:	f8c8 2000 	streq.w	r2, [r8]
 8006070:	605a      	strne	r2, [r3, #4]
 8006072:	e7eb      	b.n	800604c <_malloc_r+0xa8>
 8006074:	4623      	mov	r3, r4
 8006076:	6864      	ldr	r4, [r4, #4]
 8006078:	e7ae      	b.n	8005fd8 <_malloc_r+0x34>
 800607a:	463c      	mov	r4, r7
 800607c:	687f      	ldr	r7, [r7, #4]
 800607e:	e7b6      	b.n	8005fee <_malloc_r+0x4a>
 8006080:	461a      	mov	r2, r3
 8006082:	685b      	ldr	r3, [r3, #4]
 8006084:	42a3      	cmp	r3, r4
 8006086:	d1fb      	bne.n	8006080 <_malloc_r+0xdc>
 8006088:	2300      	movs	r3, #0
 800608a:	6053      	str	r3, [r2, #4]
 800608c:	e7de      	b.n	800604c <_malloc_r+0xa8>
 800608e:	230c      	movs	r3, #12
 8006090:	6033      	str	r3, [r6, #0]
 8006092:	4630      	mov	r0, r6
 8006094:	f000 f80c 	bl	80060b0 <__malloc_unlock>
 8006098:	e794      	b.n	8005fc4 <_malloc_r+0x20>
 800609a:	6005      	str	r5, [r0, #0]
 800609c:	e7d6      	b.n	800604c <_malloc_r+0xa8>
 800609e:	bf00      	nop
 80060a0:	20004820 	.word	0x20004820

080060a4 <__malloc_lock>:
 80060a4:	4801      	ldr	r0, [pc, #4]	@ (80060ac <__malloc_lock+0x8>)
 80060a6:	f7ff bf00 	b.w	8005eaa <__retarget_lock_acquire_recursive>
 80060aa:	bf00      	nop
 80060ac:	20004818 	.word	0x20004818

080060b0 <__malloc_unlock>:
 80060b0:	4801      	ldr	r0, [pc, #4]	@ (80060b8 <__malloc_unlock+0x8>)
 80060b2:	f7ff befb 	b.w	8005eac <__retarget_lock_release_recursive>
 80060b6:	bf00      	nop
 80060b8:	20004818 	.word	0x20004818

080060bc <__ssputs_r>:
 80060bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80060c0:	688e      	ldr	r6, [r1, #8]
 80060c2:	461f      	mov	r7, r3
 80060c4:	42be      	cmp	r6, r7
 80060c6:	680b      	ldr	r3, [r1, #0]
 80060c8:	4682      	mov	sl, r0
 80060ca:	460c      	mov	r4, r1
 80060cc:	4690      	mov	r8, r2
 80060ce:	d82d      	bhi.n	800612c <__ssputs_r+0x70>
 80060d0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80060d4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80060d8:	d026      	beq.n	8006128 <__ssputs_r+0x6c>
 80060da:	6965      	ldr	r5, [r4, #20]
 80060dc:	6909      	ldr	r1, [r1, #16]
 80060de:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80060e2:	eba3 0901 	sub.w	r9, r3, r1
 80060e6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80060ea:	1c7b      	adds	r3, r7, #1
 80060ec:	444b      	add	r3, r9
 80060ee:	106d      	asrs	r5, r5, #1
 80060f0:	429d      	cmp	r5, r3
 80060f2:	bf38      	it	cc
 80060f4:	461d      	movcc	r5, r3
 80060f6:	0553      	lsls	r3, r2, #21
 80060f8:	d527      	bpl.n	800614a <__ssputs_r+0x8e>
 80060fa:	4629      	mov	r1, r5
 80060fc:	f7ff ff52 	bl	8005fa4 <_malloc_r>
 8006100:	4606      	mov	r6, r0
 8006102:	b360      	cbz	r0, 800615e <__ssputs_r+0xa2>
 8006104:	6921      	ldr	r1, [r4, #16]
 8006106:	464a      	mov	r2, r9
 8006108:	f7ff fed1 	bl	8005eae <memcpy>
 800610c:	89a3      	ldrh	r3, [r4, #12]
 800610e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006112:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006116:	81a3      	strh	r3, [r4, #12]
 8006118:	6126      	str	r6, [r4, #16]
 800611a:	6165      	str	r5, [r4, #20]
 800611c:	444e      	add	r6, r9
 800611e:	eba5 0509 	sub.w	r5, r5, r9
 8006122:	6026      	str	r6, [r4, #0]
 8006124:	60a5      	str	r5, [r4, #8]
 8006126:	463e      	mov	r6, r7
 8006128:	42be      	cmp	r6, r7
 800612a:	d900      	bls.n	800612e <__ssputs_r+0x72>
 800612c:	463e      	mov	r6, r7
 800612e:	6820      	ldr	r0, [r4, #0]
 8006130:	4632      	mov	r2, r6
 8006132:	4641      	mov	r1, r8
 8006134:	f000 fcf6 	bl	8006b24 <memmove>
 8006138:	68a3      	ldr	r3, [r4, #8]
 800613a:	1b9b      	subs	r3, r3, r6
 800613c:	60a3      	str	r3, [r4, #8]
 800613e:	6823      	ldr	r3, [r4, #0]
 8006140:	4433      	add	r3, r6
 8006142:	6023      	str	r3, [r4, #0]
 8006144:	2000      	movs	r0, #0
 8006146:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800614a:	462a      	mov	r2, r5
 800614c:	f000 fd36 	bl	8006bbc <_realloc_r>
 8006150:	4606      	mov	r6, r0
 8006152:	2800      	cmp	r0, #0
 8006154:	d1e0      	bne.n	8006118 <__ssputs_r+0x5c>
 8006156:	6921      	ldr	r1, [r4, #16]
 8006158:	4650      	mov	r0, sl
 800615a:	f7ff feb7 	bl	8005ecc <_free_r>
 800615e:	230c      	movs	r3, #12
 8006160:	f8ca 3000 	str.w	r3, [sl]
 8006164:	89a3      	ldrh	r3, [r4, #12]
 8006166:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800616a:	81a3      	strh	r3, [r4, #12]
 800616c:	f04f 30ff 	mov.w	r0, #4294967295
 8006170:	e7e9      	b.n	8006146 <__ssputs_r+0x8a>
	...

08006174 <_svfiprintf_r>:
 8006174:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006178:	4698      	mov	r8, r3
 800617a:	898b      	ldrh	r3, [r1, #12]
 800617c:	061b      	lsls	r3, r3, #24
 800617e:	b09d      	sub	sp, #116	@ 0x74
 8006180:	4607      	mov	r7, r0
 8006182:	460d      	mov	r5, r1
 8006184:	4614      	mov	r4, r2
 8006186:	d510      	bpl.n	80061aa <_svfiprintf_r+0x36>
 8006188:	690b      	ldr	r3, [r1, #16]
 800618a:	b973      	cbnz	r3, 80061aa <_svfiprintf_r+0x36>
 800618c:	2140      	movs	r1, #64	@ 0x40
 800618e:	f7ff ff09 	bl	8005fa4 <_malloc_r>
 8006192:	6028      	str	r0, [r5, #0]
 8006194:	6128      	str	r0, [r5, #16]
 8006196:	b930      	cbnz	r0, 80061a6 <_svfiprintf_r+0x32>
 8006198:	230c      	movs	r3, #12
 800619a:	603b      	str	r3, [r7, #0]
 800619c:	f04f 30ff 	mov.w	r0, #4294967295
 80061a0:	b01d      	add	sp, #116	@ 0x74
 80061a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061a6:	2340      	movs	r3, #64	@ 0x40
 80061a8:	616b      	str	r3, [r5, #20]
 80061aa:	2300      	movs	r3, #0
 80061ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80061ae:	2320      	movs	r3, #32
 80061b0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80061b4:	f8cd 800c 	str.w	r8, [sp, #12]
 80061b8:	2330      	movs	r3, #48	@ 0x30
 80061ba:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006358 <_svfiprintf_r+0x1e4>
 80061be:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80061c2:	f04f 0901 	mov.w	r9, #1
 80061c6:	4623      	mov	r3, r4
 80061c8:	469a      	mov	sl, r3
 80061ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80061ce:	b10a      	cbz	r2, 80061d4 <_svfiprintf_r+0x60>
 80061d0:	2a25      	cmp	r2, #37	@ 0x25
 80061d2:	d1f9      	bne.n	80061c8 <_svfiprintf_r+0x54>
 80061d4:	ebba 0b04 	subs.w	fp, sl, r4
 80061d8:	d00b      	beq.n	80061f2 <_svfiprintf_r+0x7e>
 80061da:	465b      	mov	r3, fp
 80061dc:	4622      	mov	r2, r4
 80061de:	4629      	mov	r1, r5
 80061e0:	4638      	mov	r0, r7
 80061e2:	f7ff ff6b 	bl	80060bc <__ssputs_r>
 80061e6:	3001      	adds	r0, #1
 80061e8:	f000 80a7 	beq.w	800633a <_svfiprintf_r+0x1c6>
 80061ec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80061ee:	445a      	add	r2, fp
 80061f0:	9209      	str	r2, [sp, #36]	@ 0x24
 80061f2:	f89a 3000 	ldrb.w	r3, [sl]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	f000 809f 	beq.w	800633a <_svfiprintf_r+0x1c6>
 80061fc:	2300      	movs	r3, #0
 80061fe:	f04f 32ff 	mov.w	r2, #4294967295
 8006202:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006206:	f10a 0a01 	add.w	sl, sl, #1
 800620a:	9304      	str	r3, [sp, #16]
 800620c:	9307      	str	r3, [sp, #28]
 800620e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006212:	931a      	str	r3, [sp, #104]	@ 0x68
 8006214:	4654      	mov	r4, sl
 8006216:	2205      	movs	r2, #5
 8006218:	f814 1b01 	ldrb.w	r1, [r4], #1
 800621c:	484e      	ldr	r0, [pc, #312]	@ (8006358 <_svfiprintf_r+0x1e4>)
 800621e:	f7f9 fff7 	bl	8000210 <memchr>
 8006222:	9a04      	ldr	r2, [sp, #16]
 8006224:	b9d8      	cbnz	r0, 800625e <_svfiprintf_r+0xea>
 8006226:	06d0      	lsls	r0, r2, #27
 8006228:	bf44      	itt	mi
 800622a:	2320      	movmi	r3, #32
 800622c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006230:	0711      	lsls	r1, r2, #28
 8006232:	bf44      	itt	mi
 8006234:	232b      	movmi	r3, #43	@ 0x2b
 8006236:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800623a:	f89a 3000 	ldrb.w	r3, [sl]
 800623e:	2b2a      	cmp	r3, #42	@ 0x2a
 8006240:	d015      	beq.n	800626e <_svfiprintf_r+0xfa>
 8006242:	9a07      	ldr	r2, [sp, #28]
 8006244:	4654      	mov	r4, sl
 8006246:	2000      	movs	r0, #0
 8006248:	f04f 0c0a 	mov.w	ip, #10
 800624c:	4621      	mov	r1, r4
 800624e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006252:	3b30      	subs	r3, #48	@ 0x30
 8006254:	2b09      	cmp	r3, #9
 8006256:	d94b      	bls.n	80062f0 <_svfiprintf_r+0x17c>
 8006258:	b1b0      	cbz	r0, 8006288 <_svfiprintf_r+0x114>
 800625a:	9207      	str	r2, [sp, #28]
 800625c:	e014      	b.n	8006288 <_svfiprintf_r+0x114>
 800625e:	eba0 0308 	sub.w	r3, r0, r8
 8006262:	fa09 f303 	lsl.w	r3, r9, r3
 8006266:	4313      	orrs	r3, r2
 8006268:	9304      	str	r3, [sp, #16]
 800626a:	46a2      	mov	sl, r4
 800626c:	e7d2      	b.n	8006214 <_svfiprintf_r+0xa0>
 800626e:	9b03      	ldr	r3, [sp, #12]
 8006270:	1d19      	adds	r1, r3, #4
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	9103      	str	r1, [sp, #12]
 8006276:	2b00      	cmp	r3, #0
 8006278:	bfbb      	ittet	lt
 800627a:	425b      	neglt	r3, r3
 800627c:	f042 0202 	orrlt.w	r2, r2, #2
 8006280:	9307      	strge	r3, [sp, #28]
 8006282:	9307      	strlt	r3, [sp, #28]
 8006284:	bfb8      	it	lt
 8006286:	9204      	strlt	r2, [sp, #16]
 8006288:	7823      	ldrb	r3, [r4, #0]
 800628a:	2b2e      	cmp	r3, #46	@ 0x2e
 800628c:	d10a      	bne.n	80062a4 <_svfiprintf_r+0x130>
 800628e:	7863      	ldrb	r3, [r4, #1]
 8006290:	2b2a      	cmp	r3, #42	@ 0x2a
 8006292:	d132      	bne.n	80062fa <_svfiprintf_r+0x186>
 8006294:	9b03      	ldr	r3, [sp, #12]
 8006296:	1d1a      	adds	r2, r3, #4
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	9203      	str	r2, [sp, #12]
 800629c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80062a0:	3402      	adds	r4, #2
 80062a2:	9305      	str	r3, [sp, #20]
 80062a4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006368 <_svfiprintf_r+0x1f4>
 80062a8:	7821      	ldrb	r1, [r4, #0]
 80062aa:	2203      	movs	r2, #3
 80062ac:	4650      	mov	r0, sl
 80062ae:	f7f9 ffaf 	bl	8000210 <memchr>
 80062b2:	b138      	cbz	r0, 80062c4 <_svfiprintf_r+0x150>
 80062b4:	9b04      	ldr	r3, [sp, #16]
 80062b6:	eba0 000a 	sub.w	r0, r0, sl
 80062ba:	2240      	movs	r2, #64	@ 0x40
 80062bc:	4082      	lsls	r2, r0
 80062be:	4313      	orrs	r3, r2
 80062c0:	3401      	adds	r4, #1
 80062c2:	9304      	str	r3, [sp, #16]
 80062c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80062c8:	4824      	ldr	r0, [pc, #144]	@ (800635c <_svfiprintf_r+0x1e8>)
 80062ca:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80062ce:	2206      	movs	r2, #6
 80062d0:	f7f9 ff9e 	bl	8000210 <memchr>
 80062d4:	2800      	cmp	r0, #0
 80062d6:	d036      	beq.n	8006346 <_svfiprintf_r+0x1d2>
 80062d8:	4b21      	ldr	r3, [pc, #132]	@ (8006360 <_svfiprintf_r+0x1ec>)
 80062da:	bb1b      	cbnz	r3, 8006324 <_svfiprintf_r+0x1b0>
 80062dc:	9b03      	ldr	r3, [sp, #12]
 80062de:	3307      	adds	r3, #7
 80062e0:	f023 0307 	bic.w	r3, r3, #7
 80062e4:	3308      	adds	r3, #8
 80062e6:	9303      	str	r3, [sp, #12]
 80062e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80062ea:	4433      	add	r3, r6
 80062ec:	9309      	str	r3, [sp, #36]	@ 0x24
 80062ee:	e76a      	b.n	80061c6 <_svfiprintf_r+0x52>
 80062f0:	fb0c 3202 	mla	r2, ip, r2, r3
 80062f4:	460c      	mov	r4, r1
 80062f6:	2001      	movs	r0, #1
 80062f8:	e7a8      	b.n	800624c <_svfiprintf_r+0xd8>
 80062fa:	2300      	movs	r3, #0
 80062fc:	3401      	adds	r4, #1
 80062fe:	9305      	str	r3, [sp, #20]
 8006300:	4619      	mov	r1, r3
 8006302:	f04f 0c0a 	mov.w	ip, #10
 8006306:	4620      	mov	r0, r4
 8006308:	f810 2b01 	ldrb.w	r2, [r0], #1
 800630c:	3a30      	subs	r2, #48	@ 0x30
 800630e:	2a09      	cmp	r2, #9
 8006310:	d903      	bls.n	800631a <_svfiprintf_r+0x1a6>
 8006312:	2b00      	cmp	r3, #0
 8006314:	d0c6      	beq.n	80062a4 <_svfiprintf_r+0x130>
 8006316:	9105      	str	r1, [sp, #20]
 8006318:	e7c4      	b.n	80062a4 <_svfiprintf_r+0x130>
 800631a:	fb0c 2101 	mla	r1, ip, r1, r2
 800631e:	4604      	mov	r4, r0
 8006320:	2301      	movs	r3, #1
 8006322:	e7f0      	b.n	8006306 <_svfiprintf_r+0x192>
 8006324:	ab03      	add	r3, sp, #12
 8006326:	9300      	str	r3, [sp, #0]
 8006328:	462a      	mov	r2, r5
 800632a:	4b0e      	ldr	r3, [pc, #56]	@ (8006364 <_svfiprintf_r+0x1f0>)
 800632c:	a904      	add	r1, sp, #16
 800632e:	4638      	mov	r0, r7
 8006330:	f3af 8000 	nop.w
 8006334:	1c42      	adds	r2, r0, #1
 8006336:	4606      	mov	r6, r0
 8006338:	d1d6      	bne.n	80062e8 <_svfiprintf_r+0x174>
 800633a:	89ab      	ldrh	r3, [r5, #12]
 800633c:	065b      	lsls	r3, r3, #25
 800633e:	f53f af2d 	bmi.w	800619c <_svfiprintf_r+0x28>
 8006342:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006344:	e72c      	b.n	80061a0 <_svfiprintf_r+0x2c>
 8006346:	ab03      	add	r3, sp, #12
 8006348:	9300      	str	r3, [sp, #0]
 800634a:	462a      	mov	r2, r5
 800634c:	4b05      	ldr	r3, [pc, #20]	@ (8006364 <_svfiprintf_r+0x1f0>)
 800634e:	a904      	add	r1, sp, #16
 8006350:	4638      	mov	r0, r7
 8006352:	f000 f9bb 	bl	80066cc <_printf_i>
 8006356:	e7ed      	b.n	8006334 <_svfiprintf_r+0x1c0>
 8006358:	08006fa8 	.word	0x08006fa8
 800635c:	08006fb2 	.word	0x08006fb2
 8006360:	00000000 	.word	0x00000000
 8006364:	080060bd 	.word	0x080060bd
 8006368:	08006fae 	.word	0x08006fae

0800636c <__sfputc_r>:
 800636c:	6893      	ldr	r3, [r2, #8]
 800636e:	3b01      	subs	r3, #1
 8006370:	2b00      	cmp	r3, #0
 8006372:	b410      	push	{r4}
 8006374:	6093      	str	r3, [r2, #8]
 8006376:	da08      	bge.n	800638a <__sfputc_r+0x1e>
 8006378:	6994      	ldr	r4, [r2, #24]
 800637a:	42a3      	cmp	r3, r4
 800637c:	db01      	blt.n	8006382 <__sfputc_r+0x16>
 800637e:	290a      	cmp	r1, #10
 8006380:	d103      	bne.n	800638a <__sfputc_r+0x1e>
 8006382:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006386:	f7ff bc6e 	b.w	8005c66 <__swbuf_r>
 800638a:	6813      	ldr	r3, [r2, #0]
 800638c:	1c58      	adds	r0, r3, #1
 800638e:	6010      	str	r0, [r2, #0]
 8006390:	7019      	strb	r1, [r3, #0]
 8006392:	4608      	mov	r0, r1
 8006394:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006398:	4770      	bx	lr

0800639a <__sfputs_r>:
 800639a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800639c:	4606      	mov	r6, r0
 800639e:	460f      	mov	r7, r1
 80063a0:	4614      	mov	r4, r2
 80063a2:	18d5      	adds	r5, r2, r3
 80063a4:	42ac      	cmp	r4, r5
 80063a6:	d101      	bne.n	80063ac <__sfputs_r+0x12>
 80063a8:	2000      	movs	r0, #0
 80063aa:	e007      	b.n	80063bc <__sfputs_r+0x22>
 80063ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80063b0:	463a      	mov	r2, r7
 80063b2:	4630      	mov	r0, r6
 80063b4:	f7ff ffda 	bl	800636c <__sfputc_r>
 80063b8:	1c43      	adds	r3, r0, #1
 80063ba:	d1f3      	bne.n	80063a4 <__sfputs_r+0xa>
 80063bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080063c0 <_vfiprintf_r>:
 80063c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063c4:	460d      	mov	r5, r1
 80063c6:	b09d      	sub	sp, #116	@ 0x74
 80063c8:	4614      	mov	r4, r2
 80063ca:	4698      	mov	r8, r3
 80063cc:	4606      	mov	r6, r0
 80063ce:	b118      	cbz	r0, 80063d8 <_vfiprintf_r+0x18>
 80063d0:	6a03      	ldr	r3, [r0, #32]
 80063d2:	b90b      	cbnz	r3, 80063d8 <_vfiprintf_r+0x18>
 80063d4:	f7ff fb28 	bl	8005a28 <__sinit>
 80063d8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80063da:	07d9      	lsls	r1, r3, #31
 80063dc:	d405      	bmi.n	80063ea <_vfiprintf_r+0x2a>
 80063de:	89ab      	ldrh	r3, [r5, #12]
 80063e0:	059a      	lsls	r2, r3, #22
 80063e2:	d402      	bmi.n	80063ea <_vfiprintf_r+0x2a>
 80063e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80063e6:	f7ff fd60 	bl	8005eaa <__retarget_lock_acquire_recursive>
 80063ea:	89ab      	ldrh	r3, [r5, #12]
 80063ec:	071b      	lsls	r3, r3, #28
 80063ee:	d501      	bpl.n	80063f4 <_vfiprintf_r+0x34>
 80063f0:	692b      	ldr	r3, [r5, #16]
 80063f2:	b99b      	cbnz	r3, 800641c <_vfiprintf_r+0x5c>
 80063f4:	4629      	mov	r1, r5
 80063f6:	4630      	mov	r0, r6
 80063f8:	f7ff fc74 	bl	8005ce4 <__swsetup_r>
 80063fc:	b170      	cbz	r0, 800641c <_vfiprintf_r+0x5c>
 80063fe:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006400:	07dc      	lsls	r4, r3, #31
 8006402:	d504      	bpl.n	800640e <_vfiprintf_r+0x4e>
 8006404:	f04f 30ff 	mov.w	r0, #4294967295
 8006408:	b01d      	add	sp, #116	@ 0x74
 800640a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800640e:	89ab      	ldrh	r3, [r5, #12]
 8006410:	0598      	lsls	r0, r3, #22
 8006412:	d4f7      	bmi.n	8006404 <_vfiprintf_r+0x44>
 8006414:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006416:	f7ff fd49 	bl	8005eac <__retarget_lock_release_recursive>
 800641a:	e7f3      	b.n	8006404 <_vfiprintf_r+0x44>
 800641c:	2300      	movs	r3, #0
 800641e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006420:	2320      	movs	r3, #32
 8006422:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006426:	f8cd 800c 	str.w	r8, [sp, #12]
 800642a:	2330      	movs	r3, #48	@ 0x30
 800642c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80065dc <_vfiprintf_r+0x21c>
 8006430:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006434:	f04f 0901 	mov.w	r9, #1
 8006438:	4623      	mov	r3, r4
 800643a:	469a      	mov	sl, r3
 800643c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006440:	b10a      	cbz	r2, 8006446 <_vfiprintf_r+0x86>
 8006442:	2a25      	cmp	r2, #37	@ 0x25
 8006444:	d1f9      	bne.n	800643a <_vfiprintf_r+0x7a>
 8006446:	ebba 0b04 	subs.w	fp, sl, r4
 800644a:	d00b      	beq.n	8006464 <_vfiprintf_r+0xa4>
 800644c:	465b      	mov	r3, fp
 800644e:	4622      	mov	r2, r4
 8006450:	4629      	mov	r1, r5
 8006452:	4630      	mov	r0, r6
 8006454:	f7ff ffa1 	bl	800639a <__sfputs_r>
 8006458:	3001      	adds	r0, #1
 800645a:	f000 80a7 	beq.w	80065ac <_vfiprintf_r+0x1ec>
 800645e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006460:	445a      	add	r2, fp
 8006462:	9209      	str	r2, [sp, #36]	@ 0x24
 8006464:	f89a 3000 	ldrb.w	r3, [sl]
 8006468:	2b00      	cmp	r3, #0
 800646a:	f000 809f 	beq.w	80065ac <_vfiprintf_r+0x1ec>
 800646e:	2300      	movs	r3, #0
 8006470:	f04f 32ff 	mov.w	r2, #4294967295
 8006474:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006478:	f10a 0a01 	add.w	sl, sl, #1
 800647c:	9304      	str	r3, [sp, #16]
 800647e:	9307      	str	r3, [sp, #28]
 8006480:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006484:	931a      	str	r3, [sp, #104]	@ 0x68
 8006486:	4654      	mov	r4, sl
 8006488:	2205      	movs	r2, #5
 800648a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800648e:	4853      	ldr	r0, [pc, #332]	@ (80065dc <_vfiprintf_r+0x21c>)
 8006490:	f7f9 febe 	bl	8000210 <memchr>
 8006494:	9a04      	ldr	r2, [sp, #16]
 8006496:	b9d8      	cbnz	r0, 80064d0 <_vfiprintf_r+0x110>
 8006498:	06d1      	lsls	r1, r2, #27
 800649a:	bf44      	itt	mi
 800649c:	2320      	movmi	r3, #32
 800649e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80064a2:	0713      	lsls	r3, r2, #28
 80064a4:	bf44      	itt	mi
 80064a6:	232b      	movmi	r3, #43	@ 0x2b
 80064a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80064ac:	f89a 3000 	ldrb.w	r3, [sl]
 80064b0:	2b2a      	cmp	r3, #42	@ 0x2a
 80064b2:	d015      	beq.n	80064e0 <_vfiprintf_r+0x120>
 80064b4:	9a07      	ldr	r2, [sp, #28]
 80064b6:	4654      	mov	r4, sl
 80064b8:	2000      	movs	r0, #0
 80064ba:	f04f 0c0a 	mov.w	ip, #10
 80064be:	4621      	mov	r1, r4
 80064c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80064c4:	3b30      	subs	r3, #48	@ 0x30
 80064c6:	2b09      	cmp	r3, #9
 80064c8:	d94b      	bls.n	8006562 <_vfiprintf_r+0x1a2>
 80064ca:	b1b0      	cbz	r0, 80064fa <_vfiprintf_r+0x13a>
 80064cc:	9207      	str	r2, [sp, #28]
 80064ce:	e014      	b.n	80064fa <_vfiprintf_r+0x13a>
 80064d0:	eba0 0308 	sub.w	r3, r0, r8
 80064d4:	fa09 f303 	lsl.w	r3, r9, r3
 80064d8:	4313      	orrs	r3, r2
 80064da:	9304      	str	r3, [sp, #16]
 80064dc:	46a2      	mov	sl, r4
 80064de:	e7d2      	b.n	8006486 <_vfiprintf_r+0xc6>
 80064e0:	9b03      	ldr	r3, [sp, #12]
 80064e2:	1d19      	adds	r1, r3, #4
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	9103      	str	r1, [sp, #12]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	bfbb      	ittet	lt
 80064ec:	425b      	neglt	r3, r3
 80064ee:	f042 0202 	orrlt.w	r2, r2, #2
 80064f2:	9307      	strge	r3, [sp, #28]
 80064f4:	9307      	strlt	r3, [sp, #28]
 80064f6:	bfb8      	it	lt
 80064f8:	9204      	strlt	r2, [sp, #16]
 80064fa:	7823      	ldrb	r3, [r4, #0]
 80064fc:	2b2e      	cmp	r3, #46	@ 0x2e
 80064fe:	d10a      	bne.n	8006516 <_vfiprintf_r+0x156>
 8006500:	7863      	ldrb	r3, [r4, #1]
 8006502:	2b2a      	cmp	r3, #42	@ 0x2a
 8006504:	d132      	bne.n	800656c <_vfiprintf_r+0x1ac>
 8006506:	9b03      	ldr	r3, [sp, #12]
 8006508:	1d1a      	adds	r2, r3, #4
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	9203      	str	r2, [sp, #12]
 800650e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006512:	3402      	adds	r4, #2
 8006514:	9305      	str	r3, [sp, #20]
 8006516:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80065ec <_vfiprintf_r+0x22c>
 800651a:	7821      	ldrb	r1, [r4, #0]
 800651c:	2203      	movs	r2, #3
 800651e:	4650      	mov	r0, sl
 8006520:	f7f9 fe76 	bl	8000210 <memchr>
 8006524:	b138      	cbz	r0, 8006536 <_vfiprintf_r+0x176>
 8006526:	9b04      	ldr	r3, [sp, #16]
 8006528:	eba0 000a 	sub.w	r0, r0, sl
 800652c:	2240      	movs	r2, #64	@ 0x40
 800652e:	4082      	lsls	r2, r0
 8006530:	4313      	orrs	r3, r2
 8006532:	3401      	adds	r4, #1
 8006534:	9304      	str	r3, [sp, #16]
 8006536:	f814 1b01 	ldrb.w	r1, [r4], #1
 800653a:	4829      	ldr	r0, [pc, #164]	@ (80065e0 <_vfiprintf_r+0x220>)
 800653c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006540:	2206      	movs	r2, #6
 8006542:	f7f9 fe65 	bl	8000210 <memchr>
 8006546:	2800      	cmp	r0, #0
 8006548:	d03f      	beq.n	80065ca <_vfiprintf_r+0x20a>
 800654a:	4b26      	ldr	r3, [pc, #152]	@ (80065e4 <_vfiprintf_r+0x224>)
 800654c:	bb1b      	cbnz	r3, 8006596 <_vfiprintf_r+0x1d6>
 800654e:	9b03      	ldr	r3, [sp, #12]
 8006550:	3307      	adds	r3, #7
 8006552:	f023 0307 	bic.w	r3, r3, #7
 8006556:	3308      	adds	r3, #8
 8006558:	9303      	str	r3, [sp, #12]
 800655a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800655c:	443b      	add	r3, r7
 800655e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006560:	e76a      	b.n	8006438 <_vfiprintf_r+0x78>
 8006562:	fb0c 3202 	mla	r2, ip, r2, r3
 8006566:	460c      	mov	r4, r1
 8006568:	2001      	movs	r0, #1
 800656a:	e7a8      	b.n	80064be <_vfiprintf_r+0xfe>
 800656c:	2300      	movs	r3, #0
 800656e:	3401      	adds	r4, #1
 8006570:	9305      	str	r3, [sp, #20]
 8006572:	4619      	mov	r1, r3
 8006574:	f04f 0c0a 	mov.w	ip, #10
 8006578:	4620      	mov	r0, r4
 800657a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800657e:	3a30      	subs	r2, #48	@ 0x30
 8006580:	2a09      	cmp	r2, #9
 8006582:	d903      	bls.n	800658c <_vfiprintf_r+0x1cc>
 8006584:	2b00      	cmp	r3, #0
 8006586:	d0c6      	beq.n	8006516 <_vfiprintf_r+0x156>
 8006588:	9105      	str	r1, [sp, #20]
 800658a:	e7c4      	b.n	8006516 <_vfiprintf_r+0x156>
 800658c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006590:	4604      	mov	r4, r0
 8006592:	2301      	movs	r3, #1
 8006594:	e7f0      	b.n	8006578 <_vfiprintf_r+0x1b8>
 8006596:	ab03      	add	r3, sp, #12
 8006598:	9300      	str	r3, [sp, #0]
 800659a:	462a      	mov	r2, r5
 800659c:	4b12      	ldr	r3, [pc, #72]	@ (80065e8 <_vfiprintf_r+0x228>)
 800659e:	a904      	add	r1, sp, #16
 80065a0:	4630      	mov	r0, r6
 80065a2:	f3af 8000 	nop.w
 80065a6:	4607      	mov	r7, r0
 80065a8:	1c78      	adds	r0, r7, #1
 80065aa:	d1d6      	bne.n	800655a <_vfiprintf_r+0x19a>
 80065ac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80065ae:	07d9      	lsls	r1, r3, #31
 80065b0:	d405      	bmi.n	80065be <_vfiprintf_r+0x1fe>
 80065b2:	89ab      	ldrh	r3, [r5, #12]
 80065b4:	059a      	lsls	r2, r3, #22
 80065b6:	d402      	bmi.n	80065be <_vfiprintf_r+0x1fe>
 80065b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80065ba:	f7ff fc77 	bl	8005eac <__retarget_lock_release_recursive>
 80065be:	89ab      	ldrh	r3, [r5, #12]
 80065c0:	065b      	lsls	r3, r3, #25
 80065c2:	f53f af1f 	bmi.w	8006404 <_vfiprintf_r+0x44>
 80065c6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80065c8:	e71e      	b.n	8006408 <_vfiprintf_r+0x48>
 80065ca:	ab03      	add	r3, sp, #12
 80065cc:	9300      	str	r3, [sp, #0]
 80065ce:	462a      	mov	r2, r5
 80065d0:	4b05      	ldr	r3, [pc, #20]	@ (80065e8 <_vfiprintf_r+0x228>)
 80065d2:	a904      	add	r1, sp, #16
 80065d4:	4630      	mov	r0, r6
 80065d6:	f000 f879 	bl	80066cc <_printf_i>
 80065da:	e7e4      	b.n	80065a6 <_vfiprintf_r+0x1e6>
 80065dc:	08006fa8 	.word	0x08006fa8
 80065e0:	08006fb2 	.word	0x08006fb2
 80065e4:	00000000 	.word	0x00000000
 80065e8:	0800639b 	.word	0x0800639b
 80065ec:	08006fae 	.word	0x08006fae

080065f0 <_printf_common>:
 80065f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80065f4:	4616      	mov	r6, r2
 80065f6:	4698      	mov	r8, r3
 80065f8:	688a      	ldr	r2, [r1, #8]
 80065fa:	690b      	ldr	r3, [r1, #16]
 80065fc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006600:	4293      	cmp	r3, r2
 8006602:	bfb8      	it	lt
 8006604:	4613      	movlt	r3, r2
 8006606:	6033      	str	r3, [r6, #0]
 8006608:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800660c:	4607      	mov	r7, r0
 800660e:	460c      	mov	r4, r1
 8006610:	b10a      	cbz	r2, 8006616 <_printf_common+0x26>
 8006612:	3301      	adds	r3, #1
 8006614:	6033      	str	r3, [r6, #0]
 8006616:	6823      	ldr	r3, [r4, #0]
 8006618:	0699      	lsls	r1, r3, #26
 800661a:	bf42      	ittt	mi
 800661c:	6833      	ldrmi	r3, [r6, #0]
 800661e:	3302      	addmi	r3, #2
 8006620:	6033      	strmi	r3, [r6, #0]
 8006622:	6825      	ldr	r5, [r4, #0]
 8006624:	f015 0506 	ands.w	r5, r5, #6
 8006628:	d106      	bne.n	8006638 <_printf_common+0x48>
 800662a:	f104 0a19 	add.w	sl, r4, #25
 800662e:	68e3      	ldr	r3, [r4, #12]
 8006630:	6832      	ldr	r2, [r6, #0]
 8006632:	1a9b      	subs	r3, r3, r2
 8006634:	42ab      	cmp	r3, r5
 8006636:	dc26      	bgt.n	8006686 <_printf_common+0x96>
 8006638:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800663c:	6822      	ldr	r2, [r4, #0]
 800663e:	3b00      	subs	r3, #0
 8006640:	bf18      	it	ne
 8006642:	2301      	movne	r3, #1
 8006644:	0692      	lsls	r2, r2, #26
 8006646:	d42b      	bmi.n	80066a0 <_printf_common+0xb0>
 8006648:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800664c:	4641      	mov	r1, r8
 800664e:	4638      	mov	r0, r7
 8006650:	47c8      	blx	r9
 8006652:	3001      	adds	r0, #1
 8006654:	d01e      	beq.n	8006694 <_printf_common+0xa4>
 8006656:	6823      	ldr	r3, [r4, #0]
 8006658:	6922      	ldr	r2, [r4, #16]
 800665a:	f003 0306 	and.w	r3, r3, #6
 800665e:	2b04      	cmp	r3, #4
 8006660:	bf02      	ittt	eq
 8006662:	68e5      	ldreq	r5, [r4, #12]
 8006664:	6833      	ldreq	r3, [r6, #0]
 8006666:	1aed      	subeq	r5, r5, r3
 8006668:	68a3      	ldr	r3, [r4, #8]
 800666a:	bf0c      	ite	eq
 800666c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006670:	2500      	movne	r5, #0
 8006672:	4293      	cmp	r3, r2
 8006674:	bfc4      	itt	gt
 8006676:	1a9b      	subgt	r3, r3, r2
 8006678:	18ed      	addgt	r5, r5, r3
 800667a:	2600      	movs	r6, #0
 800667c:	341a      	adds	r4, #26
 800667e:	42b5      	cmp	r5, r6
 8006680:	d11a      	bne.n	80066b8 <_printf_common+0xc8>
 8006682:	2000      	movs	r0, #0
 8006684:	e008      	b.n	8006698 <_printf_common+0xa8>
 8006686:	2301      	movs	r3, #1
 8006688:	4652      	mov	r2, sl
 800668a:	4641      	mov	r1, r8
 800668c:	4638      	mov	r0, r7
 800668e:	47c8      	blx	r9
 8006690:	3001      	adds	r0, #1
 8006692:	d103      	bne.n	800669c <_printf_common+0xac>
 8006694:	f04f 30ff 	mov.w	r0, #4294967295
 8006698:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800669c:	3501      	adds	r5, #1
 800669e:	e7c6      	b.n	800662e <_printf_common+0x3e>
 80066a0:	18e1      	adds	r1, r4, r3
 80066a2:	1c5a      	adds	r2, r3, #1
 80066a4:	2030      	movs	r0, #48	@ 0x30
 80066a6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80066aa:	4422      	add	r2, r4
 80066ac:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80066b0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80066b4:	3302      	adds	r3, #2
 80066b6:	e7c7      	b.n	8006648 <_printf_common+0x58>
 80066b8:	2301      	movs	r3, #1
 80066ba:	4622      	mov	r2, r4
 80066bc:	4641      	mov	r1, r8
 80066be:	4638      	mov	r0, r7
 80066c0:	47c8      	blx	r9
 80066c2:	3001      	adds	r0, #1
 80066c4:	d0e6      	beq.n	8006694 <_printf_common+0xa4>
 80066c6:	3601      	adds	r6, #1
 80066c8:	e7d9      	b.n	800667e <_printf_common+0x8e>
	...

080066cc <_printf_i>:
 80066cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80066d0:	7e0f      	ldrb	r7, [r1, #24]
 80066d2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80066d4:	2f78      	cmp	r7, #120	@ 0x78
 80066d6:	4691      	mov	r9, r2
 80066d8:	4680      	mov	r8, r0
 80066da:	460c      	mov	r4, r1
 80066dc:	469a      	mov	sl, r3
 80066de:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80066e2:	d807      	bhi.n	80066f4 <_printf_i+0x28>
 80066e4:	2f62      	cmp	r7, #98	@ 0x62
 80066e6:	d80a      	bhi.n	80066fe <_printf_i+0x32>
 80066e8:	2f00      	cmp	r7, #0
 80066ea:	f000 80d1 	beq.w	8006890 <_printf_i+0x1c4>
 80066ee:	2f58      	cmp	r7, #88	@ 0x58
 80066f0:	f000 80b8 	beq.w	8006864 <_printf_i+0x198>
 80066f4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80066f8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80066fc:	e03a      	b.n	8006774 <_printf_i+0xa8>
 80066fe:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006702:	2b15      	cmp	r3, #21
 8006704:	d8f6      	bhi.n	80066f4 <_printf_i+0x28>
 8006706:	a101      	add	r1, pc, #4	@ (adr r1, 800670c <_printf_i+0x40>)
 8006708:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800670c:	08006765 	.word	0x08006765
 8006710:	08006779 	.word	0x08006779
 8006714:	080066f5 	.word	0x080066f5
 8006718:	080066f5 	.word	0x080066f5
 800671c:	080066f5 	.word	0x080066f5
 8006720:	080066f5 	.word	0x080066f5
 8006724:	08006779 	.word	0x08006779
 8006728:	080066f5 	.word	0x080066f5
 800672c:	080066f5 	.word	0x080066f5
 8006730:	080066f5 	.word	0x080066f5
 8006734:	080066f5 	.word	0x080066f5
 8006738:	08006877 	.word	0x08006877
 800673c:	080067a3 	.word	0x080067a3
 8006740:	08006831 	.word	0x08006831
 8006744:	080066f5 	.word	0x080066f5
 8006748:	080066f5 	.word	0x080066f5
 800674c:	08006899 	.word	0x08006899
 8006750:	080066f5 	.word	0x080066f5
 8006754:	080067a3 	.word	0x080067a3
 8006758:	080066f5 	.word	0x080066f5
 800675c:	080066f5 	.word	0x080066f5
 8006760:	08006839 	.word	0x08006839
 8006764:	6833      	ldr	r3, [r6, #0]
 8006766:	1d1a      	adds	r2, r3, #4
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	6032      	str	r2, [r6, #0]
 800676c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006770:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006774:	2301      	movs	r3, #1
 8006776:	e09c      	b.n	80068b2 <_printf_i+0x1e6>
 8006778:	6833      	ldr	r3, [r6, #0]
 800677a:	6820      	ldr	r0, [r4, #0]
 800677c:	1d19      	adds	r1, r3, #4
 800677e:	6031      	str	r1, [r6, #0]
 8006780:	0606      	lsls	r6, r0, #24
 8006782:	d501      	bpl.n	8006788 <_printf_i+0xbc>
 8006784:	681d      	ldr	r5, [r3, #0]
 8006786:	e003      	b.n	8006790 <_printf_i+0xc4>
 8006788:	0645      	lsls	r5, r0, #25
 800678a:	d5fb      	bpl.n	8006784 <_printf_i+0xb8>
 800678c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006790:	2d00      	cmp	r5, #0
 8006792:	da03      	bge.n	800679c <_printf_i+0xd0>
 8006794:	232d      	movs	r3, #45	@ 0x2d
 8006796:	426d      	negs	r5, r5
 8006798:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800679c:	4858      	ldr	r0, [pc, #352]	@ (8006900 <_printf_i+0x234>)
 800679e:	230a      	movs	r3, #10
 80067a0:	e011      	b.n	80067c6 <_printf_i+0xfa>
 80067a2:	6821      	ldr	r1, [r4, #0]
 80067a4:	6833      	ldr	r3, [r6, #0]
 80067a6:	0608      	lsls	r0, r1, #24
 80067a8:	f853 5b04 	ldr.w	r5, [r3], #4
 80067ac:	d402      	bmi.n	80067b4 <_printf_i+0xe8>
 80067ae:	0649      	lsls	r1, r1, #25
 80067b0:	bf48      	it	mi
 80067b2:	b2ad      	uxthmi	r5, r5
 80067b4:	2f6f      	cmp	r7, #111	@ 0x6f
 80067b6:	4852      	ldr	r0, [pc, #328]	@ (8006900 <_printf_i+0x234>)
 80067b8:	6033      	str	r3, [r6, #0]
 80067ba:	bf14      	ite	ne
 80067bc:	230a      	movne	r3, #10
 80067be:	2308      	moveq	r3, #8
 80067c0:	2100      	movs	r1, #0
 80067c2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80067c6:	6866      	ldr	r6, [r4, #4]
 80067c8:	60a6      	str	r6, [r4, #8]
 80067ca:	2e00      	cmp	r6, #0
 80067cc:	db05      	blt.n	80067da <_printf_i+0x10e>
 80067ce:	6821      	ldr	r1, [r4, #0]
 80067d0:	432e      	orrs	r6, r5
 80067d2:	f021 0104 	bic.w	r1, r1, #4
 80067d6:	6021      	str	r1, [r4, #0]
 80067d8:	d04b      	beq.n	8006872 <_printf_i+0x1a6>
 80067da:	4616      	mov	r6, r2
 80067dc:	fbb5 f1f3 	udiv	r1, r5, r3
 80067e0:	fb03 5711 	mls	r7, r3, r1, r5
 80067e4:	5dc7      	ldrb	r7, [r0, r7]
 80067e6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80067ea:	462f      	mov	r7, r5
 80067ec:	42bb      	cmp	r3, r7
 80067ee:	460d      	mov	r5, r1
 80067f0:	d9f4      	bls.n	80067dc <_printf_i+0x110>
 80067f2:	2b08      	cmp	r3, #8
 80067f4:	d10b      	bne.n	800680e <_printf_i+0x142>
 80067f6:	6823      	ldr	r3, [r4, #0]
 80067f8:	07df      	lsls	r7, r3, #31
 80067fa:	d508      	bpl.n	800680e <_printf_i+0x142>
 80067fc:	6923      	ldr	r3, [r4, #16]
 80067fe:	6861      	ldr	r1, [r4, #4]
 8006800:	4299      	cmp	r1, r3
 8006802:	bfde      	ittt	le
 8006804:	2330      	movle	r3, #48	@ 0x30
 8006806:	f806 3c01 	strble.w	r3, [r6, #-1]
 800680a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800680e:	1b92      	subs	r2, r2, r6
 8006810:	6122      	str	r2, [r4, #16]
 8006812:	f8cd a000 	str.w	sl, [sp]
 8006816:	464b      	mov	r3, r9
 8006818:	aa03      	add	r2, sp, #12
 800681a:	4621      	mov	r1, r4
 800681c:	4640      	mov	r0, r8
 800681e:	f7ff fee7 	bl	80065f0 <_printf_common>
 8006822:	3001      	adds	r0, #1
 8006824:	d14a      	bne.n	80068bc <_printf_i+0x1f0>
 8006826:	f04f 30ff 	mov.w	r0, #4294967295
 800682a:	b004      	add	sp, #16
 800682c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006830:	6823      	ldr	r3, [r4, #0]
 8006832:	f043 0320 	orr.w	r3, r3, #32
 8006836:	6023      	str	r3, [r4, #0]
 8006838:	4832      	ldr	r0, [pc, #200]	@ (8006904 <_printf_i+0x238>)
 800683a:	2778      	movs	r7, #120	@ 0x78
 800683c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006840:	6823      	ldr	r3, [r4, #0]
 8006842:	6831      	ldr	r1, [r6, #0]
 8006844:	061f      	lsls	r7, r3, #24
 8006846:	f851 5b04 	ldr.w	r5, [r1], #4
 800684a:	d402      	bmi.n	8006852 <_printf_i+0x186>
 800684c:	065f      	lsls	r7, r3, #25
 800684e:	bf48      	it	mi
 8006850:	b2ad      	uxthmi	r5, r5
 8006852:	6031      	str	r1, [r6, #0]
 8006854:	07d9      	lsls	r1, r3, #31
 8006856:	bf44      	itt	mi
 8006858:	f043 0320 	orrmi.w	r3, r3, #32
 800685c:	6023      	strmi	r3, [r4, #0]
 800685e:	b11d      	cbz	r5, 8006868 <_printf_i+0x19c>
 8006860:	2310      	movs	r3, #16
 8006862:	e7ad      	b.n	80067c0 <_printf_i+0xf4>
 8006864:	4826      	ldr	r0, [pc, #152]	@ (8006900 <_printf_i+0x234>)
 8006866:	e7e9      	b.n	800683c <_printf_i+0x170>
 8006868:	6823      	ldr	r3, [r4, #0]
 800686a:	f023 0320 	bic.w	r3, r3, #32
 800686e:	6023      	str	r3, [r4, #0]
 8006870:	e7f6      	b.n	8006860 <_printf_i+0x194>
 8006872:	4616      	mov	r6, r2
 8006874:	e7bd      	b.n	80067f2 <_printf_i+0x126>
 8006876:	6833      	ldr	r3, [r6, #0]
 8006878:	6825      	ldr	r5, [r4, #0]
 800687a:	6961      	ldr	r1, [r4, #20]
 800687c:	1d18      	adds	r0, r3, #4
 800687e:	6030      	str	r0, [r6, #0]
 8006880:	062e      	lsls	r6, r5, #24
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	d501      	bpl.n	800688a <_printf_i+0x1be>
 8006886:	6019      	str	r1, [r3, #0]
 8006888:	e002      	b.n	8006890 <_printf_i+0x1c4>
 800688a:	0668      	lsls	r0, r5, #25
 800688c:	d5fb      	bpl.n	8006886 <_printf_i+0x1ba>
 800688e:	8019      	strh	r1, [r3, #0]
 8006890:	2300      	movs	r3, #0
 8006892:	6123      	str	r3, [r4, #16]
 8006894:	4616      	mov	r6, r2
 8006896:	e7bc      	b.n	8006812 <_printf_i+0x146>
 8006898:	6833      	ldr	r3, [r6, #0]
 800689a:	1d1a      	adds	r2, r3, #4
 800689c:	6032      	str	r2, [r6, #0]
 800689e:	681e      	ldr	r6, [r3, #0]
 80068a0:	6862      	ldr	r2, [r4, #4]
 80068a2:	2100      	movs	r1, #0
 80068a4:	4630      	mov	r0, r6
 80068a6:	f7f9 fcb3 	bl	8000210 <memchr>
 80068aa:	b108      	cbz	r0, 80068b0 <_printf_i+0x1e4>
 80068ac:	1b80      	subs	r0, r0, r6
 80068ae:	6060      	str	r0, [r4, #4]
 80068b0:	6863      	ldr	r3, [r4, #4]
 80068b2:	6123      	str	r3, [r4, #16]
 80068b4:	2300      	movs	r3, #0
 80068b6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80068ba:	e7aa      	b.n	8006812 <_printf_i+0x146>
 80068bc:	6923      	ldr	r3, [r4, #16]
 80068be:	4632      	mov	r2, r6
 80068c0:	4649      	mov	r1, r9
 80068c2:	4640      	mov	r0, r8
 80068c4:	47d0      	blx	sl
 80068c6:	3001      	adds	r0, #1
 80068c8:	d0ad      	beq.n	8006826 <_printf_i+0x15a>
 80068ca:	6823      	ldr	r3, [r4, #0]
 80068cc:	079b      	lsls	r3, r3, #30
 80068ce:	d413      	bmi.n	80068f8 <_printf_i+0x22c>
 80068d0:	68e0      	ldr	r0, [r4, #12]
 80068d2:	9b03      	ldr	r3, [sp, #12]
 80068d4:	4298      	cmp	r0, r3
 80068d6:	bfb8      	it	lt
 80068d8:	4618      	movlt	r0, r3
 80068da:	e7a6      	b.n	800682a <_printf_i+0x15e>
 80068dc:	2301      	movs	r3, #1
 80068de:	4632      	mov	r2, r6
 80068e0:	4649      	mov	r1, r9
 80068e2:	4640      	mov	r0, r8
 80068e4:	47d0      	blx	sl
 80068e6:	3001      	adds	r0, #1
 80068e8:	d09d      	beq.n	8006826 <_printf_i+0x15a>
 80068ea:	3501      	adds	r5, #1
 80068ec:	68e3      	ldr	r3, [r4, #12]
 80068ee:	9903      	ldr	r1, [sp, #12]
 80068f0:	1a5b      	subs	r3, r3, r1
 80068f2:	42ab      	cmp	r3, r5
 80068f4:	dcf2      	bgt.n	80068dc <_printf_i+0x210>
 80068f6:	e7eb      	b.n	80068d0 <_printf_i+0x204>
 80068f8:	2500      	movs	r5, #0
 80068fa:	f104 0619 	add.w	r6, r4, #25
 80068fe:	e7f5      	b.n	80068ec <_printf_i+0x220>
 8006900:	08006fb9 	.word	0x08006fb9
 8006904:	08006fca 	.word	0x08006fca

08006908 <__sflush_r>:
 8006908:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800690c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006910:	0716      	lsls	r6, r2, #28
 8006912:	4605      	mov	r5, r0
 8006914:	460c      	mov	r4, r1
 8006916:	d454      	bmi.n	80069c2 <__sflush_r+0xba>
 8006918:	684b      	ldr	r3, [r1, #4]
 800691a:	2b00      	cmp	r3, #0
 800691c:	dc02      	bgt.n	8006924 <__sflush_r+0x1c>
 800691e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006920:	2b00      	cmp	r3, #0
 8006922:	dd48      	ble.n	80069b6 <__sflush_r+0xae>
 8006924:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006926:	2e00      	cmp	r6, #0
 8006928:	d045      	beq.n	80069b6 <__sflush_r+0xae>
 800692a:	2300      	movs	r3, #0
 800692c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006930:	682f      	ldr	r7, [r5, #0]
 8006932:	6a21      	ldr	r1, [r4, #32]
 8006934:	602b      	str	r3, [r5, #0]
 8006936:	d030      	beq.n	800699a <__sflush_r+0x92>
 8006938:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800693a:	89a3      	ldrh	r3, [r4, #12]
 800693c:	0759      	lsls	r1, r3, #29
 800693e:	d505      	bpl.n	800694c <__sflush_r+0x44>
 8006940:	6863      	ldr	r3, [r4, #4]
 8006942:	1ad2      	subs	r2, r2, r3
 8006944:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006946:	b10b      	cbz	r3, 800694c <__sflush_r+0x44>
 8006948:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800694a:	1ad2      	subs	r2, r2, r3
 800694c:	2300      	movs	r3, #0
 800694e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006950:	6a21      	ldr	r1, [r4, #32]
 8006952:	4628      	mov	r0, r5
 8006954:	47b0      	blx	r6
 8006956:	1c43      	adds	r3, r0, #1
 8006958:	89a3      	ldrh	r3, [r4, #12]
 800695a:	d106      	bne.n	800696a <__sflush_r+0x62>
 800695c:	6829      	ldr	r1, [r5, #0]
 800695e:	291d      	cmp	r1, #29
 8006960:	d82b      	bhi.n	80069ba <__sflush_r+0xb2>
 8006962:	4a2a      	ldr	r2, [pc, #168]	@ (8006a0c <__sflush_r+0x104>)
 8006964:	40ca      	lsrs	r2, r1
 8006966:	07d6      	lsls	r6, r2, #31
 8006968:	d527      	bpl.n	80069ba <__sflush_r+0xb2>
 800696a:	2200      	movs	r2, #0
 800696c:	6062      	str	r2, [r4, #4]
 800696e:	04d9      	lsls	r1, r3, #19
 8006970:	6922      	ldr	r2, [r4, #16]
 8006972:	6022      	str	r2, [r4, #0]
 8006974:	d504      	bpl.n	8006980 <__sflush_r+0x78>
 8006976:	1c42      	adds	r2, r0, #1
 8006978:	d101      	bne.n	800697e <__sflush_r+0x76>
 800697a:	682b      	ldr	r3, [r5, #0]
 800697c:	b903      	cbnz	r3, 8006980 <__sflush_r+0x78>
 800697e:	6560      	str	r0, [r4, #84]	@ 0x54
 8006980:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006982:	602f      	str	r7, [r5, #0]
 8006984:	b1b9      	cbz	r1, 80069b6 <__sflush_r+0xae>
 8006986:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800698a:	4299      	cmp	r1, r3
 800698c:	d002      	beq.n	8006994 <__sflush_r+0x8c>
 800698e:	4628      	mov	r0, r5
 8006990:	f7ff fa9c 	bl	8005ecc <_free_r>
 8006994:	2300      	movs	r3, #0
 8006996:	6363      	str	r3, [r4, #52]	@ 0x34
 8006998:	e00d      	b.n	80069b6 <__sflush_r+0xae>
 800699a:	2301      	movs	r3, #1
 800699c:	4628      	mov	r0, r5
 800699e:	47b0      	blx	r6
 80069a0:	4602      	mov	r2, r0
 80069a2:	1c50      	adds	r0, r2, #1
 80069a4:	d1c9      	bne.n	800693a <__sflush_r+0x32>
 80069a6:	682b      	ldr	r3, [r5, #0]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d0c6      	beq.n	800693a <__sflush_r+0x32>
 80069ac:	2b1d      	cmp	r3, #29
 80069ae:	d001      	beq.n	80069b4 <__sflush_r+0xac>
 80069b0:	2b16      	cmp	r3, #22
 80069b2:	d11e      	bne.n	80069f2 <__sflush_r+0xea>
 80069b4:	602f      	str	r7, [r5, #0]
 80069b6:	2000      	movs	r0, #0
 80069b8:	e022      	b.n	8006a00 <__sflush_r+0xf8>
 80069ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80069be:	b21b      	sxth	r3, r3
 80069c0:	e01b      	b.n	80069fa <__sflush_r+0xf2>
 80069c2:	690f      	ldr	r7, [r1, #16]
 80069c4:	2f00      	cmp	r7, #0
 80069c6:	d0f6      	beq.n	80069b6 <__sflush_r+0xae>
 80069c8:	0793      	lsls	r3, r2, #30
 80069ca:	680e      	ldr	r6, [r1, #0]
 80069cc:	bf08      	it	eq
 80069ce:	694b      	ldreq	r3, [r1, #20]
 80069d0:	600f      	str	r7, [r1, #0]
 80069d2:	bf18      	it	ne
 80069d4:	2300      	movne	r3, #0
 80069d6:	eba6 0807 	sub.w	r8, r6, r7
 80069da:	608b      	str	r3, [r1, #8]
 80069dc:	f1b8 0f00 	cmp.w	r8, #0
 80069e0:	dde9      	ble.n	80069b6 <__sflush_r+0xae>
 80069e2:	6a21      	ldr	r1, [r4, #32]
 80069e4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80069e6:	4643      	mov	r3, r8
 80069e8:	463a      	mov	r2, r7
 80069ea:	4628      	mov	r0, r5
 80069ec:	47b0      	blx	r6
 80069ee:	2800      	cmp	r0, #0
 80069f0:	dc08      	bgt.n	8006a04 <__sflush_r+0xfc>
 80069f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80069f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80069fa:	81a3      	strh	r3, [r4, #12]
 80069fc:	f04f 30ff 	mov.w	r0, #4294967295
 8006a00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a04:	4407      	add	r7, r0
 8006a06:	eba8 0800 	sub.w	r8, r8, r0
 8006a0a:	e7e7      	b.n	80069dc <__sflush_r+0xd4>
 8006a0c:	20400001 	.word	0x20400001

08006a10 <_fflush_r>:
 8006a10:	b538      	push	{r3, r4, r5, lr}
 8006a12:	690b      	ldr	r3, [r1, #16]
 8006a14:	4605      	mov	r5, r0
 8006a16:	460c      	mov	r4, r1
 8006a18:	b913      	cbnz	r3, 8006a20 <_fflush_r+0x10>
 8006a1a:	2500      	movs	r5, #0
 8006a1c:	4628      	mov	r0, r5
 8006a1e:	bd38      	pop	{r3, r4, r5, pc}
 8006a20:	b118      	cbz	r0, 8006a2a <_fflush_r+0x1a>
 8006a22:	6a03      	ldr	r3, [r0, #32]
 8006a24:	b90b      	cbnz	r3, 8006a2a <_fflush_r+0x1a>
 8006a26:	f7fe ffff 	bl	8005a28 <__sinit>
 8006a2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d0f3      	beq.n	8006a1a <_fflush_r+0xa>
 8006a32:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006a34:	07d0      	lsls	r0, r2, #31
 8006a36:	d404      	bmi.n	8006a42 <_fflush_r+0x32>
 8006a38:	0599      	lsls	r1, r3, #22
 8006a3a:	d402      	bmi.n	8006a42 <_fflush_r+0x32>
 8006a3c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006a3e:	f7ff fa34 	bl	8005eaa <__retarget_lock_acquire_recursive>
 8006a42:	4628      	mov	r0, r5
 8006a44:	4621      	mov	r1, r4
 8006a46:	f7ff ff5f 	bl	8006908 <__sflush_r>
 8006a4a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006a4c:	07da      	lsls	r2, r3, #31
 8006a4e:	4605      	mov	r5, r0
 8006a50:	d4e4      	bmi.n	8006a1c <_fflush_r+0xc>
 8006a52:	89a3      	ldrh	r3, [r4, #12]
 8006a54:	059b      	lsls	r3, r3, #22
 8006a56:	d4e1      	bmi.n	8006a1c <_fflush_r+0xc>
 8006a58:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006a5a:	f7ff fa27 	bl	8005eac <__retarget_lock_release_recursive>
 8006a5e:	e7dd      	b.n	8006a1c <_fflush_r+0xc>

08006a60 <__swhatbuf_r>:
 8006a60:	b570      	push	{r4, r5, r6, lr}
 8006a62:	460c      	mov	r4, r1
 8006a64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a68:	2900      	cmp	r1, #0
 8006a6a:	b096      	sub	sp, #88	@ 0x58
 8006a6c:	4615      	mov	r5, r2
 8006a6e:	461e      	mov	r6, r3
 8006a70:	da0d      	bge.n	8006a8e <__swhatbuf_r+0x2e>
 8006a72:	89a3      	ldrh	r3, [r4, #12]
 8006a74:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006a78:	f04f 0100 	mov.w	r1, #0
 8006a7c:	bf14      	ite	ne
 8006a7e:	2340      	movne	r3, #64	@ 0x40
 8006a80:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006a84:	2000      	movs	r0, #0
 8006a86:	6031      	str	r1, [r6, #0]
 8006a88:	602b      	str	r3, [r5, #0]
 8006a8a:	b016      	add	sp, #88	@ 0x58
 8006a8c:	bd70      	pop	{r4, r5, r6, pc}
 8006a8e:	466a      	mov	r2, sp
 8006a90:	f000 f862 	bl	8006b58 <_fstat_r>
 8006a94:	2800      	cmp	r0, #0
 8006a96:	dbec      	blt.n	8006a72 <__swhatbuf_r+0x12>
 8006a98:	9901      	ldr	r1, [sp, #4]
 8006a9a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006a9e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006aa2:	4259      	negs	r1, r3
 8006aa4:	4159      	adcs	r1, r3
 8006aa6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006aaa:	e7eb      	b.n	8006a84 <__swhatbuf_r+0x24>

08006aac <__smakebuf_r>:
 8006aac:	898b      	ldrh	r3, [r1, #12]
 8006aae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006ab0:	079d      	lsls	r5, r3, #30
 8006ab2:	4606      	mov	r6, r0
 8006ab4:	460c      	mov	r4, r1
 8006ab6:	d507      	bpl.n	8006ac8 <__smakebuf_r+0x1c>
 8006ab8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006abc:	6023      	str	r3, [r4, #0]
 8006abe:	6123      	str	r3, [r4, #16]
 8006ac0:	2301      	movs	r3, #1
 8006ac2:	6163      	str	r3, [r4, #20]
 8006ac4:	b003      	add	sp, #12
 8006ac6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ac8:	ab01      	add	r3, sp, #4
 8006aca:	466a      	mov	r2, sp
 8006acc:	f7ff ffc8 	bl	8006a60 <__swhatbuf_r>
 8006ad0:	9f00      	ldr	r7, [sp, #0]
 8006ad2:	4605      	mov	r5, r0
 8006ad4:	4639      	mov	r1, r7
 8006ad6:	4630      	mov	r0, r6
 8006ad8:	f7ff fa64 	bl	8005fa4 <_malloc_r>
 8006adc:	b948      	cbnz	r0, 8006af2 <__smakebuf_r+0x46>
 8006ade:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ae2:	059a      	lsls	r2, r3, #22
 8006ae4:	d4ee      	bmi.n	8006ac4 <__smakebuf_r+0x18>
 8006ae6:	f023 0303 	bic.w	r3, r3, #3
 8006aea:	f043 0302 	orr.w	r3, r3, #2
 8006aee:	81a3      	strh	r3, [r4, #12]
 8006af0:	e7e2      	b.n	8006ab8 <__smakebuf_r+0xc>
 8006af2:	89a3      	ldrh	r3, [r4, #12]
 8006af4:	6020      	str	r0, [r4, #0]
 8006af6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006afa:	81a3      	strh	r3, [r4, #12]
 8006afc:	9b01      	ldr	r3, [sp, #4]
 8006afe:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006b02:	b15b      	cbz	r3, 8006b1c <__smakebuf_r+0x70>
 8006b04:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006b08:	4630      	mov	r0, r6
 8006b0a:	f000 f837 	bl	8006b7c <_isatty_r>
 8006b0e:	b128      	cbz	r0, 8006b1c <__smakebuf_r+0x70>
 8006b10:	89a3      	ldrh	r3, [r4, #12]
 8006b12:	f023 0303 	bic.w	r3, r3, #3
 8006b16:	f043 0301 	orr.w	r3, r3, #1
 8006b1a:	81a3      	strh	r3, [r4, #12]
 8006b1c:	89a3      	ldrh	r3, [r4, #12]
 8006b1e:	431d      	orrs	r5, r3
 8006b20:	81a5      	strh	r5, [r4, #12]
 8006b22:	e7cf      	b.n	8006ac4 <__smakebuf_r+0x18>

08006b24 <memmove>:
 8006b24:	4288      	cmp	r0, r1
 8006b26:	b510      	push	{r4, lr}
 8006b28:	eb01 0402 	add.w	r4, r1, r2
 8006b2c:	d902      	bls.n	8006b34 <memmove+0x10>
 8006b2e:	4284      	cmp	r4, r0
 8006b30:	4623      	mov	r3, r4
 8006b32:	d807      	bhi.n	8006b44 <memmove+0x20>
 8006b34:	1e43      	subs	r3, r0, #1
 8006b36:	42a1      	cmp	r1, r4
 8006b38:	d008      	beq.n	8006b4c <memmove+0x28>
 8006b3a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006b3e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006b42:	e7f8      	b.n	8006b36 <memmove+0x12>
 8006b44:	4402      	add	r2, r0
 8006b46:	4601      	mov	r1, r0
 8006b48:	428a      	cmp	r2, r1
 8006b4a:	d100      	bne.n	8006b4e <memmove+0x2a>
 8006b4c:	bd10      	pop	{r4, pc}
 8006b4e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006b52:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006b56:	e7f7      	b.n	8006b48 <memmove+0x24>

08006b58 <_fstat_r>:
 8006b58:	b538      	push	{r3, r4, r5, lr}
 8006b5a:	4d07      	ldr	r5, [pc, #28]	@ (8006b78 <_fstat_r+0x20>)
 8006b5c:	2300      	movs	r3, #0
 8006b5e:	4604      	mov	r4, r0
 8006b60:	4608      	mov	r0, r1
 8006b62:	4611      	mov	r1, r2
 8006b64:	602b      	str	r3, [r5, #0]
 8006b66:	f7fa fcf4 	bl	8001552 <_fstat>
 8006b6a:	1c43      	adds	r3, r0, #1
 8006b6c:	d102      	bne.n	8006b74 <_fstat_r+0x1c>
 8006b6e:	682b      	ldr	r3, [r5, #0]
 8006b70:	b103      	cbz	r3, 8006b74 <_fstat_r+0x1c>
 8006b72:	6023      	str	r3, [r4, #0]
 8006b74:	bd38      	pop	{r3, r4, r5, pc}
 8006b76:	bf00      	nop
 8006b78:	20004814 	.word	0x20004814

08006b7c <_isatty_r>:
 8006b7c:	b538      	push	{r3, r4, r5, lr}
 8006b7e:	4d06      	ldr	r5, [pc, #24]	@ (8006b98 <_isatty_r+0x1c>)
 8006b80:	2300      	movs	r3, #0
 8006b82:	4604      	mov	r4, r0
 8006b84:	4608      	mov	r0, r1
 8006b86:	602b      	str	r3, [r5, #0]
 8006b88:	f7fa fcf3 	bl	8001572 <_isatty>
 8006b8c:	1c43      	adds	r3, r0, #1
 8006b8e:	d102      	bne.n	8006b96 <_isatty_r+0x1a>
 8006b90:	682b      	ldr	r3, [r5, #0]
 8006b92:	b103      	cbz	r3, 8006b96 <_isatty_r+0x1a>
 8006b94:	6023      	str	r3, [r4, #0]
 8006b96:	bd38      	pop	{r3, r4, r5, pc}
 8006b98:	20004814 	.word	0x20004814

08006b9c <_sbrk_r>:
 8006b9c:	b538      	push	{r3, r4, r5, lr}
 8006b9e:	4d06      	ldr	r5, [pc, #24]	@ (8006bb8 <_sbrk_r+0x1c>)
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	4604      	mov	r4, r0
 8006ba4:	4608      	mov	r0, r1
 8006ba6:	602b      	str	r3, [r5, #0]
 8006ba8:	f7fa fcfc 	bl	80015a4 <_sbrk>
 8006bac:	1c43      	adds	r3, r0, #1
 8006bae:	d102      	bne.n	8006bb6 <_sbrk_r+0x1a>
 8006bb0:	682b      	ldr	r3, [r5, #0]
 8006bb2:	b103      	cbz	r3, 8006bb6 <_sbrk_r+0x1a>
 8006bb4:	6023      	str	r3, [r4, #0]
 8006bb6:	bd38      	pop	{r3, r4, r5, pc}
 8006bb8:	20004814 	.word	0x20004814

08006bbc <_realloc_r>:
 8006bbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006bc0:	4607      	mov	r7, r0
 8006bc2:	4614      	mov	r4, r2
 8006bc4:	460d      	mov	r5, r1
 8006bc6:	b921      	cbnz	r1, 8006bd2 <_realloc_r+0x16>
 8006bc8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006bcc:	4611      	mov	r1, r2
 8006bce:	f7ff b9e9 	b.w	8005fa4 <_malloc_r>
 8006bd2:	b92a      	cbnz	r2, 8006be0 <_realloc_r+0x24>
 8006bd4:	f7ff f97a 	bl	8005ecc <_free_r>
 8006bd8:	4625      	mov	r5, r4
 8006bda:	4628      	mov	r0, r5
 8006bdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006be0:	f000 f81a 	bl	8006c18 <_malloc_usable_size_r>
 8006be4:	4284      	cmp	r4, r0
 8006be6:	4606      	mov	r6, r0
 8006be8:	d802      	bhi.n	8006bf0 <_realloc_r+0x34>
 8006bea:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006bee:	d8f4      	bhi.n	8006bda <_realloc_r+0x1e>
 8006bf0:	4621      	mov	r1, r4
 8006bf2:	4638      	mov	r0, r7
 8006bf4:	f7ff f9d6 	bl	8005fa4 <_malloc_r>
 8006bf8:	4680      	mov	r8, r0
 8006bfa:	b908      	cbnz	r0, 8006c00 <_realloc_r+0x44>
 8006bfc:	4645      	mov	r5, r8
 8006bfe:	e7ec      	b.n	8006bda <_realloc_r+0x1e>
 8006c00:	42b4      	cmp	r4, r6
 8006c02:	4622      	mov	r2, r4
 8006c04:	4629      	mov	r1, r5
 8006c06:	bf28      	it	cs
 8006c08:	4632      	movcs	r2, r6
 8006c0a:	f7ff f950 	bl	8005eae <memcpy>
 8006c0e:	4629      	mov	r1, r5
 8006c10:	4638      	mov	r0, r7
 8006c12:	f7ff f95b 	bl	8005ecc <_free_r>
 8006c16:	e7f1      	b.n	8006bfc <_realloc_r+0x40>

08006c18 <_malloc_usable_size_r>:
 8006c18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006c1c:	1f18      	subs	r0, r3, #4
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	bfbc      	itt	lt
 8006c22:	580b      	ldrlt	r3, [r1, r0]
 8006c24:	18c0      	addlt	r0, r0, r3
 8006c26:	4770      	bx	lr

08006c28 <_init>:
 8006c28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c2a:	bf00      	nop
 8006c2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c2e:	bc08      	pop	{r3}
 8006c30:	469e      	mov	lr, r3
 8006c32:	4770      	bx	lr

08006c34 <_fini>:
 8006c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c36:	bf00      	nop
 8006c38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c3a:	bc08      	pop	{r3}
 8006c3c:	469e      	mov	lr, r3
 8006c3e:	4770      	bx	lr
