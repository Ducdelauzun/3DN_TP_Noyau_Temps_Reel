
3DN_TP_Noyau_Temps_Reel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007384  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000578  08007554  08007554  00008554  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007acc  08007acc  0000916c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08007acc  08007acc  00008acc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007ad4  08007ad4  0000916c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007ad4  08007ad4  00008ad4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007ad8  08007ad8  00008ad8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000016c  20000000  08007adc  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000046cc  2000016c  08007c48  0000916c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004838  08007c48  00009838  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000916c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000112cc  00000000  00000000  0000919c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000302d  00000000  00000000  0001a468  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ea8  00000000  00000000  0001d498  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b17  00000000  00000000  0001e340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028b83  00000000  00000000  0001ee57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012999  00000000  00000000  000479da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f2b31  00000000  00000000  0005a373  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014cea4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000043f8  00000000  00000000  0014cee8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007e  00000000  00000000  001512e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000016c 	.word	0x2000016c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800753c 	.word	0x0800753c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000170 	.word	0x20000170
 800020c:	0800753c 	.word	0x0800753c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b988 	b.w	80005e8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	468e      	mov	lr, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	4688      	mov	r8, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4617      	mov	r7, r2
 8000304:	d962      	bls.n	80003cc <__udivmoddi4+0xdc>
 8000306:	fab2 f682 	clz	r6, r2
 800030a:	b14e      	cbz	r6, 8000320 <__udivmoddi4+0x30>
 800030c:	f1c6 0320 	rsb	r3, r6, #32
 8000310:	fa01 f806 	lsl.w	r8, r1, r6
 8000314:	fa20 f303 	lsr.w	r3, r0, r3
 8000318:	40b7      	lsls	r7, r6
 800031a:	ea43 0808 	orr.w	r8, r3, r8
 800031e:	40b4      	lsls	r4, r6
 8000320:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000324:	fa1f fc87 	uxth.w	ip, r7
 8000328:	fbb8 f1fe 	udiv	r1, r8, lr
 800032c:	0c23      	lsrs	r3, r4, #16
 800032e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000332:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000336:	fb01 f20c 	mul.w	r2, r1, ip
 800033a:	429a      	cmp	r2, r3
 800033c:	d909      	bls.n	8000352 <__udivmoddi4+0x62>
 800033e:	18fb      	adds	r3, r7, r3
 8000340:	f101 30ff 	add.w	r0, r1, #4294967295
 8000344:	f080 80ea 	bcs.w	800051c <__udivmoddi4+0x22c>
 8000348:	429a      	cmp	r2, r3
 800034a:	f240 80e7 	bls.w	800051c <__udivmoddi4+0x22c>
 800034e:	3902      	subs	r1, #2
 8000350:	443b      	add	r3, r7
 8000352:	1a9a      	subs	r2, r3, r2
 8000354:	b2a3      	uxth	r3, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000362:	fb00 fc0c 	mul.w	ip, r0, ip
 8000366:	459c      	cmp	ip, r3
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0x8e>
 800036a:	18fb      	adds	r3, r7, r3
 800036c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000370:	f080 80d6 	bcs.w	8000520 <__udivmoddi4+0x230>
 8000374:	459c      	cmp	ip, r3
 8000376:	f240 80d3 	bls.w	8000520 <__udivmoddi4+0x230>
 800037a:	443b      	add	r3, r7
 800037c:	3802      	subs	r0, #2
 800037e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000382:	eba3 030c 	sub.w	r3, r3, ip
 8000386:	2100      	movs	r1, #0
 8000388:	b11d      	cbz	r5, 8000392 <__udivmoddi4+0xa2>
 800038a:	40f3      	lsrs	r3, r6
 800038c:	2200      	movs	r2, #0
 800038e:	e9c5 3200 	strd	r3, r2, [r5]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d905      	bls.n	80003a6 <__udivmoddi4+0xb6>
 800039a:	b10d      	cbz	r5, 80003a0 <__udivmoddi4+0xb0>
 800039c:	e9c5 0100 	strd	r0, r1, [r5]
 80003a0:	2100      	movs	r1, #0
 80003a2:	4608      	mov	r0, r1
 80003a4:	e7f5      	b.n	8000392 <__udivmoddi4+0xa2>
 80003a6:	fab3 f183 	clz	r1, r3
 80003aa:	2900      	cmp	r1, #0
 80003ac:	d146      	bne.n	800043c <__udivmoddi4+0x14c>
 80003ae:	4573      	cmp	r3, lr
 80003b0:	d302      	bcc.n	80003b8 <__udivmoddi4+0xc8>
 80003b2:	4282      	cmp	r2, r0
 80003b4:	f200 8105 	bhi.w	80005c2 <__udivmoddi4+0x2d2>
 80003b8:	1a84      	subs	r4, r0, r2
 80003ba:	eb6e 0203 	sbc.w	r2, lr, r3
 80003be:	2001      	movs	r0, #1
 80003c0:	4690      	mov	r8, r2
 80003c2:	2d00      	cmp	r5, #0
 80003c4:	d0e5      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003c6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ca:	e7e2      	b.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f000 8090 	beq.w	80004f2 <__udivmoddi4+0x202>
 80003d2:	fab2 f682 	clz	r6, r2
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	f040 80a4 	bne.w	8000524 <__udivmoddi4+0x234>
 80003dc:	1a8a      	subs	r2, r1, r2
 80003de:	0c03      	lsrs	r3, r0, #16
 80003e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003e4:	b280      	uxth	r0, r0
 80003e6:	b2bc      	uxth	r4, r7
 80003e8:	2101      	movs	r1, #1
 80003ea:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ee:	fb0e 221c 	mls	r2, lr, ip, r2
 80003f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003f6:	fb04 f20c 	mul.w	r2, r4, ip
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d907      	bls.n	800040e <__udivmoddi4+0x11e>
 80003fe:	18fb      	adds	r3, r7, r3
 8000400:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x11c>
 8000406:	429a      	cmp	r2, r3
 8000408:	f200 80e0 	bhi.w	80005cc <__udivmoddi4+0x2dc>
 800040c:	46c4      	mov	ip, r8
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	fbb3 f2fe 	udiv	r2, r3, lr
 8000414:	fb0e 3312 	mls	r3, lr, r2, r3
 8000418:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800041c:	fb02 f404 	mul.w	r4, r2, r4
 8000420:	429c      	cmp	r4, r3
 8000422:	d907      	bls.n	8000434 <__udivmoddi4+0x144>
 8000424:	18fb      	adds	r3, r7, r3
 8000426:	f102 30ff 	add.w	r0, r2, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x142>
 800042c:	429c      	cmp	r4, r3
 800042e:	f200 80ca 	bhi.w	80005c6 <__udivmoddi4+0x2d6>
 8000432:	4602      	mov	r2, r0
 8000434:	1b1b      	subs	r3, r3, r4
 8000436:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800043a:	e7a5      	b.n	8000388 <__udivmoddi4+0x98>
 800043c:	f1c1 0620 	rsb	r6, r1, #32
 8000440:	408b      	lsls	r3, r1
 8000442:	fa22 f706 	lsr.w	r7, r2, r6
 8000446:	431f      	orrs	r7, r3
 8000448:	fa0e f401 	lsl.w	r4, lr, r1
 800044c:	fa20 f306 	lsr.w	r3, r0, r6
 8000450:	fa2e fe06 	lsr.w	lr, lr, r6
 8000454:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000458:	4323      	orrs	r3, r4
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	fa1f fc87 	uxth.w	ip, r7
 8000462:	fbbe f0f9 	udiv	r0, lr, r9
 8000466:	0c1c      	lsrs	r4, r3, #16
 8000468:	fb09 ee10 	mls	lr, r9, r0, lr
 800046c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000470:	fb00 fe0c 	mul.w	lr, r0, ip
 8000474:	45a6      	cmp	lr, r4
 8000476:	fa02 f201 	lsl.w	r2, r2, r1
 800047a:	d909      	bls.n	8000490 <__udivmoddi4+0x1a0>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000482:	f080 809c 	bcs.w	80005be <__udivmoddi4+0x2ce>
 8000486:	45a6      	cmp	lr, r4
 8000488:	f240 8099 	bls.w	80005be <__udivmoddi4+0x2ce>
 800048c:	3802      	subs	r0, #2
 800048e:	443c      	add	r4, r7
 8000490:	eba4 040e 	sub.w	r4, r4, lr
 8000494:	fa1f fe83 	uxth.w	lr, r3
 8000498:	fbb4 f3f9 	udiv	r3, r4, r9
 800049c:	fb09 4413 	mls	r4, r9, r3, r4
 80004a0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004a4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004a8:	45a4      	cmp	ip, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x1ce>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f103 3eff 	add.w	lr, r3, #4294967295
 80004b2:	f080 8082 	bcs.w	80005ba <__udivmoddi4+0x2ca>
 80004b6:	45a4      	cmp	ip, r4
 80004b8:	d97f      	bls.n	80005ba <__udivmoddi4+0x2ca>
 80004ba:	3b02      	subs	r3, #2
 80004bc:	443c      	add	r4, r7
 80004be:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004c2:	eba4 040c 	sub.w	r4, r4, ip
 80004c6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ca:	4564      	cmp	r4, ip
 80004cc:	4673      	mov	r3, lr
 80004ce:	46e1      	mov	r9, ip
 80004d0:	d362      	bcc.n	8000598 <__udivmoddi4+0x2a8>
 80004d2:	d05f      	beq.n	8000594 <__udivmoddi4+0x2a4>
 80004d4:	b15d      	cbz	r5, 80004ee <__udivmoddi4+0x1fe>
 80004d6:	ebb8 0203 	subs.w	r2, r8, r3
 80004da:	eb64 0409 	sbc.w	r4, r4, r9
 80004de:	fa04 f606 	lsl.w	r6, r4, r6
 80004e2:	fa22 f301 	lsr.w	r3, r2, r1
 80004e6:	431e      	orrs	r6, r3
 80004e8:	40cc      	lsrs	r4, r1
 80004ea:	e9c5 6400 	strd	r6, r4, [r5]
 80004ee:	2100      	movs	r1, #0
 80004f0:	e74f      	b.n	8000392 <__udivmoddi4+0xa2>
 80004f2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004f6:	0c01      	lsrs	r1, r0, #16
 80004f8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004fc:	b280      	uxth	r0, r0
 80004fe:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000502:	463b      	mov	r3, r7
 8000504:	4638      	mov	r0, r7
 8000506:	463c      	mov	r4, r7
 8000508:	46b8      	mov	r8, r7
 800050a:	46be      	mov	lr, r7
 800050c:	2620      	movs	r6, #32
 800050e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000512:	eba2 0208 	sub.w	r2, r2, r8
 8000516:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800051a:	e766      	b.n	80003ea <__udivmoddi4+0xfa>
 800051c:	4601      	mov	r1, r0
 800051e:	e718      	b.n	8000352 <__udivmoddi4+0x62>
 8000520:	4610      	mov	r0, r2
 8000522:	e72c      	b.n	800037e <__udivmoddi4+0x8e>
 8000524:	f1c6 0220 	rsb	r2, r6, #32
 8000528:	fa2e f302 	lsr.w	r3, lr, r2
 800052c:	40b7      	lsls	r7, r6
 800052e:	40b1      	lsls	r1, r6
 8000530:	fa20 f202 	lsr.w	r2, r0, r2
 8000534:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000538:	430a      	orrs	r2, r1
 800053a:	fbb3 f8fe 	udiv	r8, r3, lr
 800053e:	b2bc      	uxth	r4, r7
 8000540:	fb0e 3318 	mls	r3, lr, r8, r3
 8000544:	0c11      	lsrs	r1, r2, #16
 8000546:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800054a:	fb08 f904 	mul.w	r9, r8, r4
 800054e:	40b0      	lsls	r0, r6
 8000550:	4589      	cmp	r9, r1
 8000552:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000556:	b280      	uxth	r0, r0
 8000558:	d93e      	bls.n	80005d8 <__udivmoddi4+0x2e8>
 800055a:	1879      	adds	r1, r7, r1
 800055c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000560:	d201      	bcs.n	8000566 <__udivmoddi4+0x276>
 8000562:	4589      	cmp	r9, r1
 8000564:	d81f      	bhi.n	80005a6 <__udivmoddi4+0x2b6>
 8000566:	eba1 0109 	sub.w	r1, r1, r9
 800056a:	fbb1 f9fe 	udiv	r9, r1, lr
 800056e:	fb09 f804 	mul.w	r8, r9, r4
 8000572:	fb0e 1119 	mls	r1, lr, r9, r1
 8000576:	b292      	uxth	r2, r2
 8000578:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800057c:	4542      	cmp	r2, r8
 800057e:	d229      	bcs.n	80005d4 <__udivmoddi4+0x2e4>
 8000580:	18ba      	adds	r2, r7, r2
 8000582:	f109 31ff 	add.w	r1, r9, #4294967295
 8000586:	d2c4      	bcs.n	8000512 <__udivmoddi4+0x222>
 8000588:	4542      	cmp	r2, r8
 800058a:	d2c2      	bcs.n	8000512 <__udivmoddi4+0x222>
 800058c:	f1a9 0102 	sub.w	r1, r9, #2
 8000590:	443a      	add	r2, r7
 8000592:	e7be      	b.n	8000512 <__udivmoddi4+0x222>
 8000594:	45f0      	cmp	r8, lr
 8000596:	d29d      	bcs.n	80004d4 <__udivmoddi4+0x1e4>
 8000598:	ebbe 0302 	subs.w	r3, lr, r2
 800059c:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005a0:	3801      	subs	r0, #1
 80005a2:	46e1      	mov	r9, ip
 80005a4:	e796      	b.n	80004d4 <__udivmoddi4+0x1e4>
 80005a6:	eba7 0909 	sub.w	r9, r7, r9
 80005aa:	4449      	add	r1, r9
 80005ac:	f1a8 0c02 	sub.w	ip, r8, #2
 80005b0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b4:	fb09 f804 	mul.w	r8, r9, r4
 80005b8:	e7db      	b.n	8000572 <__udivmoddi4+0x282>
 80005ba:	4673      	mov	r3, lr
 80005bc:	e77f      	b.n	80004be <__udivmoddi4+0x1ce>
 80005be:	4650      	mov	r0, sl
 80005c0:	e766      	b.n	8000490 <__udivmoddi4+0x1a0>
 80005c2:	4608      	mov	r0, r1
 80005c4:	e6fd      	b.n	80003c2 <__udivmoddi4+0xd2>
 80005c6:	443b      	add	r3, r7
 80005c8:	3a02      	subs	r2, #2
 80005ca:	e733      	b.n	8000434 <__udivmoddi4+0x144>
 80005cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d0:	443b      	add	r3, r7
 80005d2:	e71c      	b.n	800040e <__udivmoddi4+0x11e>
 80005d4:	4649      	mov	r1, r9
 80005d6:	e79c      	b.n	8000512 <__udivmoddi4+0x222>
 80005d8:	eba1 0109 	sub.w	r1, r1, r9
 80005dc:	46c4      	mov	ip, r8
 80005de:	fbb1 f9fe 	udiv	r9, r1, lr
 80005e2:	fb09 f804 	mul.w	r8, r9, r4
 80005e6:	e7c4      	b.n	8000572 <__udivmoddi4+0x282>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <configureTimerForRunTimeStats>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 80005ec:	b480      	push	{r7}
 80005ee:	af00      	add	r7, sp, #0

}
 80005f0:	bf00      	nop
 80005f2:	46bd      	mov	sp, r7
 80005f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f8:	4770      	bx	lr

080005fa <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 80005fa:	b480      	push	{r7}
 80005fc:	af00      	add	r7, sp, #0
return 0;
 80005fe:	2300      	movs	r3, #0
}
 8000600:	4618      	mov	r0, r3
 8000602:	46bd      	mov	sp, r7
 8000604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000608:	4770      	bx	lr
	...

0800060c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800060c:	b480      	push	{r7}
 800060e:	b085      	sub	sp, #20
 8000610:	af00      	add	r7, sp, #0
 8000612:	60f8      	str	r0, [r7, #12]
 8000614:	60b9      	str	r1, [r7, #8]
 8000616:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000618:	68fb      	ldr	r3, [r7, #12]
 800061a:	4a07      	ldr	r2, [pc, #28]	@ (8000638 <vApplicationGetIdleTaskMemory+0x2c>)
 800061c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800061e:	68bb      	ldr	r3, [r7, #8]
 8000620:	4a06      	ldr	r2, [pc, #24]	@ (800063c <vApplicationGetIdleTaskMemory+0x30>)
 8000622:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	2280      	movs	r2, #128	@ 0x80
 8000628:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800062a:	bf00      	nop
 800062c:	3714      	adds	r7, #20
 800062e:	46bd      	mov	sp, r7
 8000630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000634:	4770      	bx	lr
 8000636:	bf00      	nop
 8000638:	2000018c 	.word	0x2000018c
 800063c:	200001ec 	.word	0x200001ec

08000640 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000640:	b5b0      	push	{r4, r5, r7, lr}
 8000642:	b088      	sub	sp, #32
 8000644:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000646:	4b0a      	ldr	r3, [pc, #40]	@ (8000670 <MX_FREERTOS_Init+0x30>)
 8000648:	1d3c      	adds	r4, r7, #4
 800064a:	461d      	mov	r5, r3
 800064c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800064e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000650:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000654:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000658:	1d3b      	adds	r3, r7, #4
 800065a:	2100      	movs	r1, #0
 800065c:	4618      	mov	r0, r3
 800065e:	f003 fc2a 	bl	8003eb6 <osThreadCreate>
 8000662:	4603      	mov	r3, r0
 8000664:	4a03      	ldr	r2, [pc, #12]	@ (8000674 <MX_FREERTOS_Init+0x34>)
 8000666:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000668:	bf00      	nop
 800066a:	3720      	adds	r7, #32
 800066c:	46bd      	mov	sp, r7
 800066e:	bdb0      	pop	{r4, r5, r7, pc}
 8000670:	08007560 	.word	0x08007560
 8000674:	20000188 	.word	0x20000188

08000678 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b082      	sub	sp, #8
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000680:	2001      	movs	r0, #1
 8000682:	f003 fc64 	bl	8003f4e <osDelay>
 8000686:	e7fb      	b.n	8000680 <StartDefaultTask+0x8>

08000688 <MX_GPIO_Init>:
     PB11   ------> USB_OTG_HS_ULPI_D4
     PB14   ------> SPI2_MISO
     PB15   ------> SPI2_MOSI
*/
void MX_GPIO_Init(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b090      	sub	sp, #64	@ 0x40
 800068c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800068e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000692:	2200      	movs	r2, #0
 8000694:	601a      	str	r2, [r3, #0]
 8000696:	605a      	str	r2, [r3, #4]
 8000698:	609a      	str	r2, [r3, #8]
 800069a:	60da      	str	r2, [r3, #12]
 800069c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800069e:	4bad      	ldr	r3, [pc, #692]	@ (8000954 <MX_GPIO_Init+0x2cc>)
 80006a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006a2:	4aac      	ldr	r2, [pc, #688]	@ (8000954 <MX_GPIO_Init+0x2cc>)
 80006a4:	f043 0310 	orr.w	r3, r3, #16
 80006a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80006aa:	4baa      	ldr	r3, [pc, #680]	@ (8000954 <MX_GPIO_Init+0x2cc>)
 80006ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ae:	f003 0310 	and.w	r3, r3, #16
 80006b2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80006b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80006b6:	4ba7      	ldr	r3, [pc, #668]	@ (8000954 <MX_GPIO_Init+0x2cc>)
 80006b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ba:	4aa6      	ldr	r2, [pc, #664]	@ (8000954 <MX_GPIO_Init+0x2cc>)
 80006bc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80006c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80006c2:	4ba4      	ldr	r3, [pc, #656]	@ (8000954 <MX_GPIO_Init+0x2cc>)
 80006c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80006ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80006cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ce:	4ba1      	ldr	r3, [pc, #644]	@ (8000954 <MX_GPIO_Init+0x2cc>)
 80006d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006d2:	4aa0      	ldr	r2, [pc, #640]	@ (8000954 <MX_GPIO_Init+0x2cc>)
 80006d4:	f043 0302 	orr.w	r3, r3, #2
 80006d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80006da:	4b9e      	ldr	r3, [pc, #632]	@ (8000954 <MX_GPIO_Init+0x2cc>)
 80006dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006de:	f003 0302 	and.w	r3, r3, #2
 80006e2:	623b      	str	r3, [r7, #32]
 80006e4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006e6:	4b9b      	ldr	r3, [pc, #620]	@ (8000954 <MX_GPIO_Init+0x2cc>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ea:	4a9a      	ldr	r2, [pc, #616]	@ (8000954 <MX_GPIO_Init+0x2cc>)
 80006ec:	f043 0308 	orr.w	r3, r3, #8
 80006f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80006f2:	4b98      	ldr	r3, [pc, #608]	@ (8000954 <MX_GPIO_Init+0x2cc>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006f6:	f003 0308 	and.w	r3, r3, #8
 80006fa:	61fb      	str	r3, [r7, #28]
 80006fc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006fe:	4b95      	ldr	r3, [pc, #596]	@ (8000954 <MX_GPIO_Init+0x2cc>)
 8000700:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000702:	4a94      	ldr	r2, [pc, #592]	@ (8000954 <MX_GPIO_Init+0x2cc>)
 8000704:	f043 0304 	orr.w	r3, r3, #4
 8000708:	6313      	str	r3, [r2, #48]	@ 0x30
 800070a:	4b92      	ldr	r3, [pc, #584]	@ (8000954 <MX_GPIO_Init+0x2cc>)
 800070c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800070e:	f003 0304 	and.w	r3, r3, #4
 8000712:	61bb      	str	r3, [r7, #24]
 8000714:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000716:	4b8f      	ldr	r3, [pc, #572]	@ (8000954 <MX_GPIO_Init+0x2cc>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800071a:	4a8e      	ldr	r2, [pc, #568]	@ (8000954 <MX_GPIO_Init+0x2cc>)
 800071c:	f043 0301 	orr.w	r3, r3, #1
 8000720:	6313      	str	r3, [r2, #48]	@ 0x30
 8000722:	4b8c      	ldr	r3, [pc, #560]	@ (8000954 <MX_GPIO_Init+0x2cc>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000726:	f003 0301 	and.w	r3, r3, #1
 800072a:	617b      	str	r3, [r7, #20]
 800072c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800072e:	4b89      	ldr	r3, [pc, #548]	@ (8000954 <MX_GPIO_Init+0x2cc>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000732:	4a88      	ldr	r2, [pc, #544]	@ (8000954 <MX_GPIO_Init+0x2cc>)
 8000734:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000738:	6313      	str	r3, [r2, #48]	@ 0x30
 800073a:	4b86      	ldr	r3, [pc, #536]	@ (8000954 <MX_GPIO_Init+0x2cc>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800073e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000742:	613b      	str	r3, [r7, #16]
 8000744:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000746:	4b83      	ldr	r3, [pc, #524]	@ (8000954 <MX_GPIO_Init+0x2cc>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800074a:	4a82      	ldr	r2, [pc, #520]	@ (8000954 <MX_GPIO_Init+0x2cc>)
 800074c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000750:	6313      	str	r3, [r2, #48]	@ 0x30
 8000752:	4b80      	ldr	r3, [pc, #512]	@ (8000954 <MX_GPIO_Init+0x2cc>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000756:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800075a:	60fb      	str	r3, [r7, #12]
 800075c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800075e:	4b7d      	ldr	r3, [pc, #500]	@ (8000954 <MX_GPIO_Init+0x2cc>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000762:	4a7c      	ldr	r2, [pc, #496]	@ (8000954 <MX_GPIO_Init+0x2cc>)
 8000764:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000768:	6313      	str	r3, [r2, #48]	@ 0x30
 800076a:	4b7a      	ldr	r3, [pc, #488]	@ (8000954 <MX_GPIO_Init+0x2cc>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800076e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000772:	60bb      	str	r3, [r7, #8]
 8000774:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000776:	4b77      	ldr	r3, [pc, #476]	@ (8000954 <MX_GPIO_Init+0x2cc>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800077a:	4a76      	ldr	r2, [pc, #472]	@ (8000954 <MX_GPIO_Init+0x2cc>)
 800077c:	f043 0320 	orr.w	r3, r3, #32
 8000780:	6313      	str	r3, [r2, #48]	@ 0x30
 8000782:	4b74      	ldr	r3, [pc, #464]	@ (8000954 <MX_GPIO_Init+0x2cc>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000786:	f003 0320 	and.w	r3, r3, #32
 800078a:	607b      	str	r3, [r7, #4]
 800078c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800078e:	4b71      	ldr	r3, [pc, #452]	@ (8000954 <MX_GPIO_Init+0x2cc>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000792:	4a70      	ldr	r2, [pc, #448]	@ (8000954 <MX_GPIO_Init+0x2cc>)
 8000794:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000798:	6313      	str	r3, [r2, #48]	@ 0x30
 800079a:	4b6e      	ldr	r3, [pc, #440]	@ (8000954 <MX_GPIO_Init+0x2cc>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800079e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007a2:	603b      	str	r3, [r7, #0]
 80007a4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80007a6:	2201      	movs	r2, #1
 80007a8:	2120      	movs	r1, #32
 80007aa:	486b      	ldr	r0, [pc, #428]	@ (8000958 <MX_GPIO_Init+0x2d0>)
 80007ac:	f001 fc88 	bl	80020c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin|LED_Pin|LCD_DISP_Pin, GPIO_PIN_RESET);
 80007b0:	2200      	movs	r2, #0
 80007b2:	f241 010e 	movw	r1, #4110	@ 0x100e
 80007b6:	4869      	ldr	r0, [pc, #420]	@ (800095c <MX_GPIO_Init+0x2d4>)
 80007b8:	f001 fc82 	bl	80020c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 80007bc:	2200      	movs	r2, #0
 80007be:	2108      	movs	r1, #8
 80007c0:	4867      	ldr	r0, [pc, #412]	@ (8000960 <MX_GPIO_Init+0x2d8>)
 80007c2:	f001 fc7d 	bl	80020c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 80007c6:	2200      	movs	r2, #0
 80007c8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80007cc:	4865      	ldr	r0, [pc, #404]	@ (8000964 <MX_GPIO_Init+0x2dc>)
 80007ce:	f001 fc77 	bl	80020c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 80007d2:	2200      	movs	r2, #0
 80007d4:	21c8      	movs	r1, #200	@ 0xc8
 80007d6:	4864      	ldr	r0, [pc, #400]	@ (8000968 <MX_GPIO_Init+0x2e0>)
 80007d8:	f001 fc72 	bl	80020c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LCD_B0_Pin */
  GPIO_InitStruct.Pin = LCD_B0_Pin;
 80007dc:	2310      	movs	r3, #16
 80007de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007e0:	2302      	movs	r3, #2
 80007e2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e4:	2300      	movs	r3, #0
 80007e6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e8:	2300      	movs	r3, #0
 80007ea:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80007ec:	230e      	movs	r3, #14
 80007ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 80007f0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80007f4:	4619      	mov	r1, r3
 80007f6:	485d      	ldr	r0, [pc, #372]	@ (800096c <MX_GPIO_Init+0x2e4>)
 80007f8:	f001 fa9e 	bl	8001d38 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 80007fc:	2308      	movs	r3, #8
 80007fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000800:	2300      	movs	r3, #0
 8000802:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000804:	2300      	movs	r3, #0
 8000806:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000808:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800080c:	4619      	mov	r1, r3
 800080e:	4857      	ldr	r0, [pc, #348]	@ (800096c <MX_GPIO_Init+0x2e4>)
 8000810:	f001 fa92 	bl	8001d38 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_D2_Pin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8000814:	2304      	movs	r3, #4
 8000816:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000818:	2302      	movs	r3, #2
 800081a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081c:	2300      	movs	r3, #0
 800081e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000820:	2303      	movs	r3, #3
 8000822:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000824:	2309      	movs	r3, #9
 8000826:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8000828:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800082c:	4619      	mov	r1, r3
 800082e:	484f      	ldr	r0, [pc, #316]	@ (800096c <MX_GPIO_Init+0x2e4>)
 8000830:	f001 fa82 	bl	8001d38 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8000834:	f44f 43d0 	mov.w	r3, #26624	@ 0x6800
 8000838:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800083a:	2302      	movs	r3, #2
 800083c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083e:	2300      	movs	r3, #0
 8000840:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000842:	2303      	movs	r3, #3
 8000844:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000846:	230b      	movs	r3, #11
 8000848:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800084a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800084e:	4619      	mov	r1, r3
 8000850:	4845      	ldr	r0, [pc, #276]	@ (8000968 <MX_GPIO_Init+0x2e0>)
 8000852:	f001 fa71 	bl	8001d38 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_NBL1_Pin FMC_NBL0_Pin FMC_D5_Pin FMC_D6_Pin
                           FMC_D8_Pin FMC_D11_Pin FMC_D4_Pin FMC_D7_Pin
                           FMC_D9_Pin FMC_D12_Pin FMC_D10_Pin */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8000856:	f64f 7383 	movw	r3, #65411	@ 0xff83
 800085a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800085c:	2302      	movs	r3, #2
 800085e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000860:	2300      	movs	r3, #0
 8000862:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000864:	2303      	movs	r3, #3
 8000866:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000868:	230c      	movs	r3, #12
 800086a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800086c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000870:	4619      	mov	r1, r3
 8000872:	483e      	ldr	r0, [pc, #248]	@ (800096c <MX_GPIO_Init+0x2e4>)
 8000874:	f001 fa60 	bl	8001d38 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_SCL_D15_Pin ARDUINO_SDA_D14_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8000878:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800087c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800087e:	2312      	movs	r3, #18
 8000880:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000882:	2300      	movs	r3, #0
 8000884:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000886:	2300      	movs	r3, #0
 8000888:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800088a:	2304      	movs	r3, #4
 800088c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800088e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000892:	4619      	mov	r1, r3
 8000894:	4836      	ldr	r0, [pc, #216]	@ (8000970 <MX_GPIO_Init+0x2e8>)
 8000896:	f001 fa4f 	bl	8001d38 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 800089a:	f643 4323 	movw	r3, #15395	@ 0x3c23
 800089e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a0:	2302      	movs	r3, #2
 80008a2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a4:	2300      	movs	r3, #0
 80008a6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008a8:	2303      	movs	r3, #3
 80008aa:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80008ac:	230a      	movs	r3, #10
 80008ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008b0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80008b4:	4619      	mov	r1, r3
 80008b6:	482e      	ldr	r0, [pc, #184]	@ (8000970 <MX_GPIO_Init+0x2e8>)
 80008b8:	f001 fa3e 	bl	8001d38 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 80008bc:	2310      	movs	r3, #16
 80008be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c0:	2302      	movs	r3, #2
 80008c2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c4:	2300      	movs	r3, #0
 80008c6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c8:	2300      	movs	r3, #0
 80008ca:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80008cc:	2302      	movs	r3, #2
 80008ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 80008d0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80008d4:	4619      	mov	r1, r3
 80008d6:	4826      	ldr	r0, [pc, #152]	@ (8000970 <MX_GPIO_Init+0x2e8>)
 80008d8:	f001 fa2e 	bl	8001d38 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPDIF_RX0_Pin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 80008dc:	2380      	movs	r3, #128	@ 0x80
 80008de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e0:	2302      	movs	r3, #2
 80008e2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e4:	2300      	movs	r3, #0
 80008e6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e8:	2300      	movs	r3, #0
 80008ea:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 80008ec:	2308      	movs	r3, #8
 80008ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 80008f0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80008f4:	4619      	mov	r1, r3
 80008f6:	4818      	ldr	r0, [pc, #96]	@ (8000958 <MX_GPIO_Init+0x2d0>)
 80008f8:	f001 fa1e 	bl	8001d38 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDMMC_CK_Pin SDMMC_D3_Pin SDMMC_D2_Pin PC9
                           PC8 */
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 80008fc:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8000900:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000902:	2302      	movs	r3, #2
 8000904:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000906:	2300      	movs	r3, #0
 8000908:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800090a:	2303      	movs	r3, #3
 800090c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800090e:	230c      	movs	r3, #12
 8000910:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000912:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000916:	4619      	mov	r1, r3
 8000918:	4816      	ldr	r0, [pc, #88]	@ (8000974 <MX_GPIO_Init+0x2ec>)
 800091a:	f001 fa0d 	bl	8001d38 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D9_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 800091e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000922:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000924:	2302      	movs	r3, #2
 8000926:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000928:	2300      	movs	r3, #0
 800092a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092c:	2300      	movs	r3, #0
 800092e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000930:	2301      	movs	r3, #1
 8000932:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8000934:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000938:	4619      	mov	r1, r3
 800093a:	480f      	ldr	r0, [pc, #60]	@ (8000978 <MX_GPIO_Init+0x2f0>)
 800093c:	f001 f9fc 	bl	8001d38 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D6_Pin DCMI_D7_Pin */
  GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8000940:	2360      	movs	r3, #96	@ 0x60
 8000942:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000944:	2302      	movs	r3, #2
 8000946:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000948:	2300      	movs	r3, #0
 800094a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800094c:	2300      	movs	r3, #0
 800094e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000950:	230d      	movs	r3, #13
 8000952:	e013      	b.n	800097c <MX_GPIO_Init+0x2f4>
 8000954:	40023800 	.word	0x40023800
 8000958:	40020c00 	.word	0x40020c00
 800095c:	40022000 	.word	0x40022000
 8000960:	40022800 	.word	0x40022800
 8000964:	40021c00 	.word	0x40021c00
 8000968:	40021800 	.word	0x40021800
 800096c:	40021000 	.word	0x40021000
 8000970:	40020400 	.word	0x40020400
 8000974:	40020800 	.word	0x40020800
 8000978:	40020000 	.word	0x40020000
 800097c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800097e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000982:	4619      	mov	r1, r3
 8000984:	48bc      	ldr	r0, [pc, #752]	@ (8000c78 <MX_GPIO_Init+0x5f0>)
 8000986:	f001 f9d7 	bl	8001d38 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_NCS_Pin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 800098a:	2340      	movs	r3, #64	@ 0x40
 800098c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800098e:	2302      	movs	r3, #2
 8000990:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000992:	2300      	movs	r3, #0
 8000994:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000996:	2303      	movs	r3, #3
 8000998:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800099a:	230a      	movs	r3, #10
 800099c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 800099e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80009a2:	4619      	mov	r1, r3
 80009a4:	48b5      	ldr	r0, [pc, #724]	@ (8000c7c <MX_GPIO_Init+0x5f4>)
 80009a6:	f001 f9c7 	bl	8001d38 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNCAS_Pin FMC_SDCLK_Pin FMC_A11_Pin FMC_A10_Pin
                           FMC_BA1_Pin FMC_BA0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 80009aa:	f248 1333 	movw	r3, #33075	@ 0x8133
 80009ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b0:	2302      	movs	r3, #2
 80009b2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b4:	2300      	movs	r3, #0
 80009b6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009b8:	2303      	movs	r3, #3
 80009ba:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80009bc:	230c      	movs	r3, #12
 80009be:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80009c0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80009c4:	4619      	mov	r1, r3
 80009c6:	48ae      	ldr	r0, [pc, #696]	@ (8000c80 <MX_GPIO_Init+0x5f8>)
 80009c8:	f001 f9b6 	bl	8001d38 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_B1_Pin LCD_B2_Pin LCD_B3_Pin LCD_G4_Pin
                           LCD_G1_Pin LCD_G3_Pin LCD_G0_Pin LCD_G2_Pin
                           LCD_R7_Pin LCD_R5_Pin LCD_R6_Pin LCD_R4_Pin
                           LCD_R3_Pin LCD_R1_Pin LCD_R2_Pin */
  GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 80009cc:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 80009d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d2:	2302      	movs	r3, #2
 80009d4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d6:	2300      	movs	r3, #0
 80009d8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009da:	2300      	movs	r3, #0
 80009dc:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80009de:	230e      	movs	r3, #14
 80009e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80009e2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80009e6:	4619      	mov	r1, r3
 80009e8:	48a6      	ldr	r0, [pc, #664]	@ (8000c84 <MX_GPIO_Init+0x5fc>)
 80009ea:	f001 f9a5 	bl	8001d38 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 80009ee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009f4:	2300      	movs	r3, #0
 80009f6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f8:	2300      	movs	r3, #0
 80009fa:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80009fc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a00:	4619      	mov	r1, r3
 8000a02:	48a0      	ldr	r0, [pc, #640]	@ (8000c84 <MX_GPIO_Init+0x5fc>)
 8000a04:	f001 f998 	bl	8001d38 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8000a08:	2340      	movs	r3, #64	@ 0x40
 8000a0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a0c:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000a10:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a12:	2300      	movs	r3, #0
 8000a14:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8000a16:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	489a      	ldr	r0, [pc, #616]	@ (8000c88 <MX_GPIO_Init+0x600>)
 8000a1e:	f001 f98b 	bl	8001d38 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_D2_Pin FMC_D3_Pin FMC_D1_Pin FMC_D15_Pin
                           FMC_D0_Pin FMC_D14_Pin FMC_D13_Pin */
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8000a22:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8000a26:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a28:	2302      	movs	r3, #2
 8000a2a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a30:	2303      	movs	r3, #3
 8000a32:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000a34:	230c      	movs	r3, #12
 8000a36:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a38:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	4892      	ldr	r0, [pc, #584]	@ (8000c88 <MX_GPIO_Init+0x600>)
 8000a40:	f001 f97a 	bl	8001d38 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 8000a44:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000a48:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a4a:	2302      	movs	r3, #2
 8000a4c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a52:	2303      	movs	r3, #3
 8000a54:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000a56:	230a      	movs	r3, #10
 8000a58:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a5a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a5e:	4619      	mov	r1, r3
 8000a60:	488a      	ldr	r0, [pc, #552]	@ (8000c8c <MX_GPIO_Init+0x604>)
 8000a62:	f001 f969 	bl	8001d38 <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI2_MCLKA_Pin SAI2_SCKA_Pin SAI2_FSA_Pin SAI2_SDA_Pin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8000a66:	23f0      	movs	r3, #240	@ 0xf0
 8000a68:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a6a:	2302      	movs	r3, #2
 8000a6c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a72:	2300      	movs	r3, #0
 8000a74:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8000a76:	230a      	movs	r3, #10
 8000a78:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000a7a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a7e:	4619      	mov	r1, r3
 8000a80:	4883      	ldr	r0, [pc, #524]	@ (8000c90 <MX_GPIO_Init+0x608>)
 8000a82:	f001 f959 	bl	8001d38 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_DE_Pin LCD_B7_Pin LCD_B6_Pin LCD_B5_Pin
                           LCD_G6_Pin LCD_G7_Pin LCD_G5_Pin */
  GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8000a86:	23f7      	movs	r3, #247	@ 0xf7
 8000a88:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a8a:	2302      	movs	r3, #2
 8000a8c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a92:	2300      	movs	r3, #0
 8000a94:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000a96:	230e      	movs	r3, #14
 8000a98:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8000a9a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	487c      	ldr	r0, [pc, #496]	@ (8000c94 <MX_GPIO_Init+0x60c>)
 8000aa2:	f001 f949 	bl	8001d38 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_B4_Pin */
  GPIO_InitStruct.Pin = LCD_B4_Pin;
 8000aa6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000aaa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aac:	2302      	movs	r3, #2
 8000aae:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000ab8:	2309      	movs	r3, #9
 8000aba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8000abc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	486f      	ldr	r0, [pc, #444]	@ (8000c80 <MX_GPIO_Init+0x5f8>)
 8000ac4:	f001 f938 	bl	8001d38 <HAL_GPIO_Init>

  /*Configure GPIO pin : SAI2_SDB_Pin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8000ac8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000acc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ace:	2302      	movs	r3, #2
 8000ad0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8000ada:	230a      	movs	r3, #10
 8000adc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8000ade:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	4866      	ldr	r0, [pc, #408]	@ (8000c80 <MX_GPIO_Init+0x5f8>)
 8000ae6:	f001 f927 	bl	8001d38 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000aea:	2320      	movs	r3, #32
 8000aec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aee:	2301      	movs	r3, #1
 8000af0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af2:	2300      	movs	r3, #0
 8000af4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af6:	2300      	movs	r3, #0
 8000af8:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000afa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000afe:	4619      	mov	r1, r3
 8000b00:	4861      	ldr	r0, [pc, #388]	@ (8000c88 <MX_GPIO_Init+0x600>)
 8000b02:	f001 f919 	bl	8001d38 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_D5_Pin */
  GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8000b06:	2308      	movs	r3, #8
 8000b08:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b0a:	2302      	movs	r3, #2
 8000b0c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b12:	2300      	movs	r3, #0
 8000b14:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000b16:	230d      	movs	r3, #13
 8000b18:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8000b1a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b1e:	4619      	mov	r1, r3
 8000b20:	4859      	ldr	r0, [pc, #356]	@ (8000c88 <MX_GPIO_Init+0x600>)
 8000b22:	f001 f909 	bl	8001d38 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LED_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LED_Pin|LCD_DISP_Pin;
 8000b26:	f241 030e 	movw	r3, #4110	@ 0x100e
 8000b2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b30:	2300      	movs	r3, #0
 8000b32:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b34:	2300      	movs	r3, #0
 8000b36:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000b38:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	4854      	ldr	r0, [pc, #336]	@ (8000c90 <MX_GPIO_Init+0x608>)
 8000b40:	f001 f8fa 	bl	8001d38 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8000b44:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b48:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8000b52:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b56:	4619      	mov	r1, r3
 8000b58:	484f      	ldr	r0, [pc, #316]	@ (8000c98 <MX_GPIO_Init+0x610>)
 8000b5a:	f001 f8ed 	bl	8001d38 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_A0_Pin FMC_A1_Pin FMC_A2_Pin FMC_A3_Pin
                           FMC_A4_Pin FMC_A5_Pin FMC_A6_Pin FMC_A9_Pin
                           FMC_A7_Pin FMC_A8_Pin FMC_SDNRAS_Pin */
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8000b5e:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8000b62:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b64:	2302      	movs	r3, #2
 8000b66:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b6c:	2303      	movs	r3, #3
 8000b6e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000b70:	230c      	movs	r3, #12
 8000b72:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000b74:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b78:	4619      	mov	r1, r3
 8000b7a:	4848      	ldr	r0, [pc, #288]	@ (8000c9c <MX_GPIO_Init+0x614>)
 8000b7c:	f001 f8dc 	bl	8001d38 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_HSYNC_Pin LCD_VSYNC_Pin LCD_R0_Pin LCD_CLK_Pin */
  GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8000b80:	f44f 4346 	mov.w	r3, #50688	@ 0xc600
 8000b84:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b86:	2302      	movs	r3, #2
 8000b88:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000b92:	230e      	movs	r3, #14
 8000b94:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000b96:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	483c      	ldr	r0, [pc, #240]	@ (8000c90 <MX_GPIO_Init+0x608>)
 8000b9e:	f001 f8cb 	bl	8001d38 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8000ba2:	2308      	movs	r3, #8
 8000ba4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000baa:	2300      	movs	r3, #0
 8000bac:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8000bb2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	4836      	ldr	r0, [pc, #216]	@ (8000c94 <MX_GPIO_Init+0x60c>)
 8000bba:	f001 f8bd 	bl	8001d38 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_VSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8000bbe:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000bc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc4:	2302      	movs	r3, #2
 8000bc6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000bd0:	230d      	movs	r3, #13
 8000bd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8000bd4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000bd8:	4619      	mov	r1, r3
 8000bda:	4829      	ldr	r0, [pc, #164]	@ (8000c80 <MX_GPIO_Init+0x5f8>)
 8000bdc:	f001 f8ac 	bl	8001d38 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000be0:	2310      	movs	r3, #16
 8000be2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000be4:	2300      	movs	r3, #0
 8000be6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be8:	2300      	movs	r3, #0
 8000bea:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000bec:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	4825      	ldr	r0, [pc, #148]	@ (8000c88 <MX_GPIO_Init+0x600>)
 8000bf4:	f001 f8a0 	bl	8001d38 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDMMC_D0_Pin */
  GPIO_InitStruct.Pin = SDMMC_D0_Pin;
 8000bf8:	2304      	movs	r3, #4
 8000bfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bfc:	2302      	movs	r3, #2
 8000bfe:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c00:	2300      	movs	r3, #0
 8000c02:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c04:	2303      	movs	r3, #3
 8000c06:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000c08:	230c      	movs	r3, #12
 8000c0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SDMMC_D0_GPIO_Port, &GPIO_InitStruct);
 8000c0c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c10:	4619      	mov	r1, r3
 8000c12:	481d      	ldr	r0, [pc, #116]	@ (8000c88 <MX_GPIO_Init+0x600>)
 8000c14:	f001 f890 	bl	8001d38 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8000c18:	f248 0304 	movw	r3, #32772	@ 0x8004
 8000c1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c22:	2300      	movs	r3, #0
 8000c24:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000c26:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	481c      	ldr	r0, [pc, #112]	@ (8000ca0 <MX_GPIO_Init+0x618>)
 8000c2e:	f001 f883 	bl	8001d38 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8000c32:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c36:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c38:	2301      	movs	r3, #1
 8000c3a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c40:	2300      	movs	r3, #0
 8000c42:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000c44:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c48:	4619      	mov	r1, r3
 8000c4a:	4815      	ldr	r0, [pc, #84]	@ (8000ca0 <MX_GPIO_Init+0x618>)
 8000c4c:	f001 f874 	bl	8001d38 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D4_Pin DCMI_D3_Pin DCMI_D0_Pin DCMI_D2_Pin
                           DCMI_D1_Pin */
  GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8000c50:	f44f 43bc 	mov.w	r3, #24064	@ 0x5e00
 8000c54:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |DCMI_D1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c56:	2302      	movs	r3, #2
 8000c58:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000c62:	230d      	movs	r3, #13
 8000c64:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000c66:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	480c      	ldr	r0, [pc, #48]	@ (8000ca0 <MX_GPIO_Init+0x618>)
 8000c6e:	f001 f863 	bl	8001d38 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_CS_D5_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 8000c72:	2301      	movs	r3, #1
 8000c74:	e016      	b.n	8000ca4 <MX_GPIO_Init+0x61c>
 8000c76:	bf00      	nop
 8000c78:	40021000 	.word	0x40021000
 8000c7c:	40020400 	.word	0x40020400
 8000c80:	40021800 	.word	0x40021800
 8000c84:	40022400 	.word	0x40022400
 8000c88:	40020c00 	.word	0x40020c00
 8000c8c:	40020000 	.word	0x40020000
 8000c90:	40022000 	.word	0x40022000
 8000c94:	40022800 	.word	0x40022800
 8000c98:	40020800 	.word	0x40020800
 8000c9c:	40021400 	.word	0x40021400
 8000ca0:	40021c00 	.word	0x40021c00
 8000ca4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca6:	2302      	movs	r3, #2
 8000ca8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000caa:	2300      	movs	r3, #0
 8000cac:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8000cb2:	2302      	movs	r3, #2
 8000cb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 8000cb6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000cba:	4619      	mov	r1, r3
 8000cbc:	48a4      	ldr	r0, [pc, #656]	@ (8000f50 <MX_GPIO_Init+0x8c8>)
 8000cbe:	f001 f83b 	bl	8001d38 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8000cc2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000cc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000cd0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	489e      	ldr	r0, [pc, #632]	@ (8000f50 <MX_GPIO_Init+0x8c8>)
 8000cd8:	f001 f82e 	bl	8001d38 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D10_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8000cdc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000ce0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce2:	2302      	movs	r3, #2
 8000ce4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cea:	2300      	movs	r3, #0
 8000cec:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000cee:	2301      	movs	r3, #1
 8000cf0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8000cf2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	4896      	ldr	r0, [pc, #600]	@ (8000f54 <MX_GPIO_Init+0x8cc>)
 8000cfa:	f001 f81d 	bl	8001d38 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8000cfe:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d02:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000d04:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000d08:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8000d0e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d12:	4619      	mov	r1, r3
 8000d14:	488e      	ldr	r0, [pc, #568]	@ (8000f50 <MX_GPIO_Init+0x8c8>)
 8000d16:	f001 f80f 	bl	8001d38 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_RX_D0_Pin ARDUINO_TX_D1_Pin */
  GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8000d1a:	23c0      	movs	r3, #192	@ 0xc0
 8000d1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d1e:	2302      	movs	r3, #2
 8000d20:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d22:	2300      	movs	r3, #0
 8000d24:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d26:	2303      	movs	r3, #3
 8000d28:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000d2a:	2308      	movs	r3, #8
 8000d2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d2e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d32:	4619      	mov	r1, r3
 8000d34:	4888      	ldr	r0, [pc, #544]	@ (8000f58 <MX_GPIO_Init+0x8d0>)
 8000d36:	f000 ffff 	bl	8001d38 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8000d3a:	2310      	movs	r3, #16
 8000d3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d3e:	2302      	movs	r3, #2
 8000d40:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d42:	2300      	movs	r3, #0
 8000d44:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d46:	2303      	movs	r3, #3
 8000d48:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000d4a:	230a      	movs	r3, #10
 8000d4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8000d4e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d52:	4619      	mov	r1, r3
 8000d54:	4881      	ldr	r0, [pc, #516]	@ (8000f5c <MX_GPIO_Init+0x8d4>)
 8000d56:	f000 ffef 	bl	8001d38 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNME_Pin FMC_SDNE0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8000d5a:	2328      	movs	r3, #40	@ 0x28
 8000d5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d5e:	2302      	movs	r3, #2
 8000d60:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d62:	2300      	movs	r3, #0
 8000d64:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d66:	2303      	movs	r3, #3
 8000d68:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000d6a:	230c      	movs	r3, #12
 8000d6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000d6e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d72:	4619      	mov	r1, r3
 8000d74:	4879      	ldr	r0, [pc, #484]	@ (8000f5c <MX_GPIO_Init+0x8d4>)
 8000d76:	f000 ffdf 	bl	8001d38 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8000d7a:	23c8      	movs	r3, #200	@ 0xc8
 8000d7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d7e:	2301      	movs	r3, #1
 8000d80:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d82:	2300      	movs	r3, #0
 8000d84:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d86:	2300      	movs	r3, #0
 8000d88:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d8a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d8e:	4619      	mov	r1, r3
 8000d90:	4873      	ldr	r0, [pc, #460]	@ (8000f60 <MX_GPIO_Init+0x8d8>)
 8000d92:	f000 ffd1 	bl	8001d38 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_A4_Pin ARDUINO_A5_Pin ARDUINO_A1_Pin ARDUINO_A2_Pin
                           ARDUINO_A3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 8000d96:	f44f 63f8 	mov.w	r3, #1984	@ 0x7c0
 8000d9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |ARDUINO_A3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d9c:	2303      	movs	r3, #3
 8000d9e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da0:	2300      	movs	r3, #0
 8000da2:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000da4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000da8:	4619      	mov	r1, r3
 8000daa:	486e      	ldr	r0, [pc, #440]	@ (8000f64 <MX_GPIO_Init+0x8dc>)
 8000dac:	f000 ffc4 	bl	8001d38 <HAL_GPIO_Init>

  /*Configure GPIO pin : FMC_SDCKE0_Pin */
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8000db0:	2308      	movs	r3, #8
 8000db2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db4:	2302      	movs	r3, #2
 8000db6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db8:	2300      	movs	r3, #0
 8000dba:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dbc:	2303      	movs	r3, #3
 8000dbe:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000dc0:	230c      	movs	r3, #12
 8000dc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8000dc4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000dc8:	4619      	mov	r1, r3
 8000dca:	4863      	ldr	r0, [pc, #396]	@ (8000f58 <MX_GPIO_Init+0x8d0>)
 8000dcc:	f000 ffb4 	bl	8001d38 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8000dd0:	2305      	movs	r3, #5
 8000dd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd4:	2302      	movs	r3, #2
 8000dd6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ddc:	2303      	movs	r3, #3
 8000dde:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000de0:	230a      	movs	r3, #10
 8000de2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000de4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000de8:	4619      	mov	r1, r3
 8000dea:	485b      	ldr	r0, [pc, #364]	@ (8000f58 <MX_GPIO_Init+0x8d0>)
 8000dec:	f000 ffa4 	bl	8001d38 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000df0:	2332      	movs	r3, #50	@ 0x32
 8000df2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df4:	2302      	movs	r3, #2
 8000df6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dfc:	2303      	movs	r3, #3
 8000dfe:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e00:	230b      	movs	r3, #11
 8000e02:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e04:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e08:	4619      	mov	r1, r3
 8000e0a:	4853      	ldr	r0, [pc, #332]	@ (8000f58 <MX_GPIO_Init+0x8d0>)
 8000e0c:	f000 ff94 	bl	8001d38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000e10:	2304      	movs	r3, #4
 8000e12:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e14:	2302      	movs	r3, #2
 8000e16:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e1c:	2303      	movs	r3, #3
 8000e1e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000e20:	2309      	movs	r3, #9
 8000e22:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e24:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e28:	4619      	mov	r1, r3
 8000e2a:	484f      	ldr	r0, [pc, #316]	@ (8000f68 <MX_GPIO_Init+0x8e0>)
 8000e2c:	f000 ff84 	bl	8001d38 <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_D1_Pin QSPI_D3_Pin QSPI_D0_Pin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8000e30:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8000e34:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e36:	2302      	movs	r3, #2
 8000e38:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e3e:	2303      	movs	r3, #3
 8000e40:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000e42:	2309      	movs	r3, #9
 8000e44:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e46:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	4847      	ldr	r0, [pc, #284]	@ (8000f6c <MX_GPIO_Init+0x8e4>)
 8000e4e:	f000 ff73 	bl	8001d38 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8000e52:	2304      	movs	r3, #4
 8000e54:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e56:	2300      	movs	r3, #0
 8000e58:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8000e5e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e62:	4619      	mov	r1, r3
 8000e64:	483e      	ldr	r0, [pc, #248]	@ (8000f60 <MX_GPIO_Init+0x8d8>)
 8000e66:	f000 ff67 	bl	8001d38 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000e6a:	2386      	movs	r3, #134	@ 0x86
 8000e6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e6e:	2302      	movs	r3, #2
 8000e70:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e72:	2300      	movs	r3, #0
 8000e74:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e76:	2303      	movs	r3, #3
 8000e78:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e7a:	230b      	movs	r3, #11
 8000e7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e7e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e82:	4619      	mov	r1, r3
 8000e84:	4833      	ldr	r0, [pc, #204]	@ (8000f54 <MX_GPIO_Init+0x8cc>)
 8000e86:	f000 ff57 	bl	8001d38 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_A0_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e8e:	2303      	movs	r3, #3
 8000e90:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e92:	2300      	movs	r3, #0
 8000e94:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8000e96:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	482d      	ldr	r0, [pc, #180]	@ (8000f54 <MX_GPIO_Init+0x8cc>)
 8000e9e:	f000 ff4b 	bl	8001d38 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_HSYNC_Pin PA6 */
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8000ea2:	2350      	movs	r3, #80	@ 0x50
 8000ea4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea6:	2302      	movs	r3, #2
 8000ea8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000eb2:	230d      	movs	r3, #13
 8000eb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eb6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000eba:	4619      	mov	r1, r3
 8000ebc:	4825      	ldr	r0, [pc, #148]	@ (8000f54 <MX_GPIO_Init+0x8cc>)
 8000ebe:	f000 ff3b 	bl	8001d38 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_SCL_Pin LCD_SDA_Pin */
  GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8000ec2:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000ec6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ec8:	2312      	movs	r3, #18
 8000eca:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ed0:	2303      	movs	r3, #3
 8000ed2:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000ed4:	2304      	movs	r3, #4
 8000ed6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000ed8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000edc:	4619      	mov	r1, r3
 8000ede:	481f      	ldr	r0, [pc, #124]	@ (8000f5c <MX_GPIO_Init+0x8d4>)
 8000ee0:	f000 ff2a 	bl	8001d38 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8000ee4:	2328      	movs	r3, #40	@ 0x28
 8000ee6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee8:	2302      	movs	r3, #2
 8000eea:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eec:	2300      	movs	r3, #0
 8000eee:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ef0:	2303      	movs	r3, #3
 8000ef2:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000ef4:	230a      	movs	r3, #10
 8000ef6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ef8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000efc:	4619      	mov	r1, r3
 8000efe:	4815      	ldr	r0, [pc, #84]	@ (8000f54 <MX_GPIO_Init+0x8cc>)
 8000f00:	f000 ff1a 	bl	8001d38 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D6_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8000f04:	2340      	movs	r3, #64	@ 0x40
 8000f06:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f08:	2302      	movs	r3, #2
 8000f0a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f10:	2300      	movs	r3, #0
 8000f12:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8000f14:	2309      	movs	r3, #9
 8000f16:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8000f18:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	480f      	ldr	r0, [pc, #60]	@ (8000f5c <MX_GPIO_Init+0x8d4>)
 8000f20:	f000 ff0a 	bl	8001d38 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8000f24:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000f28:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f2a:	2302      	movs	r3, #2
 8000f2c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f32:	2300      	movs	r3, #0
 8000f34:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000f36:	2305      	movs	r3, #5
 8000f38:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f3a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f3e:	4619      	mov	r1, r3
 8000f40:	4809      	ldr	r0, [pc, #36]	@ (8000f68 <MX_GPIO_Init+0x8e0>)
 8000f42:	f000 fef9 	bl	8001d38 <HAL_GPIO_Init>

}
 8000f46:	bf00      	nop
 8000f48:	3740      	adds	r7, #64	@ 0x40
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	40022000 	.word	0x40022000
 8000f54:	40020000 	.word	0x40020000
 8000f58:	40020800 	.word	0x40020800
 8000f5c:	40021c00 	.word	0x40021c00
 8000f60:	40021800 	.word	0x40021800
 8000f64:	40021400 	.word	0x40021400
 8000f68:	40020400 	.word	0x40020400
 8000f6c:	40020c00 	.word	0x40020c00

08000f70 <__io_putchar>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
void MX_FREERTOS_Init(void);
/* USER CODE BEGIN PFP */
int __io_putchar(int chr)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)&chr, 1, HAL_MAX_DELAY);
 8000f78:	1d39      	adds	r1, r7, #4
 8000f7a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f7e:	2201      	movs	r2, #1
 8000f80:	4803      	ldr	r0, [pc, #12]	@ (8000f90 <__io_putchar+0x20>)
 8000f82:	f002 f9f9 	bl	8003378 <HAL_UART_Transmit>
	return chr;
 8000f86:	687b      	ldr	r3, [r7, #4]
}
 8000f88:	4618      	mov	r0, r3
 8000f8a:	3708      	adds	r7, #8
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	2000090c 	.word	0x2000090c

08000f94 <LedTask>:

void LedTask(void *pvParameters)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
	while (1)
	{
		if (led_period_ms == 0)
 8000f9c:	4b0f      	ldr	r3, [pc, #60]	@ (8000fdc <LedTask+0x48>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d108      	bne.n	8000fb6 <LedTask+0x22>
		{
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	2102      	movs	r1, #2
 8000fa8:	480d      	ldr	r0, [pc, #52]	@ (8000fe0 <LedTask+0x4c>)
 8000faa:	f001 f889 	bl	80020c0 <HAL_GPIO_WritePin>
			vTaskSuspend(NULL);
 8000fae:	2000      	movs	r0, #0
 8000fb0:	f003 fae6 	bl	8004580 <vTaskSuspend>
 8000fb4:	e7f2      	b.n	8000f9c <LedTask+0x8>
		}
		else
		{
			HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000fb6:	2102      	movs	r1, #2
 8000fb8:	4809      	ldr	r0, [pc, #36]	@ (8000fe0 <LedTask+0x4c>)
 8000fba:	f001 f89a 	bl	80020f2 <HAL_GPIO_TogglePin>
			vTaskDelay(pdMS_TO_TICKS(led_period_ms / 2));
 8000fbe:	4b07      	ldr	r3, [pc, #28]	@ (8000fdc <LedTask+0x48>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	085b      	lsrs	r3, r3, #1
 8000fc4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000fc8:	fb02 f303 	mul.w	r3, r2, r3
 8000fcc:	4a05      	ldr	r2, [pc, #20]	@ (8000fe4 <LedTask+0x50>)
 8000fce:	fba2 2303 	umull	r2, r3, r2, r3
 8000fd2:	099b      	lsrs	r3, r3, #6
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f003 fa31 	bl	800443c <vTaskDelay>
		if (led_period_ms == 0)
 8000fda:	e7df      	b.n	8000f9c <LedTask+0x8>
 8000fdc:	200008fc 	.word	0x200008fc
 8000fe0:	40022000 	.word	0x40022000
 8000fe4:	10624dd3 	.word	0x10624dd3

08000fe8 <ma_fonction_test>:
		vTaskDelay(delay);
	}
}*/

int ma_fonction_test(h_shell_t * h_shell, int argc, char ** argv)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b088      	sub	sp, #32
 8000fec:	af02      	add	r7, sp, #8
 8000fee:	60f8      	str	r0, [r7, #12]
 8000ff0:	60b9      	str	r1, [r7, #8]
 8000ff2:	607a      	str	r2, [r7, #4]
	int size;
	size = snprintf(h_shell->print_buffer, BUFFER_SIZE, "Fonction test appelee avec %d argument(s)\r\n", argc);
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	f503 7041 	add.w	r0, r3, #772	@ 0x304
 8000ffa:	68bb      	ldr	r3, [r7, #8]
 8000ffc:	4a1c      	ldr	r2, [pc, #112]	@ (8001070 <ma_fonction_test+0x88>)
 8000ffe:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001002:	f005 fa17 	bl	8006434 <sniprintf>
 8001006:	6138      	str	r0, [r7, #16]
	h_shell->drv.transmit(h_shell->print_buffer, size);
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	@ 0x504
 800100e:	68fa      	ldr	r2, [r7, #12]
 8001010:	f502 7241 	add.w	r2, r2, #772	@ 0x304
 8001014:	6939      	ldr	r1, [r7, #16]
 8001016:	b289      	uxth	r1, r1
 8001018:	4610      	mov	r0, r2
 800101a:	4798      	blx	r3

	for(int i = 0; i < argc; i++) {
 800101c:	2300      	movs	r3, #0
 800101e:	617b      	str	r3, [r7, #20]
 8001020:	e01c      	b.n	800105c <ma_fonction_test+0x74>
		size = snprintf(h_shell->print_buffer, BUFFER_SIZE, "argv[%d] = %s\r\n", i, argv[i]);
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	f503 7041 	add.w	r0, r3, #772	@ 0x304
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	009b      	lsls	r3, r3, #2
 800102c:	687a      	ldr	r2, [r7, #4]
 800102e:	4413      	add	r3, r2
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	9300      	str	r3, [sp, #0]
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	4a0f      	ldr	r2, [pc, #60]	@ (8001074 <ma_fonction_test+0x8c>)
 8001038:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800103c:	f005 f9fa 	bl	8006434 <sniprintf>
 8001040:	6138      	str	r0, [r7, #16]
		h_shell->drv.transmit(h_shell->print_buffer, size);
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	f8d3 3504 	ldr.w	r3, [r3, #1284]	@ 0x504
 8001048:	68fa      	ldr	r2, [r7, #12]
 800104a:	f502 7241 	add.w	r2, r2, #772	@ 0x304
 800104e:	6939      	ldr	r1, [r7, #16]
 8001050:	b289      	uxth	r1, r1
 8001052:	4610      	mov	r0, r2
 8001054:	4798      	blx	r3
	for(int i = 0; i < argc; i++) {
 8001056:	697b      	ldr	r3, [r7, #20]
 8001058:	3301      	adds	r3, #1
 800105a:	617b      	str	r3, [r7, #20]
 800105c:	697a      	ldr	r2, [r7, #20]
 800105e:	68bb      	ldr	r3, [r7, #8]
 8001060:	429a      	cmp	r2, r3
 8001062:	dbde      	blt.n	8001022 <ma_fonction_test+0x3a>
	}

	return 0;
 8001064:	2300      	movs	r3, #0
}
 8001066:	4618      	mov	r0, r3
 8001068:	3718      	adds	r7, #24
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	0800757c 	.word	0x0800757c
 8001074:	080075a8 	.word	0x080075a8

08001078 <shellTask>:

void shellTask(void * pvParameters)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
	shell_run(&mon_shell);
 8001080:	4803      	ldr	r0, [pc, #12]	@ (8001090 <shellTask+0x18>)
 8001082:	f004 ff91 	bl	8005fa8 <shell_run>
}
 8001086:	bf00      	nop
 8001088:	3708      	adds	r7, #8
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	200003ec 	.word	0x200003ec

08001094 <led_shell_func>:

int led_shell_func(h_shell_t * h_shell, int argc, char ** argv)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b088      	sub	sp, #32
 8001098:	af02      	add	r7, sp, #8
 800109a:	60f8      	str	r0, [r7, #12]
 800109c:	60b9      	str	r1, [r7, #8]
 800109e:	607a      	str	r2, [r7, #4]
	if (argc < 2)
 80010a0:	68bb      	ldr	r3, [r7, #8]
 80010a2:	2b01      	cmp	r3, #1
 80010a4:	dc16      	bgt.n	80010d4 <led_shell_func+0x40>
	{
		int len = snprintf(h_shell->print_buffer, BUFFER_SIZE, "Usage: l <periode_ms>\r\n");
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	f503 7341 	add.w	r3, r3, #772	@ 0x304
 80010ac:	4a28      	ldr	r2, [pc, #160]	@ (8001150 <led_shell_func+0xbc>)
 80010ae:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80010b2:	4618      	mov	r0, r3
 80010b4:	f005 f9be 	bl	8006434 <sniprintf>
 80010b8:	6138      	str	r0, [r7, #16]
		h_shell->drv.transmit(h_shell->print_buffer, len);
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	f8d3 3504 	ldr.w	r3, [r3, #1284]	@ 0x504
 80010c0:	68fa      	ldr	r2, [r7, #12]
 80010c2:	f502 7241 	add.w	r2, r2, #772	@ 0x304
 80010c6:	6939      	ldr	r1, [r7, #16]
 80010c8:	b289      	uxth	r1, r1
 80010ca:	4610      	mov	r0, r2
 80010cc:	4798      	blx	r3
		return -1;
 80010ce:	f04f 33ff 	mov.w	r3, #4294967295
 80010d2:	e039      	b.n	8001148 <led_shell_func+0xb4>
	}

	led_period_ms = atoi(argv[1]);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	3304      	adds	r3, #4
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	4618      	mov	r0, r3
 80010dc:	f004 fff0 	bl	80060c0 <atoi>
 80010e0:	4603      	mov	r3, r0
 80010e2:	461a      	mov	r2, r3
 80010e4:	4b1b      	ldr	r3, [pc, #108]	@ (8001154 <led_shell_func+0xc0>)
 80010e6:	601a      	str	r2, [r3, #0]

	if (led_period_ms > 0)
 80010e8:	4b1a      	ldr	r3, [pc, #104]	@ (8001154 <led_shell_func+0xc0>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d00c      	beq.n	800110a <led_shell_func+0x76>
	{
		if (eTaskGetState(ledTaskHandle) == eSuspended)
 80010f0:	4b19      	ldr	r3, [pc, #100]	@ (8001158 <led_shell_func+0xc4>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4618      	mov	r0, r3
 80010f6:	f003 f9d9 	bl	80044ac <eTaskGetState>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b03      	cmp	r3, #3
 80010fe:	d104      	bne.n	800110a <led_shell_func+0x76>
		{
			vTaskResume(ledTaskHandle);
 8001100:	4b15      	ldr	r3, [pc, #84]	@ (8001158 <led_shell_func+0xc4>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4618      	mov	r0, r3
 8001106:	f003 fb05 	bl	8004714 <vTaskResume>
		}
	}

	int len = snprintf(h_shell->print_buffer, BUFFER_SIZE,
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	f503 7041 	add.w	r0, r3, #772	@ 0x304
			"Clignotement LED %s (periode = %lu ms)\r\n",
			led_period_ms == 0 ? "désactivé" : "activé", led_period_ms);
 8001110:	4b10      	ldr	r3, [pc, #64]	@ (8001154 <led_shell_func+0xc0>)
 8001112:	681b      	ldr	r3, [r3, #0]
	int len = snprintf(h_shell->print_buffer, BUFFER_SIZE,
 8001114:	2b00      	cmp	r3, #0
 8001116:	d101      	bne.n	800111c <led_shell_func+0x88>
 8001118:	4a10      	ldr	r2, [pc, #64]	@ (800115c <led_shell_func+0xc8>)
 800111a:	e000      	b.n	800111e <led_shell_func+0x8a>
 800111c:	4a10      	ldr	r2, [pc, #64]	@ (8001160 <led_shell_func+0xcc>)
 800111e:	4b0d      	ldr	r3, [pc, #52]	@ (8001154 <led_shell_func+0xc0>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	9300      	str	r3, [sp, #0]
 8001124:	4613      	mov	r3, r2
 8001126:	4a0f      	ldr	r2, [pc, #60]	@ (8001164 <led_shell_func+0xd0>)
 8001128:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800112c:	f005 f982 	bl	8006434 <sniprintf>
 8001130:	6178      	str	r0, [r7, #20]
	h_shell->drv.transmit(h_shell->print_buffer, len);
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	f8d3 3504 	ldr.w	r3, [r3, #1284]	@ 0x504
 8001138:	68fa      	ldr	r2, [r7, #12]
 800113a:	f502 7241 	add.w	r2, r2, #772	@ 0x304
 800113e:	6979      	ldr	r1, [r7, #20]
 8001140:	b289      	uxth	r1, r1
 8001142:	4610      	mov	r0, r2
 8001144:	4798      	blx	r3

	return 0;
 8001146:	2300      	movs	r3, #0
}
 8001148:	4618      	mov	r0, r3
 800114a:	3718      	adds	r7, #24
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	080075b8 	.word	0x080075b8
 8001154:	200008fc 	.word	0x200008fc
 8001158:	200008f8 	.word	0x200008f8
 800115c:	080075d0 	.word	0x080075d0
 8001160:	080075dc 	.word	0x080075dc
 8001164:	080075e4 	.word	0x080075e4

08001168 <spamTask>:

void spamTask(void *pvParameters)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
	while (1)
	{
		if (spam_count > 0)
 8001170:	4b08      	ldr	r3, [pc, #32]	@ (8001194 <spamTask+0x2c>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d008      	beq.n	800118a <spamTask+0x22>
		{
			printf("%s\r\n", spam_msg);
 8001178:	4907      	ldr	r1, [pc, #28]	@ (8001198 <spamTask+0x30>)
 800117a:	4808      	ldr	r0, [pc, #32]	@ (800119c <spamTask+0x34>)
 800117c:	f005 f8ea 	bl	8006354 <iprintf>
			spam_count--;
 8001180:	4b04      	ldr	r3, [pc, #16]	@ (8001194 <spamTask+0x2c>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	3b01      	subs	r3, #1
 8001186:	4a03      	ldr	r2, [pc, #12]	@ (8001194 <spamTask+0x2c>)
 8001188:	6013      	str	r3, [r2, #0]
		}
		vTaskDelay(pdMS_TO_TICKS(200));
 800118a:	20c8      	movs	r0, #200	@ 0xc8
 800118c:	f003 f956 	bl	800443c <vTaskDelay>
		if (spam_count > 0)
 8001190:	e7ee      	b.n	8001170 <spamTask+0x8>
 8001192:	bf00      	nop
 8001194:	20000900 	.word	0x20000900
 8001198:	20000000 	.word	0x20000000
 800119c:	08007610 	.word	0x08007610

080011a0 <spam_shell_func>:
	}
}

int spam_shell_func(h_shell_t * h_shell, int argc, char ** argv)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b088      	sub	sp, #32
 80011a4:	af02      	add	r7, sp, #8
 80011a6:	60f8      	str	r0, [r7, #12]
 80011a8:	60b9      	str	r1, [r7, #8]
 80011aa:	607a      	str	r2, [r7, #4]
	if (argc < 3)
 80011ac:	68bb      	ldr	r3, [r7, #8]
 80011ae:	2b02      	cmp	r3, #2
 80011b0:	dc16      	bgt.n	80011e0 <spam_shell_func+0x40>
	{
		int len = snprintf(h_shell->print_buffer, BUFFER_SIZE,
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	f503 7341 	add.w	r3, r3, #772	@ 0x304
 80011b8:	4a22      	ldr	r2, [pc, #136]	@ (8001244 <spam_shell_func+0xa4>)
 80011ba:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80011be:	4618      	mov	r0, r3
 80011c0:	f005 f938 	bl	8006434 <sniprintf>
 80011c4:	6138      	str	r0, [r7, #16]
				"Usage: s <message> <nombre>\r\n");
		h_shell->drv.transmit(h_shell->print_buffer, len);
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	f8d3 3504 	ldr.w	r3, [r3, #1284]	@ 0x504
 80011cc:	68fa      	ldr	r2, [r7, #12]
 80011ce:	f502 7241 	add.w	r2, r2, #772	@ 0x304
 80011d2:	6939      	ldr	r1, [r7, #16]
 80011d4:	b289      	uxth	r1, r1
 80011d6:	4610      	mov	r0, r2
 80011d8:	4798      	blx	r3
		return -1;
 80011da:	f04f 33ff 	mov.w	r3, #4294967295
 80011de:	e02d      	b.n	800123c <spam_shell_func+0x9c>
	}

	strncpy(spam_msg, argv[1], BUFFER_SIZE - 1);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	3304      	adds	r3, #4
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	22ff      	movs	r2, #255	@ 0xff
 80011e8:	4619      	mov	r1, r3
 80011ea:	4817      	ldr	r0, [pc, #92]	@ (8001248 <spam_shell_func+0xa8>)
 80011ec:	f005 fa5a 	bl	80066a4 <strncpy>
	spam_msg[BUFFER_SIZE - 1] = '\0';
 80011f0:	4b15      	ldr	r3, [pc, #84]	@ (8001248 <spam_shell_func+0xa8>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	f883 20ff 	strb.w	r2, [r3, #255]	@ 0xff
	spam_count = atoi(argv[2]);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	3308      	adds	r3, #8
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4618      	mov	r0, r3
 8001200:	f004 ff5e 	bl	80060c0 <atoi>
 8001204:	4603      	mov	r3, r0
 8001206:	461a      	mov	r2, r3
 8001208:	4b10      	ldr	r3, [pc, #64]	@ (800124c <spam_shell_func+0xac>)
 800120a:	601a      	str	r2, [r3, #0]

	int len = snprintf(h_shell->print_buffer, BUFFER_SIZE,
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	f503 7041 	add.w	r0, r3, #772	@ 0x304
 8001212:	4b0e      	ldr	r3, [pc, #56]	@ (800124c <spam_shell_func+0xac>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	9300      	str	r3, [sp, #0]
 8001218:	4b0b      	ldr	r3, [pc, #44]	@ (8001248 <spam_shell_func+0xa8>)
 800121a:	4a0d      	ldr	r2, [pc, #52]	@ (8001250 <spam_shell_func+0xb0>)
 800121c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001220:	f005 f908 	bl	8006434 <sniprintf>
 8001224:	6178      	str	r0, [r7, #20]
			"Spam lancé : %s x %lu\r\n", spam_msg, spam_count);
	h_shell->drv.transmit(h_shell->print_buffer, len);
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	f8d3 3504 	ldr.w	r3, [r3, #1284]	@ 0x504
 800122c:	68fa      	ldr	r2, [r7, #12]
 800122e:	f502 7241 	add.w	r2, r2, #772	@ 0x304
 8001232:	6979      	ldr	r1, [r7, #20]
 8001234:	b289      	uxth	r1, r1
 8001236:	4610      	mov	r0, r2
 8001238:	4798      	blx	r3

	return 0;
 800123a:	2300      	movs	r3, #0
}
 800123c:	4618      	mov	r0, r3
 800123e:	3718      	adds	r7, #24
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	08007618 	.word	0x08007618
 8001248:	20000000 	.word	0x20000000
 800124c:	20000900 	.word	0x20000900
 8001250:	08007638 	.word	0x08007638

08001254 <vApplicationStackOverflowHook>:
        vTaskDelay(pdMS_TO_TICKS(1000));
    }
}*/

void vApplicationStackOverflowHook(TaskHandle_t xTask, char *pcTaskName)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b09e      	sub	sp, #120	@ 0x78
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
 800125c:	6039      	str	r1, [r7, #0]
    char msg[100];
    int size = snprintf(msg, sizeof(msg),
 800125e:	f107 0010 	add.w	r0, r7, #16
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	4a11      	ldr	r2, [pc, #68]	@ (80012ac <vApplicationStackOverflowHook+0x58>)
 8001266:	2164      	movs	r1, #100	@ 0x64
 8001268:	f005 f8e4 	bl	8006434 <sniprintf>
 800126c:	6778      	str	r0, [r7, #116]	@ 0x74
        "\r\n[ERROR] Stack overflow detecté dans la tâche : %s\r\n", pcTaskName);
    HAL_UART_Transmit(&huart1, (uint8_t *)msg, size, HAL_MAX_DELAY);
 800126e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001270:	b29a      	uxth	r2, r3
 8001272:	f107 0110 	add.w	r1, r7, #16
 8001276:	f04f 33ff 	mov.w	r3, #4294967295
 800127a:	480d      	ldr	r0, [pc, #52]	@ (80012b0 <vApplicationStackOverflowHook+0x5c>)
 800127c:	f002 f87c 	bl	8003378 <HAL_UART_Transmit>

    HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8001280:	2201      	movs	r2, #1
 8001282:	2102      	movs	r1, #2
 8001284:	480b      	ldr	r0, [pc, #44]	@ (80012b4 <vApplicationStackOverflowHook+0x60>)
 8001286:	f000 ff1b 	bl	80020c0 <HAL_GPIO_WritePin>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800128a:	b672      	cpsid	i
}
 800128c:	bf00      	nop

    __disable_irq();

    while (1)
    {
        HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800128e:	2102      	movs	r1, #2
 8001290:	4808      	ldr	r0, [pc, #32]	@ (80012b4 <vApplicationStackOverflowHook+0x60>)
 8001292:	f000 ff2e 	bl	80020f2 <HAL_GPIO_TogglePin>
        for (volatile uint32_t i = 0; i < 1000000; i++);
 8001296:	2300      	movs	r3, #0
 8001298:	60fb      	str	r3, [r7, #12]
 800129a:	e002      	b.n	80012a2 <vApplicationStackOverflowHook+0x4e>
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	3301      	adds	r3, #1
 80012a0:	60fb      	str	r3, [r7, #12]
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	4a04      	ldr	r2, [pc, #16]	@ (80012b8 <vApplicationStackOverflowHook+0x64>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d9f8      	bls.n	800129c <vApplicationStackOverflowHook+0x48>
        HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80012aa:	e7f0      	b.n	800128e <vApplicationStackOverflowHook+0x3a>
 80012ac:	08007654 	.word	0x08007654
 80012b0:	2000090c 	.word	0x2000090c
 80012b4:	40022000 	.word	0x40022000
 80012b8:	000f423f 	.word	0x000f423f

080012bc <dummyTask>:
    (void)buffer;
    recursive_overflow();
}

void dummyTask(void *pvParameters)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	f5ad 6d7b 	sub.w	sp, sp, #4016	@ 0xfb0
 80012c2:	af00      	add	r7, sp, #0
 80012c4:	f507 637b 	add.w	r3, r7, #4016	@ 0xfb0
 80012c8:	f6a3 73ac 	subw	r3, r3, #4012	@ 0xfac
 80012cc:	6018      	str	r0, [r3, #0]
    volatile uint32_t dummy[1000];

    // Forcer l'utilisation réelle de la pile
    for (int i = 0; i < 1000; i++) {
 80012ce:	2300      	movs	r3, #0
 80012d0:	f8c7 3fac 	str.w	r3, [r7, #4012]	@ 0xfac
 80012d4:	e00d      	b.n	80012f2 <dummyTask+0x36>
        ((volatile uint32_t*)dummy)[i] = i;
 80012d6:	f8d7 3fac 	ldr.w	r3, [r7, #4012]	@ 0xfac
 80012da:	009b      	lsls	r3, r3, #2
 80012dc:	f107 020c 	add.w	r2, r7, #12
 80012e0:	4413      	add	r3, r2
 80012e2:	f8d7 2fac 	ldr.w	r2, [r7, #4012]	@ 0xfac
 80012e6:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 1000; i++) {
 80012e8:	f8d7 3fac 	ldr.w	r3, [r7, #4012]	@ 0xfac
 80012ec:	3301      	adds	r3, #1
 80012ee:	f8c7 3fac 	str.w	r3, [r7, #4012]	@ 0xfac
 80012f2:	f8d7 3fac 	ldr.w	r3, [r7, #4012]	@ 0xfac
 80012f6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80012fa:	dbec      	blt.n	80012d6 <dummyTask+0x1a>
    }

    while (1) {
        vTaskDelay(pdMS_TO_TICKS(1000));
 80012fc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001300:	f003 f89c 	bl	800443c <vTaskDelay>
 8001304:	e7fa      	b.n	80012fc <dummyTask+0x40>
	...

08001308 <overflow_shell_func>:
    }
}

int overflow_shell_func(h_shell_t * h_shell, int argc, char ** argv)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b088      	sub	sp, #32
 800130c:	af02      	add	r7, sp, #8
 800130e:	60f8      	str	r0, [r7, #12]
 8001310:	60b9      	str	r1, [r7, #8]
 8001312:	607a      	str	r2, [r7, #4]
    int len = snprintf(h_shell->print_buffer, BUFFER_SIZE,
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	f503 7341 	add.w	r3, r3, #772	@ 0x304
 800131a:	4a1b      	ldr	r2, [pc, #108]	@ (8001388 <overflow_shell_func+0x80>)
 800131c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001320:	4618      	mov	r0, r3
 8001322:	f005 f887 	bl	8006434 <sniprintf>
 8001326:	6178      	str	r0, [r7, #20]
                       "Déclenchement du dépassement de pile...\r\n");
    h_shell->drv.transmit(h_shell->print_buffer, len);
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	@ 0x504
 800132e:	68fa      	ldr	r2, [r7, #12]
 8001330:	f502 7241 	add.w	r2, r2, #772	@ 0x304
 8001334:	6979      	ldr	r1, [r7, #20]
 8001336:	b289      	uxth	r1, r1
 8001338:	4610      	mov	r0, r2
 800133a:	4798      	blx	r3

    if (xTaskCreate(dummyTask, "OverflowTask", 64, NULL, 2, NULL) != pdPASS) {
 800133c:	2300      	movs	r3, #0
 800133e:	9301      	str	r3, [sp, #4]
 8001340:	2302      	movs	r3, #2
 8001342:	9300      	str	r3, [sp, #0]
 8001344:	2300      	movs	r3, #0
 8001346:	2240      	movs	r2, #64	@ 0x40
 8001348:	4910      	ldr	r1, [pc, #64]	@ (800138c <overflow_shell_func+0x84>)
 800134a:	4811      	ldr	r0, [pc, #68]	@ (8001390 <overflow_shell_func+0x88>)
 800134c:	f002 ff2d 	bl	80041aa <xTaskCreate>
 8001350:	4603      	mov	r3, r0
 8001352:	2b01      	cmp	r3, #1
 8001354:	d013      	beq.n	800137e <overflow_shell_func+0x76>
        int len = snprintf(h_shell->print_buffer, BUFFER_SIZE, "Erreur création OverflowTask\r\n");
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	f503 7341 	add.w	r3, r3, #772	@ 0x304
 800135c:	4a0d      	ldr	r2, [pc, #52]	@ (8001394 <overflow_shell_func+0x8c>)
 800135e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001362:	4618      	mov	r0, r3
 8001364:	f005 f866 	bl	8006434 <sniprintf>
 8001368:	6138      	str	r0, [r7, #16]
        h_shell->drv.transmit(h_shell->print_buffer, len);
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	f8d3 3504 	ldr.w	r3, [r3, #1284]	@ 0x504
 8001370:	68fa      	ldr	r2, [r7, #12]
 8001372:	f502 7241 	add.w	r2, r2, #772	@ 0x304
 8001376:	6939      	ldr	r1, [r7, #16]
 8001378:	b289      	uxth	r1, r1
 800137a:	4610      	mov	r0, r2
 800137c:	4798      	blx	r3
    }

    return 0; // Jamais atteint
 800137e:	2300      	movs	r3, #0
}
 8001380:	4618      	mov	r0, r3
 8001382:	3718      	adds	r7, #24
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}
 8001388:	0800768c 	.word	0x0800768c
 800138c:	080076b8 	.word	0x080076b8
 8001390:	080012bd 	.word	0x080012bd
 8001394:	080076c8 	.word	0x080076c8

08001398 <stats_shell_func>:
        }
    }
}
*/
int stats_shell_func(h_shell_t * h_shell, int argc, char ** argv)
{
 8001398:	b5b0      	push	{r4, r5, r7, lr}
 800139a:	b084      	sub	sp, #16
 800139c:	af00      	add	r7, sp, #0
 800139e:	60f8      	str	r0, [r7, #12]
 80013a0:	60b9      	str	r1, [r7, #8]
 80013a2:	607a      	str	r2, [r7, #4]
    // Affichage des stats d'exécution (CPU time)
    h_shell->drv.transmit("\r\n[Run Time Stats]\r\n", 21);
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	f8d3 3504 	ldr.w	r3, [r3, #1284]	@ 0x504
 80013aa:	2115      	movs	r1, #21
 80013ac:	481d      	ldr	r0, [pc, #116]	@ (8001424 <stats_shell_func+0x8c>)
 80013ae:	4798      	blx	r3
    vTaskGetRunTimeStats(h_shell->print_buffer);
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	f503 7341 	add.w	r3, r3, #772	@ 0x304
 80013b6:	4618      	mov	r0, r3
 80013b8:	f003 ff94 	bl	80052e4 <vTaskGetRunTimeStats>
    h_shell->drv.transmit(h_shell->print_buffer, strlen(h_shell->print_buffer));
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	f8d3 4504 	ldr.w	r4, [r3, #1284]	@ 0x504
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	f503 7541 	add.w	r5, r3, #772	@ 0x304
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	f503 7341 	add.w	r3, r3, #772	@ 0x304
 80013ce:	4618      	mov	r0, r3
 80013d0:	f7fe ff1e 	bl	8000210 <strlen>
 80013d4:	4603      	mov	r3, r0
 80013d6:	b29b      	uxth	r3, r3
 80013d8:	4619      	mov	r1, r3
 80013da:	4628      	mov	r0, r5
 80013dc:	47a0      	blx	r4

    // Affichage de l'état des tâches
    h_shell->drv.transmit("\r\n[Task List]\r\n", 15);
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	f8d3 3504 	ldr.w	r3, [r3, #1284]	@ 0x504
 80013e4:	210f      	movs	r1, #15
 80013e6:	4810      	ldr	r0, [pc, #64]	@ (8001428 <stats_shell_func+0x90>)
 80013e8:	4798      	blx	r3
    vTaskList(h_shell->print_buffer);
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	f503 7341 	add.w	r3, r3, #772	@ 0x304
 80013f0:	4618      	mov	r0, r3
 80013f2:	f003 fee1 	bl	80051b8 <vTaskList>
    h_shell->drv.transmit(h_shell->print_buffer, strlen(h_shell->print_buffer));
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	f8d3 4504 	ldr.w	r4, [r3, #1284]	@ 0x504
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	f503 7541 	add.w	r5, r3, #772	@ 0x304
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	f503 7341 	add.w	r3, r3, #772	@ 0x304
 8001408:	4618      	mov	r0, r3
 800140a:	f7fe ff01 	bl	8000210 <strlen>
 800140e:	4603      	mov	r3, r0
 8001410:	b29b      	uxth	r3, r3
 8001412:	4619      	mov	r1, r3
 8001414:	4628      	mov	r0, r5
 8001416:	47a0      	blx	r4

    return 0;
 8001418:	2300      	movs	r3, #0
}
 800141a:	4618      	mov	r0, r3
 800141c:	3710      	adds	r7, #16
 800141e:	46bd      	mov	sp, r7
 8001420:	bdb0      	pop	{r4, r5, r7, pc}
 8001422:	bf00      	nop
 8001424:	080076e8 	.word	0x080076e8
 8001428:	08007700 	.word	0x08007700

0800142c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001432:	f000 fb3e 	bl	8001ab2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001436:	f000 f8e5 	bl	8001604 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800143a:	f7ff f925 	bl	8000688 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800143e:	f000 fa5d 	bl	80018fc <MX_USART1_UART_Init>
	configASSERT(pdPASS == ret);
	ret = xTaskCreate(task_bug, "Tache 2", STACK_SIZE, \
			(void *) TASK2_DELAY, TASK2_PRIORITY, NULL);
	configASSERT(pdPASS == ret);*/

	mon_shell.drv.receive = drv_uart1_receive;
 8001442:	4b53      	ldr	r3, [pc, #332]	@ (8001590 <main+0x164>)
 8001444:	4a53      	ldr	r2, [pc, #332]	@ (8001594 <main+0x168>)
 8001446:	f8c3 2508 	str.w	r2, [r3, #1288]	@ 0x508
	mon_shell.drv.transmit = drv_uart1_transmit;
 800144a:	4b51      	ldr	r3, [pc, #324]	@ (8001590 <main+0x164>)
 800144c:	4a52      	ldr	r2, [pc, #328]	@ (8001598 <main+0x16c>)
 800144e:	f8c3 2504 	str.w	r2, [r3, #1284]	@ 0x504

	shell_init(&mon_shell);
 8001452:	484f      	ldr	r0, [pc, #316]	@ (8001590 <main+0x164>)
 8001454:	f004 fcb8 	bl	8005dc8 <shell_init>
	if (shell_add(&mon_shell, 't', ma_fonction_test, "Fonction test utilisateur") != 0) {
 8001458:	4b50      	ldr	r3, [pc, #320]	@ (800159c <main+0x170>)
 800145a:	4a51      	ldr	r2, [pc, #324]	@ (80015a0 <main+0x174>)
 800145c:	2174      	movs	r1, #116	@ 0x74
 800145e:	484c      	ldr	r0, [pc, #304]	@ (8001590 <main+0x164>)
 8001460:	f004 fcf6 	bl	8005e50 <shell_add>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d004      	beq.n	8001474 <main+0x48>
	    printf("Erreur ajout commande shell t\r\n");
 800146a:	484e      	ldr	r0, [pc, #312]	@ (80015a4 <main+0x178>)
 800146c:	f004 ffda 	bl	8006424 <puts>
	    Error_Handler();
 8001470:	f000 f938 	bl	80016e4 <Error_Handler>
	}
	if (xTaskCreate(shellTask, "Shell", 512, NULL, 1, NULL) != pdPASS) {
 8001474:	2300      	movs	r3, #0
 8001476:	9301      	str	r3, [sp, #4]
 8001478:	2301      	movs	r3, #1
 800147a:	9300      	str	r3, [sp, #0]
 800147c:	2300      	movs	r3, #0
 800147e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001482:	4949      	ldr	r1, [pc, #292]	@ (80015a8 <main+0x17c>)
 8001484:	4849      	ldr	r0, [pc, #292]	@ (80015ac <main+0x180>)
 8001486:	f002 fe90 	bl	80041aa <xTaskCreate>
 800148a:	4603      	mov	r3, r0
 800148c:	2b01      	cmp	r3, #1
 800148e:	d004      	beq.n	800149a <main+0x6e>
	    	printf("Erreur création tâche Shell\r\n");
 8001490:	4847      	ldr	r0, [pc, #284]	@ (80015b0 <main+0x184>)
 8001492:	f004 ffc7 	bl	8006424 <puts>
	    	Error_Handler();
 8001496:	f000 f925 	bl	80016e4 <Error_Handler>
		}
	if (xTaskCreate(LedTask, "LED Task", 128, NULL, 1, &ledTaskHandle) != pdPASS) {
 800149a:	4b46      	ldr	r3, [pc, #280]	@ (80015b4 <main+0x188>)
 800149c:	9301      	str	r3, [sp, #4]
 800149e:	2301      	movs	r3, #1
 80014a0:	9300      	str	r3, [sp, #0]
 80014a2:	2300      	movs	r3, #0
 80014a4:	2280      	movs	r2, #128	@ 0x80
 80014a6:	4944      	ldr	r1, [pc, #272]	@ (80015b8 <main+0x18c>)
 80014a8:	4844      	ldr	r0, [pc, #272]	@ (80015bc <main+0x190>)
 80014aa:	f002 fe7e 	bl	80041aa <xTaskCreate>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b01      	cmp	r3, #1
 80014b2:	d004      	beq.n	80014be <main+0x92>
	    	printf("Erreur création tâche LED Task\r\n");
 80014b4:	4842      	ldr	r0, [pc, #264]	@ (80015c0 <main+0x194>)
 80014b6:	f004 ffb5 	bl	8006424 <puts>
	    	Error_Handler();
 80014ba:	f000 f913 	bl	80016e4 <Error_Handler>
		}
	if (shell_add(&mon_shell, 'l', led_shell_func, "Contrôle de la LED") != 0) {
 80014be:	4b41      	ldr	r3, [pc, #260]	@ (80015c4 <main+0x198>)
 80014c0:	4a41      	ldr	r2, [pc, #260]	@ (80015c8 <main+0x19c>)
 80014c2:	216c      	movs	r1, #108	@ 0x6c
 80014c4:	4832      	ldr	r0, [pc, #200]	@ (8001590 <main+0x164>)
 80014c6:	f004 fcc3 	bl	8005e50 <shell_add>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d004      	beq.n	80014da <main+0xae>
	    printf("Erreur ajout commande shell t\r\n");
 80014d0:	4834      	ldr	r0, [pc, #208]	@ (80015a4 <main+0x178>)
 80014d2:	f004 ffa7 	bl	8006424 <puts>
	    Error_Handler();
 80014d6:	f000 f905 	bl	80016e4 <Error_Handler>
	}

	if (xTaskCreate(spamTask, "Spam", 256, NULL, 1, &spamTaskHandle) != pdPASS) {
 80014da:	4b3c      	ldr	r3, [pc, #240]	@ (80015cc <main+0x1a0>)
 80014dc:	9301      	str	r3, [sp, #4]
 80014de:	2301      	movs	r3, #1
 80014e0:	9300      	str	r3, [sp, #0]
 80014e2:	2300      	movs	r3, #0
 80014e4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80014e8:	4939      	ldr	r1, [pc, #228]	@ (80015d0 <main+0x1a4>)
 80014ea:	483a      	ldr	r0, [pc, #232]	@ (80015d4 <main+0x1a8>)
 80014ec:	f002 fe5d 	bl	80041aa <xTaskCreate>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b01      	cmp	r3, #1
 80014f4:	d004      	beq.n	8001500 <main+0xd4>
	    	printf("Erreur création tâche Spam\r\n");
 80014f6:	4838      	ldr	r0, [pc, #224]	@ (80015d8 <main+0x1ac>)
 80014f8:	f004 ff94 	bl	8006424 <puts>
	    	Error_Handler();
 80014fc:	f000 f8f2 	bl	80016e4 <Error_Handler>
		}
	if (shell_add(&mon_shell, 's', spam_shell_func, "Affiche un message plusieurs fois") != 0) {
 8001500:	4b36      	ldr	r3, [pc, #216]	@ (80015dc <main+0x1b0>)
 8001502:	4a37      	ldr	r2, [pc, #220]	@ (80015e0 <main+0x1b4>)
 8001504:	2173      	movs	r1, #115	@ 0x73
 8001506:	4822      	ldr	r0, [pc, #136]	@ (8001590 <main+0x164>)
 8001508:	f004 fca2 	bl	8005e50 <shell_add>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d004      	beq.n	800151c <main+0xf0>
	    printf("Erreur ajout commande shell t\r\n");
 8001512:	4824      	ldr	r0, [pc, #144]	@ (80015a4 <main+0x178>)
 8001514:	f004 ff86 	bl	8006424 <puts>
	    Error_Handler();
 8001518:	f000 f8e4 	bl	80016e4 <Error_Handler>
	        printf("Erreur creation tache dummy %d\r\n", i);
	        Error_Handler();
	    }
	}*/

	if (shell_add(&mon_shell, 'o', overflow_shell_func, "Déclenche un overflow") != 0) {
 800151c:	4b31      	ldr	r3, [pc, #196]	@ (80015e4 <main+0x1b8>)
 800151e:	4a32      	ldr	r2, [pc, #200]	@ (80015e8 <main+0x1bc>)
 8001520:	216f      	movs	r1, #111	@ 0x6f
 8001522:	481b      	ldr	r0, [pc, #108]	@ (8001590 <main+0x164>)
 8001524:	f004 fc94 	bl	8005e50 <shell_add>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d004      	beq.n	8001538 <main+0x10c>
	    printf("Erreur ajout commande shell o\r\n");
 800152e:	482f      	ldr	r0, [pc, #188]	@ (80015ec <main+0x1c0>)
 8001530:	f004 ff78 	bl	8006424 <puts>
	    Error_Handler();
 8001534:	f000 f8d6 	bl	80016e4 <Error_Handler>
	xTaskCreate(producerTask, "Producer", 128, NULL, 1, NULL);
	xTaskCreate(consumerTask, "Consumer", 128, NULL, 1, NULL);

	vQueueAddToRegistry(mySemaphore, "MySemaphore");*/

	if (shell_add(&mon_shell, 'x', stats_shell_func, "Affiche les stats FreeRTOS") != 0) {
 8001538:	4b2d      	ldr	r3, [pc, #180]	@ (80015f0 <main+0x1c4>)
 800153a:	4a2e      	ldr	r2, [pc, #184]	@ (80015f4 <main+0x1c8>)
 800153c:	2178      	movs	r1, #120	@ 0x78
 800153e:	4814      	ldr	r0, [pc, #80]	@ (8001590 <main+0x164>)
 8001540:	f004 fc86 	bl	8005e50 <shell_add>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d004      	beq.n	8001554 <main+0x128>
	    printf("Erreur ajout commande shell x\r\n");
 800154a:	482b      	ldr	r0, [pc, #172]	@ (80015f8 <main+0x1cc>)
 800154c:	f004 ff6a 	bl	8006424 <puts>
	    Error_Handler();
 8001550:	f000 f8c8 	bl	80016e4 <Error_Handler>
	}

	vTaskStartScheduler();
 8001554:	f003 f93e 	bl	80047d4 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8001558:	f7ff f872 	bl	8000640 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800155c:	f002 fca4 	bl	8003ea8 <osKernelStart>
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		//HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
		//HAL_Delay(100);
		if (HAL_GPIO_ReadPin(BUTTON_GPIO_Port, BUTTON_Pin) == GPIO_PIN_SET) {
 8001560:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001564:	4825      	ldr	r0, [pc, #148]	@ (80015fc <main+0x1d0>)
 8001566:	f000 fd93 	bl	8002090 <HAL_GPIO_ReadPin>
 800156a:	4603      	mov	r3, r0
 800156c:	2b01      	cmp	r3, #1
 800156e:	d105      	bne.n	800157c <main+0x150>
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);  // Allume la LED
 8001570:	2201      	movs	r2, #1
 8001572:	2102      	movs	r1, #2
 8001574:	4821      	ldr	r0, [pc, #132]	@ (80015fc <main+0x1d0>)
 8001576:	f000 fda3 	bl	80020c0 <HAL_GPIO_WritePin>
 800157a:	e004      	b.n	8001586 <main+0x15a>
		} else {
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);  // Éteint la LED
 800157c:	2200      	movs	r2, #0
 800157e:	2102      	movs	r1, #2
 8001580:	481e      	ldr	r0, [pc, #120]	@ (80015fc <main+0x1d0>)
 8001582:	f000 fd9d 	bl	80020c0 <HAL_GPIO_WritePin>
		}
		printf("Test printf bien\r\n");
 8001586:	481e      	ldr	r0, [pc, #120]	@ (8001600 <main+0x1d4>)
 8001588:	f004 ff4c 	bl	8006424 <puts>
		if (HAL_GPIO_ReadPin(BUTTON_GPIO_Port, BUTTON_Pin) == GPIO_PIN_SET) {
 800158c:	e7e8      	b.n	8001560 <main+0x134>
 800158e:	bf00      	nop
 8001590:	200003ec 	.word	0x200003ec
 8001594:	08005c81 	.word	0x08005c81
 8001598:	08005ca9 	.word	0x08005ca9
 800159c:	08007710 	.word	0x08007710
 80015a0:	08000fe9 	.word	0x08000fe9
 80015a4:	0800772c 	.word	0x0800772c
 80015a8:	0800774c 	.word	0x0800774c
 80015ac:	08001079 	.word	0x08001079
 80015b0:	08007754 	.word	0x08007754
 80015b4:	200008f8 	.word	0x200008f8
 80015b8:	08007774 	.word	0x08007774
 80015bc:	08000f95 	.word	0x08000f95
 80015c0:	08007780 	.word	0x08007780
 80015c4:	080077a4 	.word	0x080077a4
 80015c8:	08001095 	.word	0x08001095
 80015cc:	20000904 	.word	0x20000904
 80015d0:	080077b8 	.word	0x080077b8
 80015d4:	08001169 	.word	0x08001169
 80015d8:	080077c0 	.word	0x080077c0
 80015dc:	080077e0 	.word	0x080077e0
 80015e0:	080011a1 	.word	0x080011a1
 80015e4:	08007804 	.word	0x08007804
 80015e8:	08001309 	.word	0x08001309
 80015ec:	0800781c 	.word	0x0800781c
 80015f0:	0800783c 	.word	0x0800783c
 80015f4:	08001399 	.word	0x08001399
 80015f8:	08007858 	.word	0x08007858
 80015fc:	40022000 	.word	0x40022000
 8001600:	08007878 	.word	0x08007878

08001604 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b094      	sub	sp, #80	@ 0x50
 8001608:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800160a:	f107 0320 	add.w	r3, r7, #32
 800160e:	2230      	movs	r2, #48	@ 0x30
 8001610:	2100      	movs	r1, #0
 8001612:	4618      	mov	r0, r3
 8001614:	f005 f83e 	bl	8006694 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001618:	f107 030c 	add.w	r3, r7, #12
 800161c:	2200      	movs	r2, #0
 800161e:	601a      	str	r2, [r3, #0]
 8001620:	605a      	str	r2, [r3, #4]
 8001622:	609a      	str	r2, [r3, #8]
 8001624:	60da      	str	r2, [r3, #12]
 8001626:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001628:	f000 fd7e 	bl	8002128 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800162c:	4b2b      	ldr	r3, [pc, #172]	@ (80016dc <SystemClock_Config+0xd8>)
 800162e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001630:	4a2a      	ldr	r2, [pc, #168]	@ (80016dc <SystemClock_Config+0xd8>)
 8001632:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001636:	6413      	str	r3, [r2, #64]	@ 0x40
 8001638:	4b28      	ldr	r3, [pc, #160]	@ (80016dc <SystemClock_Config+0xd8>)
 800163a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800163c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001640:	60bb      	str	r3, [r7, #8]
 8001642:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001644:	4b26      	ldr	r3, [pc, #152]	@ (80016e0 <SystemClock_Config+0xdc>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a25      	ldr	r2, [pc, #148]	@ (80016e0 <SystemClock_Config+0xdc>)
 800164a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800164e:	6013      	str	r3, [r2, #0]
 8001650:	4b23      	ldr	r3, [pc, #140]	@ (80016e0 <SystemClock_Config+0xdc>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001658:	607b      	str	r3, [r7, #4]
 800165a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800165c:	2301      	movs	r3, #1
 800165e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001660:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001664:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001666:	2302      	movs	r3, #2
 8001668:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800166a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800166e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001670:	2319      	movs	r3, #25
 8001672:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 432;
 8001674:	f44f 73d8 	mov.w	r3, #432	@ 0x1b0
 8001678:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800167a:	2302      	movs	r3, #2
 800167c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800167e:	2302      	movs	r3, #2
 8001680:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001682:	f107 0320 	add.w	r3, r7, #32
 8001686:	4618      	mov	r0, r3
 8001688:	f000 fdae 	bl	80021e8 <HAL_RCC_OscConfig>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	d001      	beq.n	8001696 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001692:	f000 f827 	bl	80016e4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001696:	f000 fd57 	bl	8002148 <HAL_PWREx_EnableOverDrive>
 800169a:	4603      	mov	r3, r0
 800169c:	2b00      	cmp	r3, #0
 800169e:	d001      	beq.n	80016a4 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80016a0:	f000 f820 	bl	80016e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016a4:	230f      	movs	r3, #15
 80016a6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016a8:	2302      	movs	r3, #2
 80016aa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016ac:	2300      	movs	r3, #0
 80016ae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80016b0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80016b4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80016b6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80016ba:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80016bc:	f107 030c 	add.w	r3, r7, #12
 80016c0:	2107      	movs	r1, #7
 80016c2:	4618      	mov	r0, r3
 80016c4:	f001 f834 	bl	8002730 <HAL_RCC_ClockConfig>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d001      	beq.n	80016d2 <SystemClock_Config+0xce>
  {
    Error_Handler();
 80016ce:	f000 f809 	bl	80016e4 <Error_Handler>
  }
}
 80016d2:	bf00      	nop
 80016d4:	3750      	adds	r7, #80	@ 0x50
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	40023800 	.word	0x40023800
 80016e0:	40007000 	.word	0x40007000

080016e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80016e8:	b672      	cpsid	i
}
 80016ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80016ec:	bf00      	nop
 80016ee:	e7fd      	b.n	80016ec <Error_Handler+0x8>

080016f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80016f6:	4b11      	ldr	r3, [pc, #68]	@ (800173c <HAL_MspInit+0x4c>)
 80016f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016fa:	4a10      	ldr	r2, [pc, #64]	@ (800173c <HAL_MspInit+0x4c>)
 80016fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001700:	6413      	str	r3, [r2, #64]	@ 0x40
 8001702:	4b0e      	ldr	r3, [pc, #56]	@ (800173c <HAL_MspInit+0x4c>)
 8001704:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001706:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800170a:	607b      	str	r3, [r7, #4]
 800170c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800170e:	4b0b      	ldr	r3, [pc, #44]	@ (800173c <HAL_MspInit+0x4c>)
 8001710:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001712:	4a0a      	ldr	r2, [pc, #40]	@ (800173c <HAL_MspInit+0x4c>)
 8001714:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001718:	6453      	str	r3, [r2, #68]	@ 0x44
 800171a:	4b08      	ldr	r3, [pc, #32]	@ (800173c <HAL_MspInit+0x4c>)
 800171c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800171e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001722:	603b      	str	r3, [r7, #0]
 8001724:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001726:	2200      	movs	r2, #0
 8001728:	210f      	movs	r1, #15
 800172a:	f06f 0001 	mvn.w	r0, #1
 800172e:	f000 fada 	bl	8001ce6 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001732:	bf00      	nop
 8001734:	3708      	adds	r7, #8
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	40023800 	.word	0x40023800

08001740 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001744:	bf00      	nop
 8001746:	e7fd      	b.n	8001744 <NMI_Handler+0x4>

08001748 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800174c:	bf00      	nop
 800174e:	e7fd      	b.n	800174c <HardFault_Handler+0x4>

08001750 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001754:	bf00      	nop
 8001756:	e7fd      	b.n	8001754 <MemManage_Handler+0x4>

08001758 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800175c:	bf00      	nop
 800175e:	e7fd      	b.n	800175c <BusFault_Handler+0x4>

08001760 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001764:	bf00      	nop
 8001766:	e7fd      	b.n	8001764 <UsageFault_Handler+0x4>

08001768 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800176c:	bf00      	nop
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr

08001776 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001776:	b580      	push	{r7, lr}
 8001778:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800177a:	f000 f9d7 	bl	8001b2c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800177e:	f003 fcd7 	bl	8005130 <xTaskGetSchedulerState>
 8001782:	4603      	mov	r3, r0
 8001784:	2b01      	cmp	r3, #1
 8001786:	d001      	beq.n	800178c <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001788:	f004 f83e 	bl	8005808 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800178c:	bf00      	nop
 800178e:	bd80      	pop	{r7, pc}

08001790 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b086      	sub	sp, #24
 8001794:	af00      	add	r7, sp, #0
 8001796:	60f8      	str	r0, [r7, #12]
 8001798:	60b9      	str	r1, [r7, #8]
 800179a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800179c:	2300      	movs	r3, #0
 800179e:	617b      	str	r3, [r7, #20]
 80017a0:	e00a      	b.n	80017b8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80017a2:	f3af 8000 	nop.w
 80017a6:	4601      	mov	r1, r0
 80017a8:	68bb      	ldr	r3, [r7, #8]
 80017aa:	1c5a      	adds	r2, r3, #1
 80017ac:	60ba      	str	r2, [r7, #8]
 80017ae:	b2ca      	uxtb	r2, r1
 80017b0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	3301      	adds	r3, #1
 80017b6:	617b      	str	r3, [r7, #20]
 80017b8:	697a      	ldr	r2, [r7, #20]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	429a      	cmp	r2, r3
 80017be:	dbf0      	blt.n	80017a2 <_read+0x12>
  }

  return len;
 80017c0:	687b      	ldr	r3, [r7, #4]
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	3718      	adds	r7, #24
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}

080017ca <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80017ca:	b580      	push	{r7, lr}
 80017cc:	b086      	sub	sp, #24
 80017ce:	af00      	add	r7, sp, #0
 80017d0:	60f8      	str	r0, [r7, #12]
 80017d2:	60b9      	str	r1, [r7, #8]
 80017d4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017d6:	2300      	movs	r3, #0
 80017d8:	617b      	str	r3, [r7, #20]
 80017da:	e009      	b.n	80017f0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80017dc:	68bb      	ldr	r3, [r7, #8]
 80017de:	1c5a      	adds	r2, r3, #1
 80017e0:	60ba      	str	r2, [r7, #8]
 80017e2:	781b      	ldrb	r3, [r3, #0]
 80017e4:	4618      	mov	r0, r3
 80017e6:	f7ff fbc3 	bl	8000f70 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	3301      	adds	r3, #1
 80017ee:	617b      	str	r3, [r7, #20]
 80017f0:	697a      	ldr	r2, [r7, #20]
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	429a      	cmp	r2, r3
 80017f6:	dbf1      	blt.n	80017dc <_write+0x12>
  }
  return len;
 80017f8:	687b      	ldr	r3, [r7, #4]
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	3718      	adds	r7, #24
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}

08001802 <_close>:

int _close(int file)
{
 8001802:	b480      	push	{r7}
 8001804:	b083      	sub	sp, #12
 8001806:	af00      	add	r7, sp, #0
 8001808:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800180a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800180e:	4618      	mov	r0, r3
 8001810:	370c      	adds	r7, #12
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr

0800181a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800181a:	b480      	push	{r7}
 800181c:	b083      	sub	sp, #12
 800181e:	af00      	add	r7, sp, #0
 8001820:	6078      	str	r0, [r7, #4]
 8001822:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800182a:	605a      	str	r2, [r3, #4]
  return 0;
 800182c:	2300      	movs	r3, #0
}
 800182e:	4618      	mov	r0, r3
 8001830:	370c      	adds	r7, #12
 8001832:	46bd      	mov	sp, r7
 8001834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001838:	4770      	bx	lr

0800183a <_isatty>:

int _isatty(int file)
{
 800183a:	b480      	push	{r7}
 800183c:	b083      	sub	sp, #12
 800183e:	af00      	add	r7, sp, #0
 8001840:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001842:	2301      	movs	r3, #1
}
 8001844:	4618      	mov	r0, r3
 8001846:	370c      	adds	r7, #12
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr

08001850 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001850:	b480      	push	{r7}
 8001852:	b085      	sub	sp, #20
 8001854:	af00      	add	r7, sp, #0
 8001856:	60f8      	str	r0, [r7, #12]
 8001858:	60b9      	str	r1, [r7, #8]
 800185a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800185c:	2300      	movs	r3, #0
}
 800185e:	4618      	mov	r0, r3
 8001860:	3714      	adds	r7, #20
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr
	...

0800186c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b086      	sub	sp, #24
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001874:	4a14      	ldr	r2, [pc, #80]	@ (80018c8 <_sbrk+0x5c>)
 8001876:	4b15      	ldr	r3, [pc, #84]	@ (80018cc <_sbrk+0x60>)
 8001878:	1ad3      	subs	r3, r2, r3
 800187a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001880:	4b13      	ldr	r3, [pc, #76]	@ (80018d0 <_sbrk+0x64>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d102      	bne.n	800188e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001888:	4b11      	ldr	r3, [pc, #68]	@ (80018d0 <_sbrk+0x64>)
 800188a:	4a12      	ldr	r2, [pc, #72]	@ (80018d4 <_sbrk+0x68>)
 800188c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800188e:	4b10      	ldr	r3, [pc, #64]	@ (80018d0 <_sbrk+0x64>)
 8001890:	681a      	ldr	r2, [r3, #0]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	4413      	add	r3, r2
 8001896:	693a      	ldr	r2, [r7, #16]
 8001898:	429a      	cmp	r2, r3
 800189a:	d207      	bcs.n	80018ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800189c:	f004 ff5c 	bl	8006758 <__errno>
 80018a0:	4603      	mov	r3, r0
 80018a2:	220c      	movs	r2, #12
 80018a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018a6:	f04f 33ff 	mov.w	r3, #4294967295
 80018aa:	e009      	b.n	80018c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018ac:	4b08      	ldr	r3, [pc, #32]	@ (80018d0 <_sbrk+0x64>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018b2:	4b07      	ldr	r3, [pc, #28]	@ (80018d0 <_sbrk+0x64>)
 80018b4:	681a      	ldr	r2, [r3, #0]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	4413      	add	r3, r2
 80018ba:	4a05      	ldr	r2, [pc, #20]	@ (80018d0 <_sbrk+0x64>)
 80018bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018be:	68fb      	ldr	r3, [r7, #12]
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	3718      	adds	r7, #24
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	20050000 	.word	0x20050000
 80018cc:	00000400 	.word	0x00000400
 80018d0:	20000908 	.word	0x20000908
 80018d4:	20004838 	.word	0x20004838

080018d8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018dc:	4b06      	ldr	r3, [pc, #24]	@ (80018f8 <SystemInit+0x20>)
 80018de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80018e2:	4a05      	ldr	r2, [pc, #20]	@ (80018f8 <SystemInit+0x20>)
 80018e4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80018e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018ec:	bf00      	nop
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr
 80018f6:	bf00      	nop
 80018f8:	e000ed00 	.word	0xe000ed00

080018fc <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001900:	4b14      	ldr	r3, [pc, #80]	@ (8001954 <MX_USART1_UART_Init+0x58>)
 8001902:	4a15      	ldr	r2, [pc, #84]	@ (8001958 <MX_USART1_UART_Init+0x5c>)
 8001904:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001906:	4b13      	ldr	r3, [pc, #76]	@ (8001954 <MX_USART1_UART_Init+0x58>)
 8001908:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800190c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800190e:	4b11      	ldr	r3, [pc, #68]	@ (8001954 <MX_USART1_UART_Init+0x58>)
 8001910:	2200      	movs	r2, #0
 8001912:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001914:	4b0f      	ldr	r3, [pc, #60]	@ (8001954 <MX_USART1_UART_Init+0x58>)
 8001916:	2200      	movs	r2, #0
 8001918:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800191a:	4b0e      	ldr	r3, [pc, #56]	@ (8001954 <MX_USART1_UART_Init+0x58>)
 800191c:	2200      	movs	r2, #0
 800191e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001920:	4b0c      	ldr	r3, [pc, #48]	@ (8001954 <MX_USART1_UART_Init+0x58>)
 8001922:	220c      	movs	r2, #12
 8001924:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001926:	4b0b      	ldr	r3, [pc, #44]	@ (8001954 <MX_USART1_UART_Init+0x58>)
 8001928:	2200      	movs	r2, #0
 800192a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800192c:	4b09      	ldr	r3, [pc, #36]	@ (8001954 <MX_USART1_UART_Init+0x58>)
 800192e:	2200      	movs	r2, #0
 8001930:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001932:	4b08      	ldr	r3, [pc, #32]	@ (8001954 <MX_USART1_UART_Init+0x58>)
 8001934:	2200      	movs	r2, #0
 8001936:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001938:	4b06      	ldr	r3, [pc, #24]	@ (8001954 <MX_USART1_UART_Init+0x58>)
 800193a:	2200      	movs	r2, #0
 800193c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800193e:	4805      	ldr	r0, [pc, #20]	@ (8001954 <MX_USART1_UART_Init+0x58>)
 8001940:	f001 fccc 	bl	80032dc <HAL_UART_Init>
 8001944:	4603      	mov	r3, r0
 8001946:	2b00      	cmp	r3, #0
 8001948:	d001      	beq.n	800194e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800194a:	f7ff fecb 	bl	80016e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800194e:	bf00      	nop
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	2000090c 	.word	0x2000090c
 8001958:	40011000 	.word	0x40011000

0800195c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b0ac      	sub	sp, #176	@ 0xb0
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001964:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001968:	2200      	movs	r2, #0
 800196a:	601a      	str	r2, [r3, #0]
 800196c:	605a      	str	r2, [r3, #4]
 800196e:	609a      	str	r2, [r3, #8]
 8001970:	60da      	str	r2, [r3, #12]
 8001972:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001974:	f107 0318 	add.w	r3, r7, #24
 8001978:	2284      	movs	r2, #132	@ 0x84
 800197a:	2100      	movs	r1, #0
 800197c:	4618      	mov	r0, r3
 800197e:	f004 fe89 	bl	8006694 <memset>
  if(uartHandle->Instance==USART1)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4a32      	ldr	r2, [pc, #200]	@ (8001a50 <HAL_UART_MspInit+0xf4>)
 8001988:	4293      	cmp	r3, r2
 800198a:	d15c      	bne.n	8001a46 <HAL_UART_MspInit+0xea>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800198c:	2340      	movs	r3, #64	@ 0x40
 800198e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001990:	2300      	movs	r3, #0
 8001992:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001994:	f107 0318 	add.w	r3, r7, #24
 8001998:	4618      	mov	r0, r3
 800199a:	f001 f8af 	bl	8002afc <HAL_RCCEx_PeriphCLKConfig>
 800199e:	4603      	mov	r3, r0
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d001      	beq.n	80019a8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80019a4:	f7ff fe9e 	bl	80016e4 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80019a8:	4b2a      	ldr	r3, [pc, #168]	@ (8001a54 <HAL_UART_MspInit+0xf8>)
 80019aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019ac:	4a29      	ldr	r2, [pc, #164]	@ (8001a54 <HAL_UART_MspInit+0xf8>)
 80019ae:	f043 0310 	orr.w	r3, r3, #16
 80019b2:	6453      	str	r3, [r2, #68]	@ 0x44
 80019b4:	4b27      	ldr	r3, [pc, #156]	@ (8001a54 <HAL_UART_MspInit+0xf8>)
 80019b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019b8:	f003 0310 	and.w	r3, r3, #16
 80019bc:	617b      	str	r3, [r7, #20]
 80019be:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019c0:	4b24      	ldr	r3, [pc, #144]	@ (8001a54 <HAL_UART_MspInit+0xf8>)
 80019c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019c4:	4a23      	ldr	r2, [pc, #140]	@ (8001a54 <HAL_UART_MspInit+0xf8>)
 80019c6:	f043 0302 	orr.w	r3, r3, #2
 80019ca:	6313      	str	r3, [r2, #48]	@ 0x30
 80019cc:	4b21      	ldr	r3, [pc, #132]	@ (8001a54 <HAL_UART_MspInit+0xf8>)
 80019ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019d0:	f003 0302 	and.w	r3, r3, #2
 80019d4:	613b      	str	r3, [r7, #16]
 80019d6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019d8:	4b1e      	ldr	r3, [pc, #120]	@ (8001a54 <HAL_UART_MspInit+0xf8>)
 80019da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019dc:	4a1d      	ldr	r2, [pc, #116]	@ (8001a54 <HAL_UART_MspInit+0xf8>)
 80019de:	f043 0301 	orr.w	r3, r3, #1
 80019e2:	6313      	str	r3, [r2, #48]	@ 0x30
 80019e4:	4b1b      	ldr	r3, [pc, #108]	@ (8001a54 <HAL_UART_MspInit+0xf8>)
 80019e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019e8:	f003 0301 	and.w	r3, r3, #1
 80019ec:	60fb      	str	r3, [r7, #12]
 80019ee:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80019f0:	2380      	movs	r3, #128	@ 0x80
 80019f2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019f6:	2302      	movs	r3, #2
 80019f8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fc:	2300      	movs	r3, #0
 80019fe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a02:	2300      	movs	r3, #0
 8001a04:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001a08:	2307      	movs	r3, #7
 8001a0a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001a0e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001a12:	4619      	mov	r1, r3
 8001a14:	4810      	ldr	r0, [pc, #64]	@ (8001a58 <HAL_UART_MspInit+0xfc>)
 8001a16:	f000 f98f 	bl	8001d38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8001a1a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001a1e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a22:	2302      	movs	r3, #2
 8001a24:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001a34:	2307      	movs	r3, #7
 8001a36:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8001a3a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001a3e:	4619      	mov	r1, r3
 8001a40:	4806      	ldr	r0, [pc, #24]	@ (8001a5c <HAL_UART_MspInit+0x100>)
 8001a42:	f000 f979 	bl	8001d38 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001a46:	bf00      	nop
 8001a48:	37b0      	adds	r7, #176	@ 0xb0
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	40011000 	.word	0x40011000
 8001a54:	40023800 	.word	0x40023800
 8001a58:	40020400 	.word	0x40020400
 8001a5c:	40020000 	.word	0x40020000

08001a60 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001a60:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001a98 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001a64:	f7ff ff38 	bl	80018d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a68:	480c      	ldr	r0, [pc, #48]	@ (8001a9c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001a6a:	490d      	ldr	r1, [pc, #52]	@ (8001aa0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001a6c:	4a0d      	ldr	r2, [pc, #52]	@ (8001aa4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001a6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a70:	e002      	b.n	8001a78 <LoopCopyDataInit>

08001a72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a76:	3304      	adds	r3, #4

08001a78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a7c:	d3f9      	bcc.n	8001a72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a7e:	4a0a      	ldr	r2, [pc, #40]	@ (8001aa8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001a80:	4c0a      	ldr	r4, [pc, #40]	@ (8001aac <LoopFillZerobss+0x22>)
  movs r3, #0
 8001a82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a84:	e001      	b.n	8001a8a <LoopFillZerobss>

08001a86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a88:	3204      	adds	r2, #4

08001a8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a8c:	d3fb      	bcc.n	8001a86 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001a8e:	f004 fe69 	bl	8006764 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a92:	f7ff fccb 	bl	800142c <main>
  bx  lr    
 8001a96:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001a98:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001a9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001aa0:	2000016c 	.word	0x2000016c
  ldr r2, =_sidata
 8001aa4:	08007adc 	.word	0x08007adc
  ldr r2, =_sbss
 8001aa8:	2000016c 	.word	0x2000016c
  ldr r4, =_ebss
 8001aac:	20004838 	.word	0x20004838

08001ab0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ab0:	e7fe      	b.n	8001ab0 <ADC_IRQHandler>

08001ab2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ab2:	b580      	push	{r7, lr}
 8001ab4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ab6:	2003      	movs	r0, #3
 8001ab8:	f000 f90a 	bl	8001cd0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001abc:	200f      	movs	r0, #15
 8001abe:	f000 f805 	bl	8001acc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ac2:	f7ff fe15 	bl	80016f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ac6:	2300      	movs	r3, #0
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	bd80      	pop	{r7, pc}

08001acc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b082      	sub	sp, #8
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ad4:	4b12      	ldr	r3, [pc, #72]	@ (8001b20 <HAL_InitTick+0x54>)
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	4b12      	ldr	r3, [pc, #72]	@ (8001b24 <HAL_InitTick+0x58>)
 8001ada:	781b      	ldrb	r3, [r3, #0]
 8001adc:	4619      	mov	r1, r3
 8001ade:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ae2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ae6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aea:	4618      	mov	r0, r3
 8001aec:	f000 f917 	bl	8001d1e <HAL_SYSTICK_Config>
 8001af0:	4603      	mov	r3, r0
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d001      	beq.n	8001afa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001af6:	2301      	movs	r3, #1
 8001af8:	e00e      	b.n	8001b18 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2b0f      	cmp	r3, #15
 8001afe:	d80a      	bhi.n	8001b16 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b00:	2200      	movs	r2, #0
 8001b02:	6879      	ldr	r1, [r7, #4]
 8001b04:	f04f 30ff 	mov.w	r0, #4294967295
 8001b08:	f000 f8ed 	bl	8001ce6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b0c:	4a06      	ldr	r2, [pc, #24]	@ (8001b28 <HAL_InitTick+0x5c>)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b12:	2300      	movs	r3, #0
 8001b14:	e000      	b.n	8001b18 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b16:	2301      	movs	r3, #1
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	3708      	adds	r7, #8
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}
 8001b20:	20000100 	.word	0x20000100
 8001b24:	20000108 	.word	0x20000108
 8001b28:	20000104 	.word	0x20000104

08001b2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b30:	4b06      	ldr	r3, [pc, #24]	@ (8001b4c <HAL_IncTick+0x20>)
 8001b32:	781b      	ldrb	r3, [r3, #0]
 8001b34:	461a      	mov	r2, r3
 8001b36:	4b06      	ldr	r3, [pc, #24]	@ (8001b50 <HAL_IncTick+0x24>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4413      	add	r3, r2
 8001b3c:	4a04      	ldr	r2, [pc, #16]	@ (8001b50 <HAL_IncTick+0x24>)
 8001b3e:	6013      	str	r3, [r2, #0]
}
 8001b40:	bf00      	nop
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr
 8001b4a:	bf00      	nop
 8001b4c:	20000108 	.word	0x20000108
 8001b50:	20000994 	.word	0x20000994

08001b54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b54:	b480      	push	{r7}
 8001b56:	af00      	add	r7, sp, #0
  return uwTick;
 8001b58:	4b03      	ldr	r3, [pc, #12]	@ (8001b68 <HAL_GetTick+0x14>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b64:	4770      	bx	lr
 8001b66:	bf00      	nop
 8001b68:	20000994 	.word	0x20000994

08001b6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b085      	sub	sp, #20
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	f003 0307 	and.w	r3, r3, #7
 8001b7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b7c:	4b0b      	ldr	r3, [pc, #44]	@ (8001bac <__NVIC_SetPriorityGrouping+0x40>)
 8001b7e:	68db      	ldr	r3, [r3, #12]
 8001b80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b82:	68ba      	ldr	r2, [r7, #8]
 8001b84:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b88:	4013      	ands	r3, r2
 8001b8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b90:	68bb      	ldr	r3, [r7, #8]
 8001b92:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001b94:	4b06      	ldr	r3, [pc, #24]	@ (8001bb0 <__NVIC_SetPriorityGrouping+0x44>)
 8001b96:	4313      	orrs	r3, r2
 8001b98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b9a:	4a04      	ldr	r2, [pc, #16]	@ (8001bac <__NVIC_SetPriorityGrouping+0x40>)
 8001b9c:	68bb      	ldr	r3, [r7, #8]
 8001b9e:	60d3      	str	r3, [r2, #12]
}
 8001ba0:	bf00      	nop
 8001ba2:	3714      	adds	r7, #20
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001baa:	4770      	bx	lr
 8001bac:	e000ed00 	.word	0xe000ed00
 8001bb0:	05fa0000 	.word	0x05fa0000

08001bb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bb8:	4b04      	ldr	r3, [pc, #16]	@ (8001bcc <__NVIC_GetPriorityGrouping+0x18>)
 8001bba:	68db      	ldr	r3, [r3, #12]
 8001bbc:	0a1b      	lsrs	r3, r3, #8
 8001bbe:	f003 0307 	and.w	r3, r3, #7
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bca:	4770      	bx	lr
 8001bcc:	e000ed00 	.word	0xe000ed00

08001bd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b083      	sub	sp, #12
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	6039      	str	r1, [r7, #0]
 8001bda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	db0a      	blt.n	8001bfa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	b2da      	uxtb	r2, r3
 8001be8:	490c      	ldr	r1, [pc, #48]	@ (8001c1c <__NVIC_SetPriority+0x4c>)
 8001bea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bee:	0112      	lsls	r2, r2, #4
 8001bf0:	b2d2      	uxtb	r2, r2
 8001bf2:	440b      	add	r3, r1
 8001bf4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bf8:	e00a      	b.n	8001c10 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	b2da      	uxtb	r2, r3
 8001bfe:	4908      	ldr	r1, [pc, #32]	@ (8001c20 <__NVIC_SetPriority+0x50>)
 8001c00:	79fb      	ldrb	r3, [r7, #7]
 8001c02:	f003 030f 	and.w	r3, r3, #15
 8001c06:	3b04      	subs	r3, #4
 8001c08:	0112      	lsls	r2, r2, #4
 8001c0a:	b2d2      	uxtb	r2, r2
 8001c0c:	440b      	add	r3, r1
 8001c0e:	761a      	strb	r2, [r3, #24]
}
 8001c10:	bf00      	nop
 8001c12:	370c      	adds	r7, #12
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr
 8001c1c:	e000e100 	.word	0xe000e100
 8001c20:	e000ed00 	.word	0xe000ed00

08001c24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b089      	sub	sp, #36	@ 0x24
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	60f8      	str	r0, [r7, #12]
 8001c2c:	60b9      	str	r1, [r7, #8]
 8001c2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	f003 0307 	and.w	r3, r3, #7
 8001c36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c38:	69fb      	ldr	r3, [r7, #28]
 8001c3a:	f1c3 0307 	rsb	r3, r3, #7
 8001c3e:	2b04      	cmp	r3, #4
 8001c40:	bf28      	it	cs
 8001c42:	2304      	movcs	r3, #4
 8001c44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c46:	69fb      	ldr	r3, [r7, #28]
 8001c48:	3304      	adds	r3, #4
 8001c4a:	2b06      	cmp	r3, #6
 8001c4c:	d902      	bls.n	8001c54 <NVIC_EncodePriority+0x30>
 8001c4e:	69fb      	ldr	r3, [r7, #28]
 8001c50:	3b03      	subs	r3, #3
 8001c52:	e000      	b.n	8001c56 <NVIC_EncodePriority+0x32>
 8001c54:	2300      	movs	r3, #0
 8001c56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c58:	f04f 32ff 	mov.w	r2, #4294967295
 8001c5c:	69bb      	ldr	r3, [r7, #24]
 8001c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c62:	43da      	mvns	r2, r3
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	401a      	ands	r2, r3
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c6c:	f04f 31ff 	mov.w	r1, #4294967295
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	fa01 f303 	lsl.w	r3, r1, r3
 8001c76:	43d9      	mvns	r1, r3
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c7c:	4313      	orrs	r3, r2
         );
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	3724      	adds	r7, #36	@ 0x24
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr
	...

08001c8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b082      	sub	sp, #8
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	3b01      	subs	r3, #1
 8001c98:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001c9c:	d301      	bcc.n	8001ca2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	e00f      	b.n	8001cc2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ca2:	4a0a      	ldr	r2, [pc, #40]	@ (8001ccc <SysTick_Config+0x40>)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	3b01      	subs	r3, #1
 8001ca8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001caa:	210f      	movs	r1, #15
 8001cac:	f04f 30ff 	mov.w	r0, #4294967295
 8001cb0:	f7ff ff8e 	bl	8001bd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cb4:	4b05      	ldr	r3, [pc, #20]	@ (8001ccc <SysTick_Config+0x40>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cba:	4b04      	ldr	r3, [pc, #16]	@ (8001ccc <SysTick_Config+0x40>)
 8001cbc:	2207      	movs	r2, #7
 8001cbe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cc0:	2300      	movs	r3, #0
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	3708      	adds	r7, #8
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	e000e010 	.word	0xe000e010

08001cd0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b082      	sub	sp, #8
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cd8:	6878      	ldr	r0, [r7, #4]
 8001cda:	f7ff ff47 	bl	8001b6c <__NVIC_SetPriorityGrouping>
}
 8001cde:	bf00      	nop
 8001ce0:	3708      	adds	r7, #8
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}

08001ce6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ce6:	b580      	push	{r7, lr}
 8001ce8:	b086      	sub	sp, #24
 8001cea:	af00      	add	r7, sp, #0
 8001cec:	4603      	mov	r3, r0
 8001cee:	60b9      	str	r1, [r7, #8]
 8001cf0:	607a      	str	r2, [r7, #4]
 8001cf2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cf8:	f7ff ff5c 	bl	8001bb4 <__NVIC_GetPriorityGrouping>
 8001cfc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cfe:	687a      	ldr	r2, [r7, #4]
 8001d00:	68b9      	ldr	r1, [r7, #8]
 8001d02:	6978      	ldr	r0, [r7, #20]
 8001d04:	f7ff ff8e 	bl	8001c24 <NVIC_EncodePriority>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d0e:	4611      	mov	r1, r2
 8001d10:	4618      	mov	r0, r3
 8001d12:	f7ff ff5d 	bl	8001bd0 <__NVIC_SetPriority>
}
 8001d16:	bf00      	nop
 8001d18:	3718      	adds	r7, #24
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}

08001d1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d1e:	b580      	push	{r7, lr}
 8001d20:	b082      	sub	sp, #8
 8001d22:	af00      	add	r7, sp, #0
 8001d24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d26:	6878      	ldr	r0, [r7, #4]
 8001d28:	f7ff ffb0 	bl	8001c8c <SysTick_Config>
 8001d2c:	4603      	mov	r3, r0
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	3708      	adds	r7, #8
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
	...

08001d38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b089      	sub	sp, #36	@ 0x24
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
 8001d40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001d42:	2300      	movs	r3, #0
 8001d44:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001d46:	2300      	movs	r3, #0
 8001d48:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8001d52:	2300      	movs	r3, #0
 8001d54:	61fb      	str	r3, [r7, #28]
 8001d56:	e175      	b.n	8002044 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001d58:	2201      	movs	r2, #1
 8001d5a:	69fb      	ldr	r3, [r7, #28]
 8001d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d60:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	697a      	ldr	r2, [r7, #20]
 8001d68:	4013      	ands	r3, r2
 8001d6a:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8001d6c:	693a      	ldr	r2, [r7, #16]
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	429a      	cmp	r2, r3
 8001d72:	f040 8164 	bne.w	800203e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	f003 0303 	and.w	r3, r3, #3
 8001d7e:	2b01      	cmp	r3, #1
 8001d80:	d005      	beq.n	8001d8e <HAL_GPIO_Init+0x56>
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	f003 0303 	and.w	r3, r3, #3
 8001d8a:	2b02      	cmp	r3, #2
 8001d8c:	d130      	bne.n	8001df0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001d94:	69fb      	ldr	r3, [r7, #28]
 8001d96:	005b      	lsls	r3, r3, #1
 8001d98:	2203      	movs	r2, #3
 8001d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9e:	43db      	mvns	r3, r3
 8001da0:	69ba      	ldr	r2, [r7, #24]
 8001da2:	4013      	ands	r3, r2
 8001da4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	68da      	ldr	r2, [r3, #12]
 8001daa:	69fb      	ldr	r3, [r7, #28]
 8001dac:	005b      	lsls	r3, r3, #1
 8001dae:	fa02 f303 	lsl.w	r3, r2, r3
 8001db2:	69ba      	ldr	r2, [r7, #24]
 8001db4:	4313      	orrs	r3, r2
 8001db6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	69ba      	ldr	r2, [r7, #24]
 8001dbc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001dc4:	2201      	movs	r2, #1
 8001dc6:	69fb      	ldr	r3, [r7, #28]
 8001dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dcc:	43db      	mvns	r3, r3
 8001dce:	69ba      	ldr	r2, [r7, #24]
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	091b      	lsrs	r3, r3, #4
 8001dda:	f003 0201 	and.w	r2, r3, #1
 8001dde:	69fb      	ldr	r3, [r7, #28]
 8001de0:	fa02 f303 	lsl.w	r3, r2, r3
 8001de4:	69ba      	ldr	r2, [r7, #24]
 8001de6:	4313      	orrs	r3, r2
 8001de8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	69ba      	ldr	r2, [r7, #24]
 8001dee:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	f003 0303 	and.w	r3, r3, #3
 8001df8:	2b03      	cmp	r3, #3
 8001dfa:	d017      	beq.n	8001e2c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	68db      	ldr	r3, [r3, #12]
 8001e00:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001e02:	69fb      	ldr	r3, [r7, #28]
 8001e04:	005b      	lsls	r3, r3, #1
 8001e06:	2203      	movs	r2, #3
 8001e08:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0c:	43db      	mvns	r3, r3
 8001e0e:	69ba      	ldr	r2, [r7, #24]
 8001e10:	4013      	ands	r3, r2
 8001e12:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	689a      	ldr	r2, [r3, #8]
 8001e18:	69fb      	ldr	r3, [r7, #28]
 8001e1a:	005b      	lsls	r3, r3, #1
 8001e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e20:	69ba      	ldr	r2, [r7, #24]
 8001e22:	4313      	orrs	r3, r2
 8001e24:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	69ba      	ldr	r2, [r7, #24]
 8001e2a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	f003 0303 	and.w	r3, r3, #3
 8001e34:	2b02      	cmp	r3, #2
 8001e36:	d123      	bne.n	8001e80 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001e38:	69fb      	ldr	r3, [r7, #28]
 8001e3a:	08da      	lsrs	r2, r3, #3
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	3208      	adds	r2, #8
 8001e40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001e46:	69fb      	ldr	r3, [r7, #28]
 8001e48:	f003 0307 	and.w	r3, r3, #7
 8001e4c:	009b      	lsls	r3, r3, #2
 8001e4e:	220f      	movs	r2, #15
 8001e50:	fa02 f303 	lsl.w	r3, r2, r3
 8001e54:	43db      	mvns	r3, r3
 8001e56:	69ba      	ldr	r2, [r7, #24]
 8001e58:	4013      	ands	r3, r2
 8001e5a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	691a      	ldr	r2, [r3, #16]
 8001e60:	69fb      	ldr	r3, [r7, #28]
 8001e62:	f003 0307 	and.w	r3, r3, #7
 8001e66:	009b      	lsls	r3, r3, #2
 8001e68:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6c:	69ba      	ldr	r2, [r7, #24]
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001e72:	69fb      	ldr	r3, [r7, #28]
 8001e74:	08da      	lsrs	r2, r3, #3
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	3208      	adds	r2, #8
 8001e7a:	69b9      	ldr	r1, [r7, #24]
 8001e7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001e86:	69fb      	ldr	r3, [r7, #28]
 8001e88:	005b      	lsls	r3, r3, #1
 8001e8a:	2203      	movs	r2, #3
 8001e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e90:	43db      	mvns	r3, r3
 8001e92:	69ba      	ldr	r2, [r7, #24]
 8001e94:	4013      	ands	r3, r2
 8001e96:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	f003 0203 	and.w	r2, r3, #3
 8001ea0:	69fb      	ldr	r3, [r7, #28]
 8001ea2:	005b      	lsls	r3, r3, #1
 8001ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea8:	69ba      	ldr	r2, [r7, #24]
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	69ba      	ldr	r2, [r7, #24]
 8001eb2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	f000 80be 	beq.w	800203e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ec2:	4b66      	ldr	r3, [pc, #408]	@ (800205c <HAL_GPIO_Init+0x324>)
 8001ec4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ec6:	4a65      	ldr	r2, [pc, #404]	@ (800205c <HAL_GPIO_Init+0x324>)
 8001ec8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ecc:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ece:	4b63      	ldr	r3, [pc, #396]	@ (800205c <HAL_GPIO_Init+0x324>)
 8001ed0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ed2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ed6:	60fb      	str	r3, [r7, #12]
 8001ed8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001eda:	4a61      	ldr	r2, [pc, #388]	@ (8002060 <HAL_GPIO_Init+0x328>)
 8001edc:	69fb      	ldr	r3, [r7, #28]
 8001ede:	089b      	lsrs	r3, r3, #2
 8001ee0:	3302      	adds	r3, #2
 8001ee2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ee6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001ee8:	69fb      	ldr	r3, [r7, #28]
 8001eea:	f003 0303 	and.w	r3, r3, #3
 8001eee:	009b      	lsls	r3, r3, #2
 8001ef0:	220f      	movs	r2, #15
 8001ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef6:	43db      	mvns	r3, r3
 8001ef8:	69ba      	ldr	r2, [r7, #24]
 8001efa:	4013      	ands	r3, r2
 8001efc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	4a58      	ldr	r2, [pc, #352]	@ (8002064 <HAL_GPIO_Init+0x32c>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d037      	beq.n	8001f76 <HAL_GPIO_Init+0x23e>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	4a57      	ldr	r2, [pc, #348]	@ (8002068 <HAL_GPIO_Init+0x330>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d031      	beq.n	8001f72 <HAL_GPIO_Init+0x23a>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	4a56      	ldr	r2, [pc, #344]	@ (800206c <HAL_GPIO_Init+0x334>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d02b      	beq.n	8001f6e <HAL_GPIO_Init+0x236>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	4a55      	ldr	r2, [pc, #340]	@ (8002070 <HAL_GPIO_Init+0x338>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d025      	beq.n	8001f6a <HAL_GPIO_Init+0x232>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	4a54      	ldr	r2, [pc, #336]	@ (8002074 <HAL_GPIO_Init+0x33c>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d01f      	beq.n	8001f66 <HAL_GPIO_Init+0x22e>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	4a53      	ldr	r2, [pc, #332]	@ (8002078 <HAL_GPIO_Init+0x340>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d019      	beq.n	8001f62 <HAL_GPIO_Init+0x22a>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	4a52      	ldr	r2, [pc, #328]	@ (800207c <HAL_GPIO_Init+0x344>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d013      	beq.n	8001f5e <HAL_GPIO_Init+0x226>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	4a51      	ldr	r2, [pc, #324]	@ (8002080 <HAL_GPIO_Init+0x348>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d00d      	beq.n	8001f5a <HAL_GPIO_Init+0x222>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	4a50      	ldr	r2, [pc, #320]	@ (8002084 <HAL_GPIO_Init+0x34c>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d007      	beq.n	8001f56 <HAL_GPIO_Init+0x21e>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	4a4f      	ldr	r2, [pc, #316]	@ (8002088 <HAL_GPIO_Init+0x350>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d101      	bne.n	8001f52 <HAL_GPIO_Init+0x21a>
 8001f4e:	2309      	movs	r3, #9
 8001f50:	e012      	b.n	8001f78 <HAL_GPIO_Init+0x240>
 8001f52:	230a      	movs	r3, #10
 8001f54:	e010      	b.n	8001f78 <HAL_GPIO_Init+0x240>
 8001f56:	2308      	movs	r3, #8
 8001f58:	e00e      	b.n	8001f78 <HAL_GPIO_Init+0x240>
 8001f5a:	2307      	movs	r3, #7
 8001f5c:	e00c      	b.n	8001f78 <HAL_GPIO_Init+0x240>
 8001f5e:	2306      	movs	r3, #6
 8001f60:	e00a      	b.n	8001f78 <HAL_GPIO_Init+0x240>
 8001f62:	2305      	movs	r3, #5
 8001f64:	e008      	b.n	8001f78 <HAL_GPIO_Init+0x240>
 8001f66:	2304      	movs	r3, #4
 8001f68:	e006      	b.n	8001f78 <HAL_GPIO_Init+0x240>
 8001f6a:	2303      	movs	r3, #3
 8001f6c:	e004      	b.n	8001f78 <HAL_GPIO_Init+0x240>
 8001f6e:	2302      	movs	r3, #2
 8001f70:	e002      	b.n	8001f78 <HAL_GPIO_Init+0x240>
 8001f72:	2301      	movs	r3, #1
 8001f74:	e000      	b.n	8001f78 <HAL_GPIO_Init+0x240>
 8001f76:	2300      	movs	r3, #0
 8001f78:	69fa      	ldr	r2, [r7, #28]
 8001f7a:	f002 0203 	and.w	r2, r2, #3
 8001f7e:	0092      	lsls	r2, r2, #2
 8001f80:	4093      	lsls	r3, r2
 8001f82:	69ba      	ldr	r2, [r7, #24]
 8001f84:	4313      	orrs	r3, r2
 8001f86:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001f88:	4935      	ldr	r1, [pc, #212]	@ (8002060 <HAL_GPIO_Init+0x328>)
 8001f8a:	69fb      	ldr	r3, [r7, #28]
 8001f8c:	089b      	lsrs	r3, r3, #2
 8001f8e:	3302      	adds	r3, #2
 8001f90:	69ba      	ldr	r2, [r7, #24]
 8001f92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f96:	4b3d      	ldr	r3, [pc, #244]	@ (800208c <HAL_GPIO_Init+0x354>)
 8001f98:	689b      	ldr	r3, [r3, #8]
 8001f9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	43db      	mvns	r3, r3
 8001fa0:	69ba      	ldr	r2, [r7, #24]
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d003      	beq.n	8001fba <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001fb2:	69ba      	ldr	r2, [r7, #24]
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001fba:	4a34      	ldr	r2, [pc, #208]	@ (800208c <HAL_GPIO_Init+0x354>)
 8001fbc:	69bb      	ldr	r3, [r7, #24]
 8001fbe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001fc0:	4b32      	ldr	r3, [pc, #200]	@ (800208c <HAL_GPIO_Init+0x354>)
 8001fc2:	68db      	ldr	r3, [r3, #12]
 8001fc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	43db      	mvns	r3, r3
 8001fca:	69ba      	ldr	r2, [r7, #24]
 8001fcc:	4013      	ands	r3, r2
 8001fce:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d003      	beq.n	8001fe4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001fdc:	69ba      	ldr	r2, [r7, #24]
 8001fde:	693b      	ldr	r3, [r7, #16]
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001fe4:	4a29      	ldr	r2, [pc, #164]	@ (800208c <HAL_GPIO_Init+0x354>)
 8001fe6:	69bb      	ldr	r3, [r7, #24]
 8001fe8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001fea:	4b28      	ldr	r3, [pc, #160]	@ (800208c <HAL_GPIO_Init+0x354>)
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	43db      	mvns	r3, r3
 8001ff4:	69ba      	ldr	r2, [r7, #24]
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002002:	2b00      	cmp	r3, #0
 8002004:	d003      	beq.n	800200e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002006:	69ba      	ldr	r2, [r7, #24]
 8002008:	693b      	ldr	r3, [r7, #16]
 800200a:	4313      	orrs	r3, r2
 800200c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800200e:	4a1f      	ldr	r2, [pc, #124]	@ (800208c <HAL_GPIO_Init+0x354>)
 8002010:	69bb      	ldr	r3, [r7, #24]
 8002012:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002014:	4b1d      	ldr	r3, [pc, #116]	@ (800208c <HAL_GPIO_Init+0x354>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	43db      	mvns	r3, r3
 800201e:	69ba      	ldr	r2, [r7, #24]
 8002020:	4013      	ands	r3, r2
 8002022:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800202c:	2b00      	cmp	r3, #0
 800202e:	d003      	beq.n	8002038 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002030:	69ba      	ldr	r2, [r7, #24]
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	4313      	orrs	r3, r2
 8002036:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002038:	4a14      	ldr	r2, [pc, #80]	@ (800208c <HAL_GPIO_Init+0x354>)
 800203a:	69bb      	ldr	r3, [r7, #24]
 800203c:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 800203e:	69fb      	ldr	r3, [r7, #28]
 8002040:	3301      	adds	r3, #1
 8002042:	61fb      	str	r3, [r7, #28]
 8002044:	69fb      	ldr	r3, [r7, #28]
 8002046:	2b0f      	cmp	r3, #15
 8002048:	f67f ae86 	bls.w	8001d58 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800204c:	bf00      	nop
 800204e:	bf00      	nop
 8002050:	3724      	adds	r7, #36	@ 0x24
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr
 800205a:	bf00      	nop
 800205c:	40023800 	.word	0x40023800
 8002060:	40013800 	.word	0x40013800
 8002064:	40020000 	.word	0x40020000
 8002068:	40020400 	.word	0x40020400
 800206c:	40020800 	.word	0x40020800
 8002070:	40020c00 	.word	0x40020c00
 8002074:	40021000 	.word	0x40021000
 8002078:	40021400 	.word	0x40021400
 800207c:	40021800 	.word	0x40021800
 8002080:	40021c00 	.word	0x40021c00
 8002084:	40022000 	.word	0x40022000
 8002088:	40022400 	.word	0x40022400
 800208c:	40013c00 	.word	0x40013c00

08002090 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002090:	b480      	push	{r7}
 8002092:	b085      	sub	sp, #20
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
 8002098:	460b      	mov	r3, r1
 800209a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	691a      	ldr	r2, [r3, #16]
 80020a0:	887b      	ldrh	r3, [r7, #2]
 80020a2:	4013      	ands	r3, r2
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d002      	beq.n	80020ae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80020a8:	2301      	movs	r3, #1
 80020aa:	73fb      	strb	r3, [r7, #15]
 80020ac:	e001      	b.n	80020b2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80020ae:	2300      	movs	r3, #0
 80020b0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80020b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	3714      	adds	r7, #20
 80020b8:	46bd      	mov	sp, r7
 80020ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020be:	4770      	bx	lr

080020c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b083      	sub	sp, #12
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
 80020c8:	460b      	mov	r3, r1
 80020ca:	807b      	strh	r3, [r7, #2]
 80020cc:	4613      	mov	r3, r2
 80020ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80020d0:	787b      	ldrb	r3, [r7, #1]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d003      	beq.n	80020de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020d6:	887a      	ldrh	r2, [r7, #2]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80020dc:	e003      	b.n	80020e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80020de:	887b      	ldrh	r3, [r7, #2]
 80020e0:	041a      	lsls	r2, r3, #16
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	619a      	str	r2, [r3, #24]
}
 80020e6:	bf00      	nop
 80020e8:	370c      	adds	r7, #12
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr

080020f2 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80020f2:	b480      	push	{r7}
 80020f4:	b085      	sub	sp, #20
 80020f6:	af00      	add	r7, sp, #0
 80020f8:	6078      	str	r0, [r7, #4]
 80020fa:	460b      	mov	r3, r1
 80020fc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	695b      	ldr	r3, [r3, #20]
 8002102:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002104:	887a      	ldrh	r2, [r7, #2]
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	4013      	ands	r3, r2
 800210a:	041a      	lsls	r2, r3, #16
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	43d9      	mvns	r1, r3
 8002110:	887b      	ldrh	r3, [r7, #2]
 8002112:	400b      	ands	r3, r1
 8002114:	431a      	orrs	r2, r3
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	619a      	str	r2, [r3, #24]
}
 800211a:	bf00      	nop
 800211c:	3714      	adds	r7, #20
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr
	...

08002128 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002128:	b480      	push	{r7}
 800212a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800212c:	4b05      	ldr	r3, [pc, #20]	@ (8002144 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a04      	ldr	r2, [pc, #16]	@ (8002144 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002132:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002136:	6013      	str	r3, [r2, #0]
}
 8002138:	bf00      	nop
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr
 8002142:	bf00      	nop
 8002144:	40007000 	.word	0x40007000

08002148 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b082      	sub	sp, #8
 800214c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800214e:	2300      	movs	r3, #0
 8002150:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002152:	4b23      	ldr	r3, [pc, #140]	@ (80021e0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002154:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002156:	4a22      	ldr	r2, [pc, #136]	@ (80021e0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002158:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800215c:	6413      	str	r3, [r2, #64]	@ 0x40
 800215e:	4b20      	ldr	r3, [pc, #128]	@ (80021e0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002160:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002162:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002166:	603b      	str	r3, [r7, #0]
 8002168:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800216a:	4b1e      	ldr	r3, [pc, #120]	@ (80021e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a1d      	ldr	r2, [pc, #116]	@ (80021e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002170:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002174:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002176:	f7ff fced 	bl	8001b54 <HAL_GetTick>
 800217a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800217c:	e009      	b.n	8002192 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800217e:	f7ff fce9 	bl	8001b54 <HAL_GetTick>
 8002182:	4602      	mov	r2, r0
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	1ad3      	subs	r3, r2, r3
 8002188:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800218c:	d901      	bls.n	8002192 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800218e:	2303      	movs	r3, #3
 8002190:	e022      	b.n	80021d8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002192:	4b14      	ldr	r3, [pc, #80]	@ (80021e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800219a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800219e:	d1ee      	bne.n	800217e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80021a0:	4b10      	ldr	r3, [pc, #64]	@ (80021e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a0f      	ldr	r2, [pc, #60]	@ (80021e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80021a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80021aa:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80021ac:	f7ff fcd2 	bl	8001b54 <HAL_GetTick>
 80021b0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80021b2:	e009      	b.n	80021c8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80021b4:	f7ff fcce 	bl	8001b54 <HAL_GetTick>
 80021b8:	4602      	mov	r2, r0
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	1ad3      	subs	r3, r2, r3
 80021be:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80021c2:	d901      	bls.n	80021c8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80021c4:	2303      	movs	r3, #3
 80021c6:	e007      	b.n	80021d8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80021c8:	4b06      	ldr	r3, [pc, #24]	@ (80021e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021d0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80021d4:	d1ee      	bne.n	80021b4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80021d6:	2300      	movs	r3, #0
}
 80021d8:	4618      	mov	r0, r3
 80021da:	3708      	adds	r7, #8
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}
 80021e0:	40023800 	.word	0x40023800
 80021e4:	40007000 	.word	0x40007000

080021e8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b086      	sub	sp, #24
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80021f0:	2300      	movs	r3, #0
 80021f2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d101      	bne.n	80021fe <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	e291      	b.n	8002722 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 0301 	and.w	r3, r3, #1
 8002206:	2b00      	cmp	r3, #0
 8002208:	f000 8087 	beq.w	800231a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800220c:	4b96      	ldr	r3, [pc, #600]	@ (8002468 <HAL_RCC_OscConfig+0x280>)
 800220e:	689b      	ldr	r3, [r3, #8]
 8002210:	f003 030c 	and.w	r3, r3, #12
 8002214:	2b04      	cmp	r3, #4
 8002216:	d00c      	beq.n	8002232 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002218:	4b93      	ldr	r3, [pc, #588]	@ (8002468 <HAL_RCC_OscConfig+0x280>)
 800221a:	689b      	ldr	r3, [r3, #8]
 800221c:	f003 030c 	and.w	r3, r3, #12
 8002220:	2b08      	cmp	r3, #8
 8002222:	d112      	bne.n	800224a <HAL_RCC_OscConfig+0x62>
 8002224:	4b90      	ldr	r3, [pc, #576]	@ (8002468 <HAL_RCC_OscConfig+0x280>)
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800222c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002230:	d10b      	bne.n	800224a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002232:	4b8d      	ldr	r3, [pc, #564]	@ (8002468 <HAL_RCC_OscConfig+0x280>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800223a:	2b00      	cmp	r3, #0
 800223c:	d06c      	beq.n	8002318 <HAL_RCC_OscConfig+0x130>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d168      	bne.n	8002318 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002246:	2301      	movs	r3, #1
 8002248:	e26b      	b.n	8002722 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002252:	d106      	bne.n	8002262 <HAL_RCC_OscConfig+0x7a>
 8002254:	4b84      	ldr	r3, [pc, #528]	@ (8002468 <HAL_RCC_OscConfig+0x280>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a83      	ldr	r2, [pc, #524]	@ (8002468 <HAL_RCC_OscConfig+0x280>)
 800225a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800225e:	6013      	str	r3, [r2, #0]
 8002260:	e02e      	b.n	80022c0 <HAL_RCC_OscConfig+0xd8>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d10c      	bne.n	8002284 <HAL_RCC_OscConfig+0x9c>
 800226a:	4b7f      	ldr	r3, [pc, #508]	@ (8002468 <HAL_RCC_OscConfig+0x280>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a7e      	ldr	r2, [pc, #504]	@ (8002468 <HAL_RCC_OscConfig+0x280>)
 8002270:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002274:	6013      	str	r3, [r2, #0]
 8002276:	4b7c      	ldr	r3, [pc, #496]	@ (8002468 <HAL_RCC_OscConfig+0x280>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a7b      	ldr	r2, [pc, #492]	@ (8002468 <HAL_RCC_OscConfig+0x280>)
 800227c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002280:	6013      	str	r3, [r2, #0]
 8002282:	e01d      	b.n	80022c0 <HAL_RCC_OscConfig+0xd8>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800228c:	d10c      	bne.n	80022a8 <HAL_RCC_OscConfig+0xc0>
 800228e:	4b76      	ldr	r3, [pc, #472]	@ (8002468 <HAL_RCC_OscConfig+0x280>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a75      	ldr	r2, [pc, #468]	@ (8002468 <HAL_RCC_OscConfig+0x280>)
 8002294:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002298:	6013      	str	r3, [r2, #0]
 800229a:	4b73      	ldr	r3, [pc, #460]	@ (8002468 <HAL_RCC_OscConfig+0x280>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a72      	ldr	r2, [pc, #456]	@ (8002468 <HAL_RCC_OscConfig+0x280>)
 80022a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022a4:	6013      	str	r3, [r2, #0]
 80022a6:	e00b      	b.n	80022c0 <HAL_RCC_OscConfig+0xd8>
 80022a8:	4b6f      	ldr	r3, [pc, #444]	@ (8002468 <HAL_RCC_OscConfig+0x280>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a6e      	ldr	r2, [pc, #440]	@ (8002468 <HAL_RCC_OscConfig+0x280>)
 80022ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80022b2:	6013      	str	r3, [r2, #0]
 80022b4:	4b6c      	ldr	r3, [pc, #432]	@ (8002468 <HAL_RCC_OscConfig+0x280>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a6b      	ldr	r2, [pc, #428]	@ (8002468 <HAL_RCC_OscConfig+0x280>)
 80022ba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80022be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d013      	beq.n	80022f0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022c8:	f7ff fc44 	bl	8001b54 <HAL_GetTick>
 80022cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022ce:	e008      	b.n	80022e2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022d0:	f7ff fc40 	bl	8001b54 <HAL_GetTick>
 80022d4:	4602      	mov	r2, r0
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	1ad3      	subs	r3, r2, r3
 80022da:	2b64      	cmp	r3, #100	@ 0x64
 80022dc:	d901      	bls.n	80022e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80022de:	2303      	movs	r3, #3
 80022e0:	e21f      	b.n	8002722 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022e2:	4b61      	ldr	r3, [pc, #388]	@ (8002468 <HAL_RCC_OscConfig+0x280>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d0f0      	beq.n	80022d0 <HAL_RCC_OscConfig+0xe8>
 80022ee:	e014      	b.n	800231a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022f0:	f7ff fc30 	bl	8001b54 <HAL_GetTick>
 80022f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022f6:	e008      	b.n	800230a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022f8:	f7ff fc2c 	bl	8001b54 <HAL_GetTick>
 80022fc:	4602      	mov	r2, r0
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	1ad3      	subs	r3, r2, r3
 8002302:	2b64      	cmp	r3, #100	@ 0x64
 8002304:	d901      	bls.n	800230a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002306:	2303      	movs	r3, #3
 8002308:	e20b      	b.n	8002722 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800230a:	4b57      	ldr	r3, [pc, #348]	@ (8002468 <HAL_RCC_OscConfig+0x280>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002312:	2b00      	cmp	r3, #0
 8002314:	d1f0      	bne.n	80022f8 <HAL_RCC_OscConfig+0x110>
 8002316:	e000      	b.n	800231a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002318:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f003 0302 	and.w	r3, r3, #2
 8002322:	2b00      	cmp	r3, #0
 8002324:	d069      	beq.n	80023fa <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002326:	4b50      	ldr	r3, [pc, #320]	@ (8002468 <HAL_RCC_OscConfig+0x280>)
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	f003 030c 	and.w	r3, r3, #12
 800232e:	2b00      	cmp	r3, #0
 8002330:	d00b      	beq.n	800234a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002332:	4b4d      	ldr	r3, [pc, #308]	@ (8002468 <HAL_RCC_OscConfig+0x280>)
 8002334:	689b      	ldr	r3, [r3, #8]
 8002336:	f003 030c 	and.w	r3, r3, #12
 800233a:	2b08      	cmp	r3, #8
 800233c:	d11c      	bne.n	8002378 <HAL_RCC_OscConfig+0x190>
 800233e:	4b4a      	ldr	r3, [pc, #296]	@ (8002468 <HAL_RCC_OscConfig+0x280>)
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002346:	2b00      	cmp	r3, #0
 8002348:	d116      	bne.n	8002378 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800234a:	4b47      	ldr	r3, [pc, #284]	@ (8002468 <HAL_RCC_OscConfig+0x280>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f003 0302 	and.w	r3, r3, #2
 8002352:	2b00      	cmp	r3, #0
 8002354:	d005      	beq.n	8002362 <HAL_RCC_OscConfig+0x17a>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	68db      	ldr	r3, [r3, #12]
 800235a:	2b01      	cmp	r3, #1
 800235c:	d001      	beq.n	8002362 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800235e:	2301      	movs	r3, #1
 8002360:	e1df      	b.n	8002722 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002362:	4b41      	ldr	r3, [pc, #260]	@ (8002468 <HAL_RCC_OscConfig+0x280>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	691b      	ldr	r3, [r3, #16]
 800236e:	00db      	lsls	r3, r3, #3
 8002370:	493d      	ldr	r1, [pc, #244]	@ (8002468 <HAL_RCC_OscConfig+0x280>)
 8002372:	4313      	orrs	r3, r2
 8002374:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002376:	e040      	b.n	80023fa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	68db      	ldr	r3, [r3, #12]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d023      	beq.n	80023c8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002380:	4b39      	ldr	r3, [pc, #228]	@ (8002468 <HAL_RCC_OscConfig+0x280>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a38      	ldr	r2, [pc, #224]	@ (8002468 <HAL_RCC_OscConfig+0x280>)
 8002386:	f043 0301 	orr.w	r3, r3, #1
 800238a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800238c:	f7ff fbe2 	bl	8001b54 <HAL_GetTick>
 8002390:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002392:	e008      	b.n	80023a6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002394:	f7ff fbde 	bl	8001b54 <HAL_GetTick>
 8002398:	4602      	mov	r2, r0
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	1ad3      	subs	r3, r2, r3
 800239e:	2b02      	cmp	r3, #2
 80023a0:	d901      	bls.n	80023a6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80023a2:	2303      	movs	r3, #3
 80023a4:	e1bd      	b.n	8002722 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023a6:	4b30      	ldr	r3, [pc, #192]	@ (8002468 <HAL_RCC_OscConfig+0x280>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f003 0302 	and.w	r3, r3, #2
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d0f0      	beq.n	8002394 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023b2:	4b2d      	ldr	r3, [pc, #180]	@ (8002468 <HAL_RCC_OscConfig+0x280>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	691b      	ldr	r3, [r3, #16]
 80023be:	00db      	lsls	r3, r3, #3
 80023c0:	4929      	ldr	r1, [pc, #164]	@ (8002468 <HAL_RCC_OscConfig+0x280>)
 80023c2:	4313      	orrs	r3, r2
 80023c4:	600b      	str	r3, [r1, #0]
 80023c6:	e018      	b.n	80023fa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023c8:	4b27      	ldr	r3, [pc, #156]	@ (8002468 <HAL_RCC_OscConfig+0x280>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a26      	ldr	r2, [pc, #152]	@ (8002468 <HAL_RCC_OscConfig+0x280>)
 80023ce:	f023 0301 	bic.w	r3, r3, #1
 80023d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023d4:	f7ff fbbe 	bl	8001b54 <HAL_GetTick>
 80023d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023da:	e008      	b.n	80023ee <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023dc:	f7ff fbba 	bl	8001b54 <HAL_GetTick>
 80023e0:	4602      	mov	r2, r0
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	1ad3      	subs	r3, r2, r3
 80023e6:	2b02      	cmp	r3, #2
 80023e8:	d901      	bls.n	80023ee <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80023ea:	2303      	movs	r3, #3
 80023ec:	e199      	b.n	8002722 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023ee:	4b1e      	ldr	r3, [pc, #120]	@ (8002468 <HAL_RCC_OscConfig+0x280>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f003 0302 	and.w	r3, r3, #2
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d1f0      	bne.n	80023dc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f003 0308 	and.w	r3, r3, #8
 8002402:	2b00      	cmp	r3, #0
 8002404:	d038      	beq.n	8002478 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	695b      	ldr	r3, [r3, #20]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d019      	beq.n	8002442 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800240e:	4b16      	ldr	r3, [pc, #88]	@ (8002468 <HAL_RCC_OscConfig+0x280>)
 8002410:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002412:	4a15      	ldr	r2, [pc, #84]	@ (8002468 <HAL_RCC_OscConfig+0x280>)
 8002414:	f043 0301 	orr.w	r3, r3, #1
 8002418:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800241a:	f7ff fb9b 	bl	8001b54 <HAL_GetTick>
 800241e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002420:	e008      	b.n	8002434 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002422:	f7ff fb97 	bl	8001b54 <HAL_GetTick>
 8002426:	4602      	mov	r2, r0
 8002428:	693b      	ldr	r3, [r7, #16]
 800242a:	1ad3      	subs	r3, r2, r3
 800242c:	2b02      	cmp	r3, #2
 800242e:	d901      	bls.n	8002434 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002430:	2303      	movs	r3, #3
 8002432:	e176      	b.n	8002722 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002434:	4b0c      	ldr	r3, [pc, #48]	@ (8002468 <HAL_RCC_OscConfig+0x280>)
 8002436:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002438:	f003 0302 	and.w	r3, r3, #2
 800243c:	2b00      	cmp	r3, #0
 800243e:	d0f0      	beq.n	8002422 <HAL_RCC_OscConfig+0x23a>
 8002440:	e01a      	b.n	8002478 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002442:	4b09      	ldr	r3, [pc, #36]	@ (8002468 <HAL_RCC_OscConfig+0x280>)
 8002444:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002446:	4a08      	ldr	r2, [pc, #32]	@ (8002468 <HAL_RCC_OscConfig+0x280>)
 8002448:	f023 0301 	bic.w	r3, r3, #1
 800244c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800244e:	f7ff fb81 	bl	8001b54 <HAL_GetTick>
 8002452:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002454:	e00a      	b.n	800246c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002456:	f7ff fb7d 	bl	8001b54 <HAL_GetTick>
 800245a:	4602      	mov	r2, r0
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	1ad3      	subs	r3, r2, r3
 8002460:	2b02      	cmp	r3, #2
 8002462:	d903      	bls.n	800246c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002464:	2303      	movs	r3, #3
 8002466:	e15c      	b.n	8002722 <HAL_RCC_OscConfig+0x53a>
 8002468:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800246c:	4b91      	ldr	r3, [pc, #580]	@ (80026b4 <HAL_RCC_OscConfig+0x4cc>)
 800246e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002470:	f003 0302 	and.w	r3, r3, #2
 8002474:	2b00      	cmp	r3, #0
 8002476:	d1ee      	bne.n	8002456 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f003 0304 	and.w	r3, r3, #4
 8002480:	2b00      	cmp	r3, #0
 8002482:	f000 80a4 	beq.w	80025ce <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002486:	4b8b      	ldr	r3, [pc, #556]	@ (80026b4 <HAL_RCC_OscConfig+0x4cc>)
 8002488:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800248a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800248e:	2b00      	cmp	r3, #0
 8002490:	d10d      	bne.n	80024ae <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002492:	4b88      	ldr	r3, [pc, #544]	@ (80026b4 <HAL_RCC_OscConfig+0x4cc>)
 8002494:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002496:	4a87      	ldr	r2, [pc, #540]	@ (80026b4 <HAL_RCC_OscConfig+0x4cc>)
 8002498:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800249c:	6413      	str	r3, [r2, #64]	@ 0x40
 800249e:	4b85      	ldr	r3, [pc, #532]	@ (80026b4 <HAL_RCC_OscConfig+0x4cc>)
 80024a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024a6:	60bb      	str	r3, [r7, #8]
 80024a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024aa:	2301      	movs	r3, #1
 80024ac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024ae:	4b82      	ldr	r3, [pc, #520]	@ (80026b8 <HAL_RCC_OscConfig+0x4d0>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d118      	bne.n	80024ec <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80024ba:	4b7f      	ldr	r3, [pc, #508]	@ (80026b8 <HAL_RCC_OscConfig+0x4d0>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a7e      	ldr	r2, [pc, #504]	@ (80026b8 <HAL_RCC_OscConfig+0x4d0>)
 80024c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024c6:	f7ff fb45 	bl	8001b54 <HAL_GetTick>
 80024ca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024cc:	e008      	b.n	80024e0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024ce:	f7ff fb41 	bl	8001b54 <HAL_GetTick>
 80024d2:	4602      	mov	r2, r0
 80024d4:	693b      	ldr	r3, [r7, #16]
 80024d6:	1ad3      	subs	r3, r2, r3
 80024d8:	2b64      	cmp	r3, #100	@ 0x64
 80024da:	d901      	bls.n	80024e0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80024dc:	2303      	movs	r3, #3
 80024de:	e120      	b.n	8002722 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024e0:	4b75      	ldr	r3, [pc, #468]	@ (80026b8 <HAL_RCC_OscConfig+0x4d0>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d0f0      	beq.n	80024ce <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	2b01      	cmp	r3, #1
 80024f2:	d106      	bne.n	8002502 <HAL_RCC_OscConfig+0x31a>
 80024f4:	4b6f      	ldr	r3, [pc, #444]	@ (80026b4 <HAL_RCC_OscConfig+0x4cc>)
 80024f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024f8:	4a6e      	ldr	r2, [pc, #440]	@ (80026b4 <HAL_RCC_OscConfig+0x4cc>)
 80024fa:	f043 0301 	orr.w	r3, r3, #1
 80024fe:	6713      	str	r3, [r2, #112]	@ 0x70
 8002500:	e02d      	b.n	800255e <HAL_RCC_OscConfig+0x376>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	689b      	ldr	r3, [r3, #8]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d10c      	bne.n	8002524 <HAL_RCC_OscConfig+0x33c>
 800250a:	4b6a      	ldr	r3, [pc, #424]	@ (80026b4 <HAL_RCC_OscConfig+0x4cc>)
 800250c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800250e:	4a69      	ldr	r2, [pc, #420]	@ (80026b4 <HAL_RCC_OscConfig+0x4cc>)
 8002510:	f023 0301 	bic.w	r3, r3, #1
 8002514:	6713      	str	r3, [r2, #112]	@ 0x70
 8002516:	4b67      	ldr	r3, [pc, #412]	@ (80026b4 <HAL_RCC_OscConfig+0x4cc>)
 8002518:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800251a:	4a66      	ldr	r2, [pc, #408]	@ (80026b4 <HAL_RCC_OscConfig+0x4cc>)
 800251c:	f023 0304 	bic.w	r3, r3, #4
 8002520:	6713      	str	r3, [r2, #112]	@ 0x70
 8002522:	e01c      	b.n	800255e <HAL_RCC_OscConfig+0x376>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	2b05      	cmp	r3, #5
 800252a:	d10c      	bne.n	8002546 <HAL_RCC_OscConfig+0x35e>
 800252c:	4b61      	ldr	r3, [pc, #388]	@ (80026b4 <HAL_RCC_OscConfig+0x4cc>)
 800252e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002530:	4a60      	ldr	r2, [pc, #384]	@ (80026b4 <HAL_RCC_OscConfig+0x4cc>)
 8002532:	f043 0304 	orr.w	r3, r3, #4
 8002536:	6713      	str	r3, [r2, #112]	@ 0x70
 8002538:	4b5e      	ldr	r3, [pc, #376]	@ (80026b4 <HAL_RCC_OscConfig+0x4cc>)
 800253a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800253c:	4a5d      	ldr	r2, [pc, #372]	@ (80026b4 <HAL_RCC_OscConfig+0x4cc>)
 800253e:	f043 0301 	orr.w	r3, r3, #1
 8002542:	6713      	str	r3, [r2, #112]	@ 0x70
 8002544:	e00b      	b.n	800255e <HAL_RCC_OscConfig+0x376>
 8002546:	4b5b      	ldr	r3, [pc, #364]	@ (80026b4 <HAL_RCC_OscConfig+0x4cc>)
 8002548:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800254a:	4a5a      	ldr	r2, [pc, #360]	@ (80026b4 <HAL_RCC_OscConfig+0x4cc>)
 800254c:	f023 0301 	bic.w	r3, r3, #1
 8002550:	6713      	str	r3, [r2, #112]	@ 0x70
 8002552:	4b58      	ldr	r3, [pc, #352]	@ (80026b4 <HAL_RCC_OscConfig+0x4cc>)
 8002554:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002556:	4a57      	ldr	r2, [pc, #348]	@ (80026b4 <HAL_RCC_OscConfig+0x4cc>)
 8002558:	f023 0304 	bic.w	r3, r3, #4
 800255c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	689b      	ldr	r3, [r3, #8]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d015      	beq.n	8002592 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002566:	f7ff faf5 	bl	8001b54 <HAL_GetTick>
 800256a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800256c:	e00a      	b.n	8002584 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800256e:	f7ff faf1 	bl	8001b54 <HAL_GetTick>
 8002572:	4602      	mov	r2, r0
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	1ad3      	subs	r3, r2, r3
 8002578:	f241 3288 	movw	r2, #5000	@ 0x1388
 800257c:	4293      	cmp	r3, r2
 800257e:	d901      	bls.n	8002584 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002580:	2303      	movs	r3, #3
 8002582:	e0ce      	b.n	8002722 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002584:	4b4b      	ldr	r3, [pc, #300]	@ (80026b4 <HAL_RCC_OscConfig+0x4cc>)
 8002586:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002588:	f003 0302 	and.w	r3, r3, #2
 800258c:	2b00      	cmp	r3, #0
 800258e:	d0ee      	beq.n	800256e <HAL_RCC_OscConfig+0x386>
 8002590:	e014      	b.n	80025bc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002592:	f7ff fadf 	bl	8001b54 <HAL_GetTick>
 8002596:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002598:	e00a      	b.n	80025b0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800259a:	f7ff fadb 	bl	8001b54 <HAL_GetTick>
 800259e:	4602      	mov	r2, r0
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	1ad3      	subs	r3, r2, r3
 80025a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d901      	bls.n	80025b0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80025ac:	2303      	movs	r3, #3
 80025ae:	e0b8      	b.n	8002722 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025b0:	4b40      	ldr	r3, [pc, #256]	@ (80026b4 <HAL_RCC_OscConfig+0x4cc>)
 80025b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025b4:	f003 0302 	and.w	r3, r3, #2
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d1ee      	bne.n	800259a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80025bc:	7dfb      	ldrb	r3, [r7, #23]
 80025be:	2b01      	cmp	r3, #1
 80025c0:	d105      	bne.n	80025ce <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025c2:	4b3c      	ldr	r3, [pc, #240]	@ (80026b4 <HAL_RCC_OscConfig+0x4cc>)
 80025c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025c6:	4a3b      	ldr	r2, [pc, #236]	@ (80026b4 <HAL_RCC_OscConfig+0x4cc>)
 80025c8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80025cc:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	699b      	ldr	r3, [r3, #24]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	f000 80a4 	beq.w	8002720 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025d8:	4b36      	ldr	r3, [pc, #216]	@ (80026b4 <HAL_RCC_OscConfig+0x4cc>)
 80025da:	689b      	ldr	r3, [r3, #8]
 80025dc:	f003 030c 	and.w	r3, r3, #12
 80025e0:	2b08      	cmp	r3, #8
 80025e2:	d06b      	beq.n	80026bc <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	699b      	ldr	r3, [r3, #24]
 80025e8:	2b02      	cmp	r3, #2
 80025ea:	d149      	bne.n	8002680 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025ec:	4b31      	ldr	r3, [pc, #196]	@ (80026b4 <HAL_RCC_OscConfig+0x4cc>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a30      	ldr	r2, [pc, #192]	@ (80026b4 <HAL_RCC_OscConfig+0x4cc>)
 80025f2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80025f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025f8:	f7ff faac 	bl	8001b54 <HAL_GetTick>
 80025fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025fe:	e008      	b.n	8002612 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002600:	f7ff faa8 	bl	8001b54 <HAL_GetTick>
 8002604:	4602      	mov	r2, r0
 8002606:	693b      	ldr	r3, [r7, #16]
 8002608:	1ad3      	subs	r3, r2, r3
 800260a:	2b02      	cmp	r3, #2
 800260c:	d901      	bls.n	8002612 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800260e:	2303      	movs	r3, #3
 8002610:	e087      	b.n	8002722 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002612:	4b28      	ldr	r3, [pc, #160]	@ (80026b4 <HAL_RCC_OscConfig+0x4cc>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800261a:	2b00      	cmp	r3, #0
 800261c:	d1f0      	bne.n	8002600 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	69da      	ldr	r2, [r3, #28]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6a1b      	ldr	r3, [r3, #32]
 8002626:	431a      	orrs	r2, r3
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800262c:	019b      	lsls	r3, r3, #6
 800262e:	431a      	orrs	r2, r3
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002634:	085b      	lsrs	r3, r3, #1
 8002636:	3b01      	subs	r3, #1
 8002638:	041b      	lsls	r3, r3, #16
 800263a:	431a      	orrs	r2, r3
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002640:	061b      	lsls	r3, r3, #24
 8002642:	4313      	orrs	r3, r2
 8002644:	4a1b      	ldr	r2, [pc, #108]	@ (80026b4 <HAL_RCC_OscConfig+0x4cc>)
 8002646:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800264a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800264c:	4b19      	ldr	r3, [pc, #100]	@ (80026b4 <HAL_RCC_OscConfig+0x4cc>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a18      	ldr	r2, [pc, #96]	@ (80026b4 <HAL_RCC_OscConfig+0x4cc>)
 8002652:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002656:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002658:	f7ff fa7c 	bl	8001b54 <HAL_GetTick>
 800265c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800265e:	e008      	b.n	8002672 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002660:	f7ff fa78 	bl	8001b54 <HAL_GetTick>
 8002664:	4602      	mov	r2, r0
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	1ad3      	subs	r3, r2, r3
 800266a:	2b02      	cmp	r3, #2
 800266c:	d901      	bls.n	8002672 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800266e:	2303      	movs	r3, #3
 8002670:	e057      	b.n	8002722 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002672:	4b10      	ldr	r3, [pc, #64]	@ (80026b4 <HAL_RCC_OscConfig+0x4cc>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800267a:	2b00      	cmp	r3, #0
 800267c:	d0f0      	beq.n	8002660 <HAL_RCC_OscConfig+0x478>
 800267e:	e04f      	b.n	8002720 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002680:	4b0c      	ldr	r3, [pc, #48]	@ (80026b4 <HAL_RCC_OscConfig+0x4cc>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a0b      	ldr	r2, [pc, #44]	@ (80026b4 <HAL_RCC_OscConfig+0x4cc>)
 8002686:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800268a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800268c:	f7ff fa62 	bl	8001b54 <HAL_GetTick>
 8002690:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002692:	e008      	b.n	80026a6 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002694:	f7ff fa5e 	bl	8001b54 <HAL_GetTick>
 8002698:	4602      	mov	r2, r0
 800269a:	693b      	ldr	r3, [r7, #16]
 800269c:	1ad3      	subs	r3, r2, r3
 800269e:	2b02      	cmp	r3, #2
 80026a0:	d901      	bls.n	80026a6 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80026a2:	2303      	movs	r3, #3
 80026a4:	e03d      	b.n	8002722 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026a6:	4b03      	ldr	r3, [pc, #12]	@ (80026b4 <HAL_RCC_OscConfig+0x4cc>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d1f0      	bne.n	8002694 <HAL_RCC_OscConfig+0x4ac>
 80026b2:	e035      	b.n	8002720 <HAL_RCC_OscConfig+0x538>
 80026b4:	40023800 	.word	0x40023800
 80026b8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80026bc:	4b1b      	ldr	r3, [pc, #108]	@ (800272c <HAL_RCC_OscConfig+0x544>)
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	699b      	ldr	r3, [r3, #24]
 80026c6:	2b01      	cmp	r3, #1
 80026c8:	d028      	beq.n	800271c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026d4:	429a      	cmp	r2, r3
 80026d6:	d121      	bne.n	800271c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026e2:	429a      	cmp	r2, r3
 80026e4:	d11a      	bne.n	800271c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80026e6:	68fa      	ldr	r2, [r7, #12]
 80026e8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80026ec:	4013      	ands	r3, r2
 80026ee:	687a      	ldr	r2, [r7, #4]
 80026f0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80026f2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d111      	bne.n	800271c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002702:	085b      	lsrs	r3, r3, #1
 8002704:	3b01      	subs	r3, #1
 8002706:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002708:	429a      	cmp	r2, r3
 800270a:	d107      	bne.n	800271c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002716:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002718:	429a      	cmp	r2, r3
 800271a:	d001      	beq.n	8002720 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800271c:	2301      	movs	r3, #1
 800271e:	e000      	b.n	8002722 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002720:	2300      	movs	r3, #0
}
 8002722:	4618      	mov	r0, r3
 8002724:	3718      	adds	r7, #24
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}
 800272a:	bf00      	nop
 800272c:	40023800 	.word	0x40023800

08002730 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b084      	sub	sp, #16
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
 8002738:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800273a:	2300      	movs	r3, #0
 800273c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d101      	bne.n	8002748 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002744:	2301      	movs	r3, #1
 8002746:	e0d0      	b.n	80028ea <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002748:	4b6a      	ldr	r3, [pc, #424]	@ (80028f4 <HAL_RCC_ClockConfig+0x1c4>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f003 030f 	and.w	r3, r3, #15
 8002750:	683a      	ldr	r2, [r7, #0]
 8002752:	429a      	cmp	r2, r3
 8002754:	d910      	bls.n	8002778 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002756:	4b67      	ldr	r3, [pc, #412]	@ (80028f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f023 020f 	bic.w	r2, r3, #15
 800275e:	4965      	ldr	r1, [pc, #404]	@ (80028f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	4313      	orrs	r3, r2
 8002764:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002766:	4b63      	ldr	r3, [pc, #396]	@ (80028f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f003 030f 	and.w	r3, r3, #15
 800276e:	683a      	ldr	r2, [r7, #0]
 8002770:	429a      	cmp	r2, r3
 8002772:	d001      	beq.n	8002778 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002774:	2301      	movs	r3, #1
 8002776:	e0b8      	b.n	80028ea <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f003 0302 	and.w	r3, r3, #2
 8002780:	2b00      	cmp	r3, #0
 8002782:	d020      	beq.n	80027c6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f003 0304 	and.w	r3, r3, #4
 800278c:	2b00      	cmp	r3, #0
 800278e:	d005      	beq.n	800279c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002790:	4b59      	ldr	r3, [pc, #356]	@ (80028f8 <HAL_RCC_ClockConfig+0x1c8>)
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	4a58      	ldr	r2, [pc, #352]	@ (80028f8 <HAL_RCC_ClockConfig+0x1c8>)
 8002796:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800279a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f003 0308 	and.w	r3, r3, #8
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d005      	beq.n	80027b4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80027a8:	4b53      	ldr	r3, [pc, #332]	@ (80028f8 <HAL_RCC_ClockConfig+0x1c8>)
 80027aa:	689b      	ldr	r3, [r3, #8]
 80027ac:	4a52      	ldr	r2, [pc, #328]	@ (80028f8 <HAL_RCC_ClockConfig+0x1c8>)
 80027ae:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80027b2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027b4:	4b50      	ldr	r3, [pc, #320]	@ (80028f8 <HAL_RCC_ClockConfig+0x1c8>)
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	494d      	ldr	r1, [pc, #308]	@ (80028f8 <HAL_RCC_ClockConfig+0x1c8>)
 80027c2:	4313      	orrs	r3, r2
 80027c4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f003 0301 	and.w	r3, r3, #1
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d040      	beq.n	8002854 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	2b01      	cmp	r3, #1
 80027d8:	d107      	bne.n	80027ea <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027da:	4b47      	ldr	r3, [pc, #284]	@ (80028f8 <HAL_RCC_ClockConfig+0x1c8>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d115      	bne.n	8002812 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	e07f      	b.n	80028ea <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	2b02      	cmp	r3, #2
 80027f0:	d107      	bne.n	8002802 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027f2:	4b41      	ldr	r3, [pc, #260]	@ (80028f8 <HAL_RCC_ClockConfig+0x1c8>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d109      	bne.n	8002812 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
 8002800:	e073      	b.n	80028ea <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002802:	4b3d      	ldr	r3, [pc, #244]	@ (80028f8 <HAL_RCC_ClockConfig+0x1c8>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f003 0302 	and.w	r3, r3, #2
 800280a:	2b00      	cmp	r3, #0
 800280c:	d101      	bne.n	8002812 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	e06b      	b.n	80028ea <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002812:	4b39      	ldr	r3, [pc, #228]	@ (80028f8 <HAL_RCC_ClockConfig+0x1c8>)
 8002814:	689b      	ldr	r3, [r3, #8]
 8002816:	f023 0203 	bic.w	r2, r3, #3
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	4936      	ldr	r1, [pc, #216]	@ (80028f8 <HAL_RCC_ClockConfig+0x1c8>)
 8002820:	4313      	orrs	r3, r2
 8002822:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002824:	f7ff f996 	bl	8001b54 <HAL_GetTick>
 8002828:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800282a:	e00a      	b.n	8002842 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800282c:	f7ff f992 	bl	8001b54 <HAL_GetTick>
 8002830:	4602      	mov	r2, r0
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	1ad3      	subs	r3, r2, r3
 8002836:	f241 3288 	movw	r2, #5000	@ 0x1388
 800283a:	4293      	cmp	r3, r2
 800283c:	d901      	bls.n	8002842 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800283e:	2303      	movs	r3, #3
 8002840:	e053      	b.n	80028ea <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002842:	4b2d      	ldr	r3, [pc, #180]	@ (80028f8 <HAL_RCC_ClockConfig+0x1c8>)
 8002844:	689b      	ldr	r3, [r3, #8]
 8002846:	f003 020c 	and.w	r2, r3, #12
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	009b      	lsls	r3, r3, #2
 8002850:	429a      	cmp	r2, r3
 8002852:	d1eb      	bne.n	800282c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002854:	4b27      	ldr	r3, [pc, #156]	@ (80028f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f003 030f 	and.w	r3, r3, #15
 800285c:	683a      	ldr	r2, [r7, #0]
 800285e:	429a      	cmp	r2, r3
 8002860:	d210      	bcs.n	8002884 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002862:	4b24      	ldr	r3, [pc, #144]	@ (80028f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f023 020f 	bic.w	r2, r3, #15
 800286a:	4922      	ldr	r1, [pc, #136]	@ (80028f4 <HAL_RCC_ClockConfig+0x1c4>)
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	4313      	orrs	r3, r2
 8002870:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002872:	4b20      	ldr	r3, [pc, #128]	@ (80028f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f003 030f 	and.w	r3, r3, #15
 800287a:	683a      	ldr	r2, [r7, #0]
 800287c:	429a      	cmp	r2, r3
 800287e:	d001      	beq.n	8002884 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002880:	2301      	movs	r3, #1
 8002882:	e032      	b.n	80028ea <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f003 0304 	and.w	r3, r3, #4
 800288c:	2b00      	cmp	r3, #0
 800288e:	d008      	beq.n	80028a2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002890:	4b19      	ldr	r3, [pc, #100]	@ (80028f8 <HAL_RCC_ClockConfig+0x1c8>)
 8002892:	689b      	ldr	r3, [r3, #8]
 8002894:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	68db      	ldr	r3, [r3, #12]
 800289c:	4916      	ldr	r1, [pc, #88]	@ (80028f8 <HAL_RCC_ClockConfig+0x1c8>)
 800289e:	4313      	orrs	r3, r2
 80028a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f003 0308 	and.w	r3, r3, #8
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d009      	beq.n	80028c2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80028ae:	4b12      	ldr	r3, [pc, #72]	@ (80028f8 <HAL_RCC_ClockConfig+0x1c8>)
 80028b0:	689b      	ldr	r3, [r3, #8]
 80028b2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	691b      	ldr	r3, [r3, #16]
 80028ba:	00db      	lsls	r3, r3, #3
 80028bc:	490e      	ldr	r1, [pc, #56]	@ (80028f8 <HAL_RCC_ClockConfig+0x1c8>)
 80028be:	4313      	orrs	r3, r2
 80028c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80028c2:	f000 f821 	bl	8002908 <HAL_RCC_GetSysClockFreq>
 80028c6:	4602      	mov	r2, r0
 80028c8:	4b0b      	ldr	r3, [pc, #44]	@ (80028f8 <HAL_RCC_ClockConfig+0x1c8>)
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	091b      	lsrs	r3, r3, #4
 80028ce:	f003 030f 	and.w	r3, r3, #15
 80028d2:	490a      	ldr	r1, [pc, #40]	@ (80028fc <HAL_RCC_ClockConfig+0x1cc>)
 80028d4:	5ccb      	ldrb	r3, [r1, r3]
 80028d6:	fa22 f303 	lsr.w	r3, r2, r3
 80028da:	4a09      	ldr	r2, [pc, #36]	@ (8002900 <HAL_RCC_ClockConfig+0x1d0>)
 80028dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80028de:	4b09      	ldr	r3, [pc, #36]	@ (8002904 <HAL_RCC_ClockConfig+0x1d4>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4618      	mov	r0, r3
 80028e4:	f7ff f8f2 	bl	8001acc <HAL_InitTick>

  return HAL_OK;
 80028e8:	2300      	movs	r3, #0
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	3710      	adds	r7, #16
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}
 80028f2:	bf00      	nop
 80028f4:	40023c00 	.word	0x40023c00
 80028f8:	40023800 	.word	0x40023800
 80028fc:	08007978 	.word	0x08007978
 8002900:	20000100 	.word	0x20000100
 8002904:	20000104 	.word	0x20000104

08002908 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002908:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800290c:	b090      	sub	sp, #64	@ 0x40
 800290e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002910:	2300      	movs	r3, #0
 8002912:	637b      	str	r3, [r7, #52]	@ 0x34
 8002914:	2300      	movs	r3, #0
 8002916:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002918:	2300      	movs	r3, #0
 800291a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 800291c:	2300      	movs	r3, #0
 800291e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002920:	4b59      	ldr	r3, [pc, #356]	@ (8002a88 <HAL_RCC_GetSysClockFreq+0x180>)
 8002922:	689b      	ldr	r3, [r3, #8]
 8002924:	f003 030c 	and.w	r3, r3, #12
 8002928:	2b08      	cmp	r3, #8
 800292a:	d00d      	beq.n	8002948 <HAL_RCC_GetSysClockFreq+0x40>
 800292c:	2b08      	cmp	r3, #8
 800292e:	f200 80a1 	bhi.w	8002a74 <HAL_RCC_GetSysClockFreq+0x16c>
 8002932:	2b00      	cmp	r3, #0
 8002934:	d002      	beq.n	800293c <HAL_RCC_GetSysClockFreq+0x34>
 8002936:	2b04      	cmp	r3, #4
 8002938:	d003      	beq.n	8002942 <HAL_RCC_GetSysClockFreq+0x3a>
 800293a:	e09b      	b.n	8002a74 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800293c:	4b53      	ldr	r3, [pc, #332]	@ (8002a8c <HAL_RCC_GetSysClockFreq+0x184>)
 800293e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002940:	e09b      	b.n	8002a7a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002942:	4b53      	ldr	r3, [pc, #332]	@ (8002a90 <HAL_RCC_GetSysClockFreq+0x188>)
 8002944:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002946:	e098      	b.n	8002a7a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002948:	4b4f      	ldr	r3, [pc, #316]	@ (8002a88 <HAL_RCC_GetSysClockFreq+0x180>)
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002950:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002952:	4b4d      	ldr	r3, [pc, #308]	@ (8002a88 <HAL_RCC_GetSysClockFreq+0x180>)
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800295a:	2b00      	cmp	r3, #0
 800295c:	d028      	beq.n	80029b0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800295e:	4b4a      	ldr	r3, [pc, #296]	@ (8002a88 <HAL_RCC_GetSysClockFreq+0x180>)
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	099b      	lsrs	r3, r3, #6
 8002964:	2200      	movs	r2, #0
 8002966:	623b      	str	r3, [r7, #32]
 8002968:	627a      	str	r2, [r7, #36]	@ 0x24
 800296a:	6a3b      	ldr	r3, [r7, #32]
 800296c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002970:	2100      	movs	r1, #0
 8002972:	4b47      	ldr	r3, [pc, #284]	@ (8002a90 <HAL_RCC_GetSysClockFreq+0x188>)
 8002974:	fb03 f201 	mul.w	r2, r3, r1
 8002978:	2300      	movs	r3, #0
 800297a:	fb00 f303 	mul.w	r3, r0, r3
 800297e:	4413      	add	r3, r2
 8002980:	4a43      	ldr	r2, [pc, #268]	@ (8002a90 <HAL_RCC_GetSysClockFreq+0x188>)
 8002982:	fba0 1202 	umull	r1, r2, r0, r2
 8002986:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002988:	460a      	mov	r2, r1
 800298a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800298c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800298e:	4413      	add	r3, r2
 8002990:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002992:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002994:	2200      	movs	r2, #0
 8002996:	61bb      	str	r3, [r7, #24]
 8002998:	61fa      	str	r2, [r7, #28]
 800299a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800299e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80029a2:	f7fd fc8d 	bl	80002c0 <__aeabi_uldivmod>
 80029a6:	4602      	mov	r2, r0
 80029a8:	460b      	mov	r3, r1
 80029aa:	4613      	mov	r3, r2
 80029ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80029ae:	e053      	b.n	8002a58 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029b0:	4b35      	ldr	r3, [pc, #212]	@ (8002a88 <HAL_RCC_GetSysClockFreq+0x180>)
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	099b      	lsrs	r3, r3, #6
 80029b6:	2200      	movs	r2, #0
 80029b8:	613b      	str	r3, [r7, #16]
 80029ba:	617a      	str	r2, [r7, #20]
 80029bc:	693b      	ldr	r3, [r7, #16]
 80029be:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80029c2:	f04f 0b00 	mov.w	fp, #0
 80029c6:	4652      	mov	r2, sl
 80029c8:	465b      	mov	r3, fp
 80029ca:	f04f 0000 	mov.w	r0, #0
 80029ce:	f04f 0100 	mov.w	r1, #0
 80029d2:	0159      	lsls	r1, r3, #5
 80029d4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80029d8:	0150      	lsls	r0, r2, #5
 80029da:	4602      	mov	r2, r0
 80029dc:	460b      	mov	r3, r1
 80029de:	ebb2 080a 	subs.w	r8, r2, sl
 80029e2:	eb63 090b 	sbc.w	r9, r3, fp
 80029e6:	f04f 0200 	mov.w	r2, #0
 80029ea:	f04f 0300 	mov.w	r3, #0
 80029ee:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80029f2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80029f6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80029fa:	ebb2 0408 	subs.w	r4, r2, r8
 80029fe:	eb63 0509 	sbc.w	r5, r3, r9
 8002a02:	f04f 0200 	mov.w	r2, #0
 8002a06:	f04f 0300 	mov.w	r3, #0
 8002a0a:	00eb      	lsls	r3, r5, #3
 8002a0c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002a10:	00e2      	lsls	r2, r4, #3
 8002a12:	4614      	mov	r4, r2
 8002a14:	461d      	mov	r5, r3
 8002a16:	eb14 030a 	adds.w	r3, r4, sl
 8002a1a:	603b      	str	r3, [r7, #0]
 8002a1c:	eb45 030b 	adc.w	r3, r5, fp
 8002a20:	607b      	str	r3, [r7, #4]
 8002a22:	f04f 0200 	mov.w	r2, #0
 8002a26:	f04f 0300 	mov.w	r3, #0
 8002a2a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002a2e:	4629      	mov	r1, r5
 8002a30:	028b      	lsls	r3, r1, #10
 8002a32:	4621      	mov	r1, r4
 8002a34:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002a38:	4621      	mov	r1, r4
 8002a3a:	028a      	lsls	r2, r1, #10
 8002a3c:	4610      	mov	r0, r2
 8002a3e:	4619      	mov	r1, r3
 8002a40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a42:	2200      	movs	r2, #0
 8002a44:	60bb      	str	r3, [r7, #8]
 8002a46:	60fa      	str	r2, [r7, #12]
 8002a48:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002a4c:	f7fd fc38 	bl	80002c0 <__aeabi_uldivmod>
 8002a50:	4602      	mov	r2, r0
 8002a52:	460b      	mov	r3, r1
 8002a54:	4613      	mov	r3, r2
 8002a56:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002a58:	4b0b      	ldr	r3, [pc, #44]	@ (8002a88 <HAL_RCC_GetSysClockFreq+0x180>)
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	0c1b      	lsrs	r3, r3, #16
 8002a5e:	f003 0303 	and.w	r3, r3, #3
 8002a62:	3301      	adds	r3, #1
 8002a64:	005b      	lsls	r3, r3, #1
 8002a66:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002a68:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002a6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a70:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002a72:	e002      	b.n	8002a7a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a74:	4b05      	ldr	r3, [pc, #20]	@ (8002a8c <HAL_RCC_GetSysClockFreq+0x184>)
 8002a76:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002a78:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	3740      	adds	r7, #64	@ 0x40
 8002a80:	46bd      	mov	sp, r7
 8002a82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a86:	bf00      	nop
 8002a88:	40023800 	.word	0x40023800
 8002a8c:	00f42400 	.word	0x00f42400
 8002a90:	017d7840 	.word	0x017d7840

08002a94 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a94:	b480      	push	{r7}
 8002a96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a98:	4b03      	ldr	r3, [pc, #12]	@ (8002aa8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr
 8002aa6:	bf00      	nop
 8002aa8:	20000100 	.word	0x20000100

08002aac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002ab0:	f7ff fff0 	bl	8002a94 <HAL_RCC_GetHCLKFreq>
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	4b05      	ldr	r3, [pc, #20]	@ (8002acc <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	0a9b      	lsrs	r3, r3, #10
 8002abc:	f003 0307 	and.w	r3, r3, #7
 8002ac0:	4903      	ldr	r1, [pc, #12]	@ (8002ad0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ac2:	5ccb      	ldrb	r3, [r1, r3]
 8002ac4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	bd80      	pop	{r7, pc}
 8002acc:	40023800 	.word	0x40023800
 8002ad0:	08007988 	.word	0x08007988

08002ad4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002ad8:	f7ff ffdc 	bl	8002a94 <HAL_RCC_GetHCLKFreq>
 8002adc:	4602      	mov	r2, r0
 8002ade:	4b05      	ldr	r3, [pc, #20]	@ (8002af4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ae0:	689b      	ldr	r3, [r3, #8]
 8002ae2:	0b5b      	lsrs	r3, r3, #13
 8002ae4:	f003 0307 	and.w	r3, r3, #7
 8002ae8:	4903      	ldr	r1, [pc, #12]	@ (8002af8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002aea:	5ccb      	ldrb	r3, [r1, r3]
 8002aec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	bd80      	pop	{r7, pc}
 8002af4:	40023800 	.word	0x40023800
 8002af8:	08007988 	.word	0x08007988

08002afc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b088      	sub	sp, #32
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002b04:	2300      	movs	r3, #0
 8002b06:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002b10:	2300      	movs	r3, #0
 8002b12:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002b14:	2300      	movs	r3, #0
 8002b16:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f003 0301 	and.w	r3, r3, #1
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d012      	beq.n	8002b4a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002b24:	4b69      	ldr	r3, [pc, #420]	@ (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b26:	689b      	ldr	r3, [r3, #8]
 8002b28:	4a68      	ldr	r2, [pc, #416]	@ (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b2a:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002b2e:	6093      	str	r3, [r2, #8]
 8002b30:	4b66      	ldr	r3, [pc, #408]	@ (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b32:	689a      	ldr	r2, [r3, #8]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b38:	4964      	ldr	r1, [pc, #400]	@ (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d101      	bne.n	8002b4a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002b46:	2301      	movs	r3, #1
 8002b48:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d017      	beq.n	8002b86 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002b56:	4b5d      	ldr	r3, [pc, #372]	@ (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b58:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002b5c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b64:	4959      	ldr	r1, [pc, #356]	@ (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b66:	4313      	orrs	r3, r2
 8002b68:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b70:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002b74:	d101      	bne.n	8002b7a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002b76:	2301      	movs	r3, #1
 8002b78:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d101      	bne.n	8002b86 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002b82:	2301      	movs	r3, #1
 8002b84:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d017      	beq.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002b92:	4b4e      	ldr	r3, [pc, #312]	@ (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b94:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002b98:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ba0:	494a      	ldr	r1, [pc, #296]	@ (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bac:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002bb0:	d101      	bne.n	8002bb6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d101      	bne.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d001      	beq.n	8002bd2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 0320 	and.w	r3, r3, #32
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	f000 808b 	beq.w	8002cf6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002be0:	4b3a      	ldr	r3, [pc, #232]	@ (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002be2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002be4:	4a39      	ldr	r2, [pc, #228]	@ (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002be6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002bea:	6413      	str	r3, [r2, #64]	@ 0x40
 8002bec:	4b37      	ldr	r3, [pc, #220]	@ (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bf0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bf4:	60bb      	str	r3, [r7, #8]
 8002bf6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002bf8:	4b35      	ldr	r3, [pc, #212]	@ (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a34      	ldr	r2, [pc, #208]	@ (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002bfe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c02:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c04:	f7fe ffa6 	bl	8001b54 <HAL_GetTick>
 8002c08:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002c0a:	e008      	b.n	8002c1e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c0c:	f7fe ffa2 	bl	8001b54 <HAL_GetTick>
 8002c10:	4602      	mov	r2, r0
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	1ad3      	subs	r3, r2, r3
 8002c16:	2b64      	cmp	r3, #100	@ 0x64
 8002c18:	d901      	bls.n	8002c1e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002c1a:	2303      	movs	r3, #3
 8002c1c:	e357      	b.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002c1e:	4b2c      	ldr	r3, [pc, #176]	@ (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d0f0      	beq.n	8002c0c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002c2a:	4b28      	ldr	r3, [pc, #160]	@ (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c2e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002c32:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d035      	beq.n	8002ca6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c3e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002c42:	693a      	ldr	r2, [r7, #16]
 8002c44:	429a      	cmp	r2, r3
 8002c46:	d02e      	beq.n	8002ca6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002c48:	4b20      	ldr	r3, [pc, #128]	@ (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c4c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c50:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002c52:	4b1e      	ldr	r3, [pc, #120]	@ (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c56:	4a1d      	ldr	r2, [pc, #116]	@ (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c58:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c5c:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002c5e:	4b1b      	ldr	r3, [pc, #108]	@ (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c62:	4a1a      	ldr	r2, [pc, #104]	@ (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c64:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c68:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002c6a:	4a18      	ldr	r2, [pc, #96]	@ (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c6c:	693b      	ldr	r3, [r7, #16]
 8002c6e:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002c70:	4b16      	ldr	r3, [pc, #88]	@ (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c74:	f003 0301 	and.w	r3, r3, #1
 8002c78:	2b01      	cmp	r3, #1
 8002c7a:	d114      	bne.n	8002ca6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c7c:	f7fe ff6a 	bl	8001b54 <HAL_GetTick>
 8002c80:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c82:	e00a      	b.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c84:	f7fe ff66 	bl	8001b54 <HAL_GetTick>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	697b      	ldr	r3, [r7, #20]
 8002c8c:	1ad3      	subs	r3, r2, r3
 8002c8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d901      	bls.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002c96:	2303      	movs	r3, #3
 8002c98:	e319      	b.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c9a:	4b0c      	ldr	r3, [pc, #48]	@ (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c9e:	f003 0302 	and.w	r3, r3, #2
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d0ee      	beq.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002caa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002cae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002cb2:	d111      	bne.n	8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002cb4:	4b05      	ldr	r3, [pc, #20]	@ (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cb6:	689b      	ldr	r3, [r3, #8]
 8002cb8:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002cc0:	4b04      	ldr	r3, [pc, #16]	@ (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002cc2:	400b      	ands	r3, r1
 8002cc4:	4901      	ldr	r1, [pc, #4]	@ (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	608b      	str	r3, [r1, #8]
 8002cca:	e00b      	b.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002ccc:	40023800 	.word	0x40023800
 8002cd0:	40007000 	.word	0x40007000
 8002cd4:	0ffffcff 	.word	0x0ffffcff
 8002cd8:	4baa      	ldr	r3, [pc, #680]	@ (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	4aa9      	ldr	r2, [pc, #676]	@ (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002cde:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8002ce2:	6093      	str	r3, [r2, #8]
 8002ce4:	4ba7      	ldr	r3, [pc, #668]	@ (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ce6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cf0:	49a4      	ldr	r1, [pc, #656]	@ (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f003 0310 	and.w	r3, r3, #16
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d010      	beq.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002d02:	4ba0      	ldr	r3, [pc, #640]	@ (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d04:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002d08:	4a9e      	ldr	r2, [pc, #632]	@ (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d0a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002d0e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002d12:	4b9c      	ldr	r3, [pc, #624]	@ (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d14:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d1c:	4999      	ldr	r1, [pc, #612]	@ (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d00a      	beq.n	8002d46 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002d30:	4b94      	ldr	r3, [pc, #592]	@ (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d36:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002d3e:	4991      	ldr	r1, [pc, #580]	@ (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d40:	4313      	orrs	r3, r2
 8002d42:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d00a      	beq.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002d52:	4b8c      	ldr	r3, [pc, #560]	@ (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d58:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002d60:	4988      	ldr	r1, [pc, #544]	@ (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d62:	4313      	orrs	r3, r2
 8002d64:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d00a      	beq.n	8002d8a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002d74:	4b83      	ldr	r3, [pc, #524]	@ (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d7a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002d82:	4980      	ldr	r1, [pc, #512]	@ (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d84:	4313      	orrs	r3, r2
 8002d86:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d00a      	beq.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002d96:	4b7b      	ldr	r3, [pc, #492]	@ (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d9c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002da4:	4977      	ldr	r1, [pc, #476]	@ (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002da6:	4313      	orrs	r3, r2
 8002da8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d00a      	beq.n	8002dce <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002db8:	4b72      	ldr	r3, [pc, #456]	@ (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002dba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002dbe:	f023 0203 	bic.w	r2, r3, #3
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dc6:	496f      	ldr	r1, [pc, #444]	@ (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d00a      	beq.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002dda:	4b6a      	ldr	r3, [pc, #424]	@ (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ddc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002de0:	f023 020c 	bic.w	r2, r3, #12
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002de8:	4966      	ldr	r1, [pc, #408]	@ (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002dea:	4313      	orrs	r3, r2
 8002dec:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d00a      	beq.n	8002e12 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002dfc:	4b61      	ldr	r3, [pc, #388]	@ (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002dfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e02:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e0a:	495e      	ldr	r1, [pc, #376]	@ (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d00a      	beq.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002e1e:	4b59      	ldr	r3, [pc, #356]	@ (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e24:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e2c:	4955      	ldr	r1, [pc, #340]	@ (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d00a      	beq.n	8002e56 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002e40:	4b50      	ldr	r3, [pc, #320]	@ (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e46:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e4e:	494d      	ldr	r1, [pc, #308]	@ (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e50:	4313      	orrs	r3, r2
 8002e52:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d00a      	beq.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002e62:	4b48      	ldr	r3, [pc, #288]	@ (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e68:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e70:	4944      	ldr	r1, [pc, #272]	@ (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e72:	4313      	orrs	r3, r2
 8002e74:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d00a      	beq.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002e84:	4b3f      	ldr	r3, [pc, #252]	@ (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e8a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e92:	493c      	ldr	r1, [pc, #240]	@ (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e94:	4313      	orrs	r3, r2
 8002e96:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d00a      	beq.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002ea6:	4b37      	ldr	r3, [pc, #220]	@ (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ea8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002eac:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002eb4:	4933      	ldr	r1, [pc, #204]	@ (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d00a      	beq.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002ec8:	4b2e      	ldr	r3, [pc, #184]	@ (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002eca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ece:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002ed6:	492b      	ldr	r1, [pc, #172]	@ (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d011      	beq.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002eea:	4b26      	ldr	r3, [pc, #152]	@ (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002eec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ef0:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002ef8:	4922      	ldr	r1, [pc, #136]	@ (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002efa:	4313      	orrs	r3, r2
 8002efc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002f04:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002f08:	d101      	bne.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f003 0308 	and.w	r3, r3, #8
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d001      	beq.n	8002f1e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d00a      	beq.n	8002f40 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002f2a:	4b16      	ldr	r3, [pc, #88]	@ (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f30:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f38:	4912      	ldr	r1, [pc, #72]	@ (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d00b      	beq.n	8002f64 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002f4c:	4b0d      	ldr	r3, [pc, #52]	@ (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f52:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002f5c:	4909      	ldr	r1, [pc, #36]	@ (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002f64:	69fb      	ldr	r3, [r7, #28]
 8002f66:	2b01      	cmp	r3, #1
 8002f68:	d006      	beq.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	f000 80d9 	beq.w	800312a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002f78:	4b02      	ldr	r3, [pc, #8]	@ (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a01      	ldr	r2, [pc, #4]	@ (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f7e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002f82:	e001      	b.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8002f84:	40023800 	.word	0x40023800
 8002f88:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f8a:	f7fe fde3 	bl	8001b54 <HAL_GetTick>
 8002f8e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002f90:	e008      	b.n	8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002f92:	f7fe fddf 	bl	8001b54 <HAL_GetTick>
 8002f96:	4602      	mov	r2, r0
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	1ad3      	subs	r3, r2, r3
 8002f9c:	2b64      	cmp	r3, #100	@ 0x64
 8002f9e:	d901      	bls.n	8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002fa0:	2303      	movs	r3, #3
 8002fa2:	e194      	b.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002fa4:	4b6c      	ldr	r3, [pc, #432]	@ (8003158 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d1f0      	bne.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f003 0301 	and.w	r3, r3, #1
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d021      	beq.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d11d      	bne.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002fc4:	4b64      	ldr	r3, [pc, #400]	@ (8003158 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002fc6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002fca:	0c1b      	lsrs	r3, r3, #16
 8002fcc:	f003 0303 	and.w	r3, r3, #3
 8002fd0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002fd2:	4b61      	ldr	r3, [pc, #388]	@ (8003158 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002fd4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002fd8:	0e1b      	lsrs	r3, r3, #24
 8002fda:	f003 030f 	and.w	r3, r3, #15
 8002fde:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	019a      	lsls	r2, r3, #6
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	041b      	lsls	r3, r3, #16
 8002fea:	431a      	orrs	r2, r3
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	061b      	lsls	r3, r3, #24
 8002ff0:	431a      	orrs	r2, r3
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	071b      	lsls	r3, r3, #28
 8002ff8:	4957      	ldr	r1, [pc, #348]	@ (8003158 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003008:	2b00      	cmp	r3, #0
 800300a:	d004      	beq.n	8003016 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003010:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003014:	d00a      	beq.n	800302c <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800301e:	2b00      	cmp	r3, #0
 8003020:	d02e      	beq.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003026:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800302a:	d129      	bne.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800302c:	4b4a      	ldr	r3, [pc, #296]	@ (8003158 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800302e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003032:	0c1b      	lsrs	r3, r3, #16
 8003034:	f003 0303 	and.w	r3, r3, #3
 8003038:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800303a:	4b47      	ldr	r3, [pc, #284]	@ (8003158 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800303c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003040:	0f1b      	lsrs	r3, r3, #28
 8003042:	f003 0307 	and.w	r3, r3, #7
 8003046:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	019a      	lsls	r2, r3, #6
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	041b      	lsls	r3, r3, #16
 8003052:	431a      	orrs	r2, r3
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	68db      	ldr	r3, [r3, #12]
 8003058:	061b      	lsls	r3, r3, #24
 800305a:	431a      	orrs	r2, r3
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	071b      	lsls	r3, r3, #28
 8003060:	493d      	ldr	r1, [pc, #244]	@ (8003158 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003062:	4313      	orrs	r3, r2
 8003064:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003068:	4b3b      	ldr	r3, [pc, #236]	@ (8003158 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800306a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800306e:	f023 021f 	bic.w	r2, r3, #31
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003076:	3b01      	subs	r3, #1
 8003078:	4937      	ldr	r1, [pc, #220]	@ (8003158 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800307a:	4313      	orrs	r3, r2
 800307c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003088:	2b00      	cmp	r3, #0
 800308a:	d01d      	beq.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800308c:	4b32      	ldr	r3, [pc, #200]	@ (8003158 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800308e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003092:	0e1b      	lsrs	r3, r3, #24
 8003094:	f003 030f 	and.w	r3, r3, #15
 8003098:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800309a:	4b2f      	ldr	r3, [pc, #188]	@ (8003158 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800309c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80030a0:	0f1b      	lsrs	r3, r3, #28
 80030a2:	f003 0307 	and.w	r3, r3, #7
 80030a6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	019a      	lsls	r2, r3, #6
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	691b      	ldr	r3, [r3, #16]
 80030b2:	041b      	lsls	r3, r3, #16
 80030b4:	431a      	orrs	r2, r3
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	061b      	lsls	r3, r3, #24
 80030ba:	431a      	orrs	r2, r3
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	071b      	lsls	r3, r3, #28
 80030c0:	4925      	ldr	r1, [pc, #148]	@ (8003158 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80030c2:	4313      	orrs	r3, r2
 80030c4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d011      	beq.n	80030f8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	019a      	lsls	r2, r3, #6
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	691b      	ldr	r3, [r3, #16]
 80030de:	041b      	lsls	r3, r3, #16
 80030e0:	431a      	orrs	r2, r3
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	68db      	ldr	r3, [r3, #12]
 80030e6:	061b      	lsls	r3, r3, #24
 80030e8:	431a      	orrs	r2, r3
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	689b      	ldr	r3, [r3, #8]
 80030ee:	071b      	lsls	r3, r3, #28
 80030f0:	4919      	ldr	r1, [pc, #100]	@ (8003158 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80030f2:	4313      	orrs	r3, r2
 80030f4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80030f8:	4b17      	ldr	r3, [pc, #92]	@ (8003158 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a16      	ldr	r2, [pc, #88]	@ (8003158 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80030fe:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003102:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003104:	f7fe fd26 	bl	8001b54 <HAL_GetTick>
 8003108:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800310a:	e008      	b.n	800311e <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800310c:	f7fe fd22 	bl	8001b54 <HAL_GetTick>
 8003110:	4602      	mov	r2, r0
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	1ad3      	subs	r3, r2, r3
 8003116:	2b64      	cmp	r3, #100	@ 0x64
 8003118:	d901      	bls.n	800311e <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800311a:	2303      	movs	r3, #3
 800311c:	e0d7      	b.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800311e:	4b0e      	ldr	r3, [pc, #56]	@ (8003158 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003126:	2b00      	cmp	r3, #0
 8003128:	d0f0      	beq.n	800310c <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800312a:	69bb      	ldr	r3, [r7, #24]
 800312c:	2b01      	cmp	r3, #1
 800312e:	f040 80cd 	bne.w	80032cc <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003132:	4b09      	ldr	r3, [pc, #36]	@ (8003158 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a08      	ldr	r2, [pc, #32]	@ (8003158 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003138:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800313c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800313e:	f7fe fd09 	bl	8001b54 <HAL_GetTick>
 8003142:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003144:	e00a      	b.n	800315c <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003146:	f7fe fd05 	bl	8001b54 <HAL_GetTick>
 800314a:	4602      	mov	r2, r0
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	1ad3      	subs	r3, r2, r3
 8003150:	2b64      	cmp	r3, #100	@ 0x64
 8003152:	d903      	bls.n	800315c <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003154:	2303      	movs	r3, #3
 8003156:	e0ba      	b.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8003158:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800315c:	4b5e      	ldr	r3, [pc, #376]	@ (80032d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003164:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003168:	d0ed      	beq.n	8003146 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003172:	2b00      	cmp	r3, #0
 8003174:	d003      	beq.n	800317e <HAL_RCCEx_PeriphCLKConfig+0x682>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800317a:	2b00      	cmp	r3, #0
 800317c:	d009      	beq.n	8003192 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003186:	2b00      	cmp	r3, #0
 8003188:	d02e      	beq.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800318e:	2b00      	cmp	r3, #0
 8003190:	d12a      	bne.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003192:	4b51      	ldr	r3, [pc, #324]	@ (80032d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003194:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003198:	0c1b      	lsrs	r3, r3, #16
 800319a:	f003 0303 	and.w	r3, r3, #3
 800319e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80031a0:	4b4d      	ldr	r3, [pc, #308]	@ (80032d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80031a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031a6:	0f1b      	lsrs	r3, r3, #28
 80031a8:	f003 0307 	and.w	r3, r3, #7
 80031ac:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	695b      	ldr	r3, [r3, #20]
 80031b2:	019a      	lsls	r2, r3, #6
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	041b      	lsls	r3, r3, #16
 80031b8:	431a      	orrs	r2, r3
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	699b      	ldr	r3, [r3, #24]
 80031be:	061b      	lsls	r3, r3, #24
 80031c0:	431a      	orrs	r2, r3
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	071b      	lsls	r3, r3, #28
 80031c6:	4944      	ldr	r1, [pc, #272]	@ (80032d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80031c8:	4313      	orrs	r3, r2
 80031ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80031ce:	4b42      	ldr	r3, [pc, #264]	@ (80032d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80031d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80031d4:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031dc:	3b01      	subs	r3, #1
 80031de:	021b      	lsls	r3, r3, #8
 80031e0:	493d      	ldr	r1, [pc, #244]	@ (80032d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80031e2:	4313      	orrs	r3, r2
 80031e4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d022      	beq.n	800323a <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80031f8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80031fc:	d11d      	bne.n	800323a <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80031fe:	4b36      	ldr	r3, [pc, #216]	@ (80032d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003200:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003204:	0e1b      	lsrs	r3, r3, #24
 8003206:	f003 030f 	and.w	r3, r3, #15
 800320a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800320c:	4b32      	ldr	r3, [pc, #200]	@ (80032d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800320e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003212:	0f1b      	lsrs	r3, r3, #28
 8003214:	f003 0307 	and.w	r3, r3, #7
 8003218:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	695b      	ldr	r3, [r3, #20]
 800321e:	019a      	lsls	r2, r3, #6
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6a1b      	ldr	r3, [r3, #32]
 8003224:	041b      	lsls	r3, r3, #16
 8003226:	431a      	orrs	r2, r3
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	061b      	lsls	r3, r3, #24
 800322c:	431a      	orrs	r2, r3
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	071b      	lsls	r3, r3, #28
 8003232:	4929      	ldr	r1, [pc, #164]	@ (80032d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003234:	4313      	orrs	r3, r2
 8003236:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f003 0308 	and.w	r3, r3, #8
 8003242:	2b00      	cmp	r3, #0
 8003244:	d028      	beq.n	8003298 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003246:	4b24      	ldr	r3, [pc, #144]	@ (80032d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003248:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800324c:	0e1b      	lsrs	r3, r3, #24
 800324e:	f003 030f 	and.w	r3, r3, #15
 8003252:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003254:	4b20      	ldr	r3, [pc, #128]	@ (80032d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003256:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800325a:	0c1b      	lsrs	r3, r3, #16
 800325c:	f003 0303 	and.w	r3, r3, #3
 8003260:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	695b      	ldr	r3, [r3, #20]
 8003266:	019a      	lsls	r2, r3, #6
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	041b      	lsls	r3, r3, #16
 800326c:	431a      	orrs	r2, r3
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	061b      	lsls	r3, r3, #24
 8003272:	431a      	orrs	r2, r3
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	69db      	ldr	r3, [r3, #28]
 8003278:	071b      	lsls	r3, r3, #28
 800327a:	4917      	ldr	r1, [pc, #92]	@ (80032d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800327c:	4313      	orrs	r3, r2
 800327e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003282:	4b15      	ldr	r3, [pc, #84]	@ (80032d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003284:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003288:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003290:	4911      	ldr	r1, [pc, #68]	@ (80032d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003292:	4313      	orrs	r3, r2
 8003294:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003298:	4b0f      	ldr	r3, [pc, #60]	@ (80032d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a0e      	ldr	r2, [pc, #56]	@ (80032d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800329e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80032a2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032a4:	f7fe fc56 	bl	8001b54 <HAL_GetTick>
 80032a8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80032aa:	e008      	b.n	80032be <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80032ac:	f7fe fc52 	bl	8001b54 <HAL_GetTick>
 80032b0:	4602      	mov	r2, r0
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	1ad3      	subs	r3, r2, r3
 80032b6:	2b64      	cmp	r3, #100	@ 0x64
 80032b8:	d901      	bls.n	80032be <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80032ba:	2303      	movs	r3, #3
 80032bc:	e007      	b.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80032be:	4b06      	ldr	r3, [pc, #24]	@ (80032d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80032c6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80032ca:	d1ef      	bne.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80032cc:	2300      	movs	r3, #0
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	3720      	adds	r7, #32
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}
 80032d6:	bf00      	nop
 80032d8:	40023800 	.word	0x40023800

080032dc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b082      	sub	sp, #8
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d101      	bne.n	80032ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	e040      	b.n	8003370 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d106      	bne.n	8003304 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2200      	movs	r2, #0
 80032fa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80032fe:	6878      	ldr	r0, [r7, #4]
 8003300:	f7fe fb2c 	bl	800195c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2224      	movs	r2, #36	@ 0x24
 8003308:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	681a      	ldr	r2, [r3, #0]
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f022 0201 	bic.w	r2, r2, #1
 8003318:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800331e:	2b00      	cmp	r3, #0
 8003320:	d002      	beq.n	8003328 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003322:	6878      	ldr	r0, [r7, #4]
 8003324:	f000 fbde 	bl	8003ae4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003328:	6878      	ldr	r0, [r7, #4]
 800332a:	f000 f977 	bl	800361c <UART_SetConfig>
 800332e:	4603      	mov	r3, r0
 8003330:	2b01      	cmp	r3, #1
 8003332:	d101      	bne.n	8003338 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003334:	2301      	movs	r3, #1
 8003336:	e01b      	b.n	8003370 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	685a      	ldr	r2, [r3, #4]
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003346:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	689a      	ldr	r2, [r3, #8]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003356:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	681a      	ldr	r2, [r3, #0]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f042 0201 	orr.w	r2, r2, #1
 8003366:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003368:	6878      	ldr	r0, [r7, #4]
 800336a:	f000 fc5d 	bl	8003c28 <UART_CheckIdleState>
 800336e:	4603      	mov	r3, r0
}
 8003370:	4618      	mov	r0, r3
 8003372:	3708      	adds	r7, #8
 8003374:	46bd      	mov	sp, r7
 8003376:	bd80      	pop	{r7, pc}

08003378 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b08a      	sub	sp, #40	@ 0x28
 800337c:	af02      	add	r7, sp, #8
 800337e:	60f8      	str	r0, [r7, #12]
 8003380:	60b9      	str	r1, [r7, #8]
 8003382:	603b      	str	r3, [r7, #0]
 8003384:	4613      	mov	r3, r2
 8003386:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800338c:	2b20      	cmp	r3, #32
 800338e:	d177      	bne.n	8003480 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d002      	beq.n	800339c <HAL_UART_Transmit+0x24>
 8003396:	88fb      	ldrh	r3, [r7, #6]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d101      	bne.n	80033a0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800339c:	2301      	movs	r3, #1
 800339e:	e070      	b.n	8003482 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	2200      	movs	r2, #0
 80033a4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	2221      	movs	r2, #33	@ 0x21
 80033ac:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80033ae:	f7fe fbd1 	bl	8001b54 <HAL_GetTick>
 80033b2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	88fa      	ldrh	r2, [r7, #6]
 80033b8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	88fa      	ldrh	r2, [r7, #6]
 80033c0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	689b      	ldr	r3, [r3, #8]
 80033c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80033cc:	d108      	bne.n	80033e0 <HAL_UART_Transmit+0x68>
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	691b      	ldr	r3, [r3, #16]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d104      	bne.n	80033e0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80033d6:	2300      	movs	r3, #0
 80033d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80033da:	68bb      	ldr	r3, [r7, #8]
 80033dc:	61bb      	str	r3, [r7, #24]
 80033de:	e003      	b.n	80033e8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80033e4:	2300      	movs	r3, #0
 80033e6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80033e8:	e02f      	b.n	800344a <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	9300      	str	r3, [sp, #0]
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	2200      	movs	r2, #0
 80033f2:	2180      	movs	r1, #128	@ 0x80
 80033f4:	68f8      	ldr	r0, [r7, #12]
 80033f6:	f000 fc6e 	bl	8003cd6 <UART_WaitOnFlagUntilTimeout>
 80033fa:	4603      	mov	r3, r0
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d004      	beq.n	800340a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	2220      	movs	r2, #32
 8003404:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8003406:	2303      	movs	r3, #3
 8003408:	e03b      	b.n	8003482 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800340a:	69fb      	ldr	r3, [r7, #28]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d10b      	bne.n	8003428 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003410:	69bb      	ldr	r3, [r7, #24]
 8003412:	881b      	ldrh	r3, [r3, #0]
 8003414:	461a      	mov	r2, r3
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800341e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003420:	69bb      	ldr	r3, [r7, #24]
 8003422:	3302      	adds	r3, #2
 8003424:	61bb      	str	r3, [r7, #24]
 8003426:	e007      	b.n	8003438 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003428:	69fb      	ldr	r3, [r7, #28]
 800342a:	781a      	ldrb	r2, [r3, #0]
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003432:	69fb      	ldr	r3, [r7, #28]
 8003434:	3301      	adds	r3, #1
 8003436:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800343e:	b29b      	uxth	r3, r3
 8003440:	3b01      	subs	r3, #1
 8003442:	b29a      	uxth	r2, r3
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003450:	b29b      	uxth	r3, r3
 8003452:	2b00      	cmp	r3, #0
 8003454:	d1c9      	bne.n	80033ea <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	9300      	str	r3, [sp, #0]
 800345a:	697b      	ldr	r3, [r7, #20]
 800345c:	2200      	movs	r2, #0
 800345e:	2140      	movs	r1, #64	@ 0x40
 8003460:	68f8      	ldr	r0, [r7, #12]
 8003462:	f000 fc38 	bl	8003cd6 <UART_WaitOnFlagUntilTimeout>
 8003466:	4603      	mov	r3, r0
 8003468:	2b00      	cmp	r3, #0
 800346a:	d004      	beq.n	8003476 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	2220      	movs	r2, #32
 8003470:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8003472:	2303      	movs	r3, #3
 8003474:	e005      	b.n	8003482 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	2220      	movs	r2, #32
 800347a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800347c:	2300      	movs	r3, #0
 800347e:	e000      	b.n	8003482 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003480:	2302      	movs	r3, #2
  }
}
 8003482:	4618      	mov	r0, r3
 8003484:	3720      	adds	r7, #32
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}

0800348a <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800348a:	b580      	push	{r7, lr}
 800348c:	b08a      	sub	sp, #40	@ 0x28
 800348e:	af02      	add	r7, sp, #8
 8003490:	60f8      	str	r0, [r7, #12]
 8003492:	60b9      	str	r1, [r7, #8]
 8003494:	603b      	str	r3, [r7, #0]
 8003496:	4613      	mov	r3, r2
 8003498:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80034a0:	2b20      	cmp	r3, #32
 80034a2:	f040 80b5 	bne.w	8003610 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 80034a6:	68bb      	ldr	r3, [r7, #8]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d002      	beq.n	80034b2 <HAL_UART_Receive+0x28>
 80034ac:	88fb      	ldrh	r3, [r7, #6]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d101      	bne.n	80034b6 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80034b2:	2301      	movs	r3, #1
 80034b4:	e0ad      	b.n	8003612 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	2200      	movs	r2, #0
 80034ba:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	2222      	movs	r2, #34	@ 0x22
 80034c2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	2200      	movs	r2, #0
 80034ca:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80034cc:	f7fe fb42 	bl	8001b54 <HAL_GetTick>
 80034d0:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	88fa      	ldrh	r2, [r7, #6]
 80034d6:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	88fa      	ldrh	r2, [r7, #6]
 80034de:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	689b      	ldr	r3, [r3, #8]
 80034e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80034ea:	d10e      	bne.n	800350a <HAL_UART_Receive+0x80>
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	691b      	ldr	r3, [r3, #16]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d105      	bne.n	8003500 <HAL_UART_Receive+0x76>
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80034fa:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80034fe:	e02d      	b.n	800355c <HAL_UART_Receive+0xd2>
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	22ff      	movs	r2, #255	@ 0xff
 8003504:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003508:	e028      	b.n	800355c <HAL_UART_Receive+0xd2>
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	689b      	ldr	r3, [r3, #8]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d10d      	bne.n	800352e <HAL_UART_Receive+0xa4>
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	691b      	ldr	r3, [r3, #16]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d104      	bne.n	8003524 <HAL_UART_Receive+0x9a>
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	22ff      	movs	r2, #255	@ 0xff
 800351e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003522:	e01b      	b.n	800355c <HAL_UART_Receive+0xd2>
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	227f      	movs	r2, #127	@ 0x7f
 8003528:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800352c:	e016      	b.n	800355c <HAL_UART_Receive+0xd2>
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	689b      	ldr	r3, [r3, #8]
 8003532:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003536:	d10d      	bne.n	8003554 <HAL_UART_Receive+0xca>
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	691b      	ldr	r3, [r3, #16]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d104      	bne.n	800354a <HAL_UART_Receive+0xc0>
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	227f      	movs	r2, #127	@ 0x7f
 8003544:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003548:	e008      	b.n	800355c <HAL_UART_Receive+0xd2>
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	223f      	movs	r2, #63	@ 0x3f
 800354e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003552:	e003      	b.n	800355c <HAL_UART_Receive+0xd2>
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	2200      	movs	r2, #0
 8003558:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8003562:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	689b      	ldr	r3, [r3, #8]
 8003568:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800356c:	d108      	bne.n	8003580 <HAL_UART_Receive+0xf6>
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	691b      	ldr	r3, [r3, #16]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d104      	bne.n	8003580 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8003576:	2300      	movs	r3, #0
 8003578:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800357a:	68bb      	ldr	r3, [r7, #8]
 800357c:	61bb      	str	r3, [r7, #24]
 800357e:	e003      	b.n	8003588 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003584:	2300      	movs	r3, #0
 8003586:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8003588:	e036      	b.n	80035f8 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	9300      	str	r3, [sp, #0]
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	2200      	movs	r2, #0
 8003592:	2120      	movs	r1, #32
 8003594:	68f8      	ldr	r0, [r7, #12]
 8003596:	f000 fb9e 	bl	8003cd6 <UART_WaitOnFlagUntilTimeout>
 800359a:	4603      	mov	r3, r0
 800359c:	2b00      	cmp	r3, #0
 800359e:	d005      	beq.n	80035ac <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	2220      	movs	r2, #32
 80035a4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 80035a8:	2303      	movs	r3, #3
 80035aa:	e032      	b.n	8003612 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 80035ac:	69fb      	ldr	r3, [r7, #28]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d10c      	bne.n	80035cc <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035b8:	b29a      	uxth	r2, r3
 80035ba:	8a7b      	ldrh	r3, [r7, #18]
 80035bc:	4013      	ands	r3, r2
 80035be:	b29a      	uxth	r2, r3
 80035c0:	69bb      	ldr	r3, [r7, #24]
 80035c2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80035c4:	69bb      	ldr	r3, [r7, #24]
 80035c6:	3302      	adds	r3, #2
 80035c8:	61bb      	str	r3, [r7, #24]
 80035ca:	e00c      	b.n	80035e6 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035d2:	b2da      	uxtb	r2, r3
 80035d4:	8a7b      	ldrh	r3, [r7, #18]
 80035d6:	b2db      	uxtb	r3, r3
 80035d8:	4013      	ands	r3, r2
 80035da:	b2da      	uxtb	r2, r3
 80035dc:	69fb      	ldr	r3, [r7, #28]
 80035de:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80035e0:	69fb      	ldr	r3, [r7, #28]
 80035e2:	3301      	adds	r3, #1
 80035e4:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80035ec:	b29b      	uxth	r3, r3
 80035ee:	3b01      	subs	r3, #1
 80035f0:	b29a      	uxth	r2, r3
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80035fe:	b29b      	uxth	r3, r3
 8003600:	2b00      	cmp	r3, #0
 8003602:	d1c2      	bne.n	800358a <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2220      	movs	r2, #32
 8003608:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 800360c:	2300      	movs	r3, #0
 800360e:	e000      	b.n	8003612 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 8003610:	2302      	movs	r3, #2
  }
}
 8003612:	4618      	mov	r0, r3
 8003614:	3720      	adds	r7, #32
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}
	...

0800361c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b088      	sub	sp, #32
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003624:	2300      	movs	r3, #0
 8003626:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	689a      	ldr	r2, [r3, #8]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	691b      	ldr	r3, [r3, #16]
 8003630:	431a      	orrs	r2, r3
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	695b      	ldr	r3, [r3, #20]
 8003636:	431a      	orrs	r2, r3
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	69db      	ldr	r3, [r3, #28]
 800363c:	4313      	orrs	r3, r2
 800363e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	681a      	ldr	r2, [r3, #0]
 8003646:	4ba6      	ldr	r3, [pc, #664]	@ (80038e0 <UART_SetConfig+0x2c4>)
 8003648:	4013      	ands	r3, r2
 800364a:	687a      	ldr	r2, [r7, #4]
 800364c:	6812      	ldr	r2, [r2, #0]
 800364e:	6979      	ldr	r1, [r7, #20]
 8003650:	430b      	orrs	r3, r1
 8003652:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	68da      	ldr	r2, [r3, #12]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	430a      	orrs	r2, r1
 8003668:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	699b      	ldr	r3, [r3, #24]
 800366e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6a1b      	ldr	r3, [r3, #32]
 8003674:	697a      	ldr	r2, [r7, #20]
 8003676:	4313      	orrs	r3, r2
 8003678:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	697a      	ldr	r2, [r7, #20]
 800368a:	430a      	orrs	r2, r1
 800368c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a94      	ldr	r2, [pc, #592]	@ (80038e4 <UART_SetConfig+0x2c8>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d120      	bne.n	80036da <UART_SetConfig+0xbe>
 8003698:	4b93      	ldr	r3, [pc, #588]	@ (80038e8 <UART_SetConfig+0x2cc>)
 800369a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800369e:	f003 0303 	and.w	r3, r3, #3
 80036a2:	2b03      	cmp	r3, #3
 80036a4:	d816      	bhi.n	80036d4 <UART_SetConfig+0xb8>
 80036a6:	a201      	add	r2, pc, #4	@ (adr r2, 80036ac <UART_SetConfig+0x90>)
 80036a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036ac:	080036bd 	.word	0x080036bd
 80036b0:	080036c9 	.word	0x080036c9
 80036b4:	080036c3 	.word	0x080036c3
 80036b8:	080036cf 	.word	0x080036cf
 80036bc:	2301      	movs	r3, #1
 80036be:	77fb      	strb	r3, [r7, #31]
 80036c0:	e150      	b.n	8003964 <UART_SetConfig+0x348>
 80036c2:	2302      	movs	r3, #2
 80036c4:	77fb      	strb	r3, [r7, #31]
 80036c6:	e14d      	b.n	8003964 <UART_SetConfig+0x348>
 80036c8:	2304      	movs	r3, #4
 80036ca:	77fb      	strb	r3, [r7, #31]
 80036cc:	e14a      	b.n	8003964 <UART_SetConfig+0x348>
 80036ce:	2308      	movs	r3, #8
 80036d0:	77fb      	strb	r3, [r7, #31]
 80036d2:	e147      	b.n	8003964 <UART_SetConfig+0x348>
 80036d4:	2310      	movs	r3, #16
 80036d6:	77fb      	strb	r3, [r7, #31]
 80036d8:	e144      	b.n	8003964 <UART_SetConfig+0x348>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a83      	ldr	r2, [pc, #524]	@ (80038ec <UART_SetConfig+0x2d0>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d132      	bne.n	800374a <UART_SetConfig+0x12e>
 80036e4:	4b80      	ldr	r3, [pc, #512]	@ (80038e8 <UART_SetConfig+0x2cc>)
 80036e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036ea:	f003 030c 	and.w	r3, r3, #12
 80036ee:	2b0c      	cmp	r3, #12
 80036f0:	d828      	bhi.n	8003744 <UART_SetConfig+0x128>
 80036f2:	a201      	add	r2, pc, #4	@ (adr r2, 80036f8 <UART_SetConfig+0xdc>)
 80036f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036f8:	0800372d 	.word	0x0800372d
 80036fc:	08003745 	.word	0x08003745
 8003700:	08003745 	.word	0x08003745
 8003704:	08003745 	.word	0x08003745
 8003708:	08003739 	.word	0x08003739
 800370c:	08003745 	.word	0x08003745
 8003710:	08003745 	.word	0x08003745
 8003714:	08003745 	.word	0x08003745
 8003718:	08003733 	.word	0x08003733
 800371c:	08003745 	.word	0x08003745
 8003720:	08003745 	.word	0x08003745
 8003724:	08003745 	.word	0x08003745
 8003728:	0800373f 	.word	0x0800373f
 800372c:	2300      	movs	r3, #0
 800372e:	77fb      	strb	r3, [r7, #31]
 8003730:	e118      	b.n	8003964 <UART_SetConfig+0x348>
 8003732:	2302      	movs	r3, #2
 8003734:	77fb      	strb	r3, [r7, #31]
 8003736:	e115      	b.n	8003964 <UART_SetConfig+0x348>
 8003738:	2304      	movs	r3, #4
 800373a:	77fb      	strb	r3, [r7, #31]
 800373c:	e112      	b.n	8003964 <UART_SetConfig+0x348>
 800373e:	2308      	movs	r3, #8
 8003740:	77fb      	strb	r3, [r7, #31]
 8003742:	e10f      	b.n	8003964 <UART_SetConfig+0x348>
 8003744:	2310      	movs	r3, #16
 8003746:	77fb      	strb	r3, [r7, #31]
 8003748:	e10c      	b.n	8003964 <UART_SetConfig+0x348>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a68      	ldr	r2, [pc, #416]	@ (80038f0 <UART_SetConfig+0x2d4>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d120      	bne.n	8003796 <UART_SetConfig+0x17a>
 8003754:	4b64      	ldr	r3, [pc, #400]	@ (80038e8 <UART_SetConfig+0x2cc>)
 8003756:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800375a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800375e:	2b30      	cmp	r3, #48	@ 0x30
 8003760:	d013      	beq.n	800378a <UART_SetConfig+0x16e>
 8003762:	2b30      	cmp	r3, #48	@ 0x30
 8003764:	d814      	bhi.n	8003790 <UART_SetConfig+0x174>
 8003766:	2b20      	cmp	r3, #32
 8003768:	d009      	beq.n	800377e <UART_SetConfig+0x162>
 800376a:	2b20      	cmp	r3, #32
 800376c:	d810      	bhi.n	8003790 <UART_SetConfig+0x174>
 800376e:	2b00      	cmp	r3, #0
 8003770:	d002      	beq.n	8003778 <UART_SetConfig+0x15c>
 8003772:	2b10      	cmp	r3, #16
 8003774:	d006      	beq.n	8003784 <UART_SetConfig+0x168>
 8003776:	e00b      	b.n	8003790 <UART_SetConfig+0x174>
 8003778:	2300      	movs	r3, #0
 800377a:	77fb      	strb	r3, [r7, #31]
 800377c:	e0f2      	b.n	8003964 <UART_SetConfig+0x348>
 800377e:	2302      	movs	r3, #2
 8003780:	77fb      	strb	r3, [r7, #31]
 8003782:	e0ef      	b.n	8003964 <UART_SetConfig+0x348>
 8003784:	2304      	movs	r3, #4
 8003786:	77fb      	strb	r3, [r7, #31]
 8003788:	e0ec      	b.n	8003964 <UART_SetConfig+0x348>
 800378a:	2308      	movs	r3, #8
 800378c:	77fb      	strb	r3, [r7, #31]
 800378e:	e0e9      	b.n	8003964 <UART_SetConfig+0x348>
 8003790:	2310      	movs	r3, #16
 8003792:	77fb      	strb	r3, [r7, #31]
 8003794:	e0e6      	b.n	8003964 <UART_SetConfig+0x348>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a56      	ldr	r2, [pc, #344]	@ (80038f4 <UART_SetConfig+0x2d8>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d120      	bne.n	80037e2 <UART_SetConfig+0x1c6>
 80037a0:	4b51      	ldr	r3, [pc, #324]	@ (80038e8 <UART_SetConfig+0x2cc>)
 80037a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037a6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80037aa:	2bc0      	cmp	r3, #192	@ 0xc0
 80037ac:	d013      	beq.n	80037d6 <UART_SetConfig+0x1ba>
 80037ae:	2bc0      	cmp	r3, #192	@ 0xc0
 80037b0:	d814      	bhi.n	80037dc <UART_SetConfig+0x1c0>
 80037b2:	2b80      	cmp	r3, #128	@ 0x80
 80037b4:	d009      	beq.n	80037ca <UART_SetConfig+0x1ae>
 80037b6:	2b80      	cmp	r3, #128	@ 0x80
 80037b8:	d810      	bhi.n	80037dc <UART_SetConfig+0x1c0>
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d002      	beq.n	80037c4 <UART_SetConfig+0x1a8>
 80037be:	2b40      	cmp	r3, #64	@ 0x40
 80037c0:	d006      	beq.n	80037d0 <UART_SetConfig+0x1b4>
 80037c2:	e00b      	b.n	80037dc <UART_SetConfig+0x1c0>
 80037c4:	2300      	movs	r3, #0
 80037c6:	77fb      	strb	r3, [r7, #31]
 80037c8:	e0cc      	b.n	8003964 <UART_SetConfig+0x348>
 80037ca:	2302      	movs	r3, #2
 80037cc:	77fb      	strb	r3, [r7, #31]
 80037ce:	e0c9      	b.n	8003964 <UART_SetConfig+0x348>
 80037d0:	2304      	movs	r3, #4
 80037d2:	77fb      	strb	r3, [r7, #31]
 80037d4:	e0c6      	b.n	8003964 <UART_SetConfig+0x348>
 80037d6:	2308      	movs	r3, #8
 80037d8:	77fb      	strb	r3, [r7, #31]
 80037da:	e0c3      	b.n	8003964 <UART_SetConfig+0x348>
 80037dc:	2310      	movs	r3, #16
 80037de:	77fb      	strb	r3, [r7, #31]
 80037e0:	e0c0      	b.n	8003964 <UART_SetConfig+0x348>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a44      	ldr	r2, [pc, #272]	@ (80038f8 <UART_SetConfig+0x2dc>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d125      	bne.n	8003838 <UART_SetConfig+0x21c>
 80037ec:	4b3e      	ldr	r3, [pc, #248]	@ (80038e8 <UART_SetConfig+0x2cc>)
 80037ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80037f6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80037fa:	d017      	beq.n	800382c <UART_SetConfig+0x210>
 80037fc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003800:	d817      	bhi.n	8003832 <UART_SetConfig+0x216>
 8003802:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003806:	d00b      	beq.n	8003820 <UART_SetConfig+0x204>
 8003808:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800380c:	d811      	bhi.n	8003832 <UART_SetConfig+0x216>
 800380e:	2b00      	cmp	r3, #0
 8003810:	d003      	beq.n	800381a <UART_SetConfig+0x1fe>
 8003812:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003816:	d006      	beq.n	8003826 <UART_SetConfig+0x20a>
 8003818:	e00b      	b.n	8003832 <UART_SetConfig+0x216>
 800381a:	2300      	movs	r3, #0
 800381c:	77fb      	strb	r3, [r7, #31]
 800381e:	e0a1      	b.n	8003964 <UART_SetConfig+0x348>
 8003820:	2302      	movs	r3, #2
 8003822:	77fb      	strb	r3, [r7, #31]
 8003824:	e09e      	b.n	8003964 <UART_SetConfig+0x348>
 8003826:	2304      	movs	r3, #4
 8003828:	77fb      	strb	r3, [r7, #31]
 800382a:	e09b      	b.n	8003964 <UART_SetConfig+0x348>
 800382c:	2308      	movs	r3, #8
 800382e:	77fb      	strb	r3, [r7, #31]
 8003830:	e098      	b.n	8003964 <UART_SetConfig+0x348>
 8003832:	2310      	movs	r3, #16
 8003834:	77fb      	strb	r3, [r7, #31]
 8003836:	e095      	b.n	8003964 <UART_SetConfig+0x348>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a2f      	ldr	r2, [pc, #188]	@ (80038fc <UART_SetConfig+0x2e0>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d125      	bne.n	800388e <UART_SetConfig+0x272>
 8003842:	4b29      	ldr	r3, [pc, #164]	@ (80038e8 <UART_SetConfig+0x2cc>)
 8003844:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003848:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800384c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003850:	d017      	beq.n	8003882 <UART_SetConfig+0x266>
 8003852:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003856:	d817      	bhi.n	8003888 <UART_SetConfig+0x26c>
 8003858:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800385c:	d00b      	beq.n	8003876 <UART_SetConfig+0x25a>
 800385e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003862:	d811      	bhi.n	8003888 <UART_SetConfig+0x26c>
 8003864:	2b00      	cmp	r3, #0
 8003866:	d003      	beq.n	8003870 <UART_SetConfig+0x254>
 8003868:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800386c:	d006      	beq.n	800387c <UART_SetConfig+0x260>
 800386e:	e00b      	b.n	8003888 <UART_SetConfig+0x26c>
 8003870:	2301      	movs	r3, #1
 8003872:	77fb      	strb	r3, [r7, #31]
 8003874:	e076      	b.n	8003964 <UART_SetConfig+0x348>
 8003876:	2302      	movs	r3, #2
 8003878:	77fb      	strb	r3, [r7, #31]
 800387a:	e073      	b.n	8003964 <UART_SetConfig+0x348>
 800387c:	2304      	movs	r3, #4
 800387e:	77fb      	strb	r3, [r7, #31]
 8003880:	e070      	b.n	8003964 <UART_SetConfig+0x348>
 8003882:	2308      	movs	r3, #8
 8003884:	77fb      	strb	r3, [r7, #31]
 8003886:	e06d      	b.n	8003964 <UART_SetConfig+0x348>
 8003888:	2310      	movs	r3, #16
 800388a:	77fb      	strb	r3, [r7, #31]
 800388c:	e06a      	b.n	8003964 <UART_SetConfig+0x348>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a1b      	ldr	r2, [pc, #108]	@ (8003900 <UART_SetConfig+0x2e4>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d138      	bne.n	800390a <UART_SetConfig+0x2ee>
 8003898:	4b13      	ldr	r3, [pc, #76]	@ (80038e8 <UART_SetConfig+0x2cc>)
 800389a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800389e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80038a2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80038a6:	d017      	beq.n	80038d8 <UART_SetConfig+0x2bc>
 80038a8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80038ac:	d82a      	bhi.n	8003904 <UART_SetConfig+0x2e8>
 80038ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80038b2:	d00b      	beq.n	80038cc <UART_SetConfig+0x2b0>
 80038b4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80038b8:	d824      	bhi.n	8003904 <UART_SetConfig+0x2e8>
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d003      	beq.n	80038c6 <UART_SetConfig+0x2aa>
 80038be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80038c2:	d006      	beq.n	80038d2 <UART_SetConfig+0x2b6>
 80038c4:	e01e      	b.n	8003904 <UART_SetConfig+0x2e8>
 80038c6:	2300      	movs	r3, #0
 80038c8:	77fb      	strb	r3, [r7, #31]
 80038ca:	e04b      	b.n	8003964 <UART_SetConfig+0x348>
 80038cc:	2302      	movs	r3, #2
 80038ce:	77fb      	strb	r3, [r7, #31]
 80038d0:	e048      	b.n	8003964 <UART_SetConfig+0x348>
 80038d2:	2304      	movs	r3, #4
 80038d4:	77fb      	strb	r3, [r7, #31]
 80038d6:	e045      	b.n	8003964 <UART_SetConfig+0x348>
 80038d8:	2308      	movs	r3, #8
 80038da:	77fb      	strb	r3, [r7, #31]
 80038dc:	e042      	b.n	8003964 <UART_SetConfig+0x348>
 80038de:	bf00      	nop
 80038e0:	efff69f3 	.word	0xefff69f3
 80038e4:	40011000 	.word	0x40011000
 80038e8:	40023800 	.word	0x40023800
 80038ec:	40004400 	.word	0x40004400
 80038f0:	40004800 	.word	0x40004800
 80038f4:	40004c00 	.word	0x40004c00
 80038f8:	40005000 	.word	0x40005000
 80038fc:	40011400 	.word	0x40011400
 8003900:	40007800 	.word	0x40007800
 8003904:	2310      	movs	r3, #16
 8003906:	77fb      	strb	r3, [r7, #31]
 8003908:	e02c      	b.n	8003964 <UART_SetConfig+0x348>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a72      	ldr	r2, [pc, #456]	@ (8003ad8 <UART_SetConfig+0x4bc>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d125      	bne.n	8003960 <UART_SetConfig+0x344>
 8003914:	4b71      	ldr	r3, [pc, #452]	@ (8003adc <UART_SetConfig+0x4c0>)
 8003916:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800391a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800391e:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003922:	d017      	beq.n	8003954 <UART_SetConfig+0x338>
 8003924:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003928:	d817      	bhi.n	800395a <UART_SetConfig+0x33e>
 800392a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800392e:	d00b      	beq.n	8003948 <UART_SetConfig+0x32c>
 8003930:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003934:	d811      	bhi.n	800395a <UART_SetConfig+0x33e>
 8003936:	2b00      	cmp	r3, #0
 8003938:	d003      	beq.n	8003942 <UART_SetConfig+0x326>
 800393a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800393e:	d006      	beq.n	800394e <UART_SetConfig+0x332>
 8003940:	e00b      	b.n	800395a <UART_SetConfig+0x33e>
 8003942:	2300      	movs	r3, #0
 8003944:	77fb      	strb	r3, [r7, #31]
 8003946:	e00d      	b.n	8003964 <UART_SetConfig+0x348>
 8003948:	2302      	movs	r3, #2
 800394a:	77fb      	strb	r3, [r7, #31]
 800394c:	e00a      	b.n	8003964 <UART_SetConfig+0x348>
 800394e:	2304      	movs	r3, #4
 8003950:	77fb      	strb	r3, [r7, #31]
 8003952:	e007      	b.n	8003964 <UART_SetConfig+0x348>
 8003954:	2308      	movs	r3, #8
 8003956:	77fb      	strb	r3, [r7, #31]
 8003958:	e004      	b.n	8003964 <UART_SetConfig+0x348>
 800395a:	2310      	movs	r3, #16
 800395c:	77fb      	strb	r3, [r7, #31]
 800395e:	e001      	b.n	8003964 <UART_SetConfig+0x348>
 8003960:	2310      	movs	r3, #16
 8003962:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	69db      	ldr	r3, [r3, #28]
 8003968:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800396c:	d15b      	bne.n	8003a26 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800396e:	7ffb      	ldrb	r3, [r7, #31]
 8003970:	2b08      	cmp	r3, #8
 8003972:	d828      	bhi.n	80039c6 <UART_SetConfig+0x3aa>
 8003974:	a201      	add	r2, pc, #4	@ (adr r2, 800397c <UART_SetConfig+0x360>)
 8003976:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800397a:	bf00      	nop
 800397c:	080039a1 	.word	0x080039a1
 8003980:	080039a9 	.word	0x080039a9
 8003984:	080039b1 	.word	0x080039b1
 8003988:	080039c7 	.word	0x080039c7
 800398c:	080039b7 	.word	0x080039b7
 8003990:	080039c7 	.word	0x080039c7
 8003994:	080039c7 	.word	0x080039c7
 8003998:	080039c7 	.word	0x080039c7
 800399c:	080039bf 	.word	0x080039bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80039a0:	f7ff f884 	bl	8002aac <HAL_RCC_GetPCLK1Freq>
 80039a4:	61b8      	str	r0, [r7, #24]
        break;
 80039a6:	e013      	b.n	80039d0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80039a8:	f7ff f894 	bl	8002ad4 <HAL_RCC_GetPCLK2Freq>
 80039ac:	61b8      	str	r0, [r7, #24]
        break;
 80039ae:	e00f      	b.n	80039d0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80039b0:	4b4b      	ldr	r3, [pc, #300]	@ (8003ae0 <UART_SetConfig+0x4c4>)
 80039b2:	61bb      	str	r3, [r7, #24]
        break;
 80039b4:	e00c      	b.n	80039d0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80039b6:	f7fe ffa7 	bl	8002908 <HAL_RCC_GetSysClockFreq>
 80039ba:	61b8      	str	r0, [r7, #24]
        break;
 80039bc:	e008      	b.n	80039d0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80039be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80039c2:	61bb      	str	r3, [r7, #24]
        break;
 80039c4:	e004      	b.n	80039d0 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80039c6:	2300      	movs	r3, #0
 80039c8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80039ca:	2301      	movs	r3, #1
 80039cc:	77bb      	strb	r3, [r7, #30]
        break;
 80039ce:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80039d0:	69bb      	ldr	r3, [r7, #24]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d074      	beq.n	8003ac0 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80039d6:	69bb      	ldr	r3, [r7, #24]
 80039d8:	005a      	lsls	r2, r3, #1
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	085b      	lsrs	r3, r3, #1
 80039e0:	441a      	add	r2, r3
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80039ea:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80039ec:	693b      	ldr	r3, [r7, #16]
 80039ee:	2b0f      	cmp	r3, #15
 80039f0:	d916      	bls.n	8003a20 <UART_SetConfig+0x404>
 80039f2:	693b      	ldr	r3, [r7, #16]
 80039f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80039f8:	d212      	bcs.n	8003a20 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80039fa:	693b      	ldr	r3, [r7, #16]
 80039fc:	b29b      	uxth	r3, r3
 80039fe:	f023 030f 	bic.w	r3, r3, #15
 8003a02:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003a04:	693b      	ldr	r3, [r7, #16]
 8003a06:	085b      	lsrs	r3, r3, #1
 8003a08:	b29b      	uxth	r3, r3
 8003a0a:	f003 0307 	and.w	r3, r3, #7
 8003a0e:	b29a      	uxth	r2, r3
 8003a10:	89fb      	ldrh	r3, [r7, #14]
 8003a12:	4313      	orrs	r3, r2
 8003a14:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	89fa      	ldrh	r2, [r7, #14]
 8003a1c:	60da      	str	r2, [r3, #12]
 8003a1e:	e04f      	b.n	8003ac0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003a20:	2301      	movs	r3, #1
 8003a22:	77bb      	strb	r3, [r7, #30]
 8003a24:	e04c      	b.n	8003ac0 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003a26:	7ffb      	ldrb	r3, [r7, #31]
 8003a28:	2b08      	cmp	r3, #8
 8003a2a:	d828      	bhi.n	8003a7e <UART_SetConfig+0x462>
 8003a2c:	a201      	add	r2, pc, #4	@ (adr r2, 8003a34 <UART_SetConfig+0x418>)
 8003a2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a32:	bf00      	nop
 8003a34:	08003a59 	.word	0x08003a59
 8003a38:	08003a61 	.word	0x08003a61
 8003a3c:	08003a69 	.word	0x08003a69
 8003a40:	08003a7f 	.word	0x08003a7f
 8003a44:	08003a6f 	.word	0x08003a6f
 8003a48:	08003a7f 	.word	0x08003a7f
 8003a4c:	08003a7f 	.word	0x08003a7f
 8003a50:	08003a7f 	.word	0x08003a7f
 8003a54:	08003a77 	.word	0x08003a77
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a58:	f7ff f828 	bl	8002aac <HAL_RCC_GetPCLK1Freq>
 8003a5c:	61b8      	str	r0, [r7, #24]
        break;
 8003a5e:	e013      	b.n	8003a88 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003a60:	f7ff f838 	bl	8002ad4 <HAL_RCC_GetPCLK2Freq>
 8003a64:	61b8      	str	r0, [r7, #24]
        break;
 8003a66:	e00f      	b.n	8003a88 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a68:	4b1d      	ldr	r3, [pc, #116]	@ (8003ae0 <UART_SetConfig+0x4c4>)
 8003a6a:	61bb      	str	r3, [r7, #24]
        break;
 8003a6c:	e00c      	b.n	8003a88 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a6e:	f7fe ff4b 	bl	8002908 <HAL_RCC_GetSysClockFreq>
 8003a72:	61b8      	str	r0, [r7, #24]
        break;
 8003a74:	e008      	b.n	8003a88 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a76:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003a7a:	61bb      	str	r3, [r7, #24]
        break;
 8003a7c:	e004      	b.n	8003a88 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8003a7e:	2300      	movs	r3, #0
 8003a80:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003a82:	2301      	movs	r3, #1
 8003a84:	77bb      	strb	r3, [r7, #30]
        break;
 8003a86:	bf00      	nop
    }

    if (pclk != 0U)
 8003a88:	69bb      	ldr	r3, [r7, #24]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d018      	beq.n	8003ac0 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	085a      	lsrs	r2, r3, #1
 8003a94:	69bb      	ldr	r3, [r7, #24]
 8003a96:	441a      	add	r2, r3
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003aa0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003aa2:	693b      	ldr	r3, [r7, #16]
 8003aa4:	2b0f      	cmp	r3, #15
 8003aa6:	d909      	bls.n	8003abc <UART_SetConfig+0x4a0>
 8003aa8:	693b      	ldr	r3, [r7, #16]
 8003aaa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003aae:	d205      	bcs.n	8003abc <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003ab0:	693b      	ldr	r3, [r7, #16]
 8003ab2:	b29a      	uxth	r2, r3
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	60da      	str	r2, [r3, #12]
 8003aba:	e001      	b.n	8003ac0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003abc:	2301      	movs	r3, #1
 8003abe:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003acc:	7fbb      	ldrb	r3, [r7, #30]
}
 8003ace:	4618      	mov	r0, r3
 8003ad0:	3720      	adds	r7, #32
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bd80      	pop	{r7, pc}
 8003ad6:	bf00      	nop
 8003ad8:	40007c00 	.word	0x40007c00
 8003adc:	40023800 	.word	0x40023800
 8003ae0:	00f42400 	.word	0x00f42400

08003ae4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b083      	sub	sp, #12
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003af0:	f003 0308 	and.w	r3, r3, #8
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d00a      	beq.n	8003b0e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	430a      	orrs	r2, r1
 8003b0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b12:	f003 0301 	and.w	r3, r3, #1
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d00a      	beq.n	8003b30 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	430a      	orrs	r2, r1
 8003b2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b34:	f003 0302 	and.w	r3, r3, #2
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d00a      	beq.n	8003b52 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	430a      	orrs	r2, r1
 8003b50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b56:	f003 0304 	and.w	r3, r3, #4
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d00a      	beq.n	8003b74 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	430a      	orrs	r2, r1
 8003b72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b78:	f003 0310 	and.w	r3, r3, #16
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d00a      	beq.n	8003b96 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	689b      	ldr	r3, [r3, #8]
 8003b86:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	430a      	orrs	r2, r1
 8003b94:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b9a:	f003 0320 	and.w	r3, r3, #32
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d00a      	beq.n	8003bb8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	689b      	ldr	r3, [r3, #8]
 8003ba8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	430a      	orrs	r2, r1
 8003bb6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bbc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d01a      	beq.n	8003bfa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	430a      	orrs	r2, r1
 8003bd8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bde:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003be2:	d10a      	bne.n	8003bfa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	430a      	orrs	r2, r1
 8003bf8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bfe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d00a      	beq.n	8003c1c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	430a      	orrs	r2, r1
 8003c1a:	605a      	str	r2, [r3, #4]
  }
}
 8003c1c:	bf00      	nop
 8003c1e:	370c      	adds	r7, #12
 8003c20:	46bd      	mov	sp, r7
 8003c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c26:	4770      	bx	lr

08003c28 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b08c      	sub	sp, #48	@ 0x30
 8003c2c:	af02      	add	r7, sp, #8
 8003c2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2200      	movs	r2, #0
 8003c34:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003c38:	f7fd ff8c 	bl	8001b54 <HAL_GetTick>
 8003c3c:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f003 0308 	and.w	r3, r3, #8
 8003c48:	2b08      	cmp	r3, #8
 8003c4a:	d12e      	bne.n	8003caa <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c4c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003c50:	9300      	str	r3, [sp, #0]
 8003c52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c54:	2200      	movs	r2, #0
 8003c56:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003c5a:	6878      	ldr	r0, [r7, #4]
 8003c5c:	f000 f83b 	bl	8003cd6 <UART_WaitOnFlagUntilTimeout>
 8003c60:	4603      	mov	r3, r0
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d021      	beq.n	8003caa <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c6c:	693b      	ldr	r3, [r7, #16]
 8003c6e:	e853 3f00 	ldrex	r3, [r3]
 8003c72:	60fb      	str	r3, [r7, #12]
   return(result);
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003c7a:	623b      	str	r3, [r7, #32]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	461a      	mov	r2, r3
 8003c82:	6a3b      	ldr	r3, [r7, #32]
 8003c84:	61fb      	str	r3, [r7, #28]
 8003c86:	61ba      	str	r2, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c88:	69b9      	ldr	r1, [r7, #24]
 8003c8a:	69fa      	ldr	r2, [r7, #28]
 8003c8c:	e841 2300 	strex	r3, r2, [r1]
 8003c90:	617b      	str	r3, [r7, #20]
   return(result);
 8003c92:	697b      	ldr	r3, [r7, #20]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d1e6      	bne.n	8003c66 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2220      	movs	r2, #32
 8003c9c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ca6:	2303      	movs	r3, #3
 8003ca8:	e011      	b.n	8003cce <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2220      	movs	r2, #32
 8003cae:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2220      	movs	r2, #32
 8003cb4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003ccc:	2300      	movs	r3, #0
}
 8003cce:	4618      	mov	r0, r3
 8003cd0:	3728      	adds	r7, #40	@ 0x28
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bd80      	pop	{r7, pc}

08003cd6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003cd6:	b580      	push	{r7, lr}
 8003cd8:	b084      	sub	sp, #16
 8003cda:	af00      	add	r7, sp, #0
 8003cdc:	60f8      	str	r0, [r7, #12]
 8003cde:	60b9      	str	r1, [r7, #8]
 8003ce0:	603b      	str	r3, [r7, #0]
 8003ce2:	4613      	mov	r3, r2
 8003ce4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ce6:	e04f      	b.n	8003d88 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ce8:	69bb      	ldr	r3, [r7, #24]
 8003cea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cee:	d04b      	beq.n	8003d88 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cf0:	f7fd ff30 	bl	8001b54 <HAL_GetTick>
 8003cf4:	4602      	mov	r2, r0
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	1ad3      	subs	r3, r2, r3
 8003cfa:	69ba      	ldr	r2, [r7, #24]
 8003cfc:	429a      	cmp	r2, r3
 8003cfe:	d302      	bcc.n	8003d06 <UART_WaitOnFlagUntilTimeout+0x30>
 8003d00:	69bb      	ldr	r3, [r7, #24]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d101      	bne.n	8003d0a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003d06:	2303      	movs	r3, #3
 8003d08:	e04e      	b.n	8003da8 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f003 0304 	and.w	r3, r3, #4
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d037      	beq.n	8003d88 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	2b80      	cmp	r3, #128	@ 0x80
 8003d1c:	d034      	beq.n	8003d88 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003d1e:	68bb      	ldr	r3, [r7, #8]
 8003d20:	2b40      	cmp	r3, #64	@ 0x40
 8003d22:	d031      	beq.n	8003d88 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	69db      	ldr	r3, [r3, #28]
 8003d2a:	f003 0308 	and.w	r3, r3, #8
 8003d2e:	2b08      	cmp	r3, #8
 8003d30:	d110      	bne.n	8003d54 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	2208      	movs	r2, #8
 8003d38:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003d3a:	68f8      	ldr	r0, [r7, #12]
 8003d3c:	f000 f838 	bl	8003db0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	2208      	movs	r2, #8
 8003d44:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003d50:	2301      	movs	r3, #1
 8003d52:	e029      	b.n	8003da8 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	69db      	ldr	r3, [r3, #28]
 8003d5a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003d5e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003d62:	d111      	bne.n	8003d88 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003d6c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003d6e:	68f8      	ldr	r0, [r7, #12]
 8003d70:	f000 f81e 	bl	8003db0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	2220      	movs	r2, #32
 8003d78:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003d84:	2303      	movs	r3, #3
 8003d86:	e00f      	b.n	8003da8 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	69da      	ldr	r2, [r3, #28]
 8003d8e:	68bb      	ldr	r3, [r7, #8]
 8003d90:	4013      	ands	r3, r2
 8003d92:	68ba      	ldr	r2, [r7, #8]
 8003d94:	429a      	cmp	r2, r3
 8003d96:	bf0c      	ite	eq
 8003d98:	2301      	moveq	r3, #1
 8003d9a:	2300      	movne	r3, #0
 8003d9c:	b2db      	uxtb	r3, r3
 8003d9e:	461a      	mov	r2, r3
 8003da0:	79fb      	ldrb	r3, [r7, #7]
 8003da2:	429a      	cmp	r2, r3
 8003da4:	d0a0      	beq.n	8003ce8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003da6:	2300      	movs	r3, #0
}
 8003da8:	4618      	mov	r0, r3
 8003daa:	3710      	adds	r7, #16
 8003dac:	46bd      	mov	sp, r7
 8003dae:	bd80      	pop	{r7, pc}

08003db0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003db0:	b480      	push	{r7}
 8003db2:	b095      	sub	sp, #84	@ 0x54
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dbe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003dc0:	e853 3f00 	ldrex	r3, [r3]
 8003dc4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003dc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dc8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003dcc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	461a      	mov	r2, r3
 8003dd4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003dd6:	643b      	str	r3, [r7, #64]	@ 0x40
 8003dd8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dda:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003ddc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003dde:	e841 2300 	strex	r3, r2, [r1]
 8003de2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003de4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d1e6      	bne.n	8003db8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	3308      	adds	r3, #8
 8003df0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003df2:	6a3b      	ldr	r3, [r7, #32]
 8003df4:	e853 3f00 	ldrex	r3, [r3]
 8003df8:	61fb      	str	r3, [r7, #28]
   return(result);
 8003dfa:	69fb      	ldr	r3, [r7, #28]
 8003dfc:	f023 0301 	bic.w	r3, r3, #1
 8003e00:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	3308      	adds	r3, #8
 8003e08:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003e0a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003e0c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e0e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003e10:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003e12:	e841 2300 	strex	r3, r2, [r1]
 8003e16:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003e18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d1e5      	bne.n	8003dea <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e22:	2b01      	cmp	r3, #1
 8003e24:	d118      	bne.n	8003e58 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	e853 3f00 	ldrex	r3, [r3]
 8003e32:	60bb      	str	r3, [r7, #8]
   return(result);
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	f023 0310 	bic.w	r3, r3, #16
 8003e3a:	647b      	str	r3, [r7, #68]	@ 0x44
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	461a      	mov	r2, r3
 8003e42:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003e44:	61bb      	str	r3, [r7, #24]
 8003e46:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e48:	6979      	ldr	r1, [r7, #20]
 8003e4a:	69ba      	ldr	r2, [r7, #24]
 8003e4c:	e841 2300 	strex	r3, r2, [r1]
 8003e50:	613b      	str	r3, [r7, #16]
   return(result);
 8003e52:	693b      	ldr	r3, [r7, #16]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d1e6      	bne.n	8003e26 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2220      	movs	r2, #32
 8003e5c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2200      	movs	r2, #0
 8003e64:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003e6c:	bf00      	nop
 8003e6e:	3754      	adds	r7, #84	@ 0x54
 8003e70:	46bd      	mov	sp, r7
 8003e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e76:	4770      	bx	lr

08003e78 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b085      	sub	sp, #20
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	4603      	mov	r3, r0
 8003e80:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003e82:	2300      	movs	r3, #0
 8003e84:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003e86:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003e8a:	2b84      	cmp	r3, #132	@ 0x84
 8003e8c:	d005      	beq.n	8003e9a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003e8e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	4413      	add	r3, r2
 8003e96:	3303      	adds	r3, #3
 8003e98:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
}
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	3714      	adds	r7, #20
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea6:	4770      	bx	lr

08003ea8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003eac:	f000 fc92 	bl	80047d4 <vTaskStartScheduler>
  
  return osOK;
 8003eb0:	2300      	movs	r3, #0
}
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	bd80      	pop	{r7, pc}

08003eb6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003eb6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003eb8:	b089      	sub	sp, #36	@ 0x24
 8003eba:	af04      	add	r7, sp, #16
 8003ebc:	6078      	str	r0, [r7, #4]
 8003ebe:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	695b      	ldr	r3, [r3, #20]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d020      	beq.n	8003f0a <osThreadCreate+0x54>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	699b      	ldr	r3, [r3, #24]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d01c      	beq.n	8003f0a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	685c      	ldr	r4, [r3, #4]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	691e      	ldr	r6, [r3, #16]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f7ff ffc8 	bl	8003e78 <makeFreeRtosPriority>
 8003ee8:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	695b      	ldr	r3, [r3, #20]
 8003eee:	687a      	ldr	r2, [r7, #4]
 8003ef0:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003ef2:	9202      	str	r2, [sp, #8]
 8003ef4:	9301      	str	r3, [sp, #4]
 8003ef6:	9100      	str	r1, [sp, #0]
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	4632      	mov	r2, r6
 8003efc:	4629      	mov	r1, r5
 8003efe:	4620      	mov	r0, r4
 8003f00:	f000 f8ed 	bl	80040de <xTaskCreateStatic>
 8003f04:	4603      	mov	r3, r0
 8003f06:	60fb      	str	r3, [r7, #12]
 8003f08:	e01c      	b.n	8003f44 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	685c      	ldr	r4, [r3, #4]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003f16:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f7ff ffaa 	bl	8003e78 <makeFreeRtosPriority>
 8003f24:	4602      	mov	r2, r0
 8003f26:	f107 030c 	add.w	r3, r7, #12
 8003f2a:	9301      	str	r3, [sp, #4]
 8003f2c:	9200      	str	r2, [sp, #0]
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	4632      	mov	r2, r6
 8003f32:	4629      	mov	r1, r5
 8003f34:	4620      	mov	r0, r4
 8003f36:	f000 f938 	bl	80041aa <xTaskCreate>
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	2b01      	cmp	r3, #1
 8003f3e:	d001      	beq.n	8003f44 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003f40:	2300      	movs	r3, #0
 8003f42:	e000      	b.n	8003f46 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003f44:	68fb      	ldr	r3, [r7, #12]
}
 8003f46:	4618      	mov	r0, r3
 8003f48:	3714      	adds	r7, #20
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003f4e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003f4e:	b580      	push	{r7, lr}
 8003f50:	b084      	sub	sp, #16
 8003f52:	af00      	add	r7, sp, #0
 8003f54:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d001      	beq.n	8003f64 <osDelay+0x16>
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	e000      	b.n	8003f66 <osDelay+0x18>
 8003f64:	2301      	movs	r3, #1
 8003f66:	4618      	mov	r0, r3
 8003f68:	f000 fa68 	bl	800443c <vTaskDelay>
  
  return osOK;
 8003f6c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003f6e:	4618      	mov	r0, r3
 8003f70:	3710      	adds	r7, #16
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bd80      	pop	{r7, pc}

08003f76 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003f76:	b480      	push	{r7}
 8003f78:	b083      	sub	sp, #12
 8003f7a:	af00      	add	r7, sp, #0
 8003f7c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	f103 0208 	add.w	r2, r3, #8
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	f04f 32ff 	mov.w	r2, #4294967295
 8003f8e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	f103 0208 	add.w	r2, r3, #8
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	f103 0208 	add.w	r2, r3, #8
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003faa:	bf00      	nop
 8003fac:	370c      	adds	r7, #12
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb4:	4770      	bx	lr

08003fb6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003fb6:	b480      	push	{r7}
 8003fb8:	b083      	sub	sp, #12
 8003fba:	af00      	add	r7, sp, #0
 8003fbc:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003fc4:	bf00      	nop
 8003fc6:	370c      	adds	r7, #12
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fce:	4770      	bx	lr

08003fd0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b085      	sub	sp, #20
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
 8003fd8:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	68fa      	ldr	r2, [r7, #12]
 8003fe4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	689a      	ldr	r2, [r3, #8]
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	689b      	ldr	r3, [r3, #8]
 8003ff2:	683a      	ldr	r2, [r7, #0]
 8003ff4:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	683a      	ldr	r2, [r7, #0]
 8003ffa:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	687a      	ldr	r2, [r7, #4]
 8004000:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	1c5a      	adds	r2, r3, #1
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	601a      	str	r2, [r3, #0]
}
 800400c:	bf00      	nop
 800400e:	3714      	adds	r7, #20
 8004010:	46bd      	mov	sp, r7
 8004012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004016:	4770      	bx	lr

08004018 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004018:	b480      	push	{r7}
 800401a:	b085      	sub	sp, #20
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
 8004020:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800402e:	d103      	bne.n	8004038 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	691b      	ldr	r3, [r3, #16]
 8004034:	60fb      	str	r3, [r7, #12]
 8004036:	e00c      	b.n	8004052 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	3308      	adds	r3, #8
 800403c:	60fb      	str	r3, [r7, #12]
 800403e:	e002      	b.n	8004046 <vListInsert+0x2e>
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	60fb      	str	r3, [r7, #12]
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	68ba      	ldr	r2, [r7, #8]
 800404e:	429a      	cmp	r2, r3
 8004050:	d2f6      	bcs.n	8004040 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	685a      	ldr	r2, [r3, #4]
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	683a      	ldr	r2, [r7, #0]
 8004060:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	68fa      	ldr	r2, [r7, #12]
 8004066:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	683a      	ldr	r2, [r7, #0]
 800406c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	687a      	ldr	r2, [r7, #4]
 8004072:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	1c5a      	adds	r2, r3, #1
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	601a      	str	r2, [r3, #0]
}
 800407e:	bf00      	nop
 8004080:	3714      	adds	r7, #20
 8004082:	46bd      	mov	sp, r7
 8004084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004088:	4770      	bx	lr

0800408a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800408a:	b480      	push	{r7}
 800408c:	b085      	sub	sp, #20
 800408e:	af00      	add	r7, sp, #0
 8004090:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	691b      	ldr	r3, [r3, #16]
 8004096:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	687a      	ldr	r2, [r7, #4]
 800409e:	6892      	ldr	r2, [r2, #8]
 80040a0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	689b      	ldr	r3, [r3, #8]
 80040a6:	687a      	ldr	r2, [r7, #4]
 80040a8:	6852      	ldr	r2, [r2, #4]
 80040aa:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	687a      	ldr	r2, [r7, #4]
 80040b2:	429a      	cmp	r2, r3
 80040b4:	d103      	bne.n	80040be <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	689a      	ldr	r2, [r3, #8]
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2200      	movs	r2, #0
 80040c2:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	1e5a      	subs	r2, r3, #1
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
}
 80040d2:	4618      	mov	r0, r3
 80040d4:	3714      	adds	r7, #20
 80040d6:	46bd      	mov	sp, r7
 80040d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040dc:	4770      	bx	lr

080040de <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80040de:	b580      	push	{r7, lr}
 80040e0:	b08e      	sub	sp, #56	@ 0x38
 80040e2:	af04      	add	r7, sp, #16
 80040e4:	60f8      	str	r0, [r7, #12]
 80040e6:	60b9      	str	r1, [r7, #8]
 80040e8:	607a      	str	r2, [r7, #4]
 80040ea:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80040ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d10d      	bne.n	800410e <xTaskCreateStatic+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80040f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040f6:	b672      	cpsid	i
 80040f8:	f383 8811 	msr	BASEPRI, r3
 80040fc:	f3bf 8f6f 	isb	sy
 8004100:	f3bf 8f4f 	dsb	sy
 8004104:	b662      	cpsie	i
 8004106:	623b      	str	r3, [r7, #32]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004108:	bf00      	nop
 800410a:	bf00      	nop
 800410c:	e7fd      	b.n	800410a <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800410e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004110:	2b00      	cmp	r3, #0
 8004112:	d10d      	bne.n	8004130 <xTaskCreateStatic+0x52>
	__asm volatile
 8004114:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004118:	b672      	cpsid	i
 800411a:	f383 8811 	msr	BASEPRI, r3
 800411e:	f3bf 8f6f 	isb	sy
 8004122:	f3bf 8f4f 	dsb	sy
 8004126:	b662      	cpsie	i
 8004128:	61fb      	str	r3, [r7, #28]
}
 800412a:	bf00      	nop
 800412c:	bf00      	nop
 800412e:	e7fd      	b.n	800412c <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004130:	2360      	movs	r3, #96	@ 0x60
 8004132:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004134:	693b      	ldr	r3, [r7, #16]
 8004136:	2b60      	cmp	r3, #96	@ 0x60
 8004138:	d00d      	beq.n	8004156 <xTaskCreateStatic+0x78>
	__asm volatile
 800413a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800413e:	b672      	cpsid	i
 8004140:	f383 8811 	msr	BASEPRI, r3
 8004144:	f3bf 8f6f 	isb	sy
 8004148:	f3bf 8f4f 	dsb	sy
 800414c:	b662      	cpsie	i
 800414e:	61bb      	str	r3, [r7, #24]
}
 8004150:	bf00      	nop
 8004152:	bf00      	nop
 8004154:	e7fd      	b.n	8004152 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004156:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004158:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800415a:	2b00      	cmp	r3, #0
 800415c:	d01e      	beq.n	800419c <xTaskCreateStatic+0xbe>
 800415e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004160:	2b00      	cmp	r3, #0
 8004162:	d01b      	beq.n	800419c <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004164:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004166:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004168:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800416a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800416c:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800416e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004170:	2202      	movs	r2, #2
 8004172:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004176:	2300      	movs	r3, #0
 8004178:	9303      	str	r3, [sp, #12]
 800417a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800417c:	9302      	str	r3, [sp, #8]
 800417e:	f107 0314 	add.w	r3, r7, #20
 8004182:	9301      	str	r3, [sp, #4]
 8004184:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004186:	9300      	str	r3, [sp, #0]
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	687a      	ldr	r2, [r7, #4]
 800418c:	68b9      	ldr	r1, [r7, #8]
 800418e:	68f8      	ldr	r0, [r7, #12]
 8004190:	f000 f850 	bl	8004234 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004194:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004196:	f000 f8e3 	bl	8004360 <prvAddNewTaskToReadyList>
 800419a:	e001      	b.n	80041a0 <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 800419c:	2300      	movs	r3, #0
 800419e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80041a0:	697b      	ldr	r3, [r7, #20]
	}
 80041a2:	4618      	mov	r0, r3
 80041a4:	3728      	adds	r7, #40	@ 0x28
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bd80      	pop	{r7, pc}

080041aa <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80041aa:	b580      	push	{r7, lr}
 80041ac:	b08c      	sub	sp, #48	@ 0x30
 80041ae:	af04      	add	r7, sp, #16
 80041b0:	60f8      	str	r0, [r7, #12]
 80041b2:	60b9      	str	r1, [r7, #8]
 80041b4:	603b      	str	r3, [r7, #0]
 80041b6:	4613      	mov	r3, r2
 80041b8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80041ba:	88fb      	ldrh	r3, [r7, #6]
 80041bc:	009b      	lsls	r3, r3, #2
 80041be:	4618      	mov	r0, r3
 80041c0:	f001 fb74 	bl	80058ac <pvPortMalloc>
 80041c4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80041c6:	697b      	ldr	r3, [r7, #20]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d00e      	beq.n	80041ea <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80041cc:	2060      	movs	r0, #96	@ 0x60
 80041ce:	f001 fb6d 	bl	80058ac <pvPortMalloc>
 80041d2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80041d4:	69fb      	ldr	r3, [r7, #28]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d003      	beq.n	80041e2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80041da:	69fb      	ldr	r3, [r7, #28]
 80041dc:	697a      	ldr	r2, [r7, #20]
 80041de:	631a      	str	r2, [r3, #48]	@ 0x30
 80041e0:	e005      	b.n	80041ee <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80041e2:	6978      	ldr	r0, [r7, #20]
 80041e4:	f001 fc30 	bl	8005a48 <vPortFree>
 80041e8:	e001      	b.n	80041ee <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80041ea:	2300      	movs	r3, #0
 80041ec:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80041ee:	69fb      	ldr	r3, [r7, #28]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d017      	beq.n	8004224 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80041f4:	69fb      	ldr	r3, [r7, #28]
 80041f6:	2200      	movs	r2, #0
 80041f8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80041fc:	88fa      	ldrh	r2, [r7, #6]
 80041fe:	2300      	movs	r3, #0
 8004200:	9303      	str	r3, [sp, #12]
 8004202:	69fb      	ldr	r3, [r7, #28]
 8004204:	9302      	str	r3, [sp, #8]
 8004206:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004208:	9301      	str	r3, [sp, #4]
 800420a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800420c:	9300      	str	r3, [sp, #0]
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	68b9      	ldr	r1, [r7, #8]
 8004212:	68f8      	ldr	r0, [r7, #12]
 8004214:	f000 f80e 	bl	8004234 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004218:	69f8      	ldr	r0, [r7, #28]
 800421a:	f000 f8a1 	bl	8004360 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800421e:	2301      	movs	r3, #1
 8004220:	61bb      	str	r3, [r7, #24]
 8004222:	e002      	b.n	800422a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004224:	f04f 33ff 	mov.w	r3, #4294967295
 8004228:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800422a:	69bb      	ldr	r3, [r7, #24]
	}
 800422c:	4618      	mov	r0, r3
 800422e:	3720      	adds	r7, #32
 8004230:	46bd      	mov	sp, r7
 8004232:	bd80      	pop	{r7, pc}

08004234 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b088      	sub	sp, #32
 8004238:	af00      	add	r7, sp, #0
 800423a:	60f8      	str	r0, [r7, #12]
 800423c:	60b9      	str	r1, [r7, #8]
 800423e:	607a      	str	r2, [r7, #4]
 8004240:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004242:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004244:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	009b      	lsls	r3, r3, #2
 800424a:	461a      	mov	r2, r3
 800424c:	21a5      	movs	r1, #165	@ 0xa5
 800424e:	f002 fa21 	bl	8006694 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004252:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004254:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004256:	6879      	ldr	r1, [r7, #4]
 8004258:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800425c:	440b      	add	r3, r1
 800425e:	009b      	lsls	r3, r3, #2
 8004260:	4413      	add	r3, r2
 8004262:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004264:	69bb      	ldr	r3, [r7, #24]
 8004266:	f023 0307 	bic.w	r3, r3, #7
 800426a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800426c:	69bb      	ldr	r3, [r7, #24]
 800426e:	f003 0307 	and.w	r3, r3, #7
 8004272:	2b00      	cmp	r3, #0
 8004274:	d00d      	beq.n	8004292 <prvInitialiseNewTask+0x5e>
	__asm volatile
 8004276:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800427a:	b672      	cpsid	i
 800427c:	f383 8811 	msr	BASEPRI, r3
 8004280:	f3bf 8f6f 	isb	sy
 8004284:	f3bf 8f4f 	dsb	sy
 8004288:	b662      	cpsie	i
 800428a:	617b      	str	r3, [r7, #20]
}
 800428c:	bf00      	nop
 800428e:	bf00      	nop
 8004290:	e7fd      	b.n	800428e <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d01f      	beq.n	80042d8 <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004298:	2300      	movs	r3, #0
 800429a:	61fb      	str	r3, [r7, #28]
 800429c:	e012      	b.n	80042c4 <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800429e:	68ba      	ldr	r2, [r7, #8]
 80042a0:	69fb      	ldr	r3, [r7, #28]
 80042a2:	4413      	add	r3, r2
 80042a4:	7819      	ldrb	r1, [r3, #0]
 80042a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80042a8:	69fb      	ldr	r3, [r7, #28]
 80042aa:	4413      	add	r3, r2
 80042ac:	3334      	adds	r3, #52	@ 0x34
 80042ae:	460a      	mov	r2, r1
 80042b0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80042b2:	68ba      	ldr	r2, [r7, #8]
 80042b4:	69fb      	ldr	r3, [r7, #28]
 80042b6:	4413      	add	r3, r2
 80042b8:	781b      	ldrb	r3, [r3, #0]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d006      	beq.n	80042cc <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80042be:	69fb      	ldr	r3, [r7, #28]
 80042c0:	3301      	adds	r3, #1
 80042c2:	61fb      	str	r3, [r7, #28]
 80042c4:	69fb      	ldr	r3, [r7, #28]
 80042c6:	2b0f      	cmp	r3, #15
 80042c8:	d9e9      	bls.n	800429e <prvInitialiseNewTask+0x6a>
 80042ca:	e000      	b.n	80042ce <prvInitialiseNewTask+0x9a>
			{
				break;
 80042cc:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80042ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042d0:	2200      	movs	r2, #0
 80042d2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80042d6:	e003      	b.n	80042e0 <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80042d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042da:	2200      	movs	r2, #0
 80042dc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80042e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042e2:	2b06      	cmp	r3, #6
 80042e4:	d901      	bls.n	80042ea <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80042e6:	2306      	movs	r3, #6
 80042e8:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80042ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042ec:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80042ee:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80042f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042f2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80042f4:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80042f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042f8:	2200      	movs	r2, #0
 80042fa:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80042fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042fe:	3304      	adds	r3, #4
 8004300:	4618      	mov	r0, r3
 8004302:	f7ff fe58 	bl	8003fb6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004306:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004308:	3318      	adds	r3, #24
 800430a:	4618      	mov	r0, r3
 800430c:	f7ff fe53 	bl	8003fb6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004310:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004312:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004314:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004316:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004318:	f1c3 0207 	rsb	r2, r3, #7
 800431c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800431e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004320:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004322:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004324:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 8004326:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004328:	2200      	movs	r2, #0
 800432a:	655a      	str	r2, [r3, #84]	@ 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800432c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800432e:	2200      	movs	r2, #0
 8004330:	659a      	str	r2, [r3, #88]	@ 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004332:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004334:	2200      	movs	r2, #0
 8004336:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800433a:	683a      	ldr	r2, [r7, #0]
 800433c:	68f9      	ldr	r1, [r7, #12]
 800433e:	69b8      	ldr	r0, [r7, #24]
 8004340:	f001 f8ba 	bl	80054b8 <pxPortInitialiseStack>
 8004344:	4602      	mov	r2, r0
 8004346:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004348:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800434a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800434c:	2b00      	cmp	r3, #0
 800434e:	d002      	beq.n	8004356 <prvInitialiseNewTask+0x122>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004350:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004352:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004354:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004356:	bf00      	nop
 8004358:	3720      	adds	r7, #32
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}
	...

08004360 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b082      	sub	sp, #8
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004368:	f001 f9b8 	bl	80056dc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800436c:	4b2c      	ldr	r3, [pc, #176]	@ (8004420 <prvAddNewTaskToReadyList+0xc0>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	3301      	adds	r3, #1
 8004372:	4a2b      	ldr	r2, [pc, #172]	@ (8004420 <prvAddNewTaskToReadyList+0xc0>)
 8004374:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004376:	4b2b      	ldr	r3, [pc, #172]	@ (8004424 <prvAddNewTaskToReadyList+0xc4>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d109      	bne.n	8004392 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800437e:	4a29      	ldr	r2, [pc, #164]	@ (8004424 <prvAddNewTaskToReadyList+0xc4>)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004384:	4b26      	ldr	r3, [pc, #152]	@ (8004420 <prvAddNewTaskToReadyList+0xc0>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	2b01      	cmp	r3, #1
 800438a:	d110      	bne.n	80043ae <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800438c:	f000 fd3c 	bl	8004e08 <prvInitialiseTaskLists>
 8004390:	e00d      	b.n	80043ae <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004392:	4b25      	ldr	r3, [pc, #148]	@ (8004428 <prvAddNewTaskToReadyList+0xc8>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d109      	bne.n	80043ae <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800439a:	4b22      	ldr	r3, [pc, #136]	@ (8004424 <prvAddNewTaskToReadyList+0xc4>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043a4:	429a      	cmp	r2, r3
 80043a6:	d802      	bhi.n	80043ae <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80043a8:	4a1e      	ldr	r2, [pc, #120]	@ (8004424 <prvAddNewTaskToReadyList+0xc4>)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80043ae:	4b1f      	ldr	r3, [pc, #124]	@ (800442c <prvAddNewTaskToReadyList+0xcc>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	3301      	adds	r3, #1
 80043b4:	4a1d      	ldr	r2, [pc, #116]	@ (800442c <prvAddNewTaskToReadyList+0xcc>)
 80043b6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80043b8:	4b1c      	ldr	r3, [pc, #112]	@ (800442c <prvAddNewTaskToReadyList+0xcc>)
 80043ba:	681a      	ldr	r2, [r3, #0]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043c4:	2201      	movs	r2, #1
 80043c6:	409a      	lsls	r2, r3
 80043c8:	4b19      	ldr	r3, [pc, #100]	@ (8004430 <prvAddNewTaskToReadyList+0xd0>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4313      	orrs	r3, r2
 80043ce:	4a18      	ldr	r2, [pc, #96]	@ (8004430 <prvAddNewTaskToReadyList+0xd0>)
 80043d0:	6013      	str	r3, [r2, #0]
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80043d6:	4613      	mov	r3, r2
 80043d8:	009b      	lsls	r3, r3, #2
 80043da:	4413      	add	r3, r2
 80043dc:	009b      	lsls	r3, r3, #2
 80043de:	4a15      	ldr	r2, [pc, #84]	@ (8004434 <prvAddNewTaskToReadyList+0xd4>)
 80043e0:	441a      	add	r2, r3
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	3304      	adds	r3, #4
 80043e6:	4619      	mov	r1, r3
 80043e8:	4610      	mov	r0, r2
 80043ea:	f7ff fdf1 	bl	8003fd0 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80043ee:	f001 f9ab 	bl	8005748 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80043f2:	4b0d      	ldr	r3, [pc, #52]	@ (8004428 <prvAddNewTaskToReadyList+0xc8>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d00e      	beq.n	8004418 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80043fa:	4b0a      	ldr	r3, [pc, #40]	@ (8004424 <prvAddNewTaskToReadyList+0xc4>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004404:	429a      	cmp	r2, r3
 8004406:	d207      	bcs.n	8004418 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004408:	4b0b      	ldr	r3, [pc, #44]	@ (8004438 <prvAddNewTaskToReadyList+0xd8>)
 800440a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800440e:	601a      	str	r2, [r3, #0]
 8004410:	f3bf 8f4f 	dsb	sy
 8004414:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004418:	bf00      	nop
 800441a:	3708      	adds	r7, #8
 800441c:	46bd      	mov	sp, r7
 800441e:	bd80      	pop	{r7, pc}
 8004420:	20000a98 	.word	0x20000a98
 8004424:	20000998 	.word	0x20000998
 8004428:	20000aa4 	.word	0x20000aa4
 800442c:	20000ab4 	.word	0x20000ab4
 8004430:	20000aa0 	.word	0x20000aa0
 8004434:	2000099c 	.word	0x2000099c
 8004438:	e000ed04 	.word	0xe000ed04

0800443c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800443c:	b580      	push	{r7, lr}
 800443e:	b084      	sub	sp, #16
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004444:	2300      	movs	r3, #0
 8004446:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d01a      	beq.n	8004484 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800444e:	4b15      	ldr	r3, [pc, #84]	@ (80044a4 <vTaskDelay+0x68>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d00d      	beq.n	8004472 <vTaskDelay+0x36>
	__asm volatile
 8004456:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800445a:	b672      	cpsid	i
 800445c:	f383 8811 	msr	BASEPRI, r3
 8004460:	f3bf 8f6f 	isb	sy
 8004464:	f3bf 8f4f 	dsb	sy
 8004468:	b662      	cpsie	i
 800446a:	60bb      	str	r3, [r7, #8]
}
 800446c:	bf00      	nop
 800446e:	bf00      	nop
 8004470:	e7fd      	b.n	800446e <vTaskDelay+0x32>
			vTaskSuspendAll();
 8004472:	f000 fa17 	bl	80048a4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004476:	2100      	movs	r1, #0
 8004478:	6878      	ldr	r0, [r7, #4]
 800447a:	f000 ffb7 	bl	80053ec <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800447e:	f000 fa1f 	bl	80048c0 <xTaskResumeAll>
 8004482:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d107      	bne.n	800449a <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 800448a:	4b07      	ldr	r3, [pc, #28]	@ (80044a8 <vTaskDelay+0x6c>)
 800448c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004490:	601a      	str	r2, [r3, #0]
 8004492:	f3bf 8f4f 	dsb	sy
 8004496:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800449a:	bf00      	nop
 800449c:	3710      	adds	r7, #16
 800449e:	46bd      	mov	sp, r7
 80044a0:	bd80      	pop	{r7, pc}
 80044a2:	bf00      	nop
 80044a4:	20000ac0 	.word	0x20000ac0
 80044a8:	e000ed04 	.word	0xe000ed04

080044ac <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b088      	sub	sp, #32
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 80044b8:	69bb      	ldr	r3, [r7, #24]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d10d      	bne.n	80044da <eTaskGetState+0x2e>
	__asm volatile
 80044be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044c2:	b672      	cpsid	i
 80044c4:	f383 8811 	msr	BASEPRI, r3
 80044c8:	f3bf 8f6f 	isb	sy
 80044cc:	f3bf 8f4f 	dsb	sy
 80044d0:	b662      	cpsie	i
 80044d2:	60bb      	str	r3, [r7, #8]
}
 80044d4:	bf00      	nop
 80044d6:	bf00      	nop
 80044d8:	e7fd      	b.n	80044d6 <eTaskGetState+0x2a>

		if( pxTCB == pxCurrentTCB )
 80044da:	4b24      	ldr	r3, [pc, #144]	@ (800456c <eTaskGetState+0xc0>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	69ba      	ldr	r2, [r7, #24]
 80044e0:	429a      	cmp	r2, r3
 80044e2:	d102      	bne.n	80044ea <eTaskGetState+0x3e>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 80044e4:	2300      	movs	r3, #0
 80044e6:	77fb      	strb	r3, [r7, #31]
 80044e8:	e03a      	b.n	8004560 <eTaskGetState+0xb4>
		}
		else
		{
			taskENTER_CRITICAL();
 80044ea:	f001 f8f7 	bl	80056dc <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 80044ee:	69bb      	ldr	r3, [r7, #24]
 80044f0:	695b      	ldr	r3, [r3, #20]
 80044f2:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 80044f4:	4b1e      	ldr	r3, [pc, #120]	@ (8004570 <eTaskGetState+0xc4>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 80044fa:	4b1e      	ldr	r3, [pc, #120]	@ (8004574 <eTaskGetState+0xc8>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 8004500:	f001 f922 	bl	8005748 <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 8004504:	697a      	ldr	r2, [r7, #20]
 8004506:	693b      	ldr	r3, [r7, #16]
 8004508:	429a      	cmp	r2, r3
 800450a:	d003      	beq.n	8004514 <eTaskGetState+0x68>
 800450c:	697a      	ldr	r2, [r7, #20]
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	429a      	cmp	r2, r3
 8004512:	d102      	bne.n	800451a <eTaskGetState+0x6e>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 8004514:	2302      	movs	r3, #2
 8004516:	77fb      	strb	r3, [r7, #31]
 8004518:	e022      	b.n	8004560 <eTaskGetState+0xb4>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 800451a:	697b      	ldr	r3, [r7, #20]
 800451c:	4a16      	ldr	r2, [pc, #88]	@ (8004578 <eTaskGetState+0xcc>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d112      	bne.n	8004548 <eTaskGetState+0x9c>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 8004522:	69bb      	ldr	r3, [r7, #24]
 8004524:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004526:	2b00      	cmp	r3, #0
 8004528:	d10b      	bne.n	8004542 <eTaskGetState+0x96>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800452a:	69bb      	ldr	r3, [r7, #24]
 800452c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004530:	b2db      	uxtb	r3, r3
 8004532:	2b01      	cmp	r3, #1
 8004534:	d102      	bne.n	800453c <eTaskGetState+0x90>
							{
								eReturn = eBlocked;
 8004536:	2302      	movs	r3, #2
 8004538:	77fb      	strb	r3, [r7, #31]
 800453a:	e011      	b.n	8004560 <eTaskGetState+0xb4>
							}
							else
							{
								eReturn = eSuspended;
 800453c:	2303      	movs	r3, #3
 800453e:	77fb      	strb	r3, [r7, #31]
 8004540:	e00e      	b.n	8004560 <eTaskGetState+0xb4>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 8004542:	2302      	movs	r3, #2
 8004544:	77fb      	strb	r3, [r7, #31]
 8004546:	e00b      	b.n	8004560 <eTaskGetState+0xb4>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 8004548:	697b      	ldr	r3, [r7, #20]
 800454a:	4a0c      	ldr	r2, [pc, #48]	@ (800457c <eTaskGetState+0xd0>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d002      	beq.n	8004556 <eTaskGetState+0xaa>
 8004550:	697b      	ldr	r3, [r7, #20]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d102      	bne.n	800455c <eTaskGetState+0xb0>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 8004556:	2304      	movs	r3, #4
 8004558:	77fb      	strb	r3, [r7, #31]
 800455a:	e001      	b.n	8004560 <eTaskGetState+0xb4>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 800455c:	2301      	movs	r3, #1
 800455e:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 8004560:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8004562:	4618      	mov	r0, r3
 8004564:	3720      	adds	r7, #32
 8004566:	46bd      	mov	sp, r7
 8004568:	bd80      	pop	{r7, pc}
 800456a:	bf00      	nop
 800456c:	20000998 	.word	0x20000998
 8004570:	20000a50 	.word	0x20000a50
 8004574:	20000a54 	.word	0x20000a54
 8004578:	20000a84 	.word	0x20000a84
 800457c:	20000a6c 	.word	0x20000a6c

08004580 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8004580:	b580      	push	{r7, lr}
 8004582:	b084      	sub	sp, #16
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8004588:	f001 f8a8 	bl	80056dc <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d102      	bne.n	8004598 <vTaskSuspend+0x18>
 8004592:	4b3e      	ldr	r3, [pc, #248]	@ (800468c <vTaskSuspend+0x10c>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	e000      	b.n	800459a <vTaskSuspend+0x1a>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	3304      	adds	r3, #4
 80045a0:	4618      	mov	r0, r3
 80045a2:	f7ff fd72 	bl	800408a <uxListRemove>
 80045a6:	4603      	mov	r3, r0
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d115      	bne.n	80045d8 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80045b0:	4937      	ldr	r1, [pc, #220]	@ (8004690 <vTaskSuspend+0x110>)
 80045b2:	4613      	mov	r3, r2
 80045b4:	009b      	lsls	r3, r3, #2
 80045b6:	4413      	add	r3, r2
 80045b8:	009b      	lsls	r3, r3, #2
 80045ba:	440b      	add	r3, r1
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d10a      	bne.n	80045d8 <vTaskSuspend+0x58>
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045c6:	2201      	movs	r2, #1
 80045c8:	fa02 f303 	lsl.w	r3, r2, r3
 80045cc:	43da      	mvns	r2, r3
 80045ce:	4b31      	ldr	r3, [pc, #196]	@ (8004694 <vTaskSuspend+0x114>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4013      	ands	r3, r2
 80045d4:	4a2f      	ldr	r2, [pc, #188]	@ (8004694 <vTaskSuspend+0x114>)
 80045d6:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d004      	beq.n	80045ea <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	3318      	adds	r3, #24
 80045e4:	4618      	mov	r0, r3
 80045e6:	f7ff fd50 	bl	800408a <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	3304      	adds	r3, #4
 80045ee:	4619      	mov	r1, r3
 80045f0:	4829      	ldr	r0, [pc, #164]	@ (8004698 <vTaskSuspend+0x118>)
 80045f2:	f7ff fced 	bl	8003fd0 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80045fc:	b2db      	uxtb	r3, r3
 80045fe:	2b01      	cmp	r3, #1
 8004600:	d103      	bne.n	800460a <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	2200      	movs	r2, #0
 8004606:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800460a:	f001 f89d 	bl	8005748 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800460e:	4b23      	ldr	r3, [pc, #140]	@ (800469c <vTaskSuspend+0x11c>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d005      	beq.n	8004622 <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8004616:	f001 f861 	bl	80056dc <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800461a:	f000 fd69 	bl	80050f0 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800461e:	f001 f893 	bl	8005748 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8004622:	4b1a      	ldr	r3, [pc, #104]	@ (800468c <vTaskSuspend+0x10c>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	68fa      	ldr	r2, [r7, #12]
 8004628:	429a      	cmp	r2, r3
 800462a:	d12a      	bne.n	8004682 <vTaskSuspend+0x102>
		{
			if( xSchedulerRunning != pdFALSE )
 800462c:	4b1b      	ldr	r3, [pc, #108]	@ (800469c <vTaskSuspend+0x11c>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d01a      	beq.n	800466a <vTaskSuspend+0xea>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8004634:	4b1a      	ldr	r3, [pc, #104]	@ (80046a0 <vTaskSuspend+0x120>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d00d      	beq.n	8004658 <vTaskSuspend+0xd8>
	__asm volatile
 800463c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004640:	b672      	cpsid	i
 8004642:	f383 8811 	msr	BASEPRI, r3
 8004646:	f3bf 8f6f 	isb	sy
 800464a:	f3bf 8f4f 	dsb	sy
 800464e:	b662      	cpsie	i
 8004650:	60bb      	str	r3, [r7, #8]
}
 8004652:	bf00      	nop
 8004654:	bf00      	nop
 8004656:	e7fd      	b.n	8004654 <vTaskSuspend+0xd4>
				portYIELD_WITHIN_API();
 8004658:	4b12      	ldr	r3, [pc, #72]	@ (80046a4 <vTaskSuspend+0x124>)
 800465a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800465e:	601a      	str	r2, [r3, #0]
 8004660:	f3bf 8f4f 	dsb	sy
 8004664:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004668:	e00b      	b.n	8004682 <vTaskSuspend+0x102>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 800466a:	4b0b      	ldr	r3, [pc, #44]	@ (8004698 <vTaskSuspend+0x118>)
 800466c:	681a      	ldr	r2, [r3, #0]
 800466e:	4b0e      	ldr	r3, [pc, #56]	@ (80046a8 <vTaskSuspend+0x128>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	429a      	cmp	r2, r3
 8004674:	d103      	bne.n	800467e <vTaskSuspend+0xfe>
					pxCurrentTCB = NULL;
 8004676:	4b05      	ldr	r3, [pc, #20]	@ (800468c <vTaskSuspend+0x10c>)
 8004678:	2200      	movs	r2, #0
 800467a:	601a      	str	r2, [r3, #0]
	}
 800467c:	e001      	b.n	8004682 <vTaskSuspend+0x102>
					vTaskSwitchContext();
 800467e:	f000 fb0b 	bl	8004c98 <vTaskSwitchContext>
	}
 8004682:	bf00      	nop
 8004684:	3710      	adds	r7, #16
 8004686:	46bd      	mov	sp, r7
 8004688:	bd80      	pop	{r7, pc}
 800468a:	bf00      	nop
 800468c:	20000998 	.word	0x20000998
 8004690:	2000099c 	.word	0x2000099c
 8004694:	20000aa0 	.word	0x20000aa0
 8004698:	20000a84 	.word	0x20000a84
 800469c:	20000aa4 	.word	0x20000aa4
 80046a0:	20000ac0 	.word	0x20000ac0
 80046a4:	e000ed04 	.word	0xe000ed04
 80046a8:	20000a98 	.word	0x20000a98

080046ac <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 80046ac:	b480      	push	{r7}
 80046ae:	b087      	sub	sp, #28
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 80046b4:	2300      	movs	r3, #0
 80046b6:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d10d      	bne.n	80046de <prvTaskIsTaskSuspended+0x32>
	__asm volatile
 80046c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046c6:	b672      	cpsid	i
 80046c8:	f383 8811 	msr	BASEPRI, r3
 80046cc:	f3bf 8f6f 	isb	sy
 80046d0:	f3bf 8f4f 	dsb	sy
 80046d4:	b662      	cpsie	i
 80046d6:	60fb      	str	r3, [r7, #12]
}
 80046d8:	bf00      	nop
 80046da:	bf00      	nop
 80046dc:	e7fd      	b.n	80046da <prvTaskIsTaskSuspended+0x2e>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 80046de:	693b      	ldr	r3, [r7, #16]
 80046e0:	695b      	ldr	r3, [r3, #20]
 80046e2:	4a0a      	ldr	r2, [pc, #40]	@ (800470c <prvTaskIsTaskSuspended+0x60>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d10a      	bne.n	80046fe <prvTaskIsTaskSuspended+0x52>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 80046e8:	693b      	ldr	r3, [r7, #16]
 80046ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046ec:	4a08      	ldr	r2, [pc, #32]	@ (8004710 <prvTaskIsTaskSuspended+0x64>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d005      	beq.n	80046fe <prvTaskIsTaskSuspended+0x52>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 80046f2:	693b      	ldr	r3, [r7, #16]
 80046f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d101      	bne.n	80046fe <prvTaskIsTaskSuspended+0x52>
				{
					xReturn = pdTRUE;
 80046fa:	2301      	movs	r3, #1
 80046fc:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80046fe:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8004700:	4618      	mov	r0, r3
 8004702:	371c      	adds	r7, #28
 8004704:	46bd      	mov	sp, r7
 8004706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470a:	4770      	bx	lr
 800470c:	20000a84 	.word	0x20000a84
 8004710:	20000a58 	.word	0x20000a58

08004714 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8004714:	b580      	push	{r7, lr}
 8004716:	b084      	sub	sp, #16
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d10d      	bne.n	8004742 <vTaskResume+0x2e>
	__asm volatile
 8004726:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800472a:	b672      	cpsid	i
 800472c:	f383 8811 	msr	BASEPRI, r3
 8004730:	f3bf 8f6f 	isb	sy
 8004734:	f3bf 8f4f 	dsb	sy
 8004738:	b662      	cpsie	i
 800473a:	60bb      	str	r3, [r7, #8]
}
 800473c:	bf00      	nop
 800473e:	bf00      	nop
 8004740:	e7fd      	b.n	800473e <vTaskResume+0x2a>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8004742:	4b20      	ldr	r3, [pc, #128]	@ (80047c4 <vTaskResume+0xb0>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	68fa      	ldr	r2, [r7, #12]
 8004748:	429a      	cmp	r2, r3
 800474a:	d037      	beq.n	80047bc <vTaskResume+0xa8>
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d034      	beq.n	80047bc <vTaskResume+0xa8>
		{
			taskENTER_CRITICAL();
 8004752:	f000 ffc3 	bl	80056dc <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8004756:	68f8      	ldr	r0, [r7, #12]
 8004758:	f7ff ffa8 	bl	80046ac <prvTaskIsTaskSuspended>
 800475c:	4603      	mov	r3, r0
 800475e:	2b00      	cmp	r3, #0
 8004760:	d02a      	beq.n	80047b8 <vTaskResume+0xa4>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	3304      	adds	r3, #4
 8004766:	4618      	mov	r0, r3
 8004768:	f7ff fc8f 	bl	800408a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004770:	2201      	movs	r2, #1
 8004772:	409a      	lsls	r2, r3
 8004774:	4b14      	ldr	r3, [pc, #80]	@ (80047c8 <vTaskResume+0xb4>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4313      	orrs	r3, r2
 800477a:	4a13      	ldr	r2, [pc, #76]	@ (80047c8 <vTaskResume+0xb4>)
 800477c:	6013      	str	r3, [r2, #0]
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004782:	4613      	mov	r3, r2
 8004784:	009b      	lsls	r3, r3, #2
 8004786:	4413      	add	r3, r2
 8004788:	009b      	lsls	r3, r3, #2
 800478a:	4a10      	ldr	r2, [pc, #64]	@ (80047cc <vTaskResume+0xb8>)
 800478c:	441a      	add	r2, r3
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	3304      	adds	r3, #4
 8004792:	4619      	mov	r1, r3
 8004794:	4610      	mov	r0, r2
 8004796:	f7ff fc1b 	bl	8003fd0 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800479e:	4b09      	ldr	r3, [pc, #36]	@ (80047c4 <vTaskResume+0xb0>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047a4:	429a      	cmp	r2, r3
 80047a6:	d307      	bcc.n	80047b8 <vTaskResume+0xa4>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 80047a8:	4b09      	ldr	r3, [pc, #36]	@ (80047d0 <vTaskResume+0xbc>)
 80047aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80047ae:	601a      	str	r2, [r3, #0]
 80047b0:	f3bf 8f4f 	dsb	sy
 80047b4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 80047b8:	f000 ffc6 	bl	8005748 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80047bc:	bf00      	nop
 80047be:	3710      	adds	r7, #16
 80047c0:	46bd      	mov	sp, r7
 80047c2:	bd80      	pop	{r7, pc}
 80047c4:	20000998 	.word	0x20000998
 80047c8:	20000aa0 	.word	0x20000aa0
 80047cc:	2000099c 	.word	0x2000099c
 80047d0:	e000ed04 	.word	0xe000ed04

080047d4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b08a      	sub	sp, #40	@ 0x28
 80047d8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80047da:	2300      	movs	r3, #0
 80047dc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80047de:	2300      	movs	r3, #0
 80047e0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80047e2:	463a      	mov	r2, r7
 80047e4:	1d39      	adds	r1, r7, #4
 80047e6:	f107 0308 	add.w	r3, r7, #8
 80047ea:	4618      	mov	r0, r3
 80047ec:	f7fb ff0e 	bl	800060c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80047f0:	6839      	ldr	r1, [r7, #0]
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	68ba      	ldr	r2, [r7, #8]
 80047f6:	9202      	str	r2, [sp, #8]
 80047f8:	9301      	str	r3, [sp, #4]
 80047fa:	2300      	movs	r3, #0
 80047fc:	9300      	str	r3, [sp, #0]
 80047fe:	2300      	movs	r3, #0
 8004800:	460a      	mov	r2, r1
 8004802:	4922      	ldr	r1, [pc, #136]	@ (800488c <vTaskStartScheduler+0xb8>)
 8004804:	4822      	ldr	r0, [pc, #136]	@ (8004890 <vTaskStartScheduler+0xbc>)
 8004806:	f7ff fc6a 	bl	80040de <xTaskCreateStatic>
 800480a:	4603      	mov	r3, r0
 800480c:	4a21      	ldr	r2, [pc, #132]	@ (8004894 <vTaskStartScheduler+0xc0>)
 800480e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004810:	4b20      	ldr	r3, [pc, #128]	@ (8004894 <vTaskStartScheduler+0xc0>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d002      	beq.n	800481e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004818:	2301      	movs	r3, #1
 800481a:	617b      	str	r3, [r7, #20]
 800481c:	e001      	b.n	8004822 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800481e:	2300      	movs	r3, #0
 8004820:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004822:	697b      	ldr	r3, [r7, #20]
 8004824:	2b01      	cmp	r3, #1
 8004826:	d11a      	bne.n	800485e <vTaskStartScheduler+0x8a>
	__asm volatile
 8004828:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800482c:	b672      	cpsid	i
 800482e:	f383 8811 	msr	BASEPRI, r3
 8004832:	f3bf 8f6f 	isb	sy
 8004836:	f3bf 8f4f 	dsb	sy
 800483a:	b662      	cpsie	i
 800483c:	613b      	str	r3, [r7, #16]
}
 800483e:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004840:	4b15      	ldr	r3, [pc, #84]	@ (8004898 <vTaskStartScheduler+0xc4>)
 8004842:	f04f 32ff 	mov.w	r2, #4294967295
 8004846:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004848:	4b14      	ldr	r3, [pc, #80]	@ (800489c <vTaskStartScheduler+0xc8>)
 800484a:	2201      	movs	r2, #1
 800484c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800484e:	4b14      	ldr	r3, [pc, #80]	@ (80048a0 <vTaskStartScheduler+0xcc>)
 8004850:	2200      	movs	r2, #0
 8004852:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 8004854:	f7fb feca 	bl	80005ec <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004858:	f000 fec2 	bl	80055e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800485c:	e011      	b.n	8004882 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800485e:	697b      	ldr	r3, [r7, #20]
 8004860:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004864:	d10d      	bne.n	8004882 <vTaskStartScheduler+0xae>
	__asm volatile
 8004866:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800486a:	b672      	cpsid	i
 800486c:	f383 8811 	msr	BASEPRI, r3
 8004870:	f3bf 8f6f 	isb	sy
 8004874:	f3bf 8f4f 	dsb	sy
 8004878:	b662      	cpsie	i
 800487a:	60fb      	str	r3, [r7, #12]
}
 800487c:	bf00      	nop
 800487e:	bf00      	nop
 8004880:	e7fd      	b.n	800487e <vTaskStartScheduler+0xaa>
}
 8004882:	bf00      	nop
 8004884:	3718      	adds	r7, #24
 8004886:	46bd      	mov	sp, r7
 8004888:	bd80      	pop	{r7, pc}
 800488a:	bf00      	nop
 800488c:	0800788c 	.word	0x0800788c
 8004890:	08004dd9 	.word	0x08004dd9
 8004894:	20000abc 	.word	0x20000abc
 8004898:	20000ab8 	.word	0x20000ab8
 800489c:	20000aa4 	.word	0x20000aa4
 80048a0:	20000a9c 	.word	0x20000a9c

080048a4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80048a4:	b480      	push	{r7}
 80048a6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80048a8:	4b04      	ldr	r3, [pc, #16]	@ (80048bc <vTaskSuspendAll+0x18>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	3301      	adds	r3, #1
 80048ae:	4a03      	ldr	r2, [pc, #12]	@ (80048bc <vTaskSuspendAll+0x18>)
 80048b0:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80048b2:	bf00      	nop
 80048b4:	46bd      	mov	sp, r7
 80048b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ba:	4770      	bx	lr
 80048bc:	20000ac0 	.word	0x20000ac0

080048c0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b084      	sub	sp, #16
 80048c4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80048c6:	2300      	movs	r3, #0
 80048c8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80048ca:	2300      	movs	r3, #0
 80048cc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80048ce:	4b43      	ldr	r3, [pc, #268]	@ (80049dc <xTaskResumeAll+0x11c>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d10d      	bne.n	80048f2 <xTaskResumeAll+0x32>
	__asm volatile
 80048d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048da:	b672      	cpsid	i
 80048dc:	f383 8811 	msr	BASEPRI, r3
 80048e0:	f3bf 8f6f 	isb	sy
 80048e4:	f3bf 8f4f 	dsb	sy
 80048e8:	b662      	cpsie	i
 80048ea:	603b      	str	r3, [r7, #0]
}
 80048ec:	bf00      	nop
 80048ee:	bf00      	nop
 80048f0:	e7fd      	b.n	80048ee <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80048f2:	f000 fef3 	bl	80056dc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80048f6:	4b39      	ldr	r3, [pc, #228]	@ (80049dc <xTaskResumeAll+0x11c>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	3b01      	subs	r3, #1
 80048fc:	4a37      	ldr	r2, [pc, #220]	@ (80049dc <xTaskResumeAll+0x11c>)
 80048fe:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004900:	4b36      	ldr	r3, [pc, #216]	@ (80049dc <xTaskResumeAll+0x11c>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d161      	bne.n	80049cc <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004908:	4b35      	ldr	r3, [pc, #212]	@ (80049e0 <xTaskResumeAll+0x120>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d05d      	beq.n	80049cc <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004910:	e02e      	b.n	8004970 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004912:	4b34      	ldr	r3, [pc, #208]	@ (80049e4 <xTaskResumeAll+0x124>)
 8004914:	68db      	ldr	r3, [r3, #12]
 8004916:	68db      	ldr	r3, [r3, #12]
 8004918:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	3318      	adds	r3, #24
 800491e:	4618      	mov	r0, r3
 8004920:	f7ff fbb3 	bl	800408a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	3304      	adds	r3, #4
 8004928:	4618      	mov	r0, r3
 800492a:	f7ff fbae 	bl	800408a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004932:	2201      	movs	r2, #1
 8004934:	409a      	lsls	r2, r3
 8004936:	4b2c      	ldr	r3, [pc, #176]	@ (80049e8 <xTaskResumeAll+0x128>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4313      	orrs	r3, r2
 800493c:	4a2a      	ldr	r2, [pc, #168]	@ (80049e8 <xTaskResumeAll+0x128>)
 800493e:	6013      	str	r3, [r2, #0]
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004944:	4613      	mov	r3, r2
 8004946:	009b      	lsls	r3, r3, #2
 8004948:	4413      	add	r3, r2
 800494a:	009b      	lsls	r3, r3, #2
 800494c:	4a27      	ldr	r2, [pc, #156]	@ (80049ec <xTaskResumeAll+0x12c>)
 800494e:	441a      	add	r2, r3
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	3304      	adds	r3, #4
 8004954:	4619      	mov	r1, r3
 8004956:	4610      	mov	r0, r2
 8004958:	f7ff fb3a 	bl	8003fd0 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004960:	4b23      	ldr	r3, [pc, #140]	@ (80049f0 <xTaskResumeAll+0x130>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004966:	429a      	cmp	r2, r3
 8004968:	d302      	bcc.n	8004970 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 800496a:	4b22      	ldr	r3, [pc, #136]	@ (80049f4 <xTaskResumeAll+0x134>)
 800496c:	2201      	movs	r2, #1
 800496e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004970:	4b1c      	ldr	r3, [pc, #112]	@ (80049e4 <xTaskResumeAll+0x124>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d1cc      	bne.n	8004912 <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d001      	beq.n	8004982 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800497e:	f000 fbb7 	bl	80050f0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004982:	4b1d      	ldr	r3, [pc, #116]	@ (80049f8 <xTaskResumeAll+0x138>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d010      	beq.n	80049b0 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800498e:	f000 f8c7 	bl	8004b20 <xTaskIncrementTick>
 8004992:	4603      	mov	r3, r0
 8004994:	2b00      	cmp	r3, #0
 8004996:	d002      	beq.n	800499e <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8004998:	4b16      	ldr	r3, [pc, #88]	@ (80049f4 <xTaskResumeAll+0x134>)
 800499a:	2201      	movs	r2, #1
 800499c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	3b01      	subs	r3, #1
 80049a2:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d1f1      	bne.n	800498e <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 80049aa:	4b13      	ldr	r3, [pc, #76]	@ (80049f8 <xTaskResumeAll+0x138>)
 80049ac:	2200      	movs	r2, #0
 80049ae:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80049b0:	4b10      	ldr	r3, [pc, #64]	@ (80049f4 <xTaskResumeAll+0x134>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d009      	beq.n	80049cc <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80049b8:	2301      	movs	r3, #1
 80049ba:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80049bc:	4b0f      	ldr	r3, [pc, #60]	@ (80049fc <xTaskResumeAll+0x13c>)
 80049be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80049c2:	601a      	str	r2, [r3, #0]
 80049c4:	f3bf 8f4f 	dsb	sy
 80049c8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80049cc:	f000 febc 	bl	8005748 <vPortExitCritical>

	return xAlreadyYielded;
 80049d0:	68bb      	ldr	r3, [r7, #8]
}
 80049d2:	4618      	mov	r0, r3
 80049d4:	3710      	adds	r7, #16
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bd80      	pop	{r7, pc}
 80049da:	bf00      	nop
 80049dc:	20000ac0 	.word	0x20000ac0
 80049e0:	20000a98 	.word	0x20000a98
 80049e4:	20000a58 	.word	0x20000a58
 80049e8:	20000aa0 	.word	0x20000aa0
 80049ec:	2000099c 	.word	0x2000099c
 80049f0:	20000998 	.word	0x20000998
 80049f4:	20000aac 	.word	0x20000aac
 80049f8:	20000aa8 	.word	0x20000aa8
 80049fc:	e000ed04 	.word	0xe000ed04

08004a00 <uxTaskGetSystemState>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArraySize, uint32_t * const pulTotalRunTime )
	{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b086      	sub	sp, #24
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	60f8      	str	r0, [r7, #12]
 8004a08:	60b9      	str	r1, [r7, #8]
 8004a0a:	607a      	str	r2, [r7, #4]
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	617b      	str	r3, [r7, #20]
 8004a10:	2307      	movs	r3, #7
 8004a12:	613b      	str	r3, [r7, #16]

		vTaskSuspendAll();
 8004a14:	f7ff ff46 	bl	80048a4 <vTaskSuspendAll>
		{
			/* Is there a space in the array for each task in the system? */
			if( uxArraySize >= uxCurrentNumberOfTasks )
 8004a18:	4b3b      	ldr	r3, [pc, #236]	@ (8004b08 <uxTaskGetSystemState+0x108>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	68ba      	ldr	r2, [r7, #8]
 8004a1e:	429a      	cmp	r2, r3
 8004a20:	d36a      	bcc.n	8004af8 <uxTaskGetSystemState+0xf8>
			{
				/* Fill in an TaskStatus_t structure with information on each
				task in the Ready state. */
				do
				{
					uxQueue--;
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	3b01      	subs	r3, #1
 8004a26:	613b      	str	r3, [r7, #16]
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 8004a28:	697a      	ldr	r2, [r7, #20]
 8004a2a:	4613      	mov	r3, r2
 8004a2c:	00db      	lsls	r3, r3, #3
 8004a2e:	4413      	add	r3, r2
 8004a30:	009b      	lsls	r3, r3, #2
 8004a32:	461a      	mov	r2, r3
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	1898      	adds	r0, r3, r2
 8004a38:	693a      	ldr	r2, [r7, #16]
 8004a3a:	4613      	mov	r3, r2
 8004a3c:	009b      	lsls	r3, r3, #2
 8004a3e:	4413      	add	r3, r2
 8004a40:	009b      	lsls	r3, r3, #2
 8004a42:	4a32      	ldr	r2, [pc, #200]	@ (8004b0c <uxTaskGetSystemState+0x10c>)
 8004a44:	4413      	add	r3, r2
 8004a46:	2201      	movs	r2, #1
 8004a48:	4619      	mov	r1, r3
 8004a4a:	f000 fab1 	bl	8004fb0 <prvListTasksWithinSingleList>
 8004a4e:	4602      	mov	r2, r0
 8004a50:	697b      	ldr	r3, [r7, #20]
 8004a52:	4413      	add	r3, r2
 8004a54:	617b      	str	r3, [r7, #20]

				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a56:	693b      	ldr	r3, [r7, #16]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d1e2      	bne.n	8004a22 <uxTaskGetSystemState+0x22>

				/* Fill in an TaskStatus_t structure with information on each
				task in the Blocked state. */
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 8004a5c:	697a      	ldr	r2, [r7, #20]
 8004a5e:	4613      	mov	r3, r2
 8004a60:	00db      	lsls	r3, r3, #3
 8004a62:	4413      	add	r3, r2
 8004a64:	009b      	lsls	r3, r3, #2
 8004a66:	461a      	mov	r2, r3
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	4413      	add	r3, r2
 8004a6c:	4a28      	ldr	r2, [pc, #160]	@ (8004b10 <uxTaskGetSystemState+0x110>)
 8004a6e:	6811      	ldr	r1, [r2, #0]
 8004a70:	2202      	movs	r2, #2
 8004a72:	4618      	mov	r0, r3
 8004a74:	f000 fa9c 	bl	8004fb0 <prvListTasksWithinSingleList>
 8004a78:	4602      	mov	r2, r0
 8004a7a:	697b      	ldr	r3, [r7, #20]
 8004a7c:	4413      	add	r3, r2
 8004a7e:	617b      	str	r3, [r7, #20]
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 8004a80:	697a      	ldr	r2, [r7, #20]
 8004a82:	4613      	mov	r3, r2
 8004a84:	00db      	lsls	r3, r3, #3
 8004a86:	4413      	add	r3, r2
 8004a88:	009b      	lsls	r3, r3, #2
 8004a8a:	461a      	mov	r2, r3
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	4413      	add	r3, r2
 8004a90:	4a20      	ldr	r2, [pc, #128]	@ (8004b14 <uxTaskGetSystemState+0x114>)
 8004a92:	6811      	ldr	r1, [r2, #0]
 8004a94:	2202      	movs	r2, #2
 8004a96:	4618      	mov	r0, r3
 8004a98:	f000 fa8a 	bl	8004fb0 <prvListTasksWithinSingleList>
 8004a9c:	4602      	mov	r2, r0
 8004a9e:	697b      	ldr	r3, [r7, #20]
 8004aa0:	4413      	add	r3, r2
 8004aa2:	617b      	str	r3, [r7, #20]

				#if( INCLUDE_vTaskDelete == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task that has been deleted but not yet cleaned up. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 8004aa4:	697a      	ldr	r2, [r7, #20]
 8004aa6:	4613      	mov	r3, r2
 8004aa8:	00db      	lsls	r3, r3, #3
 8004aaa:	4413      	add	r3, r2
 8004aac:	009b      	lsls	r3, r3, #2
 8004aae:	461a      	mov	r2, r3
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	4413      	add	r3, r2
 8004ab4:	2204      	movs	r2, #4
 8004ab6:	4918      	ldr	r1, [pc, #96]	@ (8004b18 <uxTaskGetSystemState+0x118>)
 8004ab8:	4618      	mov	r0, r3
 8004aba:	f000 fa79 	bl	8004fb0 <prvListTasksWithinSingleList>
 8004abe:	4602      	mov	r2, r0
 8004ac0:	697b      	ldr	r3, [r7, #20]
 8004ac2:	4413      	add	r3, r2
 8004ac4:	617b      	str	r3, [r7, #20]

				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task in the Suspended state. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
 8004ac6:	697a      	ldr	r2, [r7, #20]
 8004ac8:	4613      	mov	r3, r2
 8004aca:	00db      	lsls	r3, r3, #3
 8004acc:	4413      	add	r3, r2
 8004ace:	009b      	lsls	r3, r3, #2
 8004ad0:	461a      	mov	r2, r3
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	4413      	add	r3, r2
 8004ad6:	2203      	movs	r2, #3
 8004ad8:	4910      	ldr	r1, [pc, #64]	@ (8004b1c <uxTaskGetSystemState+0x11c>)
 8004ada:	4618      	mov	r0, r3
 8004adc:	f000 fa68 	bl	8004fb0 <prvListTasksWithinSingleList>
 8004ae0:	4602      	mov	r2, r0
 8004ae2:	697b      	ldr	r3, [r7, #20]
 8004ae4:	4413      	add	r3, r2
 8004ae6:	617b      	str	r3, [r7, #20]
				}
				#endif

				#if ( configGENERATE_RUN_TIME_STATS == 1)
				{
					if( pulTotalRunTime != NULL )
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d004      	beq.n	8004af8 <uxTaskGetSystemState+0xf8>
					{
						#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
							portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
						#else
							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8004aee:	f7fb fd84 	bl	80005fa <getRunTimeCounterValue>
 8004af2:	4602      	mov	r2, r0
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	601a      	str	r2, [r3, #0]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		( void ) xTaskResumeAll();
 8004af8:	f7ff fee2 	bl	80048c0 <xTaskResumeAll>

		return uxTask;
 8004afc:	697b      	ldr	r3, [r7, #20]
	}
 8004afe:	4618      	mov	r0, r3
 8004b00:	3718      	adds	r7, #24
 8004b02:	46bd      	mov	sp, r7
 8004b04:	bd80      	pop	{r7, pc}
 8004b06:	bf00      	nop
 8004b08:	20000a98 	.word	0x20000a98
 8004b0c:	2000099c 	.word	0x2000099c
 8004b10:	20000a50 	.word	0x20000a50
 8004b14:	20000a54 	.word	0x20000a54
 8004b18:	20000a6c 	.word	0x20000a6c
 8004b1c:	20000a84 	.word	0x20000a84

08004b20 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b086      	sub	sp, #24
 8004b24:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004b26:	2300      	movs	r3, #0
 8004b28:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004b2a:	4b50      	ldr	r3, [pc, #320]	@ (8004c6c <xTaskIncrementTick+0x14c>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	f040 808b 	bne.w	8004c4a <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004b34:	4b4e      	ldr	r3, [pc, #312]	@ (8004c70 <xTaskIncrementTick+0x150>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	3301      	adds	r3, #1
 8004b3a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004b3c:	4a4c      	ldr	r2, [pc, #304]	@ (8004c70 <xTaskIncrementTick+0x150>)
 8004b3e:	693b      	ldr	r3, [r7, #16]
 8004b40:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004b42:	693b      	ldr	r3, [r7, #16]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d123      	bne.n	8004b90 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 8004b48:	4b4a      	ldr	r3, [pc, #296]	@ (8004c74 <xTaskIncrementTick+0x154>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d00d      	beq.n	8004b6e <xTaskIncrementTick+0x4e>
	__asm volatile
 8004b52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b56:	b672      	cpsid	i
 8004b58:	f383 8811 	msr	BASEPRI, r3
 8004b5c:	f3bf 8f6f 	isb	sy
 8004b60:	f3bf 8f4f 	dsb	sy
 8004b64:	b662      	cpsie	i
 8004b66:	603b      	str	r3, [r7, #0]
}
 8004b68:	bf00      	nop
 8004b6a:	bf00      	nop
 8004b6c:	e7fd      	b.n	8004b6a <xTaskIncrementTick+0x4a>
 8004b6e:	4b41      	ldr	r3, [pc, #260]	@ (8004c74 <xTaskIncrementTick+0x154>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	60fb      	str	r3, [r7, #12]
 8004b74:	4b40      	ldr	r3, [pc, #256]	@ (8004c78 <xTaskIncrementTick+0x158>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4a3e      	ldr	r2, [pc, #248]	@ (8004c74 <xTaskIncrementTick+0x154>)
 8004b7a:	6013      	str	r3, [r2, #0]
 8004b7c:	4a3e      	ldr	r2, [pc, #248]	@ (8004c78 <xTaskIncrementTick+0x158>)
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	6013      	str	r3, [r2, #0]
 8004b82:	4b3e      	ldr	r3, [pc, #248]	@ (8004c7c <xTaskIncrementTick+0x15c>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	3301      	adds	r3, #1
 8004b88:	4a3c      	ldr	r2, [pc, #240]	@ (8004c7c <xTaskIncrementTick+0x15c>)
 8004b8a:	6013      	str	r3, [r2, #0]
 8004b8c:	f000 fab0 	bl	80050f0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004b90:	4b3b      	ldr	r3, [pc, #236]	@ (8004c80 <xTaskIncrementTick+0x160>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	693a      	ldr	r2, [r7, #16]
 8004b96:	429a      	cmp	r2, r3
 8004b98:	d348      	bcc.n	8004c2c <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004b9a:	4b36      	ldr	r3, [pc, #216]	@ (8004c74 <xTaskIncrementTick+0x154>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d104      	bne.n	8004bae <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ba4:	4b36      	ldr	r3, [pc, #216]	@ (8004c80 <xTaskIncrementTick+0x160>)
 8004ba6:	f04f 32ff 	mov.w	r2, #4294967295
 8004baa:	601a      	str	r2, [r3, #0]
					break;
 8004bac:	e03e      	b.n	8004c2c <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004bae:	4b31      	ldr	r3, [pc, #196]	@ (8004c74 <xTaskIncrementTick+0x154>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	68db      	ldr	r3, [r3, #12]
 8004bb4:	68db      	ldr	r3, [r3, #12]
 8004bb6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004bb8:	68bb      	ldr	r3, [r7, #8]
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004bbe:	693a      	ldr	r2, [r7, #16]
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	429a      	cmp	r2, r3
 8004bc4:	d203      	bcs.n	8004bce <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004bc6:	4a2e      	ldr	r2, [pc, #184]	@ (8004c80 <xTaskIncrementTick+0x160>)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004bcc:	e02e      	b.n	8004c2c <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004bce:	68bb      	ldr	r3, [r7, #8]
 8004bd0:	3304      	adds	r3, #4
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	f7ff fa59 	bl	800408a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004bd8:	68bb      	ldr	r3, [r7, #8]
 8004bda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d004      	beq.n	8004bea <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	3318      	adds	r3, #24
 8004be4:	4618      	mov	r0, r3
 8004be6:	f7ff fa50 	bl	800408a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004bea:	68bb      	ldr	r3, [r7, #8]
 8004bec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bee:	2201      	movs	r2, #1
 8004bf0:	409a      	lsls	r2, r3
 8004bf2:	4b24      	ldr	r3, [pc, #144]	@ (8004c84 <xTaskIncrementTick+0x164>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	4a22      	ldr	r2, [pc, #136]	@ (8004c84 <xTaskIncrementTick+0x164>)
 8004bfa:	6013      	str	r3, [r2, #0]
 8004bfc:	68bb      	ldr	r3, [r7, #8]
 8004bfe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c00:	4613      	mov	r3, r2
 8004c02:	009b      	lsls	r3, r3, #2
 8004c04:	4413      	add	r3, r2
 8004c06:	009b      	lsls	r3, r3, #2
 8004c08:	4a1f      	ldr	r2, [pc, #124]	@ (8004c88 <xTaskIncrementTick+0x168>)
 8004c0a:	441a      	add	r2, r3
 8004c0c:	68bb      	ldr	r3, [r7, #8]
 8004c0e:	3304      	adds	r3, #4
 8004c10:	4619      	mov	r1, r3
 8004c12:	4610      	mov	r0, r2
 8004c14:	f7ff f9dc 	bl	8003fd0 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004c18:	68bb      	ldr	r3, [r7, #8]
 8004c1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c1c:	4b1b      	ldr	r3, [pc, #108]	@ (8004c8c <xTaskIncrementTick+0x16c>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c22:	429a      	cmp	r2, r3
 8004c24:	d3b9      	bcc.n	8004b9a <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 8004c26:	2301      	movs	r3, #1
 8004c28:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004c2a:	e7b6      	b.n	8004b9a <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004c2c:	4b17      	ldr	r3, [pc, #92]	@ (8004c8c <xTaskIncrementTick+0x16c>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c32:	4915      	ldr	r1, [pc, #84]	@ (8004c88 <xTaskIncrementTick+0x168>)
 8004c34:	4613      	mov	r3, r2
 8004c36:	009b      	lsls	r3, r3, #2
 8004c38:	4413      	add	r3, r2
 8004c3a:	009b      	lsls	r3, r3, #2
 8004c3c:	440b      	add	r3, r1
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	2b01      	cmp	r3, #1
 8004c42:	d907      	bls.n	8004c54 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8004c44:	2301      	movs	r3, #1
 8004c46:	617b      	str	r3, [r7, #20]
 8004c48:	e004      	b.n	8004c54 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004c4a:	4b11      	ldr	r3, [pc, #68]	@ (8004c90 <xTaskIncrementTick+0x170>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	3301      	adds	r3, #1
 8004c50:	4a0f      	ldr	r2, [pc, #60]	@ (8004c90 <xTaskIncrementTick+0x170>)
 8004c52:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004c54:	4b0f      	ldr	r3, [pc, #60]	@ (8004c94 <xTaskIncrementTick+0x174>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d001      	beq.n	8004c60 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004c60:	697b      	ldr	r3, [r7, #20]
}
 8004c62:	4618      	mov	r0, r3
 8004c64:	3718      	adds	r7, #24
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bd80      	pop	{r7, pc}
 8004c6a:	bf00      	nop
 8004c6c:	20000ac0 	.word	0x20000ac0
 8004c70:	20000a9c 	.word	0x20000a9c
 8004c74:	20000a50 	.word	0x20000a50
 8004c78:	20000a54 	.word	0x20000a54
 8004c7c:	20000ab0 	.word	0x20000ab0
 8004c80:	20000ab8 	.word	0x20000ab8
 8004c84:	20000aa0 	.word	0x20000aa0
 8004c88:	2000099c 	.word	0x2000099c
 8004c8c:	20000998 	.word	0x20000998
 8004c90:	20000aa8 	.word	0x20000aa8
 8004c94:	20000aac 	.word	0x20000aac

08004c98 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b088      	sub	sp, #32
 8004c9c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004c9e:	4b47      	ldr	r3, [pc, #284]	@ (8004dbc <vTaskSwitchContext+0x124>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d003      	beq.n	8004cae <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004ca6:	4b46      	ldr	r3, [pc, #280]	@ (8004dc0 <vTaskSwitchContext+0x128>)
 8004ca8:	2201      	movs	r2, #1
 8004caa:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004cac:	e082      	b.n	8004db4 <vTaskSwitchContext+0x11c>
		xYieldPending = pdFALSE;
 8004cae:	4b44      	ldr	r3, [pc, #272]	@ (8004dc0 <vTaskSwitchContext+0x128>)
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8004cb4:	f7fb fca1 	bl	80005fa <getRunTimeCounterValue>
 8004cb8:	4603      	mov	r3, r0
 8004cba:	4a42      	ldr	r2, [pc, #264]	@ (8004dc4 <vTaskSwitchContext+0x12c>)
 8004cbc:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 8004cbe:	4b41      	ldr	r3, [pc, #260]	@ (8004dc4 <vTaskSwitchContext+0x12c>)
 8004cc0:	681a      	ldr	r2, [r3, #0]
 8004cc2:	4b41      	ldr	r3, [pc, #260]	@ (8004dc8 <vTaskSwitchContext+0x130>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	429a      	cmp	r2, r3
 8004cc8:	d909      	bls.n	8004cde <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8004cca:	4b40      	ldr	r3, [pc, #256]	@ (8004dcc <vTaskSwitchContext+0x134>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004cd0:	4a3c      	ldr	r2, [pc, #240]	@ (8004dc4 <vTaskSwitchContext+0x12c>)
 8004cd2:	6810      	ldr	r0, [r2, #0]
 8004cd4:	4a3c      	ldr	r2, [pc, #240]	@ (8004dc8 <vTaskSwitchContext+0x130>)
 8004cd6:	6812      	ldr	r2, [r2, #0]
 8004cd8:	1a82      	subs	r2, r0, r2
 8004cda:	440a      	add	r2, r1
 8004cdc:	655a      	str	r2, [r3, #84]	@ 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 8004cde:	4b39      	ldr	r3, [pc, #228]	@ (8004dc4 <vTaskSwitchContext+0x12c>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4a39      	ldr	r2, [pc, #228]	@ (8004dc8 <vTaskSwitchContext+0x130>)
 8004ce4:	6013      	str	r3, [r2, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8004ce6:	4b39      	ldr	r3, [pc, #228]	@ (8004dcc <vTaskSwitchContext+0x134>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cec:	61fb      	str	r3, [r7, #28]
 8004cee:	f04f 33a5 	mov.w	r3, #2779096485	@ 0xa5a5a5a5
 8004cf2:	61bb      	str	r3, [r7, #24]
 8004cf4:	69fb      	ldr	r3, [r7, #28]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	69ba      	ldr	r2, [r7, #24]
 8004cfa:	429a      	cmp	r2, r3
 8004cfc:	d111      	bne.n	8004d22 <vTaskSwitchContext+0x8a>
 8004cfe:	69fb      	ldr	r3, [r7, #28]
 8004d00:	3304      	adds	r3, #4
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	69ba      	ldr	r2, [r7, #24]
 8004d06:	429a      	cmp	r2, r3
 8004d08:	d10b      	bne.n	8004d22 <vTaskSwitchContext+0x8a>
 8004d0a:	69fb      	ldr	r3, [r7, #28]
 8004d0c:	3308      	adds	r3, #8
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	69ba      	ldr	r2, [r7, #24]
 8004d12:	429a      	cmp	r2, r3
 8004d14:	d105      	bne.n	8004d22 <vTaskSwitchContext+0x8a>
 8004d16:	69fb      	ldr	r3, [r7, #28]
 8004d18:	330c      	adds	r3, #12
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	69ba      	ldr	r2, [r7, #24]
 8004d1e:	429a      	cmp	r2, r3
 8004d20:	d008      	beq.n	8004d34 <vTaskSwitchContext+0x9c>
 8004d22:	4b2a      	ldr	r3, [pc, #168]	@ (8004dcc <vTaskSwitchContext+0x134>)
 8004d24:	681a      	ldr	r2, [r3, #0]
 8004d26:	4b29      	ldr	r3, [pc, #164]	@ (8004dcc <vTaskSwitchContext+0x134>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	3334      	adds	r3, #52	@ 0x34
 8004d2c:	4619      	mov	r1, r3
 8004d2e:	4610      	mov	r0, r2
 8004d30:	f7fc fa90 	bl	8001254 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d34:	4b26      	ldr	r3, [pc, #152]	@ (8004dd0 <vTaskSwitchContext+0x138>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	fab3 f383 	clz	r3, r3
 8004d40:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004d42:	7afb      	ldrb	r3, [r7, #11]
 8004d44:	f1c3 031f 	rsb	r3, r3, #31
 8004d48:	617b      	str	r3, [r7, #20]
 8004d4a:	4922      	ldr	r1, [pc, #136]	@ (8004dd4 <vTaskSwitchContext+0x13c>)
 8004d4c:	697a      	ldr	r2, [r7, #20]
 8004d4e:	4613      	mov	r3, r2
 8004d50:	009b      	lsls	r3, r3, #2
 8004d52:	4413      	add	r3, r2
 8004d54:	009b      	lsls	r3, r3, #2
 8004d56:	440b      	add	r3, r1
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d10d      	bne.n	8004d7a <vTaskSwitchContext+0xe2>
	__asm volatile
 8004d5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d62:	b672      	cpsid	i
 8004d64:	f383 8811 	msr	BASEPRI, r3
 8004d68:	f3bf 8f6f 	isb	sy
 8004d6c:	f3bf 8f4f 	dsb	sy
 8004d70:	b662      	cpsie	i
 8004d72:	607b      	str	r3, [r7, #4]
}
 8004d74:	bf00      	nop
 8004d76:	bf00      	nop
 8004d78:	e7fd      	b.n	8004d76 <vTaskSwitchContext+0xde>
 8004d7a:	697a      	ldr	r2, [r7, #20]
 8004d7c:	4613      	mov	r3, r2
 8004d7e:	009b      	lsls	r3, r3, #2
 8004d80:	4413      	add	r3, r2
 8004d82:	009b      	lsls	r3, r3, #2
 8004d84:	4a13      	ldr	r2, [pc, #76]	@ (8004dd4 <vTaskSwitchContext+0x13c>)
 8004d86:	4413      	add	r3, r2
 8004d88:	613b      	str	r3, [r7, #16]
 8004d8a:	693b      	ldr	r3, [r7, #16]
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	685a      	ldr	r2, [r3, #4]
 8004d90:	693b      	ldr	r3, [r7, #16]
 8004d92:	605a      	str	r2, [r3, #4]
 8004d94:	693b      	ldr	r3, [r7, #16]
 8004d96:	685a      	ldr	r2, [r3, #4]
 8004d98:	693b      	ldr	r3, [r7, #16]
 8004d9a:	3308      	adds	r3, #8
 8004d9c:	429a      	cmp	r2, r3
 8004d9e:	d104      	bne.n	8004daa <vTaskSwitchContext+0x112>
 8004da0:	693b      	ldr	r3, [r7, #16]
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	685a      	ldr	r2, [r3, #4]
 8004da6:	693b      	ldr	r3, [r7, #16]
 8004da8:	605a      	str	r2, [r3, #4]
 8004daa:	693b      	ldr	r3, [r7, #16]
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	68db      	ldr	r3, [r3, #12]
 8004db0:	4a06      	ldr	r2, [pc, #24]	@ (8004dcc <vTaskSwitchContext+0x134>)
 8004db2:	6013      	str	r3, [r2, #0]
}
 8004db4:	bf00      	nop
 8004db6:	3720      	adds	r7, #32
 8004db8:	46bd      	mov	sp, r7
 8004dba:	bd80      	pop	{r7, pc}
 8004dbc:	20000ac0 	.word	0x20000ac0
 8004dc0:	20000aac 	.word	0x20000aac
 8004dc4:	20000ac8 	.word	0x20000ac8
 8004dc8:	20000ac4 	.word	0x20000ac4
 8004dcc:	20000998 	.word	0x20000998
 8004dd0:	20000aa0 	.word	0x20000aa0
 8004dd4:	2000099c 	.word	0x2000099c

08004dd8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b082      	sub	sp, #8
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004de0:	f000 f852 	bl	8004e88 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004de4:	4b06      	ldr	r3, [pc, #24]	@ (8004e00 <prvIdleTask+0x28>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	2b01      	cmp	r3, #1
 8004dea:	d9f9      	bls.n	8004de0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004dec:	4b05      	ldr	r3, [pc, #20]	@ (8004e04 <prvIdleTask+0x2c>)
 8004dee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004df2:	601a      	str	r2, [r3, #0]
 8004df4:	f3bf 8f4f 	dsb	sy
 8004df8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004dfc:	e7f0      	b.n	8004de0 <prvIdleTask+0x8>
 8004dfe:	bf00      	nop
 8004e00:	2000099c 	.word	0x2000099c
 8004e04:	e000ed04 	.word	0xe000ed04

08004e08 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b082      	sub	sp, #8
 8004e0c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004e0e:	2300      	movs	r3, #0
 8004e10:	607b      	str	r3, [r7, #4]
 8004e12:	e00c      	b.n	8004e2e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004e14:	687a      	ldr	r2, [r7, #4]
 8004e16:	4613      	mov	r3, r2
 8004e18:	009b      	lsls	r3, r3, #2
 8004e1a:	4413      	add	r3, r2
 8004e1c:	009b      	lsls	r3, r3, #2
 8004e1e:	4a12      	ldr	r2, [pc, #72]	@ (8004e68 <prvInitialiseTaskLists+0x60>)
 8004e20:	4413      	add	r3, r2
 8004e22:	4618      	mov	r0, r3
 8004e24:	f7ff f8a7 	bl	8003f76 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	3301      	adds	r3, #1
 8004e2c:	607b      	str	r3, [r7, #4]
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2b06      	cmp	r3, #6
 8004e32:	d9ef      	bls.n	8004e14 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004e34:	480d      	ldr	r0, [pc, #52]	@ (8004e6c <prvInitialiseTaskLists+0x64>)
 8004e36:	f7ff f89e 	bl	8003f76 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004e3a:	480d      	ldr	r0, [pc, #52]	@ (8004e70 <prvInitialiseTaskLists+0x68>)
 8004e3c:	f7ff f89b 	bl	8003f76 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004e40:	480c      	ldr	r0, [pc, #48]	@ (8004e74 <prvInitialiseTaskLists+0x6c>)
 8004e42:	f7ff f898 	bl	8003f76 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004e46:	480c      	ldr	r0, [pc, #48]	@ (8004e78 <prvInitialiseTaskLists+0x70>)
 8004e48:	f7ff f895 	bl	8003f76 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004e4c:	480b      	ldr	r0, [pc, #44]	@ (8004e7c <prvInitialiseTaskLists+0x74>)
 8004e4e:	f7ff f892 	bl	8003f76 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004e52:	4b0b      	ldr	r3, [pc, #44]	@ (8004e80 <prvInitialiseTaskLists+0x78>)
 8004e54:	4a05      	ldr	r2, [pc, #20]	@ (8004e6c <prvInitialiseTaskLists+0x64>)
 8004e56:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004e58:	4b0a      	ldr	r3, [pc, #40]	@ (8004e84 <prvInitialiseTaskLists+0x7c>)
 8004e5a:	4a05      	ldr	r2, [pc, #20]	@ (8004e70 <prvInitialiseTaskLists+0x68>)
 8004e5c:	601a      	str	r2, [r3, #0]
}
 8004e5e:	bf00      	nop
 8004e60:	3708      	adds	r7, #8
 8004e62:	46bd      	mov	sp, r7
 8004e64:	bd80      	pop	{r7, pc}
 8004e66:	bf00      	nop
 8004e68:	2000099c 	.word	0x2000099c
 8004e6c:	20000a28 	.word	0x20000a28
 8004e70:	20000a3c 	.word	0x20000a3c
 8004e74:	20000a58 	.word	0x20000a58
 8004e78:	20000a6c 	.word	0x20000a6c
 8004e7c:	20000a84 	.word	0x20000a84
 8004e80:	20000a50 	.word	0x20000a50
 8004e84:	20000a54 	.word	0x20000a54

08004e88 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b082      	sub	sp, #8
 8004e8c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004e8e:	e019      	b.n	8004ec4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004e90:	f000 fc24 	bl	80056dc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e94:	4b10      	ldr	r3, [pc, #64]	@ (8004ed8 <prvCheckTasksWaitingTermination+0x50>)
 8004e96:	68db      	ldr	r3, [r3, #12]
 8004e98:	68db      	ldr	r3, [r3, #12]
 8004e9a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	3304      	adds	r3, #4
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	f7ff f8f2 	bl	800408a <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004ea6:	4b0d      	ldr	r3, [pc, #52]	@ (8004edc <prvCheckTasksWaitingTermination+0x54>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	3b01      	subs	r3, #1
 8004eac:	4a0b      	ldr	r2, [pc, #44]	@ (8004edc <prvCheckTasksWaitingTermination+0x54>)
 8004eae:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004eb0:	4b0b      	ldr	r3, [pc, #44]	@ (8004ee0 <prvCheckTasksWaitingTermination+0x58>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	3b01      	subs	r3, #1
 8004eb6:	4a0a      	ldr	r2, [pc, #40]	@ (8004ee0 <prvCheckTasksWaitingTermination+0x58>)
 8004eb8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004eba:	f000 fc45 	bl	8005748 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004ebe:	6878      	ldr	r0, [r7, #4]
 8004ec0:	f000 f8e4 	bl	800508c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004ec4:	4b06      	ldr	r3, [pc, #24]	@ (8004ee0 <prvCheckTasksWaitingTermination+0x58>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d1e1      	bne.n	8004e90 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004ecc:	bf00      	nop
 8004ece:	bf00      	nop
 8004ed0:	3708      	adds	r7, #8
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bd80      	pop	{r7, pc}
 8004ed6:	bf00      	nop
 8004ed8:	20000a6c 	.word	0x20000a6c
 8004edc:	20000a98 	.word	0x20000a98
 8004ee0:	20000a80 	.word	0x20000a80

08004ee4 <vTaskGetInfo>:
/*-----------------------------------------------------------*/

#if( configUSE_TRACE_FACILITY == 1 )

	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, eTaskState eState )
	{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b086      	sub	sp, #24
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	60f8      	str	r0, [r7, #12]
 8004eec:	60b9      	str	r1, [r7, #8]
 8004eee:	607a      	str	r2, [r7, #4]
 8004ef0:	70fb      	strb	r3, [r7, #3]
	TCB_t *pxTCB;

		/* xTask is NULL then get the state of the calling task. */
		pxTCB = prvGetTCBFromHandle( xTask );
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d102      	bne.n	8004efe <vTaskGetInfo+0x1a>
 8004ef8:	4b2c      	ldr	r3, [pc, #176]	@ (8004fac <vTaskGetInfo+0xc8>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	e000      	b.n	8004f00 <vTaskGetInfo+0x1c>
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	617b      	str	r3, [r7, #20]

		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
 8004f02:	68bb      	ldr	r3, [r7, #8]
 8004f04:	697a      	ldr	r2, [r7, #20]
 8004f06:	601a      	str	r2, [r3, #0]
		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 8004f08:	697b      	ldr	r3, [r7, #20]
 8004f0a:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8004f0e:	68bb      	ldr	r3, [r7, #8]
 8004f10:	605a      	str	r2, [r3, #4]
		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 8004f12:	697b      	ldr	r3, [r7, #20]
 8004f14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f16:	68bb      	ldr	r3, [r7, #8]
 8004f18:	611a      	str	r2, [r3, #16]
		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 8004f1a:	697b      	ldr	r3, [r7, #20]
 8004f1c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004f1e:	68bb      	ldr	r3, [r7, #8]
 8004f20:	61da      	str	r2, [r3, #28]
		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 8004f22:	697b      	ldr	r3, [r7, #20]
 8004f24:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004f26:	68bb      	ldr	r3, [r7, #8]
 8004f28:	609a      	str	r2, [r3, #8]

		#if ( configUSE_MUTEXES == 1 )
		{
			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 8004f2a:	697b      	ldr	r3, [r7, #20]
 8004f2c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004f2e:	68bb      	ldr	r3, [r7, #8]
 8004f30:	615a      	str	r2, [r3, #20]
		}
		#endif

		#if ( configGENERATE_RUN_TIME_STATS == 1 )
		{
			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
 8004f32:	697b      	ldr	r3, [r7, #20]
 8004f34:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004f36:	68bb      	ldr	r3, [r7, #8]
 8004f38:	619a      	str	r2, [r3, #24]
		#endif

		/* Obtaining the task state is a little fiddly, so is only done if the
		value of eState passed into this function is eInvalid - otherwise the
		state is just set to whatever is passed in. */
		if( eState != eInvalid )
 8004f3a:	78fb      	ldrb	r3, [r7, #3]
 8004f3c:	2b05      	cmp	r3, #5
 8004f3e:	d01a      	beq.n	8004f76 <vTaskGetInfo+0x92>
		{
			if( pxTCB == pxCurrentTCB )
 8004f40:	4b1a      	ldr	r3, [pc, #104]	@ (8004fac <vTaskGetInfo+0xc8>)
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	697a      	ldr	r2, [r7, #20]
 8004f46:	429a      	cmp	r2, r3
 8004f48:	d103      	bne.n	8004f52 <vTaskGetInfo+0x6e>
			{
				pxTaskStatus->eCurrentState = eRunning;
 8004f4a:	68bb      	ldr	r3, [r7, #8]
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	731a      	strb	r2, [r3, #12]
 8004f50:	e018      	b.n	8004f84 <vTaskGetInfo+0xa0>
			}
			else
			{
				pxTaskStatus->eCurrentState = eState;
 8004f52:	68bb      	ldr	r3, [r7, #8]
 8004f54:	78fa      	ldrb	r2, [r7, #3]
 8004f56:	731a      	strb	r2, [r3, #12]
				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* If the task is in the suspended list then there is a
					chance it is actually just blocked indefinitely - so really
					it should be reported as being in the Blocked state. */
					if( eState == eSuspended )
 8004f58:	78fb      	ldrb	r3, [r7, #3]
 8004f5a:	2b03      	cmp	r3, #3
 8004f5c:	d112      	bne.n	8004f84 <vTaskGetInfo+0xa0>
					{
						vTaskSuspendAll();
 8004f5e:	f7ff fca1 	bl	80048a4 <vTaskSuspendAll>
						{
							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004f62:	697b      	ldr	r3, [r7, #20]
 8004f64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d002      	beq.n	8004f70 <vTaskGetInfo+0x8c>
							{
								pxTaskStatus->eCurrentState = eBlocked;
 8004f6a:	68bb      	ldr	r3, [r7, #8]
 8004f6c:	2202      	movs	r2, #2
 8004f6e:	731a      	strb	r2, [r3, #12]
							}
						}
						( void ) xTaskResumeAll();
 8004f70:	f7ff fca6 	bl	80048c0 <xTaskResumeAll>
 8004f74:	e006      	b.n	8004f84 <vTaskGetInfo+0xa0>
				#endif /* INCLUDE_vTaskSuspend */
			}
		}
		else
		{
			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
 8004f76:	6978      	ldr	r0, [r7, #20]
 8004f78:	f7ff fa98 	bl	80044ac <eTaskGetState>
 8004f7c:	4603      	mov	r3, r0
 8004f7e:	461a      	mov	r2, r3
 8004f80:	68bb      	ldr	r3, [r7, #8]
 8004f82:	731a      	strb	r2, [r3, #12]
		}

		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
		parameter is provided to allow it to be skipped. */
		if( xGetFreeStackSpace != pdFALSE )
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d009      	beq.n	8004f9e <vTaskGetInfo+0xba>
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfStack );
			}
			#else
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
 8004f8a:	697b      	ldr	r3, [r7, #20]
 8004f8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f8e:	4618      	mov	r0, r3
 8004f90:	f000 f860 	bl	8005054 <prvTaskCheckFreeStackSpace>
 8004f94:	4603      	mov	r3, r0
 8004f96:	461a      	mov	r2, r3
 8004f98:	68bb      	ldr	r3, [r7, #8]
 8004f9a:	841a      	strh	r2, [r3, #32]
		}
		else
		{
			pxTaskStatus->usStackHighWaterMark = 0;
		}
	}
 8004f9c:	e002      	b.n	8004fa4 <vTaskGetInfo+0xc0>
			pxTaskStatus->usStackHighWaterMark = 0;
 8004f9e:	68bb      	ldr	r3, [r7, #8]
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	841a      	strh	r2, [r3, #32]
	}
 8004fa4:	bf00      	nop
 8004fa6:	3718      	adds	r7, #24
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	bd80      	pop	{r7, pc}
 8004fac:	20000998 	.word	0x20000998

08004fb0 <prvListTasksWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
	{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b08a      	sub	sp, #40	@ 0x28
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	60f8      	str	r0, [r7, #12]
 8004fb8:	60b9      	str	r1, [r7, #8]
 8004fba:	4613      	mov	r3, r2
 8004fbc:	71fb      	strb	r3, [r7, #7]
	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	627b      	str	r3, [r7, #36]	@ 0x24

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 8004fc2:	68bb      	ldr	r3, [r7, #8]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d03f      	beq.n	800504a <prvListTasksWithinSingleList+0x9a>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004fca:	68bb      	ldr	r3, [r7, #8]
 8004fcc:	623b      	str	r3, [r7, #32]
 8004fce:	6a3b      	ldr	r3, [r7, #32]
 8004fd0:	685b      	ldr	r3, [r3, #4]
 8004fd2:	685a      	ldr	r2, [r3, #4]
 8004fd4:	6a3b      	ldr	r3, [r7, #32]
 8004fd6:	605a      	str	r2, [r3, #4]
 8004fd8:	6a3b      	ldr	r3, [r7, #32]
 8004fda:	685a      	ldr	r2, [r3, #4]
 8004fdc:	6a3b      	ldr	r3, [r7, #32]
 8004fde:	3308      	adds	r3, #8
 8004fe0:	429a      	cmp	r2, r3
 8004fe2:	d104      	bne.n	8004fee <prvListTasksWithinSingleList+0x3e>
 8004fe4:	6a3b      	ldr	r3, [r7, #32]
 8004fe6:	685b      	ldr	r3, [r3, #4]
 8004fe8:	685a      	ldr	r2, [r3, #4]
 8004fea:	6a3b      	ldr	r3, [r7, #32]
 8004fec:	605a      	str	r2, [r3, #4]
 8004fee:	6a3b      	ldr	r3, [r7, #32]
 8004ff0:	685b      	ldr	r3, [r3, #4]
 8004ff2:	68db      	ldr	r3, [r3, #12]
 8004ff4:	61fb      	str	r3, [r7, #28]
			pxTaskStatusArray array for each task that is referenced from
			pxList.  See the definition of TaskStatus_t in task.h for the
			meaning of each TaskStatus_t structure member. */
			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ff6:	68bb      	ldr	r3, [r7, #8]
 8004ff8:	61bb      	str	r3, [r7, #24]
 8004ffa:	69bb      	ldr	r3, [r7, #24]
 8004ffc:	685b      	ldr	r3, [r3, #4]
 8004ffe:	685a      	ldr	r2, [r3, #4]
 8005000:	69bb      	ldr	r3, [r7, #24]
 8005002:	605a      	str	r2, [r3, #4]
 8005004:	69bb      	ldr	r3, [r7, #24]
 8005006:	685a      	ldr	r2, [r3, #4]
 8005008:	69bb      	ldr	r3, [r7, #24]
 800500a:	3308      	adds	r3, #8
 800500c:	429a      	cmp	r2, r3
 800500e:	d104      	bne.n	800501a <prvListTasksWithinSingleList+0x6a>
 8005010:	69bb      	ldr	r3, [r7, #24]
 8005012:	685b      	ldr	r3, [r3, #4]
 8005014:	685a      	ldr	r2, [r3, #4]
 8005016:	69bb      	ldr	r3, [r7, #24]
 8005018:	605a      	str	r2, [r3, #4]
 800501a:	69bb      	ldr	r3, [r7, #24]
 800501c:	685b      	ldr	r3, [r3, #4]
 800501e:	68db      	ldr	r3, [r3, #12]
 8005020:	617b      	str	r3, [r7, #20]
				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 8005022:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005024:	4613      	mov	r3, r2
 8005026:	00db      	lsls	r3, r3, #3
 8005028:	4413      	add	r3, r2
 800502a:	009b      	lsls	r3, r3, #2
 800502c:	461a      	mov	r2, r3
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	1899      	adds	r1, r3, r2
 8005032:	79fb      	ldrb	r3, [r7, #7]
 8005034:	2201      	movs	r2, #1
 8005036:	6978      	ldr	r0, [r7, #20]
 8005038:	f7ff ff54 	bl	8004ee4 <vTaskGetInfo>
				uxTask++;
 800503c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800503e:	3301      	adds	r3, #1
 8005040:	627b      	str	r3, [r7, #36]	@ 0x24
			} while( pxNextTCB != pxFirstTCB );
 8005042:	697a      	ldr	r2, [r7, #20]
 8005044:	69fb      	ldr	r3, [r7, #28]
 8005046:	429a      	cmp	r2, r3
 8005048:	d1d5      	bne.n	8004ff6 <prvListTasksWithinSingleList+0x46>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return uxTask;
 800504a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 800504c:	4618      	mov	r0, r3
 800504e:	3728      	adds	r7, #40	@ 0x28
 8005050:	46bd      	mov	sp, r7
 8005052:	bd80      	pop	{r7, pc}

08005054 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 8005054:	b480      	push	{r7}
 8005056:	b085      	sub	sp, #20
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 800505c:	2300      	movs	r3, #0
 800505e:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8005060:	e005      	b.n	800506e <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	3301      	adds	r3, #1
 8005066:	607b      	str	r3, [r7, #4]
			ulCount++;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	3301      	adds	r3, #1
 800506c:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	781b      	ldrb	r3, [r3, #0]
 8005072:	2ba5      	cmp	r3, #165	@ 0xa5
 8005074:	d0f5      	beq.n	8005062 <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	089b      	lsrs	r3, r3, #2
 800507a:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	b29b      	uxth	r3, r3
	}
 8005080:	4618      	mov	r0, r3
 8005082:	3714      	adds	r7, #20
 8005084:	46bd      	mov	sp, r7
 8005086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508a:	4770      	bx	lr

0800508c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800508c:	b580      	push	{r7, lr}
 800508e:	b084      	sub	sp, #16
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800509a:	2b00      	cmp	r3, #0
 800509c:	d108      	bne.n	80050b0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050a2:	4618      	mov	r0, r3
 80050a4:	f000 fcd0 	bl	8005a48 <vPortFree>
				vPortFree( pxTCB );
 80050a8:	6878      	ldr	r0, [r7, #4]
 80050aa:	f000 fccd 	bl	8005a48 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80050ae:	e01b      	b.n	80050e8 <prvDeleteTCB+0x5c>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80050b6:	2b01      	cmp	r3, #1
 80050b8:	d103      	bne.n	80050c2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80050ba:	6878      	ldr	r0, [r7, #4]
 80050bc:	f000 fcc4 	bl	8005a48 <vPortFree>
	}
 80050c0:	e012      	b.n	80050e8 <prvDeleteTCB+0x5c>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80050c8:	2b02      	cmp	r3, #2
 80050ca:	d00d      	beq.n	80050e8 <prvDeleteTCB+0x5c>
	__asm volatile
 80050cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050d0:	b672      	cpsid	i
 80050d2:	f383 8811 	msr	BASEPRI, r3
 80050d6:	f3bf 8f6f 	isb	sy
 80050da:	f3bf 8f4f 	dsb	sy
 80050de:	b662      	cpsie	i
 80050e0:	60fb      	str	r3, [r7, #12]
}
 80050e2:	bf00      	nop
 80050e4:	bf00      	nop
 80050e6:	e7fd      	b.n	80050e4 <prvDeleteTCB+0x58>
	}
 80050e8:	bf00      	nop
 80050ea:	3710      	adds	r7, #16
 80050ec:	46bd      	mov	sp, r7
 80050ee:	bd80      	pop	{r7, pc}

080050f0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80050f0:	b480      	push	{r7}
 80050f2:	b083      	sub	sp, #12
 80050f4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80050f6:	4b0c      	ldr	r3, [pc, #48]	@ (8005128 <prvResetNextTaskUnblockTime+0x38>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d104      	bne.n	800510a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005100:	4b0a      	ldr	r3, [pc, #40]	@ (800512c <prvResetNextTaskUnblockTime+0x3c>)
 8005102:	f04f 32ff 	mov.w	r2, #4294967295
 8005106:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005108:	e008      	b.n	800511c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800510a:	4b07      	ldr	r3, [pc, #28]	@ (8005128 <prvResetNextTaskUnblockTime+0x38>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	68db      	ldr	r3, [r3, #12]
 8005110:	68db      	ldr	r3, [r3, #12]
 8005112:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	685b      	ldr	r3, [r3, #4]
 8005118:	4a04      	ldr	r2, [pc, #16]	@ (800512c <prvResetNextTaskUnblockTime+0x3c>)
 800511a:	6013      	str	r3, [r2, #0]
}
 800511c:	bf00      	nop
 800511e:	370c      	adds	r7, #12
 8005120:	46bd      	mov	sp, r7
 8005122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005126:	4770      	bx	lr
 8005128:	20000a50 	.word	0x20000a50
 800512c:	20000ab8 	.word	0x20000ab8

08005130 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005130:	b480      	push	{r7}
 8005132:	b083      	sub	sp, #12
 8005134:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005136:	4b0b      	ldr	r3, [pc, #44]	@ (8005164 <xTaskGetSchedulerState+0x34>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d102      	bne.n	8005144 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800513e:	2301      	movs	r3, #1
 8005140:	607b      	str	r3, [r7, #4]
 8005142:	e008      	b.n	8005156 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005144:	4b08      	ldr	r3, [pc, #32]	@ (8005168 <xTaskGetSchedulerState+0x38>)
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d102      	bne.n	8005152 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800514c:	2302      	movs	r3, #2
 800514e:	607b      	str	r3, [r7, #4]
 8005150:	e001      	b.n	8005156 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005152:	2300      	movs	r3, #0
 8005154:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005156:	687b      	ldr	r3, [r7, #4]
	}
 8005158:	4618      	mov	r0, r3
 800515a:	370c      	adds	r7, #12
 800515c:	46bd      	mov	sp, r7
 800515e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005162:	4770      	bx	lr
 8005164:	20000aa4 	.word	0x20000aa4
 8005168:	20000ac0 	.word	0x20000ac0

0800516c <prvWriteNameToBuffer>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
	{
 800516c:	b580      	push	{r7, lr}
 800516e:	b084      	sub	sp, #16
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
 8005174:	6039      	str	r1, [r7, #0]
	size_t x;

		/* Start by copying the entire string. */
		strcpy( pcBuffer, pcTaskName );
 8005176:	6839      	ldr	r1, [r7, #0]
 8005178:	6878      	ldr	r0, [r7, #4]
 800517a:	f001 fb1a 	bl	80067b2 <strcpy>

		/* Pad the end of the string with spaces to ensure columns line up when
		printed out. */
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800517e:	6878      	ldr	r0, [r7, #4]
 8005180:	f7fb f846 	bl	8000210 <strlen>
 8005184:	60f8      	str	r0, [r7, #12]
 8005186:	e007      	b.n	8005198 <prvWriteNameToBuffer+0x2c>
		{
			pcBuffer[ x ] = ' ';
 8005188:	687a      	ldr	r2, [r7, #4]
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	4413      	add	r3, r2
 800518e:	2220      	movs	r2, #32
 8005190:	701a      	strb	r2, [r3, #0]
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	3301      	adds	r3, #1
 8005196:	60fb      	str	r3, [r7, #12]
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	2b0e      	cmp	r3, #14
 800519c:	d9f4      	bls.n	8005188 <prvWriteNameToBuffer+0x1c>
		}

		/* Terminate. */
		pcBuffer[ x ] = ( char ) 0x00;
 800519e:	687a      	ldr	r2, [r7, #4]
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	4413      	add	r3, r2
 80051a4:	2200      	movs	r2, #0
 80051a6:	701a      	strb	r2, [r3, #0]

		/* Return the new end of string. */
		return &( pcBuffer[ x ] );
 80051a8:	687a      	ldr	r2, [r7, #4]
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	4413      	add	r3, r2
	}
 80051ae:	4618      	mov	r0, r3
 80051b0:	3710      	adds	r7, #16
 80051b2:	46bd      	mov	sp, r7
 80051b4:	bd80      	pop	{r7, pc}
	...

080051b8 <vTaskList>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	void vTaskList( char * pcWriteBuffer )
	{
 80051b8:	b590      	push	{r4, r7, lr}
 80051ba:	b089      	sub	sp, #36	@ 0x24
 80051bc:	af02      	add	r7, sp, #8
 80051be:	6078      	str	r0, [r7, #4]
		 * through a call to vTaskList().
		 */


		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = ( char ) 0x00;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2200      	movs	r2, #0
 80051c4:	701a      	strb	r2, [r3, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 80051c6:	4b45      	ldr	r3, [pc, #276]	@ (80052dc <vTaskList+0x124>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	60fb      	str	r3, [r7, #12]

		/* Allocate an array index for each task.  NOTE!  if
		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
		equate to NULL. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation allocates a struct that has the alignment requirements of a pointer. */
 80051cc:	4b43      	ldr	r3, [pc, #268]	@ (80052dc <vTaskList+0x124>)
 80051ce:	681a      	ldr	r2, [r3, #0]
 80051d0:	4613      	mov	r3, r2
 80051d2:	00db      	lsls	r3, r3, #3
 80051d4:	4413      	add	r3, r2
 80051d6:	009b      	lsls	r3, r3, #2
 80051d8:	4618      	mov	r0, r3
 80051da:	f000 fb67 	bl	80058ac <pvPortMalloc>
 80051de:	60b8      	str	r0, [r7, #8]

		if( pxTaskStatusArray != NULL )
 80051e0:	68bb      	ldr	r3, [r7, #8]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d076      	beq.n	80052d4 <vTaskList+0x11c>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
 80051e6:	2200      	movs	r2, #0
 80051e8:	68f9      	ldr	r1, [r7, #12]
 80051ea:	68b8      	ldr	r0, [r7, #8]
 80051ec:	f7ff fc08 	bl	8004a00 <uxTaskGetSystemState>
 80051f0:	60f8      	str	r0, [r7, #12]

			/* Create a human readable table from the binary data. */
			for( x = 0; x < uxArraySize; x++ )
 80051f2:	2300      	movs	r3, #0
 80051f4:	617b      	str	r3, [r7, #20]
 80051f6:	e066      	b.n	80052c6 <vTaskList+0x10e>
			{
				switch( pxTaskStatusArray[ x ].eCurrentState )
 80051f8:	697a      	ldr	r2, [r7, #20]
 80051fa:	4613      	mov	r3, r2
 80051fc:	00db      	lsls	r3, r3, #3
 80051fe:	4413      	add	r3, r2
 8005200:	009b      	lsls	r3, r3, #2
 8005202:	461a      	mov	r2, r3
 8005204:	68bb      	ldr	r3, [r7, #8]
 8005206:	4413      	add	r3, r2
 8005208:	7b1b      	ldrb	r3, [r3, #12]
 800520a:	2b04      	cmp	r3, #4
 800520c:	d81b      	bhi.n	8005246 <vTaskList+0x8e>
 800520e:	a201      	add	r2, pc, #4	@ (adr r2, 8005214 <vTaskList+0x5c>)
 8005210:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005214:	08005229 	.word	0x08005229
 8005218:	0800522f 	.word	0x0800522f
 800521c:	08005235 	.word	0x08005235
 8005220:	0800523b 	.word	0x0800523b
 8005224:	08005241 	.word	0x08005241
				{
					case eRunning:		cStatus = tskRUNNING_CHAR;
 8005228:	2358      	movs	r3, #88	@ 0x58
 800522a:	74fb      	strb	r3, [r7, #19]
										break;
 800522c:	e00e      	b.n	800524c <vTaskList+0x94>

					case eReady:		cStatus = tskREADY_CHAR;
 800522e:	2352      	movs	r3, #82	@ 0x52
 8005230:	74fb      	strb	r3, [r7, #19]
										break;
 8005232:	e00b      	b.n	800524c <vTaskList+0x94>

					case eBlocked:		cStatus = tskBLOCKED_CHAR;
 8005234:	2342      	movs	r3, #66	@ 0x42
 8005236:	74fb      	strb	r3, [r7, #19]
										break;
 8005238:	e008      	b.n	800524c <vTaskList+0x94>

					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
 800523a:	2353      	movs	r3, #83	@ 0x53
 800523c:	74fb      	strb	r3, [r7, #19]
										break;
 800523e:	e005      	b.n	800524c <vTaskList+0x94>

					case eDeleted:		cStatus = tskDELETED_CHAR;
 8005240:	2344      	movs	r3, #68	@ 0x44
 8005242:	74fb      	strb	r3, [r7, #19]
										break;
 8005244:	e002      	b.n	800524c <vTaskList+0x94>

					case eInvalid:		/* Fall through. */
					default:			/* Should not get here, but it is included
										to prevent static checking errors. */
										cStatus = ( char ) 0x00;
 8005246:	2300      	movs	r3, #0
 8005248:	74fb      	strb	r3, [r7, #19]
										break;
 800524a:	bf00      	nop
				}

				/* Write the task name to the string, padding with spaces so it
				can be printed in tabular form more easily. */
				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 800524c:	697a      	ldr	r2, [r7, #20]
 800524e:	4613      	mov	r3, r2
 8005250:	00db      	lsls	r3, r3, #3
 8005252:	4413      	add	r3, r2
 8005254:	009b      	lsls	r3, r3, #2
 8005256:	461a      	mov	r2, r3
 8005258:	68bb      	ldr	r3, [r7, #8]
 800525a:	4413      	add	r3, r2
 800525c:	685b      	ldr	r3, [r3, #4]
 800525e:	4619      	mov	r1, r3
 8005260:	6878      	ldr	r0, [r7, #4]
 8005262:	f7ff ff83 	bl	800516c <prvWriteNameToBuffer>
 8005266:	6078      	str	r0, [r7, #4]

				/* Write the rest of the string. */
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 8005268:	7cf9      	ldrb	r1, [r7, #19]
 800526a:	697a      	ldr	r2, [r7, #20]
 800526c:	4613      	mov	r3, r2
 800526e:	00db      	lsls	r3, r3, #3
 8005270:	4413      	add	r3, r2
 8005272:	009b      	lsls	r3, r3, #2
 8005274:	461a      	mov	r2, r3
 8005276:	68bb      	ldr	r3, [r7, #8]
 8005278:	4413      	add	r3, r2
 800527a:	6918      	ldr	r0, [r3, #16]
 800527c:	697a      	ldr	r2, [r7, #20]
 800527e:	4613      	mov	r3, r2
 8005280:	00db      	lsls	r3, r3, #3
 8005282:	4413      	add	r3, r2
 8005284:	009b      	lsls	r3, r3, #2
 8005286:	461a      	mov	r2, r3
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	4413      	add	r3, r2
 800528c:	8c1b      	ldrh	r3, [r3, #32]
 800528e:	461c      	mov	r4, r3
 8005290:	697a      	ldr	r2, [r7, #20]
 8005292:	4613      	mov	r3, r2
 8005294:	00db      	lsls	r3, r3, #3
 8005296:	4413      	add	r3, r2
 8005298:	009b      	lsls	r3, r3, #2
 800529a:	461a      	mov	r2, r3
 800529c:	68bb      	ldr	r3, [r7, #8]
 800529e:	4413      	add	r3, r2
 80052a0:	689b      	ldr	r3, [r3, #8]
 80052a2:	9301      	str	r3, [sp, #4]
 80052a4:	9400      	str	r4, [sp, #0]
 80052a6:	4603      	mov	r3, r0
 80052a8:	460a      	mov	r2, r1
 80052aa:	490d      	ldr	r1, [pc, #52]	@ (80052e0 <vTaskList+0x128>)
 80052ac:	6878      	ldr	r0, [r7, #4]
 80052ae:	f001 f8f7 	bl	80064a0 <siprintf>
				pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers especially as in this case where it best denotes the intent of the code. */
 80052b2:	6878      	ldr	r0, [r7, #4]
 80052b4:	f7fa ffac 	bl	8000210 <strlen>
 80052b8:	4602      	mov	r2, r0
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	4413      	add	r3, r2
 80052be:	607b      	str	r3, [r7, #4]
			for( x = 0; x < uxArraySize; x++ )
 80052c0:	697b      	ldr	r3, [r7, #20]
 80052c2:	3301      	adds	r3, #1
 80052c4:	617b      	str	r3, [r7, #20]
 80052c6:	697a      	ldr	r2, [r7, #20]
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	429a      	cmp	r2, r3
 80052cc:	d394      	bcc.n	80051f8 <vTaskList+0x40>
			}

			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
			is 0 then vPortFree() will be #defined to nothing. */
			vPortFree( pxTaskStatusArray );
 80052ce:	68b8      	ldr	r0, [r7, #8]
 80052d0:	f000 fbba 	bl	8005a48 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80052d4:	bf00      	nop
 80052d6:	371c      	adds	r7, #28
 80052d8:	46bd      	mov	sp, r7
 80052da:	bd90      	pop	{r4, r7, pc}
 80052dc:	20000a98 	.word	0x20000a98
 80052e0:	08007894 	.word	0x08007894

080052e4 <vTaskGetRunTimeStats>:
/*----------------------------------------------------------*/

#if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	void vTaskGetRunTimeStats( char *pcWriteBuffer )
	{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b088      	sub	sp, #32
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
		 * directly to get access to raw stats data, rather than indirectly
		 * through a call to vTaskGetRunTimeStats().
		 */

		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = ( char ) 0x00;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2200      	movs	r2, #0
 80052f0:	701a      	strb	r2, [r3, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 80052f2:	4b3a      	ldr	r3, [pc, #232]	@ (80053dc <vTaskGetRunTimeStats+0xf8>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	61bb      	str	r3, [r7, #24]

		/* Allocate an array index for each task.  NOTE!  If
		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
		equate to NULL. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation allocates a struct that has the alignment requirements of a pointer. */
 80052f8:	4b38      	ldr	r3, [pc, #224]	@ (80053dc <vTaskGetRunTimeStats+0xf8>)
 80052fa:	681a      	ldr	r2, [r3, #0]
 80052fc:	4613      	mov	r3, r2
 80052fe:	00db      	lsls	r3, r3, #3
 8005300:	4413      	add	r3, r2
 8005302:	009b      	lsls	r3, r3, #2
 8005304:	4618      	mov	r0, r3
 8005306:	f000 fad1 	bl	80058ac <pvPortMalloc>
 800530a:	6178      	str	r0, [r7, #20]

		if( pxTaskStatusArray != NULL )
 800530c:	697b      	ldr	r3, [r7, #20]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d05f      	beq.n	80053d2 <vTaskGetRunTimeStats+0xee>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
 8005312:	f107 030c 	add.w	r3, r7, #12
 8005316:	461a      	mov	r2, r3
 8005318:	69b9      	ldr	r1, [r7, #24]
 800531a:	6978      	ldr	r0, [r7, #20]
 800531c:	f7ff fb70 	bl	8004a00 <uxTaskGetSystemState>
 8005320:	61b8      	str	r0, [r7, #24]

			/* For percentage calculations. */
			ulTotalTime /= 100UL;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	4a2e      	ldr	r2, [pc, #184]	@ (80053e0 <vTaskGetRunTimeStats+0xfc>)
 8005326:	fba2 2303 	umull	r2, r3, r2, r3
 800532a:	095b      	lsrs	r3, r3, #5
 800532c:	60fb      	str	r3, [r7, #12]

			/* Avoid divide by zero errors. */
			if( ulTotalTime > 0UL )
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d04b      	beq.n	80053cc <vTaskGetRunTimeStats+0xe8>
			{
				/* Create a human readable table from the binary data. */
				for( x = 0; x < uxArraySize; x++ )
 8005334:	2300      	movs	r3, #0
 8005336:	61fb      	str	r3, [r7, #28]
 8005338:	e044      	b.n	80053c4 <vTaskGetRunTimeStats+0xe0>
				{
					/* What percentage of the total run time has the task used?
					This will always be rounded down to the nearest integer.
					ulTotalRunTimeDiv100 has already been divided by 100. */
					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
 800533a:	69fa      	ldr	r2, [r7, #28]
 800533c:	4613      	mov	r3, r2
 800533e:	00db      	lsls	r3, r3, #3
 8005340:	4413      	add	r3, r2
 8005342:	009b      	lsls	r3, r3, #2
 8005344:	461a      	mov	r2, r3
 8005346:	697b      	ldr	r3, [r7, #20]
 8005348:	4413      	add	r3, r2
 800534a:	699a      	ldr	r2, [r3, #24]
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005352:	613b      	str	r3, [r7, #16]

					/* Write the task name to the string, padding with
					spaces so it can be printed in tabular form more
					easily. */
					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 8005354:	69fa      	ldr	r2, [r7, #28]
 8005356:	4613      	mov	r3, r2
 8005358:	00db      	lsls	r3, r3, #3
 800535a:	4413      	add	r3, r2
 800535c:	009b      	lsls	r3, r3, #2
 800535e:	461a      	mov	r2, r3
 8005360:	697b      	ldr	r3, [r7, #20]
 8005362:	4413      	add	r3, r2
 8005364:	685b      	ldr	r3, [r3, #4]
 8005366:	4619      	mov	r1, r3
 8005368:	6878      	ldr	r0, [r7, #4]
 800536a:	f7ff feff 	bl	800516c <prvWriteNameToBuffer>
 800536e:	6078      	str	r0, [r7, #4]

					if( ulStatsAsPercentage > 0UL )
 8005370:	693b      	ldr	r3, [r7, #16]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d00e      	beq.n	8005394 <vTaskGetRunTimeStats+0xb0>
						}
						#else
						{
							/* sizeof( int ) == sizeof( long ) so a smaller
							printf() library can be used. */
							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter, ( unsigned int ) ulStatsAsPercentage ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 8005376:	69fa      	ldr	r2, [r7, #28]
 8005378:	4613      	mov	r3, r2
 800537a:	00db      	lsls	r3, r3, #3
 800537c:	4413      	add	r3, r2
 800537e:	009b      	lsls	r3, r3, #2
 8005380:	461a      	mov	r2, r3
 8005382:	697b      	ldr	r3, [r7, #20]
 8005384:	4413      	add	r3, r2
 8005386:	699a      	ldr	r2, [r3, #24]
 8005388:	693b      	ldr	r3, [r7, #16]
 800538a:	4916      	ldr	r1, [pc, #88]	@ (80053e4 <vTaskGetRunTimeStats+0x100>)
 800538c:	6878      	ldr	r0, [r7, #4]
 800538e:	f001 f887 	bl	80064a0 <siprintf>
 8005392:	e00d      	b.n	80053b0 <vTaskGetRunTimeStats+0xcc>
						}
						#else
						{
							/* sizeof( int ) == sizeof( long ) so a smaller
							printf() library can be used. */
							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 8005394:	69fa      	ldr	r2, [r7, #28]
 8005396:	4613      	mov	r3, r2
 8005398:	00db      	lsls	r3, r3, #3
 800539a:	4413      	add	r3, r2
 800539c:	009b      	lsls	r3, r3, #2
 800539e:	461a      	mov	r2, r3
 80053a0:	697b      	ldr	r3, [r7, #20]
 80053a2:	4413      	add	r3, r2
 80053a4:	699b      	ldr	r3, [r3, #24]
 80053a6:	461a      	mov	r2, r3
 80053a8:	490f      	ldr	r1, [pc, #60]	@ (80053e8 <vTaskGetRunTimeStats+0x104>)
 80053aa:	6878      	ldr	r0, [r7, #4]
 80053ac:	f001 f878 	bl	80064a0 <siprintf>
						}
						#endif
					}

					pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers especially as in this case where it best denotes the intent of the code. */
 80053b0:	6878      	ldr	r0, [r7, #4]
 80053b2:	f7fa ff2d 	bl	8000210 <strlen>
 80053b6:	4602      	mov	r2, r0
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	4413      	add	r3, r2
 80053bc:	607b      	str	r3, [r7, #4]
				for( x = 0; x < uxArraySize; x++ )
 80053be:	69fb      	ldr	r3, [r7, #28]
 80053c0:	3301      	adds	r3, #1
 80053c2:	61fb      	str	r3, [r7, #28]
 80053c4:	69fa      	ldr	r2, [r7, #28]
 80053c6:	69bb      	ldr	r3, [r7, #24]
 80053c8:	429a      	cmp	r2, r3
 80053ca:	d3b6      	bcc.n	800533a <vTaskGetRunTimeStats+0x56>
				mtCOVERAGE_TEST_MARKER();
			}

			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
			is 0 then vPortFree() will be #defined to nothing. */
			vPortFree( pxTaskStatusArray );
 80053cc:	6978      	ldr	r0, [r7, #20]
 80053ce:	f000 fb3b 	bl	8005a48 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80053d2:	bf00      	nop
 80053d4:	3720      	adds	r7, #32
 80053d6:	46bd      	mov	sp, r7
 80053d8:	bd80      	pop	{r7, pc}
 80053da:	bf00      	nop
 80053dc:	20000a98 	.word	0x20000a98
 80053e0:	51eb851f 	.word	0x51eb851f
 80053e4:	080078a4 	.word	0x080078a4
 80053e8:	080078b0 	.word	0x080078b0

080053ec <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b084      	sub	sp, #16
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
 80053f4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80053f6:	4b29      	ldr	r3, [pc, #164]	@ (800549c <prvAddCurrentTaskToDelayedList+0xb0>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80053fc:	4b28      	ldr	r3, [pc, #160]	@ (80054a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	3304      	adds	r3, #4
 8005402:	4618      	mov	r0, r3
 8005404:	f7fe fe41 	bl	800408a <uxListRemove>
 8005408:	4603      	mov	r3, r0
 800540a:	2b00      	cmp	r3, #0
 800540c:	d10b      	bne.n	8005426 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800540e:	4b24      	ldr	r3, [pc, #144]	@ (80054a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005414:	2201      	movs	r2, #1
 8005416:	fa02 f303 	lsl.w	r3, r2, r3
 800541a:	43da      	mvns	r2, r3
 800541c:	4b21      	ldr	r3, [pc, #132]	@ (80054a4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4013      	ands	r3, r2
 8005422:	4a20      	ldr	r2, [pc, #128]	@ (80054a4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005424:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	f1b3 3fff 	cmp.w	r3, #4294967295
 800542c:	d10a      	bne.n	8005444 <prvAddCurrentTaskToDelayedList+0x58>
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d007      	beq.n	8005444 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005434:	4b1a      	ldr	r3, [pc, #104]	@ (80054a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	3304      	adds	r3, #4
 800543a:	4619      	mov	r1, r3
 800543c:	481a      	ldr	r0, [pc, #104]	@ (80054a8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800543e:	f7fe fdc7 	bl	8003fd0 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005442:	e026      	b.n	8005492 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005444:	68fa      	ldr	r2, [r7, #12]
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	4413      	add	r3, r2
 800544a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800544c:	4b14      	ldr	r3, [pc, #80]	@ (80054a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	68ba      	ldr	r2, [r7, #8]
 8005452:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005454:	68ba      	ldr	r2, [r7, #8]
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	429a      	cmp	r2, r3
 800545a:	d209      	bcs.n	8005470 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800545c:	4b13      	ldr	r3, [pc, #76]	@ (80054ac <prvAddCurrentTaskToDelayedList+0xc0>)
 800545e:	681a      	ldr	r2, [r3, #0]
 8005460:	4b0f      	ldr	r3, [pc, #60]	@ (80054a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	3304      	adds	r3, #4
 8005466:	4619      	mov	r1, r3
 8005468:	4610      	mov	r0, r2
 800546a:	f7fe fdd5 	bl	8004018 <vListInsert>
}
 800546e:	e010      	b.n	8005492 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005470:	4b0f      	ldr	r3, [pc, #60]	@ (80054b0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005472:	681a      	ldr	r2, [r3, #0]
 8005474:	4b0a      	ldr	r3, [pc, #40]	@ (80054a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	3304      	adds	r3, #4
 800547a:	4619      	mov	r1, r3
 800547c:	4610      	mov	r0, r2
 800547e:	f7fe fdcb 	bl	8004018 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005482:	4b0c      	ldr	r3, [pc, #48]	@ (80054b4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	68ba      	ldr	r2, [r7, #8]
 8005488:	429a      	cmp	r2, r3
 800548a:	d202      	bcs.n	8005492 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800548c:	4a09      	ldr	r2, [pc, #36]	@ (80054b4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800548e:	68bb      	ldr	r3, [r7, #8]
 8005490:	6013      	str	r3, [r2, #0]
}
 8005492:	bf00      	nop
 8005494:	3710      	adds	r7, #16
 8005496:	46bd      	mov	sp, r7
 8005498:	bd80      	pop	{r7, pc}
 800549a:	bf00      	nop
 800549c:	20000a9c 	.word	0x20000a9c
 80054a0:	20000998 	.word	0x20000998
 80054a4:	20000aa0 	.word	0x20000aa0
 80054a8:	20000a84 	.word	0x20000a84
 80054ac:	20000a54 	.word	0x20000a54
 80054b0:	20000a50 	.word	0x20000a50
 80054b4:	20000ab8 	.word	0x20000ab8

080054b8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80054b8:	b480      	push	{r7}
 80054ba:	b085      	sub	sp, #20
 80054bc:	af00      	add	r7, sp, #0
 80054be:	60f8      	str	r0, [r7, #12]
 80054c0:	60b9      	str	r1, [r7, #8]
 80054c2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	3b04      	subs	r3, #4
 80054c8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80054d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	3b04      	subs	r3, #4
 80054d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80054d8:	68bb      	ldr	r3, [r7, #8]
 80054da:	f023 0201 	bic.w	r2, r3, #1
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	3b04      	subs	r3, #4
 80054e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80054e8:	4a0c      	ldr	r2, [pc, #48]	@ (800551c <pxPortInitialiseStack+0x64>)
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	3b14      	subs	r3, #20
 80054f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80054f4:	687a      	ldr	r2, [r7, #4]
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	3b04      	subs	r3, #4
 80054fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	f06f 0202 	mvn.w	r2, #2
 8005506:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	3b20      	subs	r3, #32
 800550c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800550e:	68fb      	ldr	r3, [r7, #12]
}
 8005510:	4618      	mov	r0, r3
 8005512:	3714      	adds	r7, #20
 8005514:	46bd      	mov	sp, r7
 8005516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551a:	4770      	bx	lr
 800551c:	08005521 	.word	0x08005521

08005520 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005520:	b480      	push	{r7}
 8005522:	b085      	sub	sp, #20
 8005524:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005526:	2300      	movs	r3, #0
 8005528:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800552a:	4b15      	ldr	r3, [pc, #84]	@ (8005580 <prvTaskExitError+0x60>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005532:	d00d      	beq.n	8005550 <prvTaskExitError+0x30>
	__asm volatile
 8005534:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005538:	b672      	cpsid	i
 800553a:	f383 8811 	msr	BASEPRI, r3
 800553e:	f3bf 8f6f 	isb	sy
 8005542:	f3bf 8f4f 	dsb	sy
 8005546:	b662      	cpsie	i
 8005548:	60fb      	str	r3, [r7, #12]
}
 800554a:	bf00      	nop
 800554c:	bf00      	nop
 800554e:	e7fd      	b.n	800554c <prvTaskExitError+0x2c>
	__asm volatile
 8005550:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005554:	b672      	cpsid	i
 8005556:	f383 8811 	msr	BASEPRI, r3
 800555a:	f3bf 8f6f 	isb	sy
 800555e:	f3bf 8f4f 	dsb	sy
 8005562:	b662      	cpsie	i
 8005564:	60bb      	str	r3, [r7, #8]
}
 8005566:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005568:	bf00      	nop
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d0fc      	beq.n	800556a <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005570:	bf00      	nop
 8005572:	bf00      	nop
 8005574:	3714      	adds	r7, #20
 8005576:	46bd      	mov	sp, r7
 8005578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557c:	4770      	bx	lr
 800557e:	bf00      	nop
 8005580:	2000010c 	.word	0x2000010c
	...

08005590 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005590:	4b07      	ldr	r3, [pc, #28]	@ (80055b0 <pxCurrentTCBConst2>)
 8005592:	6819      	ldr	r1, [r3, #0]
 8005594:	6808      	ldr	r0, [r1, #0]
 8005596:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800559a:	f380 8809 	msr	PSP, r0
 800559e:	f3bf 8f6f 	isb	sy
 80055a2:	f04f 0000 	mov.w	r0, #0
 80055a6:	f380 8811 	msr	BASEPRI, r0
 80055aa:	4770      	bx	lr
 80055ac:	f3af 8000 	nop.w

080055b0 <pxCurrentTCBConst2>:
 80055b0:	20000998 	.word	0x20000998
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80055b4:	bf00      	nop
 80055b6:	bf00      	nop

080055b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80055b8:	4808      	ldr	r0, [pc, #32]	@ (80055dc <prvPortStartFirstTask+0x24>)
 80055ba:	6800      	ldr	r0, [r0, #0]
 80055bc:	6800      	ldr	r0, [r0, #0]
 80055be:	f380 8808 	msr	MSP, r0
 80055c2:	f04f 0000 	mov.w	r0, #0
 80055c6:	f380 8814 	msr	CONTROL, r0
 80055ca:	b662      	cpsie	i
 80055cc:	b661      	cpsie	f
 80055ce:	f3bf 8f4f 	dsb	sy
 80055d2:	f3bf 8f6f 	isb	sy
 80055d6:	df00      	svc	0
 80055d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80055da:	bf00      	nop
 80055dc:	e000ed08 	.word	0xe000ed08

080055e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b084      	sub	sp, #16
 80055e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80055e6:	4b37      	ldr	r3, [pc, #220]	@ (80056c4 <xPortStartScheduler+0xe4>)
 80055e8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	781b      	ldrb	r3, [r3, #0]
 80055ee:	b2db      	uxtb	r3, r3
 80055f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	22ff      	movs	r2, #255	@ 0xff
 80055f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	781b      	ldrb	r3, [r3, #0]
 80055fc:	b2db      	uxtb	r3, r3
 80055fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005600:	78fb      	ldrb	r3, [r7, #3]
 8005602:	b2db      	uxtb	r3, r3
 8005604:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005608:	b2da      	uxtb	r2, r3
 800560a:	4b2f      	ldr	r3, [pc, #188]	@ (80056c8 <xPortStartScheduler+0xe8>)
 800560c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800560e:	4b2f      	ldr	r3, [pc, #188]	@ (80056cc <xPortStartScheduler+0xec>)
 8005610:	2207      	movs	r2, #7
 8005612:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005614:	e009      	b.n	800562a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8005616:	4b2d      	ldr	r3, [pc, #180]	@ (80056cc <xPortStartScheduler+0xec>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	3b01      	subs	r3, #1
 800561c:	4a2b      	ldr	r2, [pc, #172]	@ (80056cc <xPortStartScheduler+0xec>)
 800561e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005620:	78fb      	ldrb	r3, [r7, #3]
 8005622:	b2db      	uxtb	r3, r3
 8005624:	005b      	lsls	r3, r3, #1
 8005626:	b2db      	uxtb	r3, r3
 8005628:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800562a:	78fb      	ldrb	r3, [r7, #3]
 800562c:	b2db      	uxtb	r3, r3
 800562e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005632:	2b80      	cmp	r3, #128	@ 0x80
 8005634:	d0ef      	beq.n	8005616 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005636:	4b25      	ldr	r3, [pc, #148]	@ (80056cc <xPortStartScheduler+0xec>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f1c3 0307 	rsb	r3, r3, #7
 800563e:	2b04      	cmp	r3, #4
 8005640:	d00d      	beq.n	800565e <xPortStartScheduler+0x7e>
	__asm volatile
 8005642:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005646:	b672      	cpsid	i
 8005648:	f383 8811 	msr	BASEPRI, r3
 800564c:	f3bf 8f6f 	isb	sy
 8005650:	f3bf 8f4f 	dsb	sy
 8005654:	b662      	cpsie	i
 8005656:	60bb      	str	r3, [r7, #8]
}
 8005658:	bf00      	nop
 800565a:	bf00      	nop
 800565c:	e7fd      	b.n	800565a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800565e:	4b1b      	ldr	r3, [pc, #108]	@ (80056cc <xPortStartScheduler+0xec>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	021b      	lsls	r3, r3, #8
 8005664:	4a19      	ldr	r2, [pc, #100]	@ (80056cc <xPortStartScheduler+0xec>)
 8005666:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005668:	4b18      	ldr	r3, [pc, #96]	@ (80056cc <xPortStartScheduler+0xec>)
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005670:	4a16      	ldr	r2, [pc, #88]	@ (80056cc <xPortStartScheduler+0xec>)
 8005672:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	b2da      	uxtb	r2, r3
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800567c:	4b14      	ldr	r3, [pc, #80]	@ (80056d0 <xPortStartScheduler+0xf0>)
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	4a13      	ldr	r2, [pc, #76]	@ (80056d0 <xPortStartScheduler+0xf0>)
 8005682:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005686:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005688:	4b11      	ldr	r3, [pc, #68]	@ (80056d0 <xPortStartScheduler+0xf0>)
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	4a10      	ldr	r2, [pc, #64]	@ (80056d0 <xPortStartScheduler+0xf0>)
 800568e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005692:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005694:	f000 f8dc 	bl	8005850 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005698:	4b0e      	ldr	r3, [pc, #56]	@ (80056d4 <xPortStartScheduler+0xf4>)
 800569a:	2200      	movs	r2, #0
 800569c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800569e:	f000 f8fb 	bl	8005898 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80056a2:	4b0d      	ldr	r3, [pc, #52]	@ (80056d8 <xPortStartScheduler+0xf8>)
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	4a0c      	ldr	r2, [pc, #48]	@ (80056d8 <xPortStartScheduler+0xf8>)
 80056a8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80056ac:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80056ae:	f7ff ff83 	bl	80055b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80056b2:	f7ff faf1 	bl	8004c98 <vTaskSwitchContext>
	prvTaskExitError();
 80056b6:	f7ff ff33 	bl	8005520 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80056ba:	2300      	movs	r3, #0
}
 80056bc:	4618      	mov	r0, r3
 80056be:	3710      	adds	r7, #16
 80056c0:	46bd      	mov	sp, r7
 80056c2:	bd80      	pop	{r7, pc}
 80056c4:	e000e400 	.word	0xe000e400
 80056c8:	20000acc 	.word	0x20000acc
 80056cc:	20000ad0 	.word	0x20000ad0
 80056d0:	e000ed20 	.word	0xe000ed20
 80056d4:	2000010c 	.word	0x2000010c
 80056d8:	e000ef34 	.word	0xe000ef34

080056dc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80056dc:	b480      	push	{r7}
 80056de:	b083      	sub	sp, #12
 80056e0:	af00      	add	r7, sp, #0
	__asm volatile
 80056e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056e6:	b672      	cpsid	i
 80056e8:	f383 8811 	msr	BASEPRI, r3
 80056ec:	f3bf 8f6f 	isb	sy
 80056f0:	f3bf 8f4f 	dsb	sy
 80056f4:	b662      	cpsie	i
 80056f6:	607b      	str	r3, [r7, #4]
}
 80056f8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80056fa:	4b11      	ldr	r3, [pc, #68]	@ (8005740 <vPortEnterCritical+0x64>)
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	3301      	adds	r3, #1
 8005700:	4a0f      	ldr	r2, [pc, #60]	@ (8005740 <vPortEnterCritical+0x64>)
 8005702:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005704:	4b0e      	ldr	r3, [pc, #56]	@ (8005740 <vPortEnterCritical+0x64>)
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	2b01      	cmp	r3, #1
 800570a:	d112      	bne.n	8005732 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800570c:	4b0d      	ldr	r3, [pc, #52]	@ (8005744 <vPortEnterCritical+0x68>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	b2db      	uxtb	r3, r3
 8005712:	2b00      	cmp	r3, #0
 8005714:	d00d      	beq.n	8005732 <vPortEnterCritical+0x56>
	__asm volatile
 8005716:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800571a:	b672      	cpsid	i
 800571c:	f383 8811 	msr	BASEPRI, r3
 8005720:	f3bf 8f6f 	isb	sy
 8005724:	f3bf 8f4f 	dsb	sy
 8005728:	b662      	cpsie	i
 800572a:	603b      	str	r3, [r7, #0]
}
 800572c:	bf00      	nop
 800572e:	bf00      	nop
 8005730:	e7fd      	b.n	800572e <vPortEnterCritical+0x52>
	}
}
 8005732:	bf00      	nop
 8005734:	370c      	adds	r7, #12
 8005736:	46bd      	mov	sp, r7
 8005738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573c:	4770      	bx	lr
 800573e:	bf00      	nop
 8005740:	2000010c 	.word	0x2000010c
 8005744:	e000ed04 	.word	0xe000ed04

08005748 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005748:	b480      	push	{r7}
 800574a:	b083      	sub	sp, #12
 800574c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800574e:	4b13      	ldr	r3, [pc, #76]	@ (800579c <vPortExitCritical+0x54>)
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d10d      	bne.n	8005772 <vPortExitCritical+0x2a>
	__asm volatile
 8005756:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800575a:	b672      	cpsid	i
 800575c:	f383 8811 	msr	BASEPRI, r3
 8005760:	f3bf 8f6f 	isb	sy
 8005764:	f3bf 8f4f 	dsb	sy
 8005768:	b662      	cpsie	i
 800576a:	607b      	str	r3, [r7, #4]
}
 800576c:	bf00      	nop
 800576e:	bf00      	nop
 8005770:	e7fd      	b.n	800576e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8005772:	4b0a      	ldr	r3, [pc, #40]	@ (800579c <vPortExitCritical+0x54>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	3b01      	subs	r3, #1
 8005778:	4a08      	ldr	r2, [pc, #32]	@ (800579c <vPortExitCritical+0x54>)
 800577a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800577c:	4b07      	ldr	r3, [pc, #28]	@ (800579c <vPortExitCritical+0x54>)
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d105      	bne.n	8005790 <vPortExitCritical+0x48>
 8005784:	2300      	movs	r3, #0
 8005786:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800578e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005790:	bf00      	nop
 8005792:	370c      	adds	r7, #12
 8005794:	46bd      	mov	sp, r7
 8005796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579a:	4770      	bx	lr
 800579c:	2000010c 	.word	0x2000010c

080057a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80057a0:	f3ef 8009 	mrs	r0, PSP
 80057a4:	f3bf 8f6f 	isb	sy
 80057a8:	4b15      	ldr	r3, [pc, #84]	@ (8005800 <pxCurrentTCBConst>)
 80057aa:	681a      	ldr	r2, [r3, #0]
 80057ac:	f01e 0f10 	tst.w	lr, #16
 80057b0:	bf08      	it	eq
 80057b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80057b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057ba:	6010      	str	r0, [r2, #0]
 80057bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80057c0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80057c4:	b672      	cpsid	i
 80057c6:	f380 8811 	msr	BASEPRI, r0
 80057ca:	f3bf 8f4f 	dsb	sy
 80057ce:	f3bf 8f6f 	isb	sy
 80057d2:	b662      	cpsie	i
 80057d4:	f7ff fa60 	bl	8004c98 <vTaskSwitchContext>
 80057d8:	f04f 0000 	mov.w	r0, #0
 80057dc:	f380 8811 	msr	BASEPRI, r0
 80057e0:	bc09      	pop	{r0, r3}
 80057e2:	6819      	ldr	r1, [r3, #0]
 80057e4:	6808      	ldr	r0, [r1, #0]
 80057e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057ea:	f01e 0f10 	tst.w	lr, #16
 80057ee:	bf08      	it	eq
 80057f0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80057f4:	f380 8809 	msr	PSP, r0
 80057f8:	f3bf 8f6f 	isb	sy
 80057fc:	4770      	bx	lr
 80057fe:	bf00      	nop

08005800 <pxCurrentTCBConst>:
 8005800:	20000998 	.word	0x20000998
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005804:	bf00      	nop
 8005806:	bf00      	nop

08005808 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005808:	b580      	push	{r7, lr}
 800580a:	b082      	sub	sp, #8
 800580c:	af00      	add	r7, sp, #0
	__asm volatile
 800580e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005812:	b672      	cpsid	i
 8005814:	f383 8811 	msr	BASEPRI, r3
 8005818:	f3bf 8f6f 	isb	sy
 800581c:	f3bf 8f4f 	dsb	sy
 8005820:	b662      	cpsie	i
 8005822:	607b      	str	r3, [r7, #4]
}
 8005824:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005826:	f7ff f97b 	bl	8004b20 <xTaskIncrementTick>
 800582a:	4603      	mov	r3, r0
 800582c:	2b00      	cmp	r3, #0
 800582e:	d003      	beq.n	8005838 <xPortSysTickHandler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005830:	4b06      	ldr	r3, [pc, #24]	@ (800584c <xPortSysTickHandler+0x44>)
 8005832:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005836:	601a      	str	r2, [r3, #0]
 8005838:	2300      	movs	r3, #0
 800583a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	f383 8811 	msr	BASEPRI, r3
}
 8005842:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005844:	bf00      	nop
 8005846:	3708      	adds	r7, #8
 8005848:	46bd      	mov	sp, r7
 800584a:	bd80      	pop	{r7, pc}
 800584c:	e000ed04 	.word	0xe000ed04

08005850 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005850:	b480      	push	{r7}
 8005852:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005854:	4b0b      	ldr	r3, [pc, #44]	@ (8005884 <vPortSetupTimerInterrupt+0x34>)
 8005856:	2200      	movs	r2, #0
 8005858:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800585a:	4b0b      	ldr	r3, [pc, #44]	@ (8005888 <vPortSetupTimerInterrupt+0x38>)
 800585c:	2200      	movs	r2, #0
 800585e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005860:	4b0a      	ldr	r3, [pc, #40]	@ (800588c <vPortSetupTimerInterrupt+0x3c>)
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	4a0a      	ldr	r2, [pc, #40]	@ (8005890 <vPortSetupTimerInterrupt+0x40>)
 8005866:	fba2 2303 	umull	r2, r3, r2, r3
 800586a:	099b      	lsrs	r3, r3, #6
 800586c:	4a09      	ldr	r2, [pc, #36]	@ (8005894 <vPortSetupTimerInterrupt+0x44>)
 800586e:	3b01      	subs	r3, #1
 8005870:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005872:	4b04      	ldr	r3, [pc, #16]	@ (8005884 <vPortSetupTimerInterrupt+0x34>)
 8005874:	2207      	movs	r2, #7
 8005876:	601a      	str	r2, [r3, #0]
}
 8005878:	bf00      	nop
 800587a:	46bd      	mov	sp, r7
 800587c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005880:	4770      	bx	lr
 8005882:	bf00      	nop
 8005884:	e000e010 	.word	0xe000e010
 8005888:	e000e018 	.word	0xe000e018
 800588c:	20000100 	.word	0x20000100
 8005890:	10624dd3 	.word	0x10624dd3
 8005894:	e000e014 	.word	0xe000e014

08005898 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005898:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80058a8 <vPortEnableVFP+0x10>
 800589c:	6801      	ldr	r1, [r0, #0]
 800589e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80058a2:	6001      	str	r1, [r0, #0]
 80058a4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80058a6:	bf00      	nop
 80058a8:	e000ed88 	.word	0xe000ed88

080058ac <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b08a      	sub	sp, #40	@ 0x28
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80058b4:	2300      	movs	r3, #0
 80058b6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80058b8:	f7fe fff4 	bl	80048a4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80058bc:	4b5d      	ldr	r3, [pc, #372]	@ (8005a34 <pvPortMalloc+0x188>)
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d101      	bne.n	80058c8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80058c4:	f000 f920 	bl	8005b08 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80058c8:	4b5b      	ldr	r3, [pc, #364]	@ (8005a38 <pvPortMalloc+0x18c>)
 80058ca:	681a      	ldr	r2, [r3, #0]
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	4013      	ands	r3, r2
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	f040 8094 	bne.w	80059fe <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d020      	beq.n	800591e <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 80058dc:	2208      	movs	r2, #8
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	4413      	add	r3, r2
 80058e2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	f003 0307 	and.w	r3, r3, #7
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d017      	beq.n	800591e <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	f023 0307 	bic.w	r3, r3, #7
 80058f4:	3308      	adds	r3, #8
 80058f6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	f003 0307 	and.w	r3, r3, #7
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d00d      	beq.n	800591e <pvPortMalloc+0x72>
	__asm volatile
 8005902:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005906:	b672      	cpsid	i
 8005908:	f383 8811 	msr	BASEPRI, r3
 800590c:	f3bf 8f6f 	isb	sy
 8005910:	f3bf 8f4f 	dsb	sy
 8005914:	b662      	cpsie	i
 8005916:	617b      	str	r3, [r7, #20]
}
 8005918:	bf00      	nop
 800591a:	bf00      	nop
 800591c:	e7fd      	b.n	800591a <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d06c      	beq.n	80059fe <pvPortMalloc+0x152>
 8005924:	4b45      	ldr	r3, [pc, #276]	@ (8005a3c <pvPortMalloc+0x190>)
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	687a      	ldr	r2, [r7, #4]
 800592a:	429a      	cmp	r2, r3
 800592c:	d867      	bhi.n	80059fe <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800592e:	4b44      	ldr	r3, [pc, #272]	@ (8005a40 <pvPortMalloc+0x194>)
 8005930:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005932:	4b43      	ldr	r3, [pc, #268]	@ (8005a40 <pvPortMalloc+0x194>)
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005938:	e004      	b.n	8005944 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 800593a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800593c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800593e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005944:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005946:	685b      	ldr	r3, [r3, #4]
 8005948:	687a      	ldr	r2, [r7, #4]
 800594a:	429a      	cmp	r2, r3
 800594c:	d903      	bls.n	8005956 <pvPortMalloc+0xaa>
 800594e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d1f1      	bne.n	800593a <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005956:	4b37      	ldr	r3, [pc, #220]	@ (8005a34 <pvPortMalloc+0x188>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800595c:	429a      	cmp	r2, r3
 800595e:	d04e      	beq.n	80059fe <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005960:	6a3b      	ldr	r3, [r7, #32]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	2208      	movs	r2, #8
 8005966:	4413      	add	r3, r2
 8005968:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800596a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800596c:	681a      	ldr	r2, [r3, #0]
 800596e:	6a3b      	ldr	r3, [r7, #32]
 8005970:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005974:	685a      	ldr	r2, [r3, #4]
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	1ad2      	subs	r2, r2, r3
 800597a:	2308      	movs	r3, #8
 800597c:	005b      	lsls	r3, r3, #1
 800597e:	429a      	cmp	r2, r3
 8005980:	d922      	bls.n	80059c8 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005982:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	4413      	add	r3, r2
 8005988:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800598a:	69bb      	ldr	r3, [r7, #24]
 800598c:	f003 0307 	and.w	r3, r3, #7
 8005990:	2b00      	cmp	r3, #0
 8005992:	d00d      	beq.n	80059b0 <pvPortMalloc+0x104>
	__asm volatile
 8005994:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005998:	b672      	cpsid	i
 800599a:	f383 8811 	msr	BASEPRI, r3
 800599e:	f3bf 8f6f 	isb	sy
 80059a2:	f3bf 8f4f 	dsb	sy
 80059a6:	b662      	cpsie	i
 80059a8:	613b      	str	r3, [r7, #16]
}
 80059aa:	bf00      	nop
 80059ac:	bf00      	nop
 80059ae:	e7fd      	b.n	80059ac <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80059b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059b2:	685a      	ldr	r2, [r3, #4]
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	1ad2      	subs	r2, r2, r3
 80059b8:	69bb      	ldr	r3, [r7, #24]
 80059ba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80059bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059be:	687a      	ldr	r2, [r7, #4]
 80059c0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80059c2:	69b8      	ldr	r0, [r7, #24]
 80059c4:	f000 f902 	bl	8005bcc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80059c8:	4b1c      	ldr	r3, [pc, #112]	@ (8005a3c <pvPortMalloc+0x190>)
 80059ca:	681a      	ldr	r2, [r3, #0]
 80059cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059ce:	685b      	ldr	r3, [r3, #4]
 80059d0:	1ad3      	subs	r3, r2, r3
 80059d2:	4a1a      	ldr	r2, [pc, #104]	@ (8005a3c <pvPortMalloc+0x190>)
 80059d4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80059d6:	4b19      	ldr	r3, [pc, #100]	@ (8005a3c <pvPortMalloc+0x190>)
 80059d8:	681a      	ldr	r2, [r3, #0]
 80059da:	4b1a      	ldr	r3, [pc, #104]	@ (8005a44 <pvPortMalloc+0x198>)
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	429a      	cmp	r2, r3
 80059e0:	d203      	bcs.n	80059ea <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80059e2:	4b16      	ldr	r3, [pc, #88]	@ (8005a3c <pvPortMalloc+0x190>)
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	4a17      	ldr	r2, [pc, #92]	@ (8005a44 <pvPortMalloc+0x198>)
 80059e8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80059ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059ec:	685a      	ldr	r2, [r3, #4]
 80059ee:	4b12      	ldr	r3, [pc, #72]	@ (8005a38 <pvPortMalloc+0x18c>)
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	431a      	orrs	r2, r3
 80059f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059f6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80059f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059fa:	2200      	movs	r2, #0
 80059fc:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80059fe:	f7fe ff5f 	bl	80048c0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005a02:	69fb      	ldr	r3, [r7, #28]
 8005a04:	f003 0307 	and.w	r3, r3, #7
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d00d      	beq.n	8005a28 <pvPortMalloc+0x17c>
	__asm volatile
 8005a0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a10:	b672      	cpsid	i
 8005a12:	f383 8811 	msr	BASEPRI, r3
 8005a16:	f3bf 8f6f 	isb	sy
 8005a1a:	f3bf 8f4f 	dsb	sy
 8005a1e:	b662      	cpsie	i
 8005a20:	60fb      	str	r3, [r7, #12]
}
 8005a22:	bf00      	nop
 8005a24:	bf00      	nop
 8005a26:	e7fd      	b.n	8005a24 <pvPortMalloc+0x178>
	return pvReturn;
 8005a28:	69fb      	ldr	r3, [r7, #28]
}
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	3728      	adds	r7, #40	@ 0x28
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	bd80      	pop	{r7, pc}
 8005a32:	bf00      	nop
 8005a34:	200046dc 	.word	0x200046dc
 8005a38:	200046e8 	.word	0x200046e8
 8005a3c:	200046e0 	.word	0x200046e0
 8005a40:	200046d4 	.word	0x200046d4
 8005a44:	200046e4 	.word	0x200046e4

08005a48 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b086      	sub	sp, #24
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d04e      	beq.n	8005af8 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005a5a:	2308      	movs	r3, #8
 8005a5c:	425b      	negs	r3, r3
 8005a5e:	697a      	ldr	r2, [r7, #20]
 8005a60:	4413      	add	r3, r2
 8005a62:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005a64:	697b      	ldr	r3, [r7, #20]
 8005a66:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005a68:	693b      	ldr	r3, [r7, #16]
 8005a6a:	685a      	ldr	r2, [r3, #4]
 8005a6c:	4b24      	ldr	r3, [pc, #144]	@ (8005b00 <vPortFree+0xb8>)
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	4013      	ands	r3, r2
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d10d      	bne.n	8005a92 <vPortFree+0x4a>
	__asm volatile
 8005a76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a7a:	b672      	cpsid	i
 8005a7c:	f383 8811 	msr	BASEPRI, r3
 8005a80:	f3bf 8f6f 	isb	sy
 8005a84:	f3bf 8f4f 	dsb	sy
 8005a88:	b662      	cpsie	i
 8005a8a:	60fb      	str	r3, [r7, #12]
}
 8005a8c:	bf00      	nop
 8005a8e:	bf00      	nop
 8005a90:	e7fd      	b.n	8005a8e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005a92:	693b      	ldr	r3, [r7, #16]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d00d      	beq.n	8005ab6 <vPortFree+0x6e>
	__asm volatile
 8005a9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a9e:	b672      	cpsid	i
 8005aa0:	f383 8811 	msr	BASEPRI, r3
 8005aa4:	f3bf 8f6f 	isb	sy
 8005aa8:	f3bf 8f4f 	dsb	sy
 8005aac:	b662      	cpsie	i
 8005aae:	60bb      	str	r3, [r7, #8]
}
 8005ab0:	bf00      	nop
 8005ab2:	bf00      	nop
 8005ab4:	e7fd      	b.n	8005ab2 <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005ab6:	693b      	ldr	r3, [r7, #16]
 8005ab8:	685a      	ldr	r2, [r3, #4]
 8005aba:	4b11      	ldr	r3, [pc, #68]	@ (8005b00 <vPortFree+0xb8>)
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	4013      	ands	r3, r2
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d019      	beq.n	8005af8 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005ac4:	693b      	ldr	r3, [r7, #16]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d115      	bne.n	8005af8 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005acc:	693b      	ldr	r3, [r7, #16]
 8005ace:	685a      	ldr	r2, [r3, #4]
 8005ad0:	4b0b      	ldr	r3, [pc, #44]	@ (8005b00 <vPortFree+0xb8>)
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	43db      	mvns	r3, r3
 8005ad6:	401a      	ands	r2, r3
 8005ad8:	693b      	ldr	r3, [r7, #16]
 8005ada:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005adc:	f7fe fee2 	bl	80048a4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005ae0:	693b      	ldr	r3, [r7, #16]
 8005ae2:	685a      	ldr	r2, [r3, #4]
 8005ae4:	4b07      	ldr	r3, [pc, #28]	@ (8005b04 <vPortFree+0xbc>)
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	4413      	add	r3, r2
 8005aea:	4a06      	ldr	r2, [pc, #24]	@ (8005b04 <vPortFree+0xbc>)
 8005aec:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005aee:	6938      	ldr	r0, [r7, #16]
 8005af0:	f000 f86c 	bl	8005bcc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005af4:	f7fe fee4 	bl	80048c0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005af8:	bf00      	nop
 8005afa:	3718      	adds	r7, #24
 8005afc:	46bd      	mov	sp, r7
 8005afe:	bd80      	pop	{r7, pc}
 8005b00:	200046e8 	.word	0x200046e8
 8005b04:	200046e0 	.word	0x200046e0

08005b08 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005b08:	b480      	push	{r7}
 8005b0a:	b085      	sub	sp, #20
 8005b0c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005b0e:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8005b12:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005b14:	4b27      	ldr	r3, [pc, #156]	@ (8005bb4 <prvHeapInit+0xac>)
 8005b16:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	f003 0307 	and.w	r3, r3, #7
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d00c      	beq.n	8005b3c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	3307      	adds	r3, #7
 8005b26:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	f023 0307 	bic.w	r3, r3, #7
 8005b2e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005b30:	68ba      	ldr	r2, [r7, #8]
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	1ad3      	subs	r3, r2, r3
 8005b36:	4a1f      	ldr	r2, [pc, #124]	@ (8005bb4 <prvHeapInit+0xac>)
 8005b38:	4413      	add	r3, r2
 8005b3a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005b40:	4a1d      	ldr	r2, [pc, #116]	@ (8005bb8 <prvHeapInit+0xb0>)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005b46:	4b1c      	ldr	r3, [pc, #112]	@ (8005bb8 <prvHeapInit+0xb0>)
 8005b48:	2200      	movs	r2, #0
 8005b4a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	68ba      	ldr	r2, [r7, #8]
 8005b50:	4413      	add	r3, r2
 8005b52:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005b54:	2208      	movs	r2, #8
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	1a9b      	subs	r3, r3, r2
 8005b5a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	f023 0307 	bic.w	r3, r3, #7
 8005b62:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	4a15      	ldr	r2, [pc, #84]	@ (8005bbc <prvHeapInit+0xb4>)
 8005b68:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005b6a:	4b14      	ldr	r3, [pc, #80]	@ (8005bbc <prvHeapInit+0xb4>)
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	2200      	movs	r2, #0
 8005b70:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005b72:	4b12      	ldr	r3, [pc, #72]	@ (8005bbc <prvHeapInit+0xb4>)
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	2200      	movs	r2, #0
 8005b78:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	68fa      	ldr	r2, [r7, #12]
 8005b82:	1ad2      	subs	r2, r2, r3
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005b88:	4b0c      	ldr	r3, [pc, #48]	@ (8005bbc <prvHeapInit+0xb4>)
 8005b8a:	681a      	ldr	r2, [r3, #0]
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	685b      	ldr	r3, [r3, #4]
 8005b94:	4a0a      	ldr	r2, [pc, #40]	@ (8005bc0 <prvHeapInit+0xb8>)
 8005b96:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	685b      	ldr	r3, [r3, #4]
 8005b9c:	4a09      	ldr	r2, [pc, #36]	@ (8005bc4 <prvHeapInit+0xbc>)
 8005b9e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005ba0:	4b09      	ldr	r3, [pc, #36]	@ (8005bc8 <prvHeapInit+0xc0>)
 8005ba2:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8005ba6:	601a      	str	r2, [r3, #0]
}
 8005ba8:	bf00      	nop
 8005baa:	3714      	adds	r7, #20
 8005bac:	46bd      	mov	sp, r7
 8005bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb2:	4770      	bx	lr
 8005bb4:	20000ad4 	.word	0x20000ad4
 8005bb8:	200046d4 	.word	0x200046d4
 8005bbc:	200046dc 	.word	0x200046dc
 8005bc0:	200046e4 	.word	0x200046e4
 8005bc4:	200046e0 	.word	0x200046e0
 8005bc8:	200046e8 	.word	0x200046e8

08005bcc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005bcc:	b480      	push	{r7}
 8005bce:	b085      	sub	sp, #20
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005bd4:	4b28      	ldr	r3, [pc, #160]	@ (8005c78 <prvInsertBlockIntoFreeList+0xac>)
 8005bd6:	60fb      	str	r3, [r7, #12]
 8005bd8:	e002      	b.n	8005be0 <prvInsertBlockIntoFreeList+0x14>
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	60fb      	str	r3, [r7, #12]
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	687a      	ldr	r2, [r7, #4]
 8005be6:	429a      	cmp	r2, r3
 8005be8:	d8f7      	bhi.n	8005bda <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	685b      	ldr	r3, [r3, #4]
 8005bf2:	68ba      	ldr	r2, [r7, #8]
 8005bf4:	4413      	add	r3, r2
 8005bf6:	687a      	ldr	r2, [r7, #4]
 8005bf8:	429a      	cmp	r2, r3
 8005bfa:	d108      	bne.n	8005c0e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	685a      	ldr	r2, [r3, #4]
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	685b      	ldr	r3, [r3, #4]
 8005c04:	441a      	add	r2, r3
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	685b      	ldr	r3, [r3, #4]
 8005c16:	68ba      	ldr	r2, [r7, #8]
 8005c18:	441a      	add	r2, r3
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	429a      	cmp	r2, r3
 8005c20:	d118      	bne.n	8005c54 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681a      	ldr	r2, [r3, #0]
 8005c26:	4b15      	ldr	r3, [pc, #84]	@ (8005c7c <prvInsertBlockIntoFreeList+0xb0>)
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	429a      	cmp	r2, r3
 8005c2c:	d00d      	beq.n	8005c4a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	685a      	ldr	r2, [r3, #4]
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	685b      	ldr	r3, [r3, #4]
 8005c38:	441a      	add	r2, r3
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	681a      	ldr	r2, [r3, #0]
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	601a      	str	r2, [r3, #0]
 8005c48:	e008      	b.n	8005c5c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005c4a:	4b0c      	ldr	r3, [pc, #48]	@ (8005c7c <prvInsertBlockIntoFreeList+0xb0>)
 8005c4c:	681a      	ldr	r2, [r3, #0]
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	601a      	str	r2, [r3, #0]
 8005c52:	e003      	b.n	8005c5c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681a      	ldr	r2, [r3, #0]
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005c5c:	68fa      	ldr	r2, [r7, #12]
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	429a      	cmp	r2, r3
 8005c62:	d002      	beq.n	8005c6a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	687a      	ldr	r2, [r7, #4]
 8005c68:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005c6a:	bf00      	nop
 8005c6c:	3714      	adds	r7, #20
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c74:	4770      	bx	lr
 8005c76:	bf00      	nop
 8005c78:	200046d4 	.word	0x200046d4
 8005c7c:	200046dc 	.word	0x200046dc

08005c80 <drv_uart1_receive>:

#include "usart.h"
#include "gpio.h"

uint8_t drv_uart1_receive(char * pData, uint16_t size)
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b082      	sub	sp, #8
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
 8005c88:	460b      	mov	r3, r1
 8005c8a:	807b      	strh	r3, [r7, #2]
	HAL_UART_Receive(&huart1, (uint8_t*)(pData), size, HAL_MAX_DELAY);
 8005c8c:	887a      	ldrh	r2, [r7, #2]
 8005c8e:	f04f 33ff 	mov.w	r3, #4294967295
 8005c92:	6879      	ldr	r1, [r7, #4]
 8005c94:	4803      	ldr	r0, [pc, #12]	@ (8005ca4 <drv_uart1_receive+0x24>)
 8005c96:	f7fd fbf8 	bl	800348a <HAL_UART_Receive>

	return 0;	// Life's too short for error management
 8005c9a:	2300      	movs	r3, #0
}
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	3708      	adds	r7, #8
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	bd80      	pop	{r7, pc}
 8005ca4:	2000090c 	.word	0x2000090c

08005ca8 <drv_uart1_transmit>:

uint8_t drv_uart1_transmit(const char * pData, uint16_t size)
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b082      	sub	sp, #8
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
 8005cb0:	460b      	mov	r3, r1
 8005cb2:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit(&huart1, (uint8_t*)pData, size, HAL_MAX_DELAY);
 8005cb4:	887a      	ldrh	r2, [r7, #2]
 8005cb6:	f04f 33ff 	mov.w	r3, #4294967295
 8005cba:	6879      	ldr	r1, [r7, #4]
 8005cbc:	4803      	ldr	r0, [pc, #12]	@ (8005ccc <drv_uart1_transmit+0x24>)
 8005cbe:	f7fd fb5b 	bl	8003378 <HAL_UART_Transmit>

	return 0;	// Srsly, don't do that kids
 8005cc2:	2300      	movs	r3, #0
}
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	3708      	adds	r7, #8
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	bd80      	pop	{r7, pc}
 8005ccc:	2000090c 	.word	0x2000090c

08005cd0 <sh_help>:

#include "shell.h"

#include <stdio.h>

static int sh_help(h_shell_t * h_shell, int argc, char ** argv) {
 8005cd0:	b590      	push	{r4, r7, lr}
 8005cd2:	b08b      	sub	sp, #44	@ 0x2c
 8005cd4:	af02      	add	r7, sp, #8
 8005cd6:	60f8      	str	r0, [r7, #12]
 8005cd8:	60b9      	str	r1, [r7, #8]
 8005cda:	607a      	str	r2, [r7, #4]
	int size;

	size = snprintf(h_shell->print_buffer, BUFFER_SIZE, "sh_help appelé avec %d argument(s)\r\n", argc);
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	f503 7041 	add.w	r0, r3, #772	@ 0x304
 8005ce2:	68bb      	ldr	r3, [r7, #8]
 8005ce4:	4a35      	ldr	r2, [pc, #212]	@ (8005dbc <sh_help+0xec>)
 8005ce6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005cea:	f000 fba3 	bl	8006434 <sniprintf>
 8005cee:	6178      	str	r0, [r7, #20]
	h_shell->drv.transmit(h_shell->print_buffer, size);
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	f8d3 3504 	ldr.w	r3, [r3, #1284]	@ 0x504
 8005cf6:	68fa      	ldr	r2, [r7, #12]
 8005cf8:	f502 7241 	add.w	r2, r2, #772	@ 0x304
 8005cfc:	6979      	ldr	r1, [r7, #20]
 8005cfe:	b289      	uxth	r1, r1
 8005d00:	4610      	mov	r0, r2
 8005d02:	4798      	blx	r3

	for(int i = 0; i < argc; i++) {
 8005d04:	2300      	movs	r3, #0
 8005d06:	61fb      	str	r3, [r7, #28]
 8005d08:	e01c      	b.n	8005d44 <sh_help+0x74>
		size = snprintf(h_shell->print_buffer, BUFFER_SIZE, "argv[%d] = %s\r\n", i, argv[i]);
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	f503 7041 	add.w	r0, r3, #772	@ 0x304
 8005d10:	69fb      	ldr	r3, [r7, #28]
 8005d12:	009b      	lsls	r3, r3, #2
 8005d14:	687a      	ldr	r2, [r7, #4]
 8005d16:	4413      	add	r3, r2
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	9300      	str	r3, [sp, #0]
 8005d1c:	69fb      	ldr	r3, [r7, #28]
 8005d1e:	4a28      	ldr	r2, [pc, #160]	@ (8005dc0 <sh_help+0xf0>)
 8005d20:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005d24:	f000 fb86 	bl	8006434 <sniprintf>
 8005d28:	6178      	str	r0, [r7, #20]
		h_shell->drv.transmit(h_shell->print_buffer, size);
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	f8d3 3504 	ldr.w	r3, [r3, #1284]	@ 0x504
 8005d30:	68fa      	ldr	r2, [r7, #12]
 8005d32:	f502 7241 	add.w	r2, r2, #772	@ 0x304
 8005d36:	6979      	ldr	r1, [r7, #20]
 8005d38:	b289      	uxth	r1, r1
 8005d3a:	4610      	mov	r0, r2
 8005d3c:	4798      	blx	r3
	for(int i = 0; i < argc; i++) {
 8005d3e:	69fb      	ldr	r3, [r7, #28]
 8005d40:	3301      	adds	r3, #1
 8005d42:	61fb      	str	r3, [r7, #28]
 8005d44:	69fa      	ldr	r2, [r7, #28]
 8005d46:	68bb      	ldr	r3, [r7, #8]
 8005d48:	429a      	cmp	r2, r3
 8005d4a:	dbde      	blt.n	8005d0a <sh_help+0x3a>
	}

	for(int i = 0 ; i < h_shell->func_list_size ; i++) {
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	61bb      	str	r3, [r7, #24]
 8005d50:	e02a      	b.n	8005da8 <sh_help+0xd8>
		size = snprintf(h_shell->print_buffer, BUFFER_SIZE, "%c: %s\r\n", h_shell->func_list[i].c, h_shell->func_list[i].description);
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	f503 7041 	add.w	r0, r3, #772	@ 0x304
 8005d58:	68f9      	ldr	r1, [r7, #12]
 8005d5a:	69ba      	ldr	r2, [r7, #24]
 8005d5c:	4613      	mov	r3, r2
 8005d5e:	005b      	lsls	r3, r3, #1
 8005d60:	4413      	add	r3, r2
 8005d62:	009b      	lsls	r3, r3, #2
 8005d64:	440b      	add	r3, r1
 8005d66:	3304      	adds	r3, #4
 8005d68:	781b      	ldrb	r3, [r3, #0]
 8005d6a:	461c      	mov	r4, r3
 8005d6c:	68f9      	ldr	r1, [r7, #12]
 8005d6e:	69ba      	ldr	r2, [r7, #24]
 8005d70:	4613      	mov	r3, r2
 8005d72:	005b      	lsls	r3, r3, #1
 8005d74:	4413      	add	r3, r2
 8005d76:	009b      	lsls	r3, r3, #2
 8005d78:	440b      	add	r3, r1
 8005d7a:	330c      	adds	r3, #12
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	9300      	str	r3, [sp, #0]
 8005d80:	4623      	mov	r3, r4
 8005d82:	4a10      	ldr	r2, [pc, #64]	@ (8005dc4 <sh_help+0xf4>)
 8005d84:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005d88:	f000 fb54 	bl	8006434 <sniprintf>
 8005d8c:	6178      	str	r0, [r7, #20]
		h_shell->drv.transmit(h_shell->print_buffer, size);
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	f8d3 3504 	ldr.w	r3, [r3, #1284]	@ 0x504
 8005d94:	68fa      	ldr	r2, [r7, #12]
 8005d96:	f502 7241 	add.w	r2, r2, #772	@ 0x304
 8005d9a:	6979      	ldr	r1, [r7, #20]
 8005d9c:	b289      	uxth	r1, r1
 8005d9e:	4610      	mov	r0, r2
 8005da0:	4798      	blx	r3
	for(int i = 0 ; i < h_shell->func_list_size ; i++) {
 8005da2:	69bb      	ldr	r3, [r7, #24]
 8005da4:	3301      	adds	r3, #1
 8005da6:	61bb      	str	r3, [r7, #24]
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	69ba      	ldr	r2, [r7, #24]
 8005dae:	429a      	cmp	r2, r3
 8005db0:	dbcf      	blt.n	8005d52 <sh_help+0x82>
	}
	return 0;
 8005db2:	2300      	movs	r3, #0
}
 8005db4:	4618      	mov	r0, r3
 8005db6:	3724      	adds	r7, #36	@ 0x24
 8005db8:	46bd      	mov	sp, r7
 8005dba:	bd90      	pop	{r4, r7, pc}
 8005dbc:	080078bc 	.word	0x080078bc
 8005dc0:	080078e4 	.word	0x080078e4
 8005dc4:	080078f4 	.word	0x080078f4

08005dc8 <shell_init>:

void shell_init(h_shell_t * h_shell) {
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b084      	sub	sp, #16
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
	int size = 0;
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	60fb      	str	r3, [r7, #12]

	h_shell->func_list_size = 0;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	601a      	str	r2, [r3, #0]

	size = snprintf (h_shell->print_buffer, BUFFER_SIZE, "\r\n\r\n===== Monsieur Shell v0.2 =====\r\n");
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	f503 7341 	add.w	r3, r3, #772	@ 0x304
 8005de0:	4a17      	ldr	r2, [pc, #92]	@ (8005e40 <shell_init+0x78>)
 8005de2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005de6:	4618      	mov	r0, r3
 8005de8:	f000 fb24 	bl	8006434 <sniprintf>
 8005dec:	60f8      	str	r0, [r7, #12]
	h_shell->drv.transmit(h_shell->print_buffer, size);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	f8d3 3504 	ldr.w	r3, [r3, #1284]	@ 0x504
 8005df4:	687a      	ldr	r2, [r7, #4]
 8005df6:	f502 7241 	add.w	r2, r2, #772	@ 0x304
 8005dfa:	68f9      	ldr	r1, [r7, #12]
 8005dfc:	b289      	uxth	r1, r1
 8005dfe:	4610      	mov	r0, r2
 8005e00:	4798      	blx	r3

	size = snprintf (h_shell->print_buffer, BUFFER_SIZE, "Correction TD (v0.2.1 du coup?)\r\n");
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	f503 7341 	add.w	r3, r3, #772	@ 0x304
 8005e08:	4a0e      	ldr	r2, [pc, #56]	@ (8005e44 <shell_init+0x7c>)
 8005e0a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005e0e:	4618      	mov	r0, r3
 8005e10:	f000 fb10 	bl	8006434 <sniprintf>
 8005e14:	60f8      	str	r0, [r7, #12]
	h_shell->drv.transmit(h_shell->print_buffer, size);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	f8d3 3504 	ldr.w	r3, [r3, #1284]	@ 0x504
 8005e1c:	687a      	ldr	r2, [r7, #4]
 8005e1e:	f502 7241 	add.w	r2, r2, #772	@ 0x304
 8005e22:	68f9      	ldr	r1, [r7, #12]
 8005e24:	b289      	uxth	r1, r1
 8005e26:	4610      	mov	r0, r2
 8005e28:	4798      	blx	r3

	shell_add(h_shell, 'h', sh_help, "Help");
 8005e2a:	4b07      	ldr	r3, [pc, #28]	@ (8005e48 <shell_init+0x80>)
 8005e2c:	4a07      	ldr	r2, [pc, #28]	@ (8005e4c <shell_init+0x84>)
 8005e2e:	2168      	movs	r1, #104	@ 0x68
 8005e30:	6878      	ldr	r0, [r7, #4]
 8005e32:	f000 f80d 	bl	8005e50 <shell_add>
}
 8005e36:	bf00      	nop
 8005e38:	3710      	adds	r7, #16
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	bd80      	pop	{r7, pc}
 8005e3e:	bf00      	nop
 8005e40:	08007900 	.word	0x08007900
 8005e44:	08007928 	.word	0x08007928
 8005e48:	0800794c 	.word	0x0800794c
 8005e4c:	08005cd1 	.word	0x08005cd1

08005e50 <shell_add>:

int shell_add(h_shell_t * h_shell, char c, shell_func_pointer_t pfunc, char * description) {
 8005e50:	b480      	push	{r7}
 8005e52:	b085      	sub	sp, #20
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	60f8      	str	r0, [r7, #12]
 8005e58:	607a      	str	r2, [r7, #4]
 8005e5a:	603b      	str	r3, [r7, #0]
 8005e5c:	460b      	mov	r3, r1
 8005e5e:	72fb      	strb	r3, [r7, #11]
	if (h_shell->func_list_size < SHELL_FUNC_LIST_MAX_SIZE) {
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	2b3f      	cmp	r3, #63	@ 0x3f
 8005e66:	dc27      	bgt.n	8005eb8 <shell_add+0x68>
		h_shell->func_list[h_shell->func_list_size].c = c;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681a      	ldr	r2, [r3, #0]
 8005e6c:	68f9      	ldr	r1, [r7, #12]
 8005e6e:	4613      	mov	r3, r2
 8005e70:	005b      	lsls	r3, r3, #1
 8005e72:	4413      	add	r3, r2
 8005e74:	009b      	lsls	r3, r3, #2
 8005e76:	440b      	add	r3, r1
 8005e78:	3304      	adds	r3, #4
 8005e7a:	7afa      	ldrb	r2, [r7, #11]
 8005e7c:	701a      	strb	r2, [r3, #0]
		h_shell->func_list[h_shell->func_list_size].func = pfunc;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	681a      	ldr	r2, [r3, #0]
 8005e82:	68f9      	ldr	r1, [r7, #12]
 8005e84:	4613      	mov	r3, r2
 8005e86:	005b      	lsls	r3, r3, #1
 8005e88:	4413      	add	r3, r2
 8005e8a:	009b      	lsls	r3, r3, #2
 8005e8c:	440b      	add	r3, r1
 8005e8e:	3308      	adds	r3, #8
 8005e90:	687a      	ldr	r2, [r7, #4]
 8005e92:	601a      	str	r2, [r3, #0]
		h_shell->func_list[h_shell->func_list_size].description = description;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	681a      	ldr	r2, [r3, #0]
 8005e98:	68f9      	ldr	r1, [r7, #12]
 8005e9a:	4613      	mov	r3, r2
 8005e9c:	005b      	lsls	r3, r3, #1
 8005e9e:	4413      	add	r3, r2
 8005ea0:	009b      	lsls	r3, r3, #2
 8005ea2:	440b      	add	r3, r1
 8005ea4:	330c      	adds	r3, #12
 8005ea6:	683a      	ldr	r2, [r7, #0]
 8005ea8:	601a      	str	r2, [r3, #0]
		h_shell->func_list_size++;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	1c5a      	adds	r2, r3, #1
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	601a      	str	r2, [r3, #0]
		return 0;
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	e001      	b.n	8005ebc <shell_add+0x6c>
	}

	return -1;
 8005eb8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	3714      	adds	r7, #20
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec6:	4770      	bx	lr

08005ec8 <shell_exec>:

static int shell_exec(h_shell_t * h_shell, char * buf) {
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b090      	sub	sp, #64	@ 0x40
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
 8005ed0:	6039      	str	r1, [r7, #0]
	int i;

	char c = buf[0];
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	781b      	ldrb	r3, [r3, #0]
 8005ed6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

	int argc;
	char * argv[ARGC_MAX];
	char *p;

	for(i = 0 ; i < h_shell->func_list_size ; i++) {
 8005eda:	2300      	movs	r3, #0
 8005edc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005ede:	e041      	b.n	8005f64 <shell_exec+0x9c>
		if (h_shell->func_list[i].c == c) {
 8005ee0:	6879      	ldr	r1, [r7, #4]
 8005ee2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005ee4:	4613      	mov	r3, r2
 8005ee6:	005b      	lsls	r3, r3, #1
 8005ee8:	4413      	add	r3, r2
 8005eea:	009b      	lsls	r3, r3, #2
 8005eec:	440b      	add	r3, r1
 8005eee:	3304      	adds	r3, #4
 8005ef0:	781b      	ldrb	r3, [r3, #0]
 8005ef2:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 8005ef6:	429a      	cmp	r2, r3
 8005ef8:	d131      	bne.n	8005f5e <shell_exec+0x96>
			argc = 1;
 8005efa:	2301      	movs	r3, #1
 8005efc:	63bb      	str	r3, [r7, #56]	@ 0x38
			argv[0] = buf;
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	60fb      	str	r3, [r7, #12]

			for(p = buf ; *p != '\0' && argc < ARGC_MAX ; p++){
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f06:	e013      	b.n	8005f30 <shell_exec+0x68>
				if(*p == ' ') {
 8005f08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f0a:	781b      	ldrb	r3, [r3, #0]
 8005f0c:	2b20      	cmp	r3, #32
 8005f0e:	d10c      	bne.n	8005f2a <shell_exec+0x62>
					*p = '\0';
 8005f10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f12:	2200      	movs	r2, #0
 8005f14:	701a      	strb	r2, [r3, #0]
					argv[argc++] = p+1;
 8005f16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f18:	1c5a      	adds	r2, r3, #1
 8005f1a:	63ba      	str	r2, [r7, #56]	@ 0x38
 8005f1c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005f1e:	3201      	adds	r2, #1
 8005f20:	009b      	lsls	r3, r3, #2
 8005f22:	3340      	adds	r3, #64	@ 0x40
 8005f24:	443b      	add	r3, r7
 8005f26:	f843 2c34 	str.w	r2, [r3, #-52]
			for(p = buf ; *p != '\0' && argc < ARGC_MAX ; p++){
 8005f2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f2c:	3301      	adds	r3, #1
 8005f2e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f32:	781b      	ldrb	r3, [r3, #0]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d002      	beq.n	8005f3e <shell_exec+0x76>
 8005f38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f3a:	2b07      	cmp	r3, #7
 8005f3c:	dde4      	ble.n	8005f08 <shell_exec+0x40>
				}
			}

			return h_shell->func_list[i].func(h_shell, argc, argv);
 8005f3e:	6879      	ldr	r1, [r7, #4]
 8005f40:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005f42:	4613      	mov	r3, r2
 8005f44:	005b      	lsls	r3, r3, #1
 8005f46:	4413      	add	r3, r2
 8005f48:	009b      	lsls	r3, r3, #2
 8005f4a:	440b      	add	r3, r1
 8005f4c:	3308      	adds	r3, #8
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f107 020c 	add.w	r2, r7, #12
 8005f54:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005f56:	6878      	ldr	r0, [r7, #4]
 8005f58:	4798      	blx	r3
 8005f5a:	4603      	mov	r3, r0
 8005f5c:	e01e      	b.n	8005f9c <shell_exec+0xd4>
	for(i = 0 ; i < h_shell->func_list_size ; i++) {
 8005f5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f60:	3301      	adds	r3, #1
 8005f62:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005f6a:	429a      	cmp	r2, r3
 8005f6c:	dbb8      	blt.n	8005ee0 <shell_exec+0x18>
		}
	}

	int size;
	size = snprintf (h_shell->print_buffer, BUFFER_SIZE, "%c: no such command\r\n", c);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	f503 7041 	add.w	r0, r3, #772	@ 0x304
 8005f74:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005f78:	4a0a      	ldr	r2, [pc, #40]	@ (8005fa4 <shell_exec+0xdc>)
 8005f7a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005f7e:	f000 fa59 	bl	8006434 <sniprintf>
 8005f82:	62f8      	str	r0, [r7, #44]	@ 0x2c
	h_shell->drv.transmit(h_shell->print_buffer, size);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	f8d3 3504 	ldr.w	r3, [r3, #1284]	@ 0x504
 8005f8a:	687a      	ldr	r2, [r7, #4]
 8005f8c:	f502 7241 	add.w	r2, r2, #772	@ 0x304
 8005f90:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005f92:	b289      	uxth	r1, r1
 8005f94:	4610      	mov	r0, r2
 8005f96:	4798      	blx	r3
	return -1;
 8005f98:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	3740      	adds	r7, #64	@ 0x40
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	bd80      	pop	{r7, pc}
 8005fa4:	08007954 	.word	0x08007954

08005fa8 <shell_run>:

static const char backspace[] = "\b \b";
static const char prompt[] = "> ";

int shell_run(h_shell_t * h_shell) {
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b086      	sub	sp, #24
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
	int reading = 0;
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	617b      	str	r3, [r7, #20]
	int pos = 0;
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	613b      	str	r3, [r7, #16]

	while (1) {
		h_shell->drv.transmit(prompt, 2);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	f8d3 3504 	ldr.w	r3, [r3, #1284]	@ 0x504
 8005fbe:	2102      	movs	r1, #2
 8005fc0:	483b      	ldr	r0, [pc, #236]	@ (80060b0 <shell_run+0x108>)
 8005fc2:	4798      	blx	r3
		reading = 1;
 8005fc4:	2301      	movs	r3, #1
 8005fc6:	617b      	str	r3, [r7, #20]

		while(reading) {
 8005fc8:	e066      	b.n	8006098 <shell_run+0xf0>
			char c;
			h_shell->drv.receive(&c, 1);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 8005fd0:	f107 020b 	add.w	r2, r7, #11
 8005fd4:	2101      	movs	r1, #1
 8005fd6:	4610      	mov	r0, r2
 8005fd8:	4798      	blx	r3
			int size;

			switch (c) {
 8005fda:	7afb      	ldrb	r3, [r7, #11]
 8005fdc:	2b08      	cmp	r3, #8
 8005fde:	d038      	beq.n	8006052 <shell_run+0xaa>
 8005fe0:	2b0d      	cmp	r3, #13
 8005fe2:	d143      	bne.n	800606c <shell_run+0xc4>
			//process RETURN key
			case '\r':
				//case '\n':
				size = snprintf (h_shell->print_buffer, BUFFER_SIZE, "\r\n");
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	f503 7341 	add.w	r3, r3, #772	@ 0x304
 8005fea:	4a32      	ldr	r2, [pc, #200]	@ (80060b4 <shell_run+0x10c>)
 8005fec:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	f000 fa1f 	bl	8006434 <sniprintf>
 8005ff6:	60f8      	str	r0, [r7, #12]
				h_shell->drv.transmit(h_shell->print_buffer, size);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	f8d3 3504 	ldr.w	r3, [r3, #1284]	@ 0x504
 8005ffe:	687a      	ldr	r2, [r7, #4]
 8006000:	f502 7241 	add.w	r2, r2, #772	@ 0x304
 8006004:	68f9      	ldr	r1, [r7, #12]
 8006006:	b289      	uxth	r1, r1
 8006008:	4610      	mov	r0, r2
 800600a:	4798      	blx	r3
				h_shell->cmd_buffer[pos++] = 0;     //add \0 char at end of string
 800600c:	693b      	ldr	r3, [r7, #16]
 800600e:	1c5a      	adds	r2, r3, #1
 8006010:	613a      	str	r2, [r7, #16]
 8006012:	687a      	ldr	r2, [r7, #4]
 8006014:	4413      	add	r3, r2
 8006016:	2200      	movs	r2, #0
 8006018:	f883 2404 	strb.w	r2, [r3, #1028]	@ 0x404
				size = snprintf (h_shell->print_buffer, BUFFER_SIZE, ":%s\r\n", h_shell->cmd_buffer);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	f503 7041 	add.w	r0, r3, #772	@ 0x304
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006028:	4a23      	ldr	r2, [pc, #140]	@ (80060b8 <shell_run+0x110>)
 800602a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800602e:	f000 fa01 	bl	8006434 <sniprintf>
 8006032:	60f8      	str	r0, [r7, #12]
				h_shell->drv.transmit(h_shell->print_buffer, size);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	f8d3 3504 	ldr.w	r3, [r3, #1284]	@ 0x504
 800603a:	687a      	ldr	r2, [r7, #4]
 800603c:	f502 7241 	add.w	r2, r2, #772	@ 0x304
 8006040:	68f9      	ldr	r1, [r7, #12]
 8006042:	b289      	uxth	r1, r1
 8006044:	4610      	mov	r0, r2
 8006046:	4798      	blx	r3
				reading = 0;        //exit read loop
 8006048:	2300      	movs	r3, #0
 800604a:	617b      	str	r3, [r7, #20]
				pos = 0;            //reset buffer
 800604c:	2300      	movs	r3, #0
 800604e:	613b      	str	r3, [r7, #16]
				break;
 8006050:	e022      	b.n	8006098 <shell_run+0xf0>
				//backspace
			case '\b':
				if (pos > 0) {      //is there a char to delete?
 8006052:	693b      	ldr	r3, [r7, #16]
 8006054:	2b00      	cmp	r3, #0
 8006056:	dd1e      	ble.n	8006096 <shell_run+0xee>
					pos--;          //remove it in buffer
 8006058:	693b      	ldr	r3, [r7, #16]
 800605a:	3b01      	subs	r3, #1
 800605c:	613b      	str	r3, [r7, #16]

					h_shell->drv.transmit(backspace, 3);	// delete the char on the terminal
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	f8d3 3504 	ldr.w	r3, [r3, #1284]	@ 0x504
 8006064:	2103      	movs	r1, #3
 8006066:	4815      	ldr	r0, [pc, #84]	@ (80060bc <shell_run+0x114>)
 8006068:	4798      	blx	r3
				}
				break;
 800606a:	e014      	b.n	8006096 <shell_run+0xee>
				//other characters
			default:
				//only store characters if buffer has space
				if (pos < BUFFER_SIZE) {
 800606c:	693b      	ldr	r3, [r7, #16]
 800606e:	2bff      	cmp	r3, #255	@ 0xff
 8006070:	dc12      	bgt.n	8006098 <shell_run+0xf0>
					h_shell->drv.transmit(&c, 1);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	f8d3 3504 	ldr.w	r3, [r3, #1284]	@ 0x504
 8006078:	f107 020b 	add.w	r2, r7, #11
 800607c:	2101      	movs	r1, #1
 800607e:	4610      	mov	r0, r2
 8006080:	4798      	blx	r3
					h_shell->cmd_buffer[pos++] = c; //store
 8006082:	693b      	ldr	r3, [r7, #16]
 8006084:	1c5a      	adds	r2, r3, #1
 8006086:	613a      	str	r2, [r7, #16]
 8006088:	7af9      	ldrb	r1, [r7, #11]
 800608a:	687a      	ldr	r2, [r7, #4]
 800608c:	4413      	add	r3, r2
 800608e:	460a      	mov	r2, r1
 8006090:	f883 2404 	strb.w	r2, [r3, #1028]	@ 0x404
 8006094:	e000      	b.n	8006098 <shell_run+0xf0>
				break;
 8006096:	bf00      	nop
		while(reading) {
 8006098:	697b      	ldr	r3, [r7, #20]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d195      	bne.n	8005fca <shell_run+0x22>
				}
			}
		}
		shell_exec(h_shell, h_shell->cmd_buffer);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80060a4:	4619      	mov	r1, r3
 80060a6:	6878      	ldr	r0, [r7, #4]
 80060a8:	f7ff ff0e 	bl	8005ec8 <shell_exec>
		h_shell->drv.transmit(prompt, 2);
 80060ac:	e784      	b.n	8005fb8 <shell_run+0x10>
 80060ae:	bf00      	nop
 80060b0:	08007994 	.word	0x08007994
 80060b4:	0800796c 	.word	0x0800796c
 80060b8:	08007970 	.word	0x08007970
 80060bc:	08007990 	.word	0x08007990

080060c0 <atoi>:
 80060c0:	220a      	movs	r2, #10
 80060c2:	2100      	movs	r1, #0
 80060c4:	f000 b87a 	b.w	80061bc <strtol>

080060c8 <_strtol_l.isra.0>:
 80060c8:	2b24      	cmp	r3, #36	@ 0x24
 80060ca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80060ce:	4686      	mov	lr, r0
 80060d0:	4690      	mov	r8, r2
 80060d2:	d801      	bhi.n	80060d8 <_strtol_l.isra.0+0x10>
 80060d4:	2b01      	cmp	r3, #1
 80060d6:	d106      	bne.n	80060e6 <_strtol_l.isra.0+0x1e>
 80060d8:	f000 fb3e 	bl	8006758 <__errno>
 80060dc:	2316      	movs	r3, #22
 80060de:	6003      	str	r3, [r0, #0]
 80060e0:	2000      	movs	r0, #0
 80060e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060e6:	4834      	ldr	r0, [pc, #208]	@ (80061b8 <_strtol_l.isra.0+0xf0>)
 80060e8:	460d      	mov	r5, r1
 80060ea:	462a      	mov	r2, r5
 80060ec:	f815 4b01 	ldrb.w	r4, [r5], #1
 80060f0:	5d06      	ldrb	r6, [r0, r4]
 80060f2:	f016 0608 	ands.w	r6, r6, #8
 80060f6:	d1f8      	bne.n	80060ea <_strtol_l.isra.0+0x22>
 80060f8:	2c2d      	cmp	r4, #45	@ 0x2d
 80060fa:	d110      	bne.n	800611e <_strtol_l.isra.0+0x56>
 80060fc:	782c      	ldrb	r4, [r5, #0]
 80060fe:	2601      	movs	r6, #1
 8006100:	1c95      	adds	r5, r2, #2
 8006102:	f033 0210 	bics.w	r2, r3, #16
 8006106:	d115      	bne.n	8006134 <_strtol_l.isra.0+0x6c>
 8006108:	2c30      	cmp	r4, #48	@ 0x30
 800610a:	d10d      	bne.n	8006128 <_strtol_l.isra.0+0x60>
 800610c:	782a      	ldrb	r2, [r5, #0]
 800610e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8006112:	2a58      	cmp	r2, #88	@ 0x58
 8006114:	d108      	bne.n	8006128 <_strtol_l.isra.0+0x60>
 8006116:	786c      	ldrb	r4, [r5, #1]
 8006118:	3502      	adds	r5, #2
 800611a:	2310      	movs	r3, #16
 800611c:	e00a      	b.n	8006134 <_strtol_l.isra.0+0x6c>
 800611e:	2c2b      	cmp	r4, #43	@ 0x2b
 8006120:	bf04      	itt	eq
 8006122:	782c      	ldrbeq	r4, [r5, #0]
 8006124:	1c95      	addeq	r5, r2, #2
 8006126:	e7ec      	b.n	8006102 <_strtol_l.isra.0+0x3a>
 8006128:	2b00      	cmp	r3, #0
 800612a:	d1f6      	bne.n	800611a <_strtol_l.isra.0+0x52>
 800612c:	2c30      	cmp	r4, #48	@ 0x30
 800612e:	bf14      	ite	ne
 8006130:	230a      	movne	r3, #10
 8006132:	2308      	moveq	r3, #8
 8006134:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8006138:	f10c 3cff 	add.w	ip, ip, #4294967295
 800613c:	2200      	movs	r2, #0
 800613e:	fbbc f9f3 	udiv	r9, ip, r3
 8006142:	4610      	mov	r0, r2
 8006144:	fb03 ca19 	mls	sl, r3, r9, ip
 8006148:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800614c:	2f09      	cmp	r7, #9
 800614e:	d80f      	bhi.n	8006170 <_strtol_l.isra.0+0xa8>
 8006150:	463c      	mov	r4, r7
 8006152:	42a3      	cmp	r3, r4
 8006154:	dd1b      	ble.n	800618e <_strtol_l.isra.0+0xc6>
 8006156:	1c57      	adds	r7, r2, #1
 8006158:	d007      	beq.n	800616a <_strtol_l.isra.0+0xa2>
 800615a:	4581      	cmp	r9, r0
 800615c:	d314      	bcc.n	8006188 <_strtol_l.isra.0+0xc0>
 800615e:	d101      	bne.n	8006164 <_strtol_l.isra.0+0x9c>
 8006160:	45a2      	cmp	sl, r4
 8006162:	db11      	blt.n	8006188 <_strtol_l.isra.0+0xc0>
 8006164:	fb00 4003 	mla	r0, r0, r3, r4
 8006168:	2201      	movs	r2, #1
 800616a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800616e:	e7eb      	b.n	8006148 <_strtol_l.isra.0+0x80>
 8006170:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8006174:	2f19      	cmp	r7, #25
 8006176:	d801      	bhi.n	800617c <_strtol_l.isra.0+0xb4>
 8006178:	3c37      	subs	r4, #55	@ 0x37
 800617a:	e7ea      	b.n	8006152 <_strtol_l.isra.0+0x8a>
 800617c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8006180:	2f19      	cmp	r7, #25
 8006182:	d804      	bhi.n	800618e <_strtol_l.isra.0+0xc6>
 8006184:	3c57      	subs	r4, #87	@ 0x57
 8006186:	e7e4      	b.n	8006152 <_strtol_l.isra.0+0x8a>
 8006188:	f04f 32ff 	mov.w	r2, #4294967295
 800618c:	e7ed      	b.n	800616a <_strtol_l.isra.0+0xa2>
 800618e:	1c53      	adds	r3, r2, #1
 8006190:	d108      	bne.n	80061a4 <_strtol_l.isra.0+0xdc>
 8006192:	2322      	movs	r3, #34	@ 0x22
 8006194:	f8ce 3000 	str.w	r3, [lr]
 8006198:	4660      	mov	r0, ip
 800619a:	f1b8 0f00 	cmp.w	r8, #0
 800619e:	d0a0      	beq.n	80060e2 <_strtol_l.isra.0+0x1a>
 80061a0:	1e69      	subs	r1, r5, #1
 80061a2:	e006      	b.n	80061b2 <_strtol_l.isra.0+0xea>
 80061a4:	b106      	cbz	r6, 80061a8 <_strtol_l.isra.0+0xe0>
 80061a6:	4240      	negs	r0, r0
 80061a8:	f1b8 0f00 	cmp.w	r8, #0
 80061ac:	d099      	beq.n	80060e2 <_strtol_l.isra.0+0x1a>
 80061ae:	2a00      	cmp	r2, #0
 80061b0:	d1f6      	bne.n	80061a0 <_strtol_l.isra.0+0xd8>
 80061b2:	f8c8 1000 	str.w	r1, [r8]
 80061b6:	e794      	b.n	80060e2 <_strtol_l.isra.0+0x1a>
 80061b8:	08007998 	.word	0x08007998

080061bc <strtol>:
 80061bc:	4613      	mov	r3, r2
 80061be:	460a      	mov	r2, r1
 80061c0:	4601      	mov	r1, r0
 80061c2:	4802      	ldr	r0, [pc, #8]	@ (80061cc <strtol+0x10>)
 80061c4:	6800      	ldr	r0, [r0, #0]
 80061c6:	f7ff bf7f 	b.w	80060c8 <_strtol_l.isra.0>
 80061ca:	bf00      	nop
 80061cc:	2000011c 	.word	0x2000011c

080061d0 <std>:
 80061d0:	2300      	movs	r3, #0
 80061d2:	b510      	push	{r4, lr}
 80061d4:	4604      	mov	r4, r0
 80061d6:	e9c0 3300 	strd	r3, r3, [r0]
 80061da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80061de:	6083      	str	r3, [r0, #8]
 80061e0:	8181      	strh	r1, [r0, #12]
 80061e2:	6643      	str	r3, [r0, #100]	@ 0x64
 80061e4:	81c2      	strh	r2, [r0, #14]
 80061e6:	6183      	str	r3, [r0, #24]
 80061e8:	4619      	mov	r1, r3
 80061ea:	2208      	movs	r2, #8
 80061ec:	305c      	adds	r0, #92	@ 0x5c
 80061ee:	f000 fa51 	bl	8006694 <memset>
 80061f2:	4b0d      	ldr	r3, [pc, #52]	@ (8006228 <std+0x58>)
 80061f4:	6263      	str	r3, [r4, #36]	@ 0x24
 80061f6:	4b0d      	ldr	r3, [pc, #52]	@ (800622c <std+0x5c>)
 80061f8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80061fa:	4b0d      	ldr	r3, [pc, #52]	@ (8006230 <std+0x60>)
 80061fc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80061fe:	4b0d      	ldr	r3, [pc, #52]	@ (8006234 <std+0x64>)
 8006200:	6323      	str	r3, [r4, #48]	@ 0x30
 8006202:	4b0d      	ldr	r3, [pc, #52]	@ (8006238 <std+0x68>)
 8006204:	6224      	str	r4, [r4, #32]
 8006206:	429c      	cmp	r4, r3
 8006208:	d006      	beq.n	8006218 <std+0x48>
 800620a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800620e:	4294      	cmp	r4, r2
 8006210:	d002      	beq.n	8006218 <std+0x48>
 8006212:	33d0      	adds	r3, #208	@ 0xd0
 8006214:	429c      	cmp	r4, r3
 8006216:	d105      	bne.n	8006224 <std+0x54>
 8006218:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800621c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006220:	f000 bac4 	b.w	80067ac <__retarget_lock_init_recursive>
 8006224:	bd10      	pop	{r4, pc}
 8006226:	bf00      	nop
 8006228:	080064e5 	.word	0x080064e5
 800622c:	08006507 	.word	0x08006507
 8006230:	0800653f 	.word	0x0800653f
 8006234:	08006563 	.word	0x08006563
 8006238:	200046ec 	.word	0x200046ec

0800623c <stdio_exit_handler>:
 800623c:	4a02      	ldr	r2, [pc, #8]	@ (8006248 <stdio_exit_handler+0xc>)
 800623e:	4903      	ldr	r1, [pc, #12]	@ (800624c <stdio_exit_handler+0x10>)
 8006240:	4803      	ldr	r0, [pc, #12]	@ (8006250 <stdio_exit_handler+0x14>)
 8006242:	f000 b869 	b.w	8006318 <_fwalk_sglue>
 8006246:	bf00      	nop
 8006248:	20000110 	.word	0x20000110
 800624c:	08007325 	.word	0x08007325
 8006250:	20000120 	.word	0x20000120

08006254 <cleanup_stdio>:
 8006254:	6841      	ldr	r1, [r0, #4]
 8006256:	4b0c      	ldr	r3, [pc, #48]	@ (8006288 <cleanup_stdio+0x34>)
 8006258:	4299      	cmp	r1, r3
 800625a:	b510      	push	{r4, lr}
 800625c:	4604      	mov	r4, r0
 800625e:	d001      	beq.n	8006264 <cleanup_stdio+0x10>
 8006260:	f001 f860 	bl	8007324 <_fflush_r>
 8006264:	68a1      	ldr	r1, [r4, #8]
 8006266:	4b09      	ldr	r3, [pc, #36]	@ (800628c <cleanup_stdio+0x38>)
 8006268:	4299      	cmp	r1, r3
 800626a:	d002      	beq.n	8006272 <cleanup_stdio+0x1e>
 800626c:	4620      	mov	r0, r4
 800626e:	f001 f859 	bl	8007324 <_fflush_r>
 8006272:	68e1      	ldr	r1, [r4, #12]
 8006274:	4b06      	ldr	r3, [pc, #24]	@ (8006290 <cleanup_stdio+0x3c>)
 8006276:	4299      	cmp	r1, r3
 8006278:	d004      	beq.n	8006284 <cleanup_stdio+0x30>
 800627a:	4620      	mov	r0, r4
 800627c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006280:	f001 b850 	b.w	8007324 <_fflush_r>
 8006284:	bd10      	pop	{r4, pc}
 8006286:	bf00      	nop
 8006288:	200046ec 	.word	0x200046ec
 800628c:	20004754 	.word	0x20004754
 8006290:	200047bc 	.word	0x200047bc

08006294 <global_stdio_init.part.0>:
 8006294:	b510      	push	{r4, lr}
 8006296:	4b0b      	ldr	r3, [pc, #44]	@ (80062c4 <global_stdio_init.part.0+0x30>)
 8006298:	4c0b      	ldr	r4, [pc, #44]	@ (80062c8 <global_stdio_init.part.0+0x34>)
 800629a:	4a0c      	ldr	r2, [pc, #48]	@ (80062cc <global_stdio_init.part.0+0x38>)
 800629c:	601a      	str	r2, [r3, #0]
 800629e:	4620      	mov	r0, r4
 80062a0:	2200      	movs	r2, #0
 80062a2:	2104      	movs	r1, #4
 80062a4:	f7ff ff94 	bl	80061d0 <std>
 80062a8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80062ac:	2201      	movs	r2, #1
 80062ae:	2109      	movs	r1, #9
 80062b0:	f7ff ff8e 	bl	80061d0 <std>
 80062b4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80062b8:	2202      	movs	r2, #2
 80062ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80062be:	2112      	movs	r1, #18
 80062c0:	f7ff bf86 	b.w	80061d0 <std>
 80062c4:	20004824 	.word	0x20004824
 80062c8:	200046ec 	.word	0x200046ec
 80062cc:	0800623d 	.word	0x0800623d

080062d0 <__sfp_lock_acquire>:
 80062d0:	4801      	ldr	r0, [pc, #4]	@ (80062d8 <__sfp_lock_acquire+0x8>)
 80062d2:	f000 ba6c 	b.w	80067ae <__retarget_lock_acquire_recursive>
 80062d6:	bf00      	nop
 80062d8:	2000482d 	.word	0x2000482d

080062dc <__sfp_lock_release>:
 80062dc:	4801      	ldr	r0, [pc, #4]	@ (80062e4 <__sfp_lock_release+0x8>)
 80062de:	f000 ba67 	b.w	80067b0 <__retarget_lock_release_recursive>
 80062e2:	bf00      	nop
 80062e4:	2000482d 	.word	0x2000482d

080062e8 <__sinit>:
 80062e8:	b510      	push	{r4, lr}
 80062ea:	4604      	mov	r4, r0
 80062ec:	f7ff fff0 	bl	80062d0 <__sfp_lock_acquire>
 80062f0:	6a23      	ldr	r3, [r4, #32]
 80062f2:	b11b      	cbz	r3, 80062fc <__sinit+0x14>
 80062f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80062f8:	f7ff bff0 	b.w	80062dc <__sfp_lock_release>
 80062fc:	4b04      	ldr	r3, [pc, #16]	@ (8006310 <__sinit+0x28>)
 80062fe:	6223      	str	r3, [r4, #32]
 8006300:	4b04      	ldr	r3, [pc, #16]	@ (8006314 <__sinit+0x2c>)
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d1f5      	bne.n	80062f4 <__sinit+0xc>
 8006308:	f7ff ffc4 	bl	8006294 <global_stdio_init.part.0>
 800630c:	e7f2      	b.n	80062f4 <__sinit+0xc>
 800630e:	bf00      	nop
 8006310:	08006255 	.word	0x08006255
 8006314:	20004824 	.word	0x20004824

08006318 <_fwalk_sglue>:
 8006318:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800631c:	4607      	mov	r7, r0
 800631e:	4688      	mov	r8, r1
 8006320:	4614      	mov	r4, r2
 8006322:	2600      	movs	r6, #0
 8006324:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006328:	f1b9 0901 	subs.w	r9, r9, #1
 800632c:	d505      	bpl.n	800633a <_fwalk_sglue+0x22>
 800632e:	6824      	ldr	r4, [r4, #0]
 8006330:	2c00      	cmp	r4, #0
 8006332:	d1f7      	bne.n	8006324 <_fwalk_sglue+0xc>
 8006334:	4630      	mov	r0, r6
 8006336:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800633a:	89ab      	ldrh	r3, [r5, #12]
 800633c:	2b01      	cmp	r3, #1
 800633e:	d907      	bls.n	8006350 <_fwalk_sglue+0x38>
 8006340:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006344:	3301      	adds	r3, #1
 8006346:	d003      	beq.n	8006350 <_fwalk_sglue+0x38>
 8006348:	4629      	mov	r1, r5
 800634a:	4638      	mov	r0, r7
 800634c:	47c0      	blx	r8
 800634e:	4306      	orrs	r6, r0
 8006350:	3568      	adds	r5, #104	@ 0x68
 8006352:	e7e9      	b.n	8006328 <_fwalk_sglue+0x10>

08006354 <iprintf>:
 8006354:	b40f      	push	{r0, r1, r2, r3}
 8006356:	b507      	push	{r0, r1, r2, lr}
 8006358:	4906      	ldr	r1, [pc, #24]	@ (8006374 <iprintf+0x20>)
 800635a:	ab04      	add	r3, sp, #16
 800635c:	6808      	ldr	r0, [r1, #0]
 800635e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006362:	6881      	ldr	r1, [r0, #8]
 8006364:	9301      	str	r3, [sp, #4]
 8006366:	f000 fcb5 	bl	8006cd4 <_vfiprintf_r>
 800636a:	b003      	add	sp, #12
 800636c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006370:	b004      	add	sp, #16
 8006372:	4770      	bx	lr
 8006374:	2000011c 	.word	0x2000011c

08006378 <_puts_r>:
 8006378:	6a03      	ldr	r3, [r0, #32]
 800637a:	b570      	push	{r4, r5, r6, lr}
 800637c:	6884      	ldr	r4, [r0, #8]
 800637e:	4605      	mov	r5, r0
 8006380:	460e      	mov	r6, r1
 8006382:	b90b      	cbnz	r3, 8006388 <_puts_r+0x10>
 8006384:	f7ff ffb0 	bl	80062e8 <__sinit>
 8006388:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800638a:	07db      	lsls	r3, r3, #31
 800638c:	d405      	bmi.n	800639a <_puts_r+0x22>
 800638e:	89a3      	ldrh	r3, [r4, #12]
 8006390:	0598      	lsls	r0, r3, #22
 8006392:	d402      	bmi.n	800639a <_puts_r+0x22>
 8006394:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006396:	f000 fa0a 	bl	80067ae <__retarget_lock_acquire_recursive>
 800639a:	89a3      	ldrh	r3, [r4, #12]
 800639c:	0719      	lsls	r1, r3, #28
 800639e:	d502      	bpl.n	80063a6 <_puts_r+0x2e>
 80063a0:	6923      	ldr	r3, [r4, #16]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d135      	bne.n	8006412 <_puts_r+0x9a>
 80063a6:	4621      	mov	r1, r4
 80063a8:	4628      	mov	r0, r5
 80063aa:	f000 f91d 	bl	80065e8 <__swsetup_r>
 80063ae:	b380      	cbz	r0, 8006412 <_puts_r+0x9a>
 80063b0:	f04f 35ff 	mov.w	r5, #4294967295
 80063b4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80063b6:	07da      	lsls	r2, r3, #31
 80063b8:	d405      	bmi.n	80063c6 <_puts_r+0x4e>
 80063ba:	89a3      	ldrh	r3, [r4, #12]
 80063bc:	059b      	lsls	r3, r3, #22
 80063be:	d402      	bmi.n	80063c6 <_puts_r+0x4e>
 80063c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80063c2:	f000 f9f5 	bl	80067b0 <__retarget_lock_release_recursive>
 80063c6:	4628      	mov	r0, r5
 80063c8:	bd70      	pop	{r4, r5, r6, pc}
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	da04      	bge.n	80063d8 <_puts_r+0x60>
 80063ce:	69a2      	ldr	r2, [r4, #24]
 80063d0:	429a      	cmp	r2, r3
 80063d2:	dc17      	bgt.n	8006404 <_puts_r+0x8c>
 80063d4:	290a      	cmp	r1, #10
 80063d6:	d015      	beq.n	8006404 <_puts_r+0x8c>
 80063d8:	6823      	ldr	r3, [r4, #0]
 80063da:	1c5a      	adds	r2, r3, #1
 80063dc:	6022      	str	r2, [r4, #0]
 80063de:	7019      	strb	r1, [r3, #0]
 80063e0:	68a3      	ldr	r3, [r4, #8]
 80063e2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80063e6:	3b01      	subs	r3, #1
 80063e8:	60a3      	str	r3, [r4, #8]
 80063ea:	2900      	cmp	r1, #0
 80063ec:	d1ed      	bne.n	80063ca <_puts_r+0x52>
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	da11      	bge.n	8006416 <_puts_r+0x9e>
 80063f2:	4622      	mov	r2, r4
 80063f4:	210a      	movs	r1, #10
 80063f6:	4628      	mov	r0, r5
 80063f8:	f000 f8b7 	bl	800656a <__swbuf_r>
 80063fc:	3001      	adds	r0, #1
 80063fe:	d0d7      	beq.n	80063b0 <_puts_r+0x38>
 8006400:	250a      	movs	r5, #10
 8006402:	e7d7      	b.n	80063b4 <_puts_r+0x3c>
 8006404:	4622      	mov	r2, r4
 8006406:	4628      	mov	r0, r5
 8006408:	f000 f8af 	bl	800656a <__swbuf_r>
 800640c:	3001      	adds	r0, #1
 800640e:	d1e7      	bne.n	80063e0 <_puts_r+0x68>
 8006410:	e7ce      	b.n	80063b0 <_puts_r+0x38>
 8006412:	3e01      	subs	r6, #1
 8006414:	e7e4      	b.n	80063e0 <_puts_r+0x68>
 8006416:	6823      	ldr	r3, [r4, #0]
 8006418:	1c5a      	adds	r2, r3, #1
 800641a:	6022      	str	r2, [r4, #0]
 800641c:	220a      	movs	r2, #10
 800641e:	701a      	strb	r2, [r3, #0]
 8006420:	e7ee      	b.n	8006400 <_puts_r+0x88>
	...

08006424 <puts>:
 8006424:	4b02      	ldr	r3, [pc, #8]	@ (8006430 <puts+0xc>)
 8006426:	4601      	mov	r1, r0
 8006428:	6818      	ldr	r0, [r3, #0]
 800642a:	f7ff bfa5 	b.w	8006378 <_puts_r>
 800642e:	bf00      	nop
 8006430:	2000011c 	.word	0x2000011c

08006434 <sniprintf>:
 8006434:	b40c      	push	{r2, r3}
 8006436:	b530      	push	{r4, r5, lr}
 8006438:	4b18      	ldr	r3, [pc, #96]	@ (800649c <sniprintf+0x68>)
 800643a:	1e0c      	subs	r4, r1, #0
 800643c:	681d      	ldr	r5, [r3, #0]
 800643e:	b09d      	sub	sp, #116	@ 0x74
 8006440:	da08      	bge.n	8006454 <sniprintf+0x20>
 8006442:	238b      	movs	r3, #139	@ 0x8b
 8006444:	602b      	str	r3, [r5, #0]
 8006446:	f04f 30ff 	mov.w	r0, #4294967295
 800644a:	b01d      	add	sp, #116	@ 0x74
 800644c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006450:	b002      	add	sp, #8
 8006452:	4770      	bx	lr
 8006454:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8006458:	f8ad 3014 	strh.w	r3, [sp, #20]
 800645c:	f04f 0300 	mov.w	r3, #0
 8006460:	931b      	str	r3, [sp, #108]	@ 0x6c
 8006462:	bf14      	ite	ne
 8006464:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006468:	4623      	moveq	r3, r4
 800646a:	9304      	str	r3, [sp, #16]
 800646c:	9307      	str	r3, [sp, #28]
 800646e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006472:	9002      	str	r0, [sp, #8]
 8006474:	9006      	str	r0, [sp, #24]
 8006476:	f8ad 3016 	strh.w	r3, [sp, #22]
 800647a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800647c:	ab21      	add	r3, sp, #132	@ 0x84
 800647e:	a902      	add	r1, sp, #8
 8006480:	4628      	mov	r0, r5
 8006482:	9301      	str	r3, [sp, #4]
 8006484:	f000 fb00 	bl	8006a88 <_svfiprintf_r>
 8006488:	1c43      	adds	r3, r0, #1
 800648a:	bfbc      	itt	lt
 800648c:	238b      	movlt	r3, #139	@ 0x8b
 800648e:	602b      	strlt	r3, [r5, #0]
 8006490:	2c00      	cmp	r4, #0
 8006492:	d0da      	beq.n	800644a <sniprintf+0x16>
 8006494:	9b02      	ldr	r3, [sp, #8]
 8006496:	2200      	movs	r2, #0
 8006498:	701a      	strb	r2, [r3, #0]
 800649a:	e7d6      	b.n	800644a <sniprintf+0x16>
 800649c:	2000011c 	.word	0x2000011c

080064a0 <siprintf>:
 80064a0:	b40e      	push	{r1, r2, r3}
 80064a2:	b510      	push	{r4, lr}
 80064a4:	b09d      	sub	sp, #116	@ 0x74
 80064a6:	ab1f      	add	r3, sp, #124	@ 0x7c
 80064a8:	9002      	str	r0, [sp, #8]
 80064aa:	9006      	str	r0, [sp, #24]
 80064ac:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80064b0:	480a      	ldr	r0, [pc, #40]	@ (80064dc <siprintf+0x3c>)
 80064b2:	9107      	str	r1, [sp, #28]
 80064b4:	9104      	str	r1, [sp, #16]
 80064b6:	490a      	ldr	r1, [pc, #40]	@ (80064e0 <siprintf+0x40>)
 80064b8:	f853 2b04 	ldr.w	r2, [r3], #4
 80064bc:	9105      	str	r1, [sp, #20]
 80064be:	2400      	movs	r4, #0
 80064c0:	a902      	add	r1, sp, #8
 80064c2:	6800      	ldr	r0, [r0, #0]
 80064c4:	9301      	str	r3, [sp, #4]
 80064c6:	941b      	str	r4, [sp, #108]	@ 0x6c
 80064c8:	f000 fade 	bl	8006a88 <_svfiprintf_r>
 80064cc:	9b02      	ldr	r3, [sp, #8]
 80064ce:	701c      	strb	r4, [r3, #0]
 80064d0:	b01d      	add	sp, #116	@ 0x74
 80064d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80064d6:	b003      	add	sp, #12
 80064d8:	4770      	bx	lr
 80064da:	bf00      	nop
 80064dc:	2000011c 	.word	0x2000011c
 80064e0:	ffff0208 	.word	0xffff0208

080064e4 <__sread>:
 80064e4:	b510      	push	{r4, lr}
 80064e6:	460c      	mov	r4, r1
 80064e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064ec:	f000 f910 	bl	8006710 <_read_r>
 80064f0:	2800      	cmp	r0, #0
 80064f2:	bfab      	itete	ge
 80064f4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80064f6:	89a3      	ldrhlt	r3, [r4, #12]
 80064f8:	181b      	addge	r3, r3, r0
 80064fa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80064fe:	bfac      	ite	ge
 8006500:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006502:	81a3      	strhlt	r3, [r4, #12]
 8006504:	bd10      	pop	{r4, pc}

08006506 <__swrite>:
 8006506:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800650a:	461f      	mov	r7, r3
 800650c:	898b      	ldrh	r3, [r1, #12]
 800650e:	05db      	lsls	r3, r3, #23
 8006510:	4605      	mov	r5, r0
 8006512:	460c      	mov	r4, r1
 8006514:	4616      	mov	r6, r2
 8006516:	d505      	bpl.n	8006524 <__swrite+0x1e>
 8006518:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800651c:	2302      	movs	r3, #2
 800651e:	2200      	movs	r2, #0
 8006520:	f000 f8e4 	bl	80066ec <_lseek_r>
 8006524:	89a3      	ldrh	r3, [r4, #12]
 8006526:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800652a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800652e:	81a3      	strh	r3, [r4, #12]
 8006530:	4632      	mov	r2, r6
 8006532:	463b      	mov	r3, r7
 8006534:	4628      	mov	r0, r5
 8006536:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800653a:	f000 b8fb 	b.w	8006734 <_write_r>

0800653e <__sseek>:
 800653e:	b510      	push	{r4, lr}
 8006540:	460c      	mov	r4, r1
 8006542:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006546:	f000 f8d1 	bl	80066ec <_lseek_r>
 800654a:	1c43      	adds	r3, r0, #1
 800654c:	89a3      	ldrh	r3, [r4, #12]
 800654e:	bf15      	itete	ne
 8006550:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006552:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006556:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800655a:	81a3      	strheq	r3, [r4, #12]
 800655c:	bf18      	it	ne
 800655e:	81a3      	strhne	r3, [r4, #12]
 8006560:	bd10      	pop	{r4, pc}

08006562 <__sclose>:
 8006562:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006566:	f000 b8b1 	b.w	80066cc <_close_r>

0800656a <__swbuf_r>:
 800656a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800656c:	460e      	mov	r6, r1
 800656e:	4614      	mov	r4, r2
 8006570:	4605      	mov	r5, r0
 8006572:	b118      	cbz	r0, 800657c <__swbuf_r+0x12>
 8006574:	6a03      	ldr	r3, [r0, #32]
 8006576:	b90b      	cbnz	r3, 800657c <__swbuf_r+0x12>
 8006578:	f7ff feb6 	bl	80062e8 <__sinit>
 800657c:	69a3      	ldr	r3, [r4, #24]
 800657e:	60a3      	str	r3, [r4, #8]
 8006580:	89a3      	ldrh	r3, [r4, #12]
 8006582:	071a      	lsls	r2, r3, #28
 8006584:	d501      	bpl.n	800658a <__swbuf_r+0x20>
 8006586:	6923      	ldr	r3, [r4, #16]
 8006588:	b943      	cbnz	r3, 800659c <__swbuf_r+0x32>
 800658a:	4621      	mov	r1, r4
 800658c:	4628      	mov	r0, r5
 800658e:	f000 f82b 	bl	80065e8 <__swsetup_r>
 8006592:	b118      	cbz	r0, 800659c <__swbuf_r+0x32>
 8006594:	f04f 37ff 	mov.w	r7, #4294967295
 8006598:	4638      	mov	r0, r7
 800659a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800659c:	6823      	ldr	r3, [r4, #0]
 800659e:	6922      	ldr	r2, [r4, #16]
 80065a0:	1a98      	subs	r0, r3, r2
 80065a2:	6963      	ldr	r3, [r4, #20]
 80065a4:	b2f6      	uxtb	r6, r6
 80065a6:	4283      	cmp	r3, r0
 80065a8:	4637      	mov	r7, r6
 80065aa:	dc05      	bgt.n	80065b8 <__swbuf_r+0x4e>
 80065ac:	4621      	mov	r1, r4
 80065ae:	4628      	mov	r0, r5
 80065b0:	f000 feb8 	bl	8007324 <_fflush_r>
 80065b4:	2800      	cmp	r0, #0
 80065b6:	d1ed      	bne.n	8006594 <__swbuf_r+0x2a>
 80065b8:	68a3      	ldr	r3, [r4, #8]
 80065ba:	3b01      	subs	r3, #1
 80065bc:	60a3      	str	r3, [r4, #8]
 80065be:	6823      	ldr	r3, [r4, #0]
 80065c0:	1c5a      	adds	r2, r3, #1
 80065c2:	6022      	str	r2, [r4, #0]
 80065c4:	701e      	strb	r6, [r3, #0]
 80065c6:	6962      	ldr	r2, [r4, #20]
 80065c8:	1c43      	adds	r3, r0, #1
 80065ca:	429a      	cmp	r2, r3
 80065cc:	d004      	beq.n	80065d8 <__swbuf_r+0x6e>
 80065ce:	89a3      	ldrh	r3, [r4, #12]
 80065d0:	07db      	lsls	r3, r3, #31
 80065d2:	d5e1      	bpl.n	8006598 <__swbuf_r+0x2e>
 80065d4:	2e0a      	cmp	r6, #10
 80065d6:	d1df      	bne.n	8006598 <__swbuf_r+0x2e>
 80065d8:	4621      	mov	r1, r4
 80065da:	4628      	mov	r0, r5
 80065dc:	f000 fea2 	bl	8007324 <_fflush_r>
 80065e0:	2800      	cmp	r0, #0
 80065e2:	d0d9      	beq.n	8006598 <__swbuf_r+0x2e>
 80065e4:	e7d6      	b.n	8006594 <__swbuf_r+0x2a>
	...

080065e8 <__swsetup_r>:
 80065e8:	b538      	push	{r3, r4, r5, lr}
 80065ea:	4b29      	ldr	r3, [pc, #164]	@ (8006690 <__swsetup_r+0xa8>)
 80065ec:	4605      	mov	r5, r0
 80065ee:	6818      	ldr	r0, [r3, #0]
 80065f0:	460c      	mov	r4, r1
 80065f2:	b118      	cbz	r0, 80065fc <__swsetup_r+0x14>
 80065f4:	6a03      	ldr	r3, [r0, #32]
 80065f6:	b90b      	cbnz	r3, 80065fc <__swsetup_r+0x14>
 80065f8:	f7ff fe76 	bl	80062e8 <__sinit>
 80065fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006600:	0719      	lsls	r1, r3, #28
 8006602:	d422      	bmi.n	800664a <__swsetup_r+0x62>
 8006604:	06da      	lsls	r2, r3, #27
 8006606:	d407      	bmi.n	8006618 <__swsetup_r+0x30>
 8006608:	2209      	movs	r2, #9
 800660a:	602a      	str	r2, [r5, #0]
 800660c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006610:	81a3      	strh	r3, [r4, #12]
 8006612:	f04f 30ff 	mov.w	r0, #4294967295
 8006616:	e033      	b.n	8006680 <__swsetup_r+0x98>
 8006618:	0758      	lsls	r0, r3, #29
 800661a:	d512      	bpl.n	8006642 <__swsetup_r+0x5a>
 800661c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800661e:	b141      	cbz	r1, 8006632 <__swsetup_r+0x4a>
 8006620:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006624:	4299      	cmp	r1, r3
 8006626:	d002      	beq.n	800662e <__swsetup_r+0x46>
 8006628:	4628      	mov	r0, r5
 800662a:	f000 f8d9 	bl	80067e0 <_free_r>
 800662e:	2300      	movs	r3, #0
 8006630:	6363      	str	r3, [r4, #52]	@ 0x34
 8006632:	89a3      	ldrh	r3, [r4, #12]
 8006634:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006638:	81a3      	strh	r3, [r4, #12]
 800663a:	2300      	movs	r3, #0
 800663c:	6063      	str	r3, [r4, #4]
 800663e:	6923      	ldr	r3, [r4, #16]
 8006640:	6023      	str	r3, [r4, #0]
 8006642:	89a3      	ldrh	r3, [r4, #12]
 8006644:	f043 0308 	orr.w	r3, r3, #8
 8006648:	81a3      	strh	r3, [r4, #12]
 800664a:	6923      	ldr	r3, [r4, #16]
 800664c:	b94b      	cbnz	r3, 8006662 <__swsetup_r+0x7a>
 800664e:	89a3      	ldrh	r3, [r4, #12]
 8006650:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006654:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006658:	d003      	beq.n	8006662 <__swsetup_r+0x7a>
 800665a:	4621      	mov	r1, r4
 800665c:	4628      	mov	r0, r5
 800665e:	f000 feaf 	bl	80073c0 <__smakebuf_r>
 8006662:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006666:	f013 0201 	ands.w	r2, r3, #1
 800666a:	d00a      	beq.n	8006682 <__swsetup_r+0x9a>
 800666c:	2200      	movs	r2, #0
 800666e:	60a2      	str	r2, [r4, #8]
 8006670:	6962      	ldr	r2, [r4, #20]
 8006672:	4252      	negs	r2, r2
 8006674:	61a2      	str	r2, [r4, #24]
 8006676:	6922      	ldr	r2, [r4, #16]
 8006678:	b942      	cbnz	r2, 800668c <__swsetup_r+0xa4>
 800667a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800667e:	d1c5      	bne.n	800660c <__swsetup_r+0x24>
 8006680:	bd38      	pop	{r3, r4, r5, pc}
 8006682:	0799      	lsls	r1, r3, #30
 8006684:	bf58      	it	pl
 8006686:	6962      	ldrpl	r2, [r4, #20]
 8006688:	60a2      	str	r2, [r4, #8]
 800668a:	e7f4      	b.n	8006676 <__swsetup_r+0x8e>
 800668c:	2000      	movs	r0, #0
 800668e:	e7f7      	b.n	8006680 <__swsetup_r+0x98>
 8006690:	2000011c 	.word	0x2000011c

08006694 <memset>:
 8006694:	4402      	add	r2, r0
 8006696:	4603      	mov	r3, r0
 8006698:	4293      	cmp	r3, r2
 800669a:	d100      	bne.n	800669e <memset+0xa>
 800669c:	4770      	bx	lr
 800669e:	f803 1b01 	strb.w	r1, [r3], #1
 80066a2:	e7f9      	b.n	8006698 <memset+0x4>

080066a4 <strncpy>:
 80066a4:	b510      	push	{r4, lr}
 80066a6:	3901      	subs	r1, #1
 80066a8:	4603      	mov	r3, r0
 80066aa:	b132      	cbz	r2, 80066ba <strncpy+0x16>
 80066ac:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80066b0:	f803 4b01 	strb.w	r4, [r3], #1
 80066b4:	3a01      	subs	r2, #1
 80066b6:	2c00      	cmp	r4, #0
 80066b8:	d1f7      	bne.n	80066aa <strncpy+0x6>
 80066ba:	441a      	add	r2, r3
 80066bc:	2100      	movs	r1, #0
 80066be:	4293      	cmp	r3, r2
 80066c0:	d100      	bne.n	80066c4 <strncpy+0x20>
 80066c2:	bd10      	pop	{r4, pc}
 80066c4:	f803 1b01 	strb.w	r1, [r3], #1
 80066c8:	e7f9      	b.n	80066be <strncpy+0x1a>
	...

080066cc <_close_r>:
 80066cc:	b538      	push	{r3, r4, r5, lr}
 80066ce:	4d06      	ldr	r5, [pc, #24]	@ (80066e8 <_close_r+0x1c>)
 80066d0:	2300      	movs	r3, #0
 80066d2:	4604      	mov	r4, r0
 80066d4:	4608      	mov	r0, r1
 80066d6:	602b      	str	r3, [r5, #0]
 80066d8:	f7fb f893 	bl	8001802 <_close>
 80066dc:	1c43      	adds	r3, r0, #1
 80066de:	d102      	bne.n	80066e6 <_close_r+0x1a>
 80066e0:	682b      	ldr	r3, [r5, #0]
 80066e2:	b103      	cbz	r3, 80066e6 <_close_r+0x1a>
 80066e4:	6023      	str	r3, [r4, #0]
 80066e6:	bd38      	pop	{r3, r4, r5, pc}
 80066e8:	20004828 	.word	0x20004828

080066ec <_lseek_r>:
 80066ec:	b538      	push	{r3, r4, r5, lr}
 80066ee:	4d07      	ldr	r5, [pc, #28]	@ (800670c <_lseek_r+0x20>)
 80066f0:	4604      	mov	r4, r0
 80066f2:	4608      	mov	r0, r1
 80066f4:	4611      	mov	r1, r2
 80066f6:	2200      	movs	r2, #0
 80066f8:	602a      	str	r2, [r5, #0]
 80066fa:	461a      	mov	r2, r3
 80066fc:	f7fb f8a8 	bl	8001850 <_lseek>
 8006700:	1c43      	adds	r3, r0, #1
 8006702:	d102      	bne.n	800670a <_lseek_r+0x1e>
 8006704:	682b      	ldr	r3, [r5, #0]
 8006706:	b103      	cbz	r3, 800670a <_lseek_r+0x1e>
 8006708:	6023      	str	r3, [r4, #0]
 800670a:	bd38      	pop	{r3, r4, r5, pc}
 800670c:	20004828 	.word	0x20004828

08006710 <_read_r>:
 8006710:	b538      	push	{r3, r4, r5, lr}
 8006712:	4d07      	ldr	r5, [pc, #28]	@ (8006730 <_read_r+0x20>)
 8006714:	4604      	mov	r4, r0
 8006716:	4608      	mov	r0, r1
 8006718:	4611      	mov	r1, r2
 800671a:	2200      	movs	r2, #0
 800671c:	602a      	str	r2, [r5, #0]
 800671e:	461a      	mov	r2, r3
 8006720:	f7fb f836 	bl	8001790 <_read>
 8006724:	1c43      	adds	r3, r0, #1
 8006726:	d102      	bne.n	800672e <_read_r+0x1e>
 8006728:	682b      	ldr	r3, [r5, #0]
 800672a:	b103      	cbz	r3, 800672e <_read_r+0x1e>
 800672c:	6023      	str	r3, [r4, #0]
 800672e:	bd38      	pop	{r3, r4, r5, pc}
 8006730:	20004828 	.word	0x20004828

08006734 <_write_r>:
 8006734:	b538      	push	{r3, r4, r5, lr}
 8006736:	4d07      	ldr	r5, [pc, #28]	@ (8006754 <_write_r+0x20>)
 8006738:	4604      	mov	r4, r0
 800673a:	4608      	mov	r0, r1
 800673c:	4611      	mov	r1, r2
 800673e:	2200      	movs	r2, #0
 8006740:	602a      	str	r2, [r5, #0]
 8006742:	461a      	mov	r2, r3
 8006744:	f7fb f841 	bl	80017ca <_write>
 8006748:	1c43      	adds	r3, r0, #1
 800674a:	d102      	bne.n	8006752 <_write_r+0x1e>
 800674c:	682b      	ldr	r3, [r5, #0]
 800674e:	b103      	cbz	r3, 8006752 <_write_r+0x1e>
 8006750:	6023      	str	r3, [r4, #0]
 8006752:	bd38      	pop	{r3, r4, r5, pc}
 8006754:	20004828 	.word	0x20004828

08006758 <__errno>:
 8006758:	4b01      	ldr	r3, [pc, #4]	@ (8006760 <__errno+0x8>)
 800675a:	6818      	ldr	r0, [r3, #0]
 800675c:	4770      	bx	lr
 800675e:	bf00      	nop
 8006760:	2000011c 	.word	0x2000011c

08006764 <__libc_init_array>:
 8006764:	b570      	push	{r4, r5, r6, lr}
 8006766:	4d0d      	ldr	r5, [pc, #52]	@ (800679c <__libc_init_array+0x38>)
 8006768:	4c0d      	ldr	r4, [pc, #52]	@ (80067a0 <__libc_init_array+0x3c>)
 800676a:	1b64      	subs	r4, r4, r5
 800676c:	10a4      	asrs	r4, r4, #2
 800676e:	2600      	movs	r6, #0
 8006770:	42a6      	cmp	r6, r4
 8006772:	d109      	bne.n	8006788 <__libc_init_array+0x24>
 8006774:	4d0b      	ldr	r5, [pc, #44]	@ (80067a4 <__libc_init_array+0x40>)
 8006776:	4c0c      	ldr	r4, [pc, #48]	@ (80067a8 <__libc_init_array+0x44>)
 8006778:	f000 fee0 	bl	800753c <_init>
 800677c:	1b64      	subs	r4, r4, r5
 800677e:	10a4      	asrs	r4, r4, #2
 8006780:	2600      	movs	r6, #0
 8006782:	42a6      	cmp	r6, r4
 8006784:	d105      	bne.n	8006792 <__libc_init_array+0x2e>
 8006786:	bd70      	pop	{r4, r5, r6, pc}
 8006788:	f855 3b04 	ldr.w	r3, [r5], #4
 800678c:	4798      	blx	r3
 800678e:	3601      	adds	r6, #1
 8006790:	e7ee      	b.n	8006770 <__libc_init_array+0xc>
 8006792:	f855 3b04 	ldr.w	r3, [r5], #4
 8006796:	4798      	blx	r3
 8006798:	3601      	adds	r6, #1
 800679a:	e7f2      	b.n	8006782 <__libc_init_array+0x1e>
 800679c:	08007ad4 	.word	0x08007ad4
 80067a0:	08007ad4 	.word	0x08007ad4
 80067a4:	08007ad4 	.word	0x08007ad4
 80067a8:	08007ad8 	.word	0x08007ad8

080067ac <__retarget_lock_init_recursive>:
 80067ac:	4770      	bx	lr

080067ae <__retarget_lock_acquire_recursive>:
 80067ae:	4770      	bx	lr

080067b0 <__retarget_lock_release_recursive>:
 80067b0:	4770      	bx	lr

080067b2 <strcpy>:
 80067b2:	4603      	mov	r3, r0
 80067b4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80067b8:	f803 2b01 	strb.w	r2, [r3], #1
 80067bc:	2a00      	cmp	r2, #0
 80067be:	d1f9      	bne.n	80067b4 <strcpy+0x2>
 80067c0:	4770      	bx	lr

080067c2 <memcpy>:
 80067c2:	440a      	add	r2, r1
 80067c4:	4291      	cmp	r1, r2
 80067c6:	f100 33ff 	add.w	r3, r0, #4294967295
 80067ca:	d100      	bne.n	80067ce <memcpy+0xc>
 80067cc:	4770      	bx	lr
 80067ce:	b510      	push	{r4, lr}
 80067d0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80067d4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80067d8:	4291      	cmp	r1, r2
 80067da:	d1f9      	bne.n	80067d0 <memcpy+0xe>
 80067dc:	bd10      	pop	{r4, pc}
	...

080067e0 <_free_r>:
 80067e0:	b538      	push	{r3, r4, r5, lr}
 80067e2:	4605      	mov	r5, r0
 80067e4:	2900      	cmp	r1, #0
 80067e6:	d041      	beq.n	800686c <_free_r+0x8c>
 80067e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80067ec:	1f0c      	subs	r4, r1, #4
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	bfb8      	it	lt
 80067f2:	18e4      	addlt	r4, r4, r3
 80067f4:	f000 f8e0 	bl	80069b8 <__malloc_lock>
 80067f8:	4a1d      	ldr	r2, [pc, #116]	@ (8006870 <_free_r+0x90>)
 80067fa:	6813      	ldr	r3, [r2, #0]
 80067fc:	b933      	cbnz	r3, 800680c <_free_r+0x2c>
 80067fe:	6063      	str	r3, [r4, #4]
 8006800:	6014      	str	r4, [r2, #0]
 8006802:	4628      	mov	r0, r5
 8006804:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006808:	f000 b8dc 	b.w	80069c4 <__malloc_unlock>
 800680c:	42a3      	cmp	r3, r4
 800680e:	d908      	bls.n	8006822 <_free_r+0x42>
 8006810:	6820      	ldr	r0, [r4, #0]
 8006812:	1821      	adds	r1, r4, r0
 8006814:	428b      	cmp	r3, r1
 8006816:	bf01      	itttt	eq
 8006818:	6819      	ldreq	r1, [r3, #0]
 800681a:	685b      	ldreq	r3, [r3, #4]
 800681c:	1809      	addeq	r1, r1, r0
 800681e:	6021      	streq	r1, [r4, #0]
 8006820:	e7ed      	b.n	80067fe <_free_r+0x1e>
 8006822:	461a      	mov	r2, r3
 8006824:	685b      	ldr	r3, [r3, #4]
 8006826:	b10b      	cbz	r3, 800682c <_free_r+0x4c>
 8006828:	42a3      	cmp	r3, r4
 800682a:	d9fa      	bls.n	8006822 <_free_r+0x42>
 800682c:	6811      	ldr	r1, [r2, #0]
 800682e:	1850      	adds	r0, r2, r1
 8006830:	42a0      	cmp	r0, r4
 8006832:	d10b      	bne.n	800684c <_free_r+0x6c>
 8006834:	6820      	ldr	r0, [r4, #0]
 8006836:	4401      	add	r1, r0
 8006838:	1850      	adds	r0, r2, r1
 800683a:	4283      	cmp	r3, r0
 800683c:	6011      	str	r1, [r2, #0]
 800683e:	d1e0      	bne.n	8006802 <_free_r+0x22>
 8006840:	6818      	ldr	r0, [r3, #0]
 8006842:	685b      	ldr	r3, [r3, #4]
 8006844:	6053      	str	r3, [r2, #4]
 8006846:	4408      	add	r0, r1
 8006848:	6010      	str	r0, [r2, #0]
 800684a:	e7da      	b.n	8006802 <_free_r+0x22>
 800684c:	d902      	bls.n	8006854 <_free_r+0x74>
 800684e:	230c      	movs	r3, #12
 8006850:	602b      	str	r3, [r5, #0]
 8006852:	e7d6      	b.n	8006802 <_free_r+0x22>
 8006854:	6820      	ldr	r0, [r4, #0]
 8006856:	1821      	adds	r1, r4, r0
 8006858:	428b      	cmp	r3, r1
 800685a:	bf04      	itt	eq
 800685c:	6819      	ldreq	r1, [r3, #0]
 800685e:	685b      	ldreq	r3, [r3, #4]
 8006860:	6063      	str	r3, [r4, #4]
 8006862:	bf04      	itt	eq
 8006864:	1809      	addeq	r1, r1, r0
 8006866:	6021      	streq	r1, [r4, #0]
 8006868:	6054      	str	r4, [r2, #4]
 800686a:	e7ca      	b.n	8006802 <_free_r+0x22>
 800686c:	bd38      	pop	{r3, r4, r5, pc}
 800686e:	bf00      	nop
 8006870:	20004834 	.word	0x20004834

08006874 <sbrk_aligned>:
 8006874:	b570      	push	{r4, r5, r6, lr}
 8006876:	4e0f      	ldr	r6, [pc, #60]	@ (80068b4 <sbrk_aligned+0x40>)
 8006878:	460c      	mov	r4, r1
 800687a:	6831      	ldr	r1, [r6, #0]
 800687c:	4605      	mov	r5, r0
 800687e:	b911      	cbnz	r1, 8006886 <sbrk_aligned+0x12>
 8006880:	f000 fe16 	bl	80074b0 <_sbrk_r>
 8006884:	6030      	str	r0, [r6, #0]
 8006886:	4621      	mov	r1, r4
 8006888:	4628      	mov	r0, r5
 800688a:	f000 fe11 	bl	80074b0 <_sbrk_r>
 800688e:	1c43      	adds	r3, r0, #1
 8006890:	d103      	bne.n	800689a <sbrk_aligned+0x26>
 8006892:	f04f 34ff 	mov.w	r4, #4294967295
 8006896:	4620      	mov	r0, r4
 8006898:	bd70      	pop	{r4, r5, r6, pc}
 800689a:	1cc4      	adds	r4, r0, #3
 800689c:	f024 0403 	bic.w	r4, r4, #3
 80068a0:	42a0      	cmp	r0, r4
 80068a2:	d0f8      	beq.n	8006896 <sbrk_aligned+0x22>
 80068a4:	1a21      	subs	r1, r4, r0
 80068a6:	4628      	mov	r0, r5
 80068a8:	f000 fe02 	bl	80074b0 <_sbrk_r>
 80068ac:	3001      	adds	r0, #1
 80068ae:	d1f2      	bne.n	8006896 <sbrk_aligned+0x22>
 80068b0:	e7ef      	b.n	8006892 <sbrk_aligned+0x1e>
 80068b2:	bf00      	nop
 80068b4:	20004830 	.word	0x20004830

080068b8 <_malloc_r>:
 80068b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80068bc:	1ccd      	adds	r5, r1, #3
 80068be:	f025 0503 	bic.w	r5, r5, #3
 80068c2:	3508      	adds	r5, #8
 80068c4:	2d0c      	cmp	r5, #12
 80068c6:	bf38      	it	cc
 80068c8:	250c      	movcc	r5, #12
 80068ca:	2d00      	cmp	r5, #0
 80068cc:	4606      	mov	r6, r0
 80068ce:	db01      	blt.n	80068d4 <_malloc_r+0x1c>
 80068d0:	42a9      	cmp	r1, r5
 80068d2:	d904      	bls.n	80068de <_malloc_r+0x26>
 80068d4:	230c      	movs	r3, #12
 80068d6:	6033      	str	r3, [r6, #0]
 80068d8:	2000      	movs	r0, #0
 80068da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80068de:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80069b4 <_malloc_r+0xfc>
 80068e2:	f000 f869 	bl	80069b8 <__malloc_lock>
 80068e6:	f8d8 3000 	ldr.w	r3, [r8]
 80068ea:	461c      	mov	r4, r3
 80068ec:	bb44      	cbnz	r4, 8006940 <_malloc_r+0x88>
 80068ee:	4629      	mov	r1, r5
 80068f0:	4630      	mov	r0, r6
 80068f2:	f7ff ffbf 	bl	8006874 <sbrk_aligned>
 80068f6:	1c43      	adds	r3, r0, #1
 80068f8:	4604      	mov	r4, r0
 80068fa:	d158      	bne.n	80069ae <_malloc_r+0xf6>
 80068fc:	f8d8 4000 	ldr.w	r4, [r8]
 8006900:	4627      	mov	r7, r4
 8006902:	2f00      	cmp	r7, #0
 8006904:	d143      	bne.n	800698e <_malloc_r+0xd6>
 8006906:	2c00      	cmp	r4, #0
 8006908:	d04b      	beq.n	80069a2 <_malloc_r+0xea>
 800690a:	6823      	ldr	r3, [r4, #0]
 800690c:	4639      	mov	r1, r7
 800690e:	4630      	mov	r0, r6
 8006910:	eb04 0903 	add.w	r9, r4, r3
 8006914:	f000 fdcc 	bl	80074b0 <_sbrk_r>
 8006918:	4581      	cmp	r9, r0
 800691a:	d142      	bne.n	80069a2 <_malloc_r+0xea>
 800691c:	6821      	ldr	r1, [r4, #0]
 800691e:	1a6d      	subs	r5, r5, r1
 8006920:	4629      	mov	r1, r5
 8006922:	4630      	mov	r0, r6
 8006924:	f7ff ffa6 	bl	8006874 <sbrk_aligned>
 8006928:	3001      	adds	r0, #1
 800692a:	d03a      	beq.n	80069a2 <_malloc_r+0xea>
 800692c:	6823      	ldr	r3, [r4, #0]
 800692e:	442b      	add	r3, r5
 8006930:	6023      	str	r3, [r4, #0]
 8006932:	f8d8 3000 	ldr.w	r3, [r8]
 8006936:	685a      	ldr	r2, [r3, #4]
 8006938:	bb62      	cbnz	r2, 8006994 <_malloc_r+0xdc>
 800693a:	f8c8 7000 	str.w	r7, [r8]
 800693e:	e00f      	b.n	8006960 <_malloc_r+0xa8>
 8006940:	6822      	ldr	r2, [r4, #0]
 8006942:	1b52      	subs	r2, r2, r5
 8006944:	d420      	bmi.n	8006988 <_malloc_r+0xd0>
 8006946:	2a0b      	cmp	r2, #11
 8006948:	d917      	bls.n	800697a <_malloc_r+0xc2>
 800694a:	1961      	adds	r1, r4, r5
 800694c:	42a3      	cmp	r3, r4
 800694e:	6025      	str	r5, [r4, #0]
 8006950:	bf18      	it	ne
 8006952:	6059      	strne	r1, [r3, #4]
 8006954:	6863      	ldr	r3, [r4, #4]
 8006956:	bf08      	it	eq
 8006958:	f8c8 1000 	streq.w	r1, [r8]
 800695c:	5162      	str	r2, [r4, r5]
 800695e:	604b      	str	r3, [r1, #4]
 8006960:	4630      	mov	r0, r6
 8006962:	f000 f82f 	bl	80069c4 <__malloc_unlock>
 8006966:	f104 000b 	add.w	r0, r4, #11
 800696a:	1d23      	adds	r3, r4, #4
 800696c:	f020 0007 	bic.w	r0, r0, #7
 8006970:	1ac2      	subs	r2, r0, r3
 8006972:	bf1c      	itt	ne
 8006974:	1a1b      	subne	r3, r3, r0
 8006976:	50a3      	strne	r3, [r4, r2]
 8006978:	e7af      	b.n	80068da <_malloc_r+0x22>
 800697a:	6862      	ldr	r2, [r4, #4]
 800697c:	42a3      	cmp	r3, r4
 800697e:	bf0c      	ite	eq
 8006980:	f8c8 2000 	streq.w	r2, [r8]
 8006984:	605a      	strne	r2, [r3, #4]
 8006986:	e7eb      	b.n	8006960 <_malloc_r+0xa8>
 8006988:	4623      	mov	r3, r4
 800698a:	6864      	ldr	r4, [r4, #4]
 800698c:	e7ae      	b.n	80068ec <_malloc_r+0x34>
 800698e:	463c      	mov	r4, r7
 8006990:	687f      	ldr	r7, [r7, #4]
 8006992:	e7b6      	b.n	8006902 <_malloc_r+0x4a>
 8006994:	461a      	mov	r2, r3
 8006996:	685b      	ldr	r3, [r3, #4]
 8006998:	42a3      	cmp	r3, r4
 800699a:	d1fb      	bne.n	8006994 <_malloc_r+0xdc>
 800699c:	2300      	movs	r3, #0
 800699e:	6053      	str	r3, [r2, #4]
 80069a0:	e7de      	b.n	8006960 <_malloc_r+0xa8>
 80069a2:	230c      	movs	r3, #12
 80069a4:	6033      	str	r3, [r6, #0]
 80069a6:	4630      	mov	r0, r6
 80069a8:	f000 f80c 	bl	80069c4 <__malloc_unlock>
 80069ac:	e794      	b.n	80068d8 <_malloc_r+0x20>
 80069ae:	6005      	str	r5, [r0, #0]
 80069b0:	e7d6      	b.n	8006960 <_malloc_r+0xa8>
 80069b2:	bf00      	nop
 80069b4:	20004834 	.word	0x20004834

080069b8 <__malloc_lock>:
 80069b8:	4801      	ldr	r0, [pc, #4]	@ (80069c0 <__malloc_lock+0x8>)
 80069ba:	f7ff bef8 	b.w	80067ae <__retarget_lock_acquire_recursive>
 80069be:	bf00      	nop
 80069c0:	2000482c 	.word	0x2000482c

080069c4 <__malloc_unlock>:
 80069c4:	4801      	ldr	r0, [pc, #4]	@ (80069cc <__malloc_unlock+0x8>)
 80069c6:	f7ff bef3 	b.w	80067b0 <__retarget_lock_release_recursive>
 80069ca:	bf00      	nop
 80069cc:	2000482c 	.word	0x2000482c

080069d0 <__ssputs_r>:
 80069d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80069d4:	688e      	ldr	r6, [r1, #8]
 80069d6:	461f      	mov	r7, r3
 80069d8:	42be      	cmp	r6, r7
 80069da:	680b      	ldr	r3, [r1, #0]
 80069dc:	4682      	mov	sl, r0
 80069de:	460c      	mov	r4, r1
 80069e0:	4690      	mov	r8, r2
 80069e2:	d82d      	bhi.n	8006a40 <__ssputs_r+0x70>
 80069e4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80069e8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80069ec:	d026      	beq.n	8006a3c <__ssputs_r+0x6c>
 80069ee:	6965      	ldr	r5, [r4, #20]
 80069f0:	6909      	ldr	r1, [r1, #16]
 80069f2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80069f6:	eba3 0901 	sub.w	r9, r3, r1
 80069fa:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80069fe:	1c7b      	adds	r3, r7, #1
 8006a00:	444b      	add	r3, r9
 8006a02:	106d      	asrs	r5, r5, #1
 8006a04:	429d      	cmp	r5, r3
 8006a06:	bf38      	it	cc
 8006a08:	461d      	movcc	r5, r3
 8006a0a:	0553      	lsls	r3, r2, #21
 8006a0c:	d527      	bpl.n	8006a5e <__ssputs_r+0x8e>
 8006a0e:	4629      	mov	r1, r5
 8006a10:	f7ff ff52 	bl	80068b8 <_malloc_r>
 8006a14:	4606      	mov	r6, r0
 8006a16:	b360      	cbz	r0, 8006a72 <__ssputs_r+0xa2>
 8006a18:	6921      	ldr	r1, [r4, #16]
 8006a1a:	464a      	mov	r2, r9
 8006a1c:	f7ff fed1 	bl	80067c2 <memcpy>
 8006a20:	89a3      	ldrh	r3, [r4, #12]
 8006a22:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006a26:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a2a:	81a3      	strh	r3, [r4, #12]
 8006a2c:	6126      	str	r6, [r4, #16]
 8006a2e:	6165      	str	r5, [r4, #20]
 8006a30:	444e      	add	r6, r9
 8006a32:	eba5 0509 	sub.w	r5, r5, r9
 8006a36:	6026      	str	r6, [r4, #0]
 8006a38:	60a5      	str	r5, [r4, #8]
 8006a3a:	463e      	mov	r6, r7
 8006a3c:	42be      	cmp	r6, r7
 8006a3e:	d900      	bls.n	8006a42 <__ssputs_r+0x72>
 8006a40:	463e      	mov	r6, r7
 8006a42:	6820      	ldr	r0, [r4, #0]
 8006a44:	4632      	mov	r2, r6
 8006a46:	4641      	mov	r1, r8
 8006a48:	f000 fcf6 	bl	8007438 <memmove>
 8006a4c:	68a3      	ldr	r3, [r4, #8]
 8006a4e:	1b9b      	subs	r3, r3, r6
 8006a50:	60a3      	str	r3, [r4, #8]
 8006a52:	6823      	ldr	r3, [r4, #0]
 8006a54:	4433      	add	r3, r6
 8006a56:	6023      	str	r3, [r4, #0]
 8006a58:	2000      	movs	r0, #0
 8006a5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a5e:	462a      	mov	r2, r5
 8006a60:	f000 fd36 	bl	80074d0 <_realloc_r>
 8006a64:	4606      	mov	r6, r0
 8006a66:	2800      	cmp	r0, #0
 8006a68:	d1e0      	bne.n	8006a2c <__ssputs_r+0x5c>
 8006a6a:	6921      	ldr	r1, [r4, #16]
 8006a6c:	4650      	mov	r0, sl
 8006a6e:	f7ff feb7 	bl	80067e0 <_free_r>
 8006a72:	230c      	movs	r3, #12
 8006a74:	f8ca 3000 	str.w	r3, [sl]
 8006a78:	89a3      	ldrh	r3, [r4, #12]
 8006a7a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006a7e:	81a3      	strh	r3, [r4, #12]
 8006a80:	f04f 30ff 	mov.w	r0, #4294967295
 8006a84:	e7e9      	b.n	8006a5a <__ssputs_r+0x8a>
	...

08006a88 <_svfiprintf_r>:
 8006a88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a8c:	4698      	mov	r8, r3
 8006a8e:	898b      	ldrh	r3, [r1, #12]
 8006a90:	061b      	lsls	r3, r3, #24
 8006a92:	b09d      	sub	sp, #116	@ 0x74
 8006a94:	4607      	mov	r7, r0
 8006a96:	460d      	mov	r5, r1
 8006a98:	4614      	mov	r4, r2
 8006a9a:	d510      	bpl.n	8006abe <_svfiprintf_r+0x36>
 8006a9c:	690b      	ldr	r3, [r1, #16]
 8006a9e:	b973      	cbnz	r3, 8006abe <_svfiprintf_r+0x36>
 8006aa0:	2140      	movs	r1, #64	@ 0x40
 8006aa2:	f7ff ff09 	bl	80068b8 <_malloc_r>
 8006aa6:	6028      	str	r0, [r5, #0]
 8006aa8:	6128      	str	r0, [r5, #16]
 8006aaa:	b930      	cbnz	r0, 8006aba <_svfiprintf_r+0x32>
 8006aac:	230c      	movs	r3, #12
 8006aae:	603b      	str	r3, [r7, #0]
 8006ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8006ab4:	b01d      	add	sp, #116	@ 0x74
 8006ab6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006aba:	2340      	movs	r3, #64	@ 0x40
 8006abc:	616b      	str	r3, [r5, #20]
 8006abe:	2300      	movs	r3, #0
 8006ac0:	9309      	str	r3, [sp, #36]	@ 0x24
 8006ac2:	2320      	movs	r3, #32
 8006ac4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006ac8:	f8cd 800c 	str.w	r8, [sp, #12]
 8006acc:	2330      	movs	r3, #48	@ 0x30
 8006ace:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006c6c <_svfiprintf_r+0x1e4>
 8006ad2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006ad6:	f04f 0901 	mov.w	r9, #1
 8006ada:	4623      	mov	r3, r4
 8006adc:	469a      	mov	sl, r3
 8006ade:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006ae2:	b10a      	cbz	r2, 8006ae8 <_svfiprintf_r+0x60>
 8006ae4:	2a25      	cmp	r2, #37	@ 0x25
 8006ae6:	d1f9      	bne.n	8006adc <_svfiprintf_r+0x54>
 8006ae8:	ebba 0b04 	subs.w	fp, sl, r4
 8006aec:	d00b      	beq.n	8006b06 <_svfiprintf_r+0x7e>
 8006aee:	465b      	mov	r3, fp
 8006af0:	4622      	mov	r2, r4
 8006af2:	4629      	mov	r1, r5
 8006af4:	4638      	mov	r0, r7
 8006af6:	f7ff ff6b 	bl	80069d0 <__ssputs_r>
 8006afa:	3001      	adds	r0, #1
 8006afc:	f000 80a7 	beq.w	8006c4e <_svfiprintf_r+0x1c6>
 8006b00:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006b02:	445a      	add	r2, fp
 8006b04:	9209      	str	r2, [sp, #36]	@ 0x24
 8006b06:	f89a 3000 	ldrb.w	r3, [sl]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	f000 809f 	beq.w	8006c4e <_svfiprintf_r+0x1c6>
 8006b10:	2300      	movs	r3, #0
 8006b12:	f04f 32ff 	mov.w	r2, #4294967295
 8006b16:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006b1a:	f10a 0a01 	add.w	sl, sl, #1
 8006b1e:	9304      	str	r3, [sp, #16]
 8006b20:	9307      	str	r3, [sp, #28]
 8006b22:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006b26:	931a      	str	r3, [sp, #104]	@ 0x68
 8006b28:	4654      	mov	r4, sl
 8006b2a:	2205      	movs	r2, #5
 8006b2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b30:	484e      	ldr	r0, [pc, #312]	@ (8006c6c <_svfiprintf_r+0x1e4>)
 8006b32:	f7f9 fb75 	bl	8000220 <memchr>
 8006b36:	9a04      	ldr	r2, [sp, #16]
 8006b38:	b9d8      	cbnz	r0, 8006b72 <_svfiprintf_r+0xea>
 8006b3a:	06d0      	lsls	r0, r2, #27
 8006b3c:	bf44      	itt	mi
 8006b3e:	2320      	movmi	r3, #32
 8006b40:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006b44:	0711      	lsls	r1, r2, #28
 8006b46:	bf44      	itt	mi
 8006b48:	232b      	movmi	r3, #43	@ 0x2b
 8006b4a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006b4e:	f89a 3000 	ldrb.w	r3, [sl]
 8006b52:	2b2a      	cmp	r3, #42	@ 0x2a
 8006b54:	d015      	beq.n	8006b82 <_svfiprintf_r+0xfa>
 8006b56:	9a07      	ldr	r2, [sp, #28]
 8006b58:	4654      	mov	r4, sl
 8006b5a:	2000      	movs	r0, #0
 8006b5c:	f04f 0c0a 	mov.w	ip, #10
 8006b60:	4621      	mov	r1, r4
 8006b62:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006b66:	3b30      	subs	r3, #48	@ 0x30
 8006b68:	2b09      	cmp	r3, #9
 8006b6a:	d94b      	bls.n	8006c04 <_svfiprintf_r+0x17c>
 8006b6c:	b1b0      	cbz	r0, 8006b9c <_svfiprintf_r+0x114>
 8006b6e:	9207      	str	r2, [sp, #28]
 8006b70:	e014      	b.n	8006b9c <_svfiprintf_r+0x114>
 8006b72:	eba0 0308 	sub.w	r3, r0, r8
 8006b76:	fa09 f303 	lsl.w	r3, r9, r3
 8006b7a:	4313      	orrs	r3, r2
 8006b7c:	9304      	str	r3, [sp, #16]
 8006b7e:	46a2      	mov	sl, r4
 8006b80:	e7d2      	b.n	8006b28 <_svfiprintf_r+0xa0>
 8006b82:	9b03      	ldr	r3, [sp, #12]
 8006b84:	1d19      	adds	r1, r3, #4
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	9103      	str	r1, [sp, #12]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	bfbb      	ittet	lt
 8006b8e:	425b      	neglt	r3, r3
 8006b90:	f042 0202 	orrlt.w	r2, r2, #2
 8006b94:	9307      	strge	r3, [sp, #28]
 8006b96:	9307      	strlt	r3, [sp, #28]
 8006b98:	bfb8      	it	lt
 8006b9a:	9204      	strlt	r2, [sp, #16]
 8006b9c:	7823      	ldrb	r3, [r4, #0]
 8006b9e:	2b2e      	cmp	r3, #46	@ 0x2e
 8006ba0:	d10a      	bne.n	8006bb8 <_svfiprintf_r+0x130>
 8006ba2:	7863      	ldrb	r3, [r4, #1]
 8006ba4:	2b2a      	cmp	r3, #42	@ 0x2a
 8006ba6:	d132      	bne.n	8006c0e <_svfiprintf_r+0x186>
 8006ba8:	9b03      	ldr	r3, [sp, #12]
 8006baa:	1d1a      	adds	r2, r3, #4
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	9203      	str	r2, [sp, #12]
 8006bb0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006bb4:	3402      	adds	r4, #2
 8006bb6:	9305      	str	r3, [sp, #20]
 8006bb8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006c7c <_svfiprintf_r+0x1f4>
 8006bbc:	7821      	ldrb	r1, [r4, #0]
 8006bbe:	2203      	movs	r2, #3
 8006bc0:	4650      	mov	r0, sl
 8006bc2:	f7f9 fb2d 	bl	8000220 <memchr>
 8006bc6:	b138      	cbz	r0, 8006bd8 <_svfiprintf_r+0x150>
 8006bc8:	9b04      	ldr	r3, [sp, #16]
 8006bca:	eba0 000a 	sub.w	r0, r0, sl
 8006bce:	2240      	movs	r2, #64	@ 0x40
 8006bd0:	4082      	lsls	r2, r0
 8006bd2:	4313      	orrs	r3, r2
 8006bd4:	3401      	adds	r4, #1
 8006bd6:	9304      	str	r3, [sp, #16]
 8006bd8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006bdc:	4824      	ldr	r0, [pc, #144]	@ (8006c70 <_svfiprintf_r+0x1e8>)
 8006bde:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006be2:	2206      	movs	r2, #6
 8006be4:	f7f9 fb1c 	bl	8000220 <memchr>
 8006be8:	2800      	cmp	r0, #0
 8006bea:	d036      	beq.n	8006c5a <_svfiprintf_r+0x1d2>
 8006bec:	4b21      	ldr	r3, [pc, #132]	@ (8006c74 <_svfiprintf_r+0x1ec>)
 8006bee:	bb1b      	cbnz	r3, 8006c38 <_svfiprintf_r+0x1b0>
 8006bf0:	9b03      	ldr	r3, [sp, #12]
 8006bf2:	3307      	adds	r3, #7
 8006bf4:	f023 0307 	bic.w	r3, r3, #7
 8006bf8:	3308      	adds	r3, #8
 8006bfa:	9303      	str	r3, [sp, #12]
 8006bfc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006bfe:	4433      	add	r3, r6
 8006c00:	9309      	str	r3, [sp, #36]	@ 0x24
 8006c02:	e76a      	b.n	8006ada <_svfiprintf_r+0x52>
 8006c04:	fb0c 3202 	mla	r2, ip, r2, r3
 8006c08:	460c      	mov	r4, r1
 8006c0a:	2001      	movs	r0, #1
 8006c0c:	e7a8      	b.n	8006b60 <_svfiprintf_r+0xd8>
 8006c0e:	2300      	movs	r3, #0
 8006c10:	3401      	adds	r4, #1
 8006c12:	9305      	str	r3, [sp, #20]
 8006c14:	4619      	mov	r1, r3
 8006c16:	f04f 0c0a 	mov.w	ip, #10
 8006c1a:	4620      	mov	r0, r4
 8006c1c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006c20:	3a30      	subs	r2, #48	@ 0x30
 8006c22:	2a09      	cmp	r2, #9
 8006c24:	d903      	bls.n	8006c2e <_svfiprintf_r+0x1a6>
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d0c6      	beq.n	8006bb8 <_svfiprintf_r+0x130>
 8006c2a:	9105      	str	r1, [sp, #20]
 8006c2c:	e7c4      	b.n	8006bb8 <_svfiprintf_r+0x130>
 8006c2e:	fb0c 2101 	mla	r1, ip, r1, r2
 8006c32:	4604      	mov	r4, r0
 8006c34:	2301      	movs	r3, #1
 8006c36:	e7f0      	b.n	8006c1a <_svfiprintf_r+0x192>
 8006c38:	ab03      	add	r3, sp, #12
 8006c3a:	9300      	str	r3, [sp, #0]
 8006c3c:	462a      	mov	r2, r5
 8006c3e:	4b0e      	ldr	r3, [pc, #56]	@ (8006c78 <_svfiprintf_r+0x1f0>)
 8006c40:	a904      	add	r1, sp, #16
 8006c42:	4638      	mov	r0, r7
 8006c44:	f3af 8000 	nop.w
 8006c48:	1c42      	adds	r2, r0, #1
 8006c4a:	4606      	mov	r6, r0
 8006c4c:	d1d6      	bne.n	8006bfc <_svfiprintf_r+0x174>
 8006c4e:	89ab      	ldrh	r3, [r5, #12]
 8006c50:	065b      	lsls	r3, r3, #25
 8006c52:	f53f af2d 	bmi.w	8006ab0 <_svfiprintf_r+0x28>
 8006c56:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006c58:	e72c      	b.n	8006ab4 <_svfiprintf_r+0x2c>
 8006c5a:	ab03      	add	r3, sp, #12
 8006c5c:	9300      	str	r3, [sp, #0]
 8006c5e:	462a      	mov	r2, r5
 8006c60:	4b05      	ldr	r3, [pc, #20]	@ (8006c78 <_svfiprintf_r+0x1f0>)
 8006c62:	a904      	add	r1, sp, #16
 8006c64:	4638      	mov	r0, r7
 8006c66:	f000 f9bb 	bl	8006fe0 <_printf_i>
 8006c6a:	e7ed      	b.n	8006c48 <_svfiprintf_r+0x1c0>
 8006c6c:	08007a98 	.word	0x08007a98
 8006c70:	08007aa2 	.word	0x08007aa2
 8006c74:	00000000 	.word	0x00000000
 8006c78:	080069d1 	.word	0x080069d1
 8006c7c:	08007a9e 	.word	0x08007a9e

08006c80 <__sfputc_r>:
 8006c80:	6893      	ldr	r3, [r2, #8]
 8006c82:	3b01      	subs	r3, #1
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	b410      	push	{r4}
 8006c88:	6093      	str	r3, [r2, #8]
 8006c8a:	da08      	bge.n	8006c9e <__sfputc_r+0x1e>
 8006c8c:	6994      	ldr	r4, [r2, #24]
 8006c8e:	42a3      	cmp	r3, r4
 8006c90:	db01      	blt.n	8006c96 <__sfputc_r+0x16>
 8006c92:	290a      	cmp	r1, #10
 8006c94:	d103      	bne.n	8006c9e <__sfputc_r+0x1e>
 8006c96:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006c9a:	f7ff bc66 	b.w	800656a <__swbuf_r>
 8006c9e:	6813      	ldr	r3, [r2, #0]
 8006ca0:	1c58      	adds	r0, r3, #1
 8006ca2:	6010      	str	r0, [r2, #0]
 8006ca4:	7019      	strb	r1, [r3, #0]
 8006ca6:	4608      	mov	r0, r1
 8006ca8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006cac:	4770      	bx	lr

08006cae <__sfputs_r>:
 8006cae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cb0:	4606      	mov	r6, r0
 8006cb2:	460f      	mov	r7, r1
 8006cb4:	4614      	mov	r4, r2
 8006cb6:	18d5      	adds	r5, r2, r3
 8006cb8:	42ac      	cmp	r4, r5
 8006cba:	d101      	bne.n	8006cc0 <__sfputs_r+0x12>
 8006cbc:	2000      	movs	r0, #0
 8006cbe:	e007      	b.n	8006cd0 <__sfputs_r+0x22>
 8006cc0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006cc4:	463a      	mov	r2, r7
 8006cc6:	4630      	mov	r0, r6
 8006cc8:	f7ff ffda 	bl	8006c80 <__sfputc_r>
 8006ccc:	1c43      	adds	r3, r0, #1
 8006cce:	d1f3      	bne.n	8006cb8 <__sfputs_r+0xa>
 8006cd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006cd4 <_vfiprintf_r>:
 8006cd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cd8:	460d      	mov	r5, r1
 8006cda:	b09d      	sub	sp, #116	@ 0x74
 8006cdc:	4614      	mov	r4, r2
 8006cde:	4698      	mov	r8, r3
 8006ce0:	4606      	mov	r6, r0
 8006ce2:	b118      	cbz	r0, 8006cec <_vfiprintf_r+0x18>
 8006ce4:	6a03      	ldr	r3, [r0, #32]
 8006ce6:	b90b      	cbnz	r3, 8006cec <_vfiprintf_r+0x18>
 8006ce8:	f7ff fafe 	bl	80062e8 <__sinit>
 8006cec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006cee:	07d9      	lsls	r1, r3, #31
 8006cf0:	d405      	bmi.n	8006cfe <_vfiprintf_r+0x2a>
 8006cf2:	89ab      	ldrh	r3, [r5, #12]
 8006cf4:	059a      	lsls	r2, r3, #22
 8006cf6:	d402      	bmi.n	8006cfe <_vfiprintf_r+0x2a>
 8006cf8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006cfa:	f7ff fd58 	bl	80067ae <__retarget_lock_acquire_recursive>
 8006cfe:	89ab      	ldrh	r3, [r5, #12]
 8006d00:	071b      	lsls	r3, r3, #28
 8006d02:	d501      	bpl.n	8006d08 <_vfiprintf_r+0x34>
 8006d04:	692b      	ldr	r3, [r5, #16]
 8006d06:	b99b      	cbnz	r3, 8006d30 <_vfiprintf_r+0x5c>
 8006d08:	4629      	mov	r1, r5
 8006d0a:	4630      	mov	r0, r6
 8006d0c:	f7ff fc6c 	bl	80065e8 <__swsetup_r>
 8006d10:	b170      	cbz	r0, 8006d30 <_vfiprintf_r+0x5c>
 8006d12:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006d14:	07dc      	lsls	r4, r3, #31
 8006d16:	d504      	bpl.n	8006d22 <_vfiprintf_r+0x4e>
 8006d18:	f04f 30ff 	mov.w	r0, #4294967295
 8006d1c:	b01d      	add	sp, #116	@ 0x74
 8006d1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d22:	89ab      	ldrh	r3, [r5, #12]
 8006d24:	0598      	lsls	r0, r3, #22
 8006d26:	d4f7      	bmi.n	8006d18 <_vfiprintf_r+0x44>
 8006d28:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006d2a:	f7ff fd41 	bl	80067b0 <__retarget_lock_release_recursive>
 8006d2e:	e7f3      	b.n	8006d18 <_vfiprintf_r+0x44>
 8006d30:	2300      	movs	r3, #0
 8006d32:	9309      	str	r3, [sp, #36]	@ 0x24
 8006d34:	2320      	movs	r3, #32
 8006d36:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006d3a:	f8cd 800c 	str.w	r8, [sp, #12]
 8006d3e:	2330      	movs	r3, #48	@ 0x30
 8006d40:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006ef0 <_vfiprintf_r+0x21c>
 8006d44:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006d48:	f04f 0901 	mov.w	r9, #1
 8006d4c:	4623      	mov	r3, r4
 8006d4e:	469a      	mov	sl, r3
 8006d50:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006d54:	b10a      	cbz	r2, 8006d5a <_vfiprintf_r+0x86>
 8006d56:	2a25      	cmp	r2, #37	@ 0x25
 8006d58:	d1f9      	bne.n	8006d4e <_vfiprintf_r+0x7a>
 8006d5a:	ebba 0b04 	subs.w	fp, sl, r4
 8006d5e:	d00b      	beq.n	8006d78 <_vfiprintf_r+0xa4>
 8006d60:	465b      	mov	r3, fp
 8006d62:	4622      	mov	r2, r4
 8006d64:	4629      	mov	r1, r5
 8006d66:	4630      	mov	r0, r6
 8006d68:	f7ff ffa1 	bl	8006cae <__sfputs_r>
 8006d6c:	3001      	adds	r0, #1
 8006d6e:	f000 80a7 	beq.w	8006ec0 <_vfiprintf_r+0x1ec>
 8006d72:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006d74:	445a      	add	r2, fp
 8006d76:	9209      	str	r2, [sp, #36]	@ 0x24
 8006d78:	f89a 3000 	ldrb.w	r3, [sl]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	f000 809f 	beq.w	8006ec0 <_vfiprintf_r+0x1ec>
 8006d82:	2300      	movs	r3, #0
 8006d84:	f04f 32ff 	mov.w	r2, #4294967295
 8006d88:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006d8c:	f10a 0a01 	add.w	sl, sl, #1
 8006d90:	9304      	str	r3, [sp, #16]
 8006d92:	9307      	str	r3, [sp, #28]
 8006d94:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006d98:	931a      	str	r3, [sp, #104]	@ 0x68
 8006d9a:	4654      	mov	r4, sl
 8006d9c:	2205      	movs	r2, #5
 8006d9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006da2:	4853      	ldr	r0, [pc, #332]	@ (8006ef0 <_vfiprintf_r+0x21c>)
 8006da4:	f7f9 fa3c 	bl	8000220 <memchr>
 8006da8:	9a04      	ldr	r2, [sp, #16]
 8006daa:	b9d8      	cbnz	r0, 8006de4 <_vfiprintf_r+0x110>
 8006dac:	06d1      	lsls	r1, r2, #27
 8006dae:	bf44      	itt	mi
 8006db0:	2320      	movmi	r3, #32
 8006db2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006db6:	0713      	lsls	r3, r2, #28
 8006db8:	bf44      	itt	mi
 8006dba:	232b      	movmi	r3, #43	@ 0x2b
 8006dbc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006dc0:	f89a 3000 	ldrb.w	r3, [sl]
 8006dc4:	2b2a      	cmp	r3, #42	@ 0x2a
 8006dc6:	d015      	beq.n	8006df4 <_vfiprintf_r+0x120>
 8006dc8:	9a07      	ldr	r2, [sp, #28]
 8006dca:	4654      	mov	r4, sl
 8006dcc:	2000      	movs	r0, #0
 8006dce:	f04f 0c0a 	mov.w	ip, #10
 8006dd2:	4621      	mov	r1, r4
 8006dd4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006dd8:	3b30      	subs	r3, #48	@ 0x30
 8006dda:	2b09      	cmp	r3, #9
 8006ddc:	d94b      	bls.n	8006e76 <_vfiprintf_r+0x1a2>
 8006dde:	b1b0      	cbz	r0, 8006e0e <_vfiprintf_r+0x13a>
 8006de0:	9207      	str	r2, [sp, #28]
 8006de2:	e014      	b.n	8006e0e <_vfiprintf_r+0x13a>
 8006de4:	eba0 0308 	sub.w	r3, r0, r8
 8006de8:	fa09 f303 	lsl.w	r3, r9, r3
 8006dec:	4313      	orrs	r3, r2
 8006dee:	9304      	str	r3, [sp, #16]
 8006df0:	46a2      	mov	sl, r4
 8006df2:	e7d2      	b.n	8006d9a <_vfiprintf_r+0xc6>
 8006df4:	9b03      	ldr	r3, [sp, #12]
 8006df6:	1d19      	adds	r1, r3, #4
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	9103      	str	r1, [sp, #12]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	bfbb      	ittet	lt
 8006e00:	425b      	neglt	r3, r3
 8006e02:	f042 0202 	orrlt.w	r2, r2, #2
 8006e06:	9307      	strge	r3, [sp, #28]
 8006e08:	9307      	strlt	r3, [sp, #28]
 8006e0a:	bfb8      	it	lt
 8006e0c:	9204      	strlt	r2, [sp, #16]
 8006e0e:	7823      	ldrb	r3, [r4, #0]
 8006e10:	2b2e      	cmp	r3, #46	@ 0x2e
 8006e12:	d10a      	bne.n	8006e2a <_vfiprintf_r+0x156>
 8006e14:	7863      	ldrb	r3, [r4, #1]
 8006e16:	2b2a      	cmp	r3, #42	@ 0x2a
 8006e18:	d132      	bne.n	8006e80 <_vfiprintf_r+0x1ac>
 8006e1a:	9b03      	ldr	r3, [sp, #12]
 8006e1c:	1d1a      	adds	r2, r3, #4
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	9203      	str	r2, [sp, #12]
 8006e22:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006e26:	3402      	adds	r4, #2
 8006e28:	9305      	str	r3, [sp, #20]
 8006e2a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006f00 <_vfiprintf_r+0x22c>
 8006e2e:	7821      	ldrb	r1, [r4, #0]
 8006e30:	2203      	movs	r2, #3
 8006e32:	4650      	mov	r0, sl
 8006e34:	f7f9 f9f4 	bl	8000220 <memchr>
 8006e38:	b138      	cbz	r0, 8006e4a <_vfiprintf_r+0x176>
 8006e3a:	9b04      	ldr	r3, [sp, #16]
 8006e3c:	eba0 000a 	sub.w	r0, r0, sl
 8006e40:	2240      	movs	r2, #64	@ 0x40
 8006e42:	4082      	lsls	r2, r0
 8006e44:	4313      	orrs	r3, r2
 8006e46:	3401      	adds	r4, #1
 8006e48:	9304      	str	r3, [sp, #16]
 8006e4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e4e:	4829      	ldr	r0, [pc, #164]	@ (8006ef4 <_vfiprintf_r+0x220>)
 8006e50:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006e54:	2206      	movs	r2, #6
 8006e56:	f7f9 f9e3 	bl	8000220 <memchr>
 8006e5a:	2800      	cmp	r0, #0
 8006e5c:	d03f      	beq.n	8006ede <_vfiprintf_r+0x20a>
 8006e5e:	4b26      	ldr	r3, [pc, #152]	@ (8006ef8 <_vfiprintf_r+0x224>)
 8006e60:	bb1b      	cbnz	r3, 8006eaa <_vfiprintf_r+0x1d6>
 8006e62:	9b03      	ldr	r3, [sp, #12]
 8006e64:	3307      	adds	r3, #7
 8006e66:	f023 0307 	bic.w	r3, r3, #7
 8006e6a:	3308      	adds	r3, #8
 8006e6c:	9303      	str	r3, [sp, #12]
 8006e6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e70:	443b      	add	r3, r7
 8006e72:	9309      	str	r3, [sp, #36]	@ 0x24
 8006e74:	e76a      	b.n	8006d4c <_vfiprintf_r+0x78>
 8006e76:	fb0c 3202 	mla	r2, ip, r2, r3
 8006e7a:	460c      	mov	r4, r1
 8006e7c:	2001      	movs	r0, #1
 8006e7e:	e7a8      	b.n	8006dd2 <_vfiprintf_r+0xfe>
 8006e80:	2300      	movs	r3, #0
 8006e82:	3401      	adds	r4, #1
 8006e84:	9305      	str	r3, [sp, #20]
 8006e86:	4619      	mov	r1, r3
 8006e88:	f04f 0c0a 	mov.w	ip, #10
 8006e8c:	4620      	mov	r0, r4
 8006e8e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006e92:	3a30      	subs	r2, #48	@ 0x30
 8006e94:	2a09      	cmp	r2, #9
 8006e96:	d903      	bls.n	8006ea0 <_vfiprintf_r+0x1cc>
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d0c6      	beq.n	8006e2a <_vfiprintf_r+0x156>
 8006e9c:	9105      	str	r1, [sp, #20]
 8006e9e:	e7c4      	b.n	8006e2a <_vfiprintf_r+0x156>
 8006ea0:	fb0c 2101 	mla	r1, ip, r1, r2
 8006ea4:	4604      	mov	r4, r0
 8006ea6:	2301      	movs	r3, #1
 8006ea8:	e7f0      	b.n	8006e8c <_vfiprintf_r+0x1b8>
 8006eaa:	ab03      	add	r3, sp, #12
 8006eac:	9300      	str	r3, [sp, #0]
 8006eae:	462a      	mov	r2, r5
 8006eb0:	4b12      	ldr	r3, [pc, #72]	@ (8006efc <_vfiprintf_r+0x228>)
 8006eb2:	a904      	add	r1, sp, #16
 8006eb4:	4630      	mov	r0, r6
 8006eb6:	f3af 8000 	nop.w
 8006eba:	4607      	mov	r7, r0
 8006ebc:	1c78      	adds	r0, r7, #1
 8006ebe:	d1d6      	bne.n	8006e6e <_vfiprintf_r+0x19a>
 8006ec0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006ec2:	07d9      	lsls	r1, r3, #31
 8006ec4:	d405      	bmi.n	8006ed2 <_vfiprintf_r+0x1fe>
 8006ec6:	89ab      	ldrh	r3, [r5, #12]
 8006ec8:	059a      	lsls	r2, r3, #22
 8006eca:	d402      	bmi.n	8006ed2 <_vfiprintf_r+0x1fe>
 8006ecc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006ece:	f7ff fc6f 	bl	80067b0 <__retarget_lock_release_recursive>
 8006ed2:	89ab      	ldrh	r3, [r5, #12]
 8006ed4:	065b      	lsls	r3, r3, #25
 8006ed6:	f53f af1f 	bmi.w	8006d18 <_vfiprintf_r+0x44>
 8006eda:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006edc:	e71e      	b.n	8006d1c <_vfiprintf_r+0x48>
 8006ede:	ab03      	add	r3, sp, #12
 8006ee0:	9300      	str	r3, [sp, #0]
 8006ee2:	462a      	mov	r2, r5
 8006ee4:	4b05      	ldr	r3, [pc, #20]	@ (8006efc <_vfiprintf_r+0x228>)
 8006ee6:	a904      	add	r1, sp, #16
 8006ee8:	4630      	mov	r0, r6
 8006eea:	f000 f879 	bl	8006fe0 <_printf_i>
 8006eee:	e7e4      	b.n	8006eba <_vfiprintf_r+0x1e6>
 8006ef0:	08007a98 	.word	0x08007a98
 8006ef4:	08007aa2 	.word	0x08007aa2
 8006ef8:	00000000 	.word	0x00000000
 8006efc:	08006caf 	.word	0x08006caf
 8006f00:	08007a9e 	.word	0x08007a9e

08006f04 <_printf_common>:
 8006f04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f08:	4616      	mov	r6, r2
 8006f0a:	4698      	mov	r8, r3
 8006f0c:	688a      	ldr	r2, [r1, #8]
 8006f0e:	690b      	ldr	r3, [r1, #16]
 8006f10:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006f14:	4293      	cmp	r3, r2
 8006f16:	bfb8      	it	lt
 8006f18:	4613      	movlt	r3, r2
 8006f1a:	6033      	str	r3, [r6, #0]
 8006f1c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006f20:	4607      	mov	r7, r0
 8006f22:	460c      	mov	r4, r1
 8006f24:	b10a      	cbz	r2, 8006f2a <_printf_common+0x26>
 8006f26:	3301      	adds	r3, #1
 8006f28:	6033      	str	r3, [r6, #0]
 8006f2a:	6823      	ldr	r3, [r4, #0]
 8006f2c:	0699      	lsls	r1, r3, #26
 8006f2e:	bf42      	ittt	mi
 8006f30:	6833      	ldrmi	r3, [r6, #0]
 8006f32:	3302      	addmi	r3, #2
 8006f34:	6033      	strmi	r3, [r6, #0]
 8006f36:	6825      	ldr	r5, [r4, #0]
 8006f38:	f015 0506 	ands.w	r5, r5, #6
 8006f3c:	d106      	bne.n	8006f4c <_printf_common+0x48>
 8006f3e:	f104 0a19 	add.w	sl, r4, #25
 8006f42:	68e3      	ldr	r3, [r4, #12]
 8006f44:	6832      	ldr	r2, [r6, #0]
 8006f46:	1a9b      	subs	r3, r3, r2
 8006f48:	42ab      	cmp	r3, r5
 8006f4a:	dc26      	bgt.n	8006f9a <_printf_common+0x96>
 8006f4c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006f50:	6822      	ldr	r2, [r4, #0]
 8006f52:	3b00      	subs	r3, #0
 8006f54:	bf18      	it	ne
 8006f56:	2301      	movne	r3, #1
 8006f58:	0692      	lsls	r2, r2, #26
 8006f5a:	d42b      	bmi.n	8006fb4 <_printf_common+0xb0>
 8006f5c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006f60:	4641      	mov	r1, r8
 8006f62:	4638      	mov	r0, r7
 8006f64:	47c8      	blx	r9
 8006f66:	3001      	adds	r0, #1
 8006f68:	d01e      	beq.n	8006fa8 <_printf_common+0xa4>
 8006f6a:	6823      	ldr	r3, [r4, #0]
 8006f6c:	6922      	ldr	r2, [r4, #16]
 8006f6e:	f003 0306 	and.w	r3, r3, #6
 8006f72:	2b04      	cmp	r3, #4
 8006f74:	bf02      	ittt	eq
 8006f76:	68e5      	ldreq	r5, [r4, #12]
 8006f78:	6833      	ldreq	r3, [r6, #0]
 8006f7a:	1aed      	subeq	r5, r5, r3
 8006f7c:	68a3      	ldr	r3, [r4, #8]
 8006f7e:	bf0c      	ite	eq
 8006f80:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006f84:	2500      	movne	r5, #0
 8006f86:	4293      	cmp	r3, r2
 8006f88:	bfc4      	itt	gt
 8006f8a:	1a9b      	subgt	r3, r3, r2
 8006f8c:	18ed      	addgt	r5, r5, r3
 8006f8e:	2600      	movs	r6, #0
 8006f90:	341a      	adds	r4, #26
 8006f92:	42b5      	cmp	r5, r6
 8006f94:	d11a      	bne.n	8006fcc <_printf_common+0xc8>
 8006f96:	2000      	movs	r0, #0
 8006f98:	e008      	b.n	8006fac <_printf_common+0xa8>
 8006f9a:	2301      	movs	r3, #1
 8006f9c:	4652      	mov	r2, sl
 8006f9e:	4641      	mov	r1, r8
 8006fa0:	4638      	mov	r0, r7
 8006fa2:	47c8      	blx	r9
 8006fa4:	3001      	adds	r0, #1
 8006fa6:	d103      	bne.n	8006fb0 <_printf_common+0xac>
 8006fa8:	f04f 30ff 	mov.w	r0, #4294967295
 8006fac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006fb0:	3501      	adds	r5, #1
 8006fb2:	e7c6      	b.n	8006f42 <_printf_common+0x3e>
 8006fb4:	18e1      	adds	r1, r4, r3
 8006fb6:	1c5a      	adds	r2, r3, #1
 8006fb8:	2030      	movs	r0, #48	@ 0x30
 8006fba:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006fbe:	4422      	add	r2, r4
 8006fc0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006fc4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006fc8:	3302      	adds	r3, #2
 8006fca:	e7c7      	b.n	8006f5c <_printf_common+0x58>
 8006fcc:	2301      	movs	r3, #1
 8006fce:	4622      	mov	r2, r4
 8006fd0:	4641      	mov	r1, r8
 8006fd2:	4638      	mov	r0, r7
 8006fd4:	47c8      	blx	r9
 8006fd6:	3001      	adds	r0, #1
 8006fd8:	d0e6      	beq.n	8006fa8 <_printf_common+0xa4>
 8006fda:	3601      	adds	r6, #1
 8006fdc:	e7d9      	b.n	8006f92 <_printf_common+0x8e>
	...

08006fe0 <_printf_i>:
 8006fe0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006fe4:	7e0f      	ldrb	r7, [r1, #24]
 8006fe6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006fe8:	2f78      	cmp	r7, #120	@ 0x78
 8006fea:	4691      	mov	r9, r2
 8006fec:	4680      	mov	r8, r0
 8006fee:	460c      	mov	r4, r1
 8006ff0:	469a      	mov	sl, r3
 8006ff2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006ff6:	d807      	bhi.n	8007008 <_printf_i+0x28>
 8006ff8:	2f62      	cmp	r7, #98	@ 0x62
 8006ffa:	d80a      	bhi.n	8007012 <_printf_i+0x32>
 8006ffc:	2f00      	cmp	r7, #0
 8006ffe:	f000 80d1 	beq.w	80071a4 <_printf_i+0x1c4>
 8007002:	2f58      	cmp	r7, #88	@ 0x58
 8007004:	f000 80b8 	beq.w	8007178 <_printf_i+0x198>
 8007008:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800700c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007010:	e03a      	b.n	8007088 <_printf_i+0xa8>
 8007012:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007016:	2b15      	cmp	r3, #21
 8007018:	d8f6      	bhi.n	8007008 <_printf_i+0x28>
 800701a:	a101      	add	r1, pc, #4	@ (adr r1, 8007020 <_printf_i+0x40>)
 800701c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007020:	08007079 	.word	0x08007079
 8007024:	0800708d 	.word	0x0800708d
 8007028:	08007009 	.word	0x08007009
 800702c:	08007009 	.word	0x08007009
 8007030:	08007009 	.word	0x08007009
 8007034:	08007009 	.word	0x08007009
 8007038:	0800708d 	.word	0x0800708d
 800703c:	08007009 	.word	0x08007009
 8007040:	08007009 	.word	0x08007009
 8007044:	08007009 	.word	0x08007009
 8007048:	08007009 	.word	0x08007009
 800704c:	0800718b 	.word	0x0800718b
 8007050:	080070b7 	.word	0x080070b7
 8007054:	08007145 	.word	0x08007145
 8007058:	08007009 	.word	0x08007009
 800705c:	08007009 	.word	0x08007009
 8007060:	080071ad 	.word	0x080071ad
 8007064:	08007009 	.word	0x08007009
 8007068:	080070b7 	.word	0x080070b7
 800706c:	08007009 	.word	0x08007009
 8007070:	08007009 	.word	0x08007009
 8007074:	0800714d 	.word	0x0800714d
 8007078:	6833      	ldr	r3, [r6, #0]
 800707a:	1d1a      	adds	r2, r3, #4
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	6032      	str	r2, [r6, #0]
 8007080:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007084:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007088:	2301      	movs	r3, #1
 800708a:	e09c      	b.n	80071c6 <_printf_i+0x1e6>
 800708c:	6833      	ldr	r3, [r6, #0]
 800708e:	6820      	ldr	r0, [r4, #0]
 8007090:	1d19      	adds	r1, r3, #4
 8007092:	6031      	str	r1, [r6, #0]
 8007094:	0606      	lsls	r6, r0, #24
 8007096:	d501      	bpl.n	800709c <_printf_i+0xbc>
 8007098:	681d      	ldr	r5, [r3, #0]
 800709a:	e003      	b.n	80070a4 <_printf_i+0xc4>
 800709c:	0645      	lsls	r5, r0, #25
 800709e:	d5fb      	bpl.n	8007098 <_printf_i+0xb8>
 80070a0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80070a4:	2d00      	cmp	r5, #0
 80070a6:	da03      	bge.n	80070b0 <_printf_i+0xd0>
 80070a8:	232d      	movs	r3, #45	@ 0x2d
 80070aa:	426d      	negs	r5, r5
 80070ac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80070b0:	4858      	ldr	r0, [pc, #352]	@ (8007214 <_printf_i+0x234>)
 80070b2:	230a      	movs	r3, #10
 80070b4:	e011      	b.n	80070da <_printf_i+0xfa>
 80070b6:	6821      	ldr	r1, [r4, #0]
 80070b8:	6833      	ldr	r3, [r6, #0]
 80070ba:	0608      	lsls	r0, r1, #24
 80070bc:	f853 5b04 	ldr.w	r5, [r3], #4
 80070c0:	d402      	bmi.n	80070c8 <_printf_i+0xe8>
 80070c2:	0649      	lsls	r1, r1, #25
 80070c4:	bf48      	it	mi
 80070c6:	b2ad      	uxthmi	r5, r5
 80070c8:	2f6f      	cmp	r7, #111	@ 0x6f
 80070ca:	4852      	ldr	r0, [pc, #328]	@ (8007214 <_printf_i+0x234>)
 80070cc:	6033      	str	r3, [r6, #0]
 80070ce:	bf14      	ite	ne
 80070d0:	230a      	movne	r3, #10
 80070d2:	2308      	moveq	r3, #8
 80070d4:	2100      	movs	r1, #0
 80070d6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80070da:	6866      	ldr	r6, [r4, #4]
 80070dc:	60a6      	str	r6, [r4, #8]
 80070de:	2e00      	cmp	r6, #0
 80070e0:	db05      	blt.n	80070ee <_printf_i+0x10e>
 80070e2:	6821      	ldr	r1, [r4, #0]
 80070e4:	432e      	orrs	r6, r5
 80070e6:	f021 0104 	bic.w	r1, r1, #4
 80070ea:	6021      	str	r1, [r4, #0]
 80070ec:	d04b      	beq.n	8007186 <_printf_i+0x1a6>
 80070ee:	4616      	mov	r6, r2
 80070f0:	fbb5 f1f3 	udiv	r1, r5, r3
 80070f4:	fb03 5711 	mls	r7, r3, r1, r5
 80070f8:	5dc7      	ldrb	r7, [r0, r7]
 80070fa:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80070fe:	462f      	mov	r7, r5
 8007100:	42bb      	cmp	r3, r7
 8007102:	460d      	mov	r5, r1
 8007104:	d9f4      	bls.n	80070f0 <_printf_i+0x110>
 8007106:	2b08      	cmp	r3, #8
 8007108:	d10b      	bne.n	8007122 <_printf_i+0x142>
 800710a:	6823      	ldr	r3, [r4, #0]
 800710c:	07df      	lsls	r7, r3, #31
 800710e:	d508      	bpl.n	8007122 <_printf_i+0x142>
 8007110:	6923      	ldr	r3, [r4, #16]
 8007112:	6861      	ldr	r1, [r4, #4]
 8007114:	4299      	cmp	r1, r3
 8007116:	bfde      	ittt	le
 8007118:	2330      	movle	r3, #48	@ 0x30
 800711a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800711e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007122:	1b92      	subs	r2, r2, r6
 8007124:	6122      	str	r2, [r4, #16]
 8007126:	f8cd a000 	str.w	sl, [sp]
 800712a:	464b      	mov	r3, r9
 800712c:	aa03      	add	r2, sp, #12
 800712e:	4621      	mov	r1, r4
 8007130:	4640      	mov	r0, r8
 8007132:	f7ff fee7 	bl	8006f04 <_printf_common>
 8007136:	3001      	adds	r0, #1
 8007138:	d14a      	bne.n	80071d0 <_printf_i+0x1f0>
 800713a:	f04f 30ff 	mov.w	r0, #4294967295
 800713e:	b004      	add	sp, #16
 8007140:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007144:	6823      	ldr	r3, [r4, #0]
 8007146:	f043 0320 	orr.w	r3, r3, #32
 800714a:	6023      	str	r3, [r4, #0]
 800714c:	4832      	ldr	r0, [pc, #200]	@ (8007218 <_printf_i+0x238>)
 800714e:	2778      	movs	r7, #120	@ 0x78
 8007150:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007154:	6823      	ldr	r3, [r4, #0]
 8007156:	6831      	ldr	r1, [r6, #0]
 8007158:	061f      	lsls	r7, r3, #24
 800715a:	f851 5b04 	ldr.w	r5, [r1], #4
 800715e:	d402      	bmi.n	8007166 <_printf_i+0x186>
 8007160:	065f      	lsls	r7, r3, #25
 8007162:	bf48      	it	mi
 8007164:	b2ad      	uxthmi	r5, r5
 8007166:	6031      	str	r1, [r6, #0]
 8007168:	07d9      	lsls	r1, r3, #31
 800716a:	bf44      	itt	mi
 800716c:	f043 0320 	orrmi.w	r3, r3, #32
 8007170:	6023      	strmi	r3, [r4, #0]
 8007172:	b11d      	cbz	r5, 800717c <_printf_i+0x19c>
 8007174:	2310      	movs	r3, #16
 8007176:	e7ad      	b.n	80070d4 <_printf_i+0xf4>
 8007178:	4826      	ldr	r0, [pc, #152]	@ (8007214 <_printf_i+0x234>)
 800717a:	e7e9      	b.n	8007150 <_printf_i+0x170>
 800717c:	6823      	ldr	r3, [r4, #0]
 800717e:	f023 0320 	bic.w	r3, r3, #32
 8007182:	6023      	str	r3, [r4, #0]
 8007184:	e7f6      	b.n	8007174 <_printf_i+0x194>
 8007186:	4616      	mov	r6, r2
 8007188:	e7bd      	b.n	8007106 <_printf_i+0x126>
 800718a:	6833      	ldr	r3, [r6, #0]
 800718c:	6825      	ldr	r5, [r4, #0]
 800718e:	6961      	ldr	r1, [r4, #20]
 8007190:	1d18      	adds	r0, r3, #4
 8007192:	6030      	str	r0, [r6, #0]
 8007194:	062e      	lsls	r6, r5, #24
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	d501      	bpl.n	800719e <_printf_i+0x1be>
 800719a:	6019      	str	r1, [r3, #0]
 800719c:	e002      	b.n	80071a4 <_printf_i+0x1c4>
 800719e:	0668      	lsls	r0, r5, #25
 80071a0:	d5fb      	bpl.n	800719a <_printf_i+0x1ba>
 80071a2:	8019      	strh	r1, [r3, #0]
 80071a4:	2300      	movs	r3, #0
 80071a6:	6123      	str	r3, [r4, #16]
 80071a8:	4616      	mov	r6, r2
 80071aa:	e7bc      	b.n	8007126 <_printf_i+0x146>
 80071ac:	6833      	ldr	r3, [r6, #0]
 80071ae:	1d1a      	adds	r2, r3, #4
 80071b0:	6032      	str	r2, [r6, #0]
 80071b2:	681e      	ldr	r6, [r3, #0]
 80071b4:	6862      	ldr	r2, [r4, #4]
 80071b6:	2100      	movs	r1, #0
 80071b8:	4630      	mov	r0, r6
 80071ba:	f7f9 f831 	bl	8000220 <memchr>
 80071be:	b108      	cbz	r0, 80071c4 <_printf_i+0x1e4>
 80071c0:	1b80      	subs	r0, r0, r6
 80071c2:	6060      	str	r0, [r4, #4]
 80071c4:	6863      	ldr	r3, [r4, #4]
 80071c6:	6123      	str	r3, [r4, #16]
 80071c8:	2300      	movs	r3, #0
 80071ca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80071ce:	e7aa      	b.n	8007126 <_printf_i+0x146>
 80071d0:	6923      	ldr	r3, [r4, #16]
 80071d2:	4632      	mov	r2, r6
 80071d4:	4649      	mov	r1, r9
 80071d6:	4640      	mov	r0, r8
 80071d8:	47d0      	blx	sl
 80071da:	3001      	adds	r0, #1
 80071dc:	d0ad      	beq.n	800713a <_printf_i+0x15a>
 80071de:	6823      	ldr	r3, [r4, #0]
 80071e0:	079b      	lsls	r3, r3, #30
 80071e2:	d413      	bmi.n	800720c <_printf_i+0x22c>
 80071e4:	68e0      	ldr	r0, [r4, #12]
 80071e6:	9b03      	ldr	r3, [sp, #12]
 80071e8:	4298      	cmp	r0, r3
 80071ea:	bfb8      	it	lt
 80071ec:	4618      	movlt	r0, r3
 80071ee:	e7a6      	b.n	800713e <_printf_i+0x15e>
 80071f0:	2301      	movs	r3, #1
 80071f2:	4632      	mov	r2, r6
 80071f4:	4649      	mov	r1, r9
 80071f6:	4640      	mov	r0, r8
 80071f8:	47d0      	blx	sl
 80071fa:	3001      	adds	r0, #1
 80071fc:	d09d      	beq.n	800713a <_printf_i+0x15a>
 80071fe:	3501      	adds	r5, #1
 8007200:	68e3      	ldr	r3, [r4, #12]
 8007202:	9903      	ldr	r1, [sp, #12]
 8007204:	1a5b      	subs	r3, r3, r1
 8007206:	42ab      	cmp	r3, r5
 8007208:	dcf2      	bgt.n	80071f0 <_printf_i+0x210>
 800720a:	e7eb      	b.n	80071e4 <_printf_i+0x204>
 800720c:	2500      	movs	r5, #0
 800720e:	f104 0619 	add.w	r6, r4, #25
 8007212:	e7f5      	b.n	8007200 <_printf_i+0x220>
 8007214:	08007aa9 	.word	0x08007aa9
 8007218:	08007aba 	.word	0x08007aba

0800721c <__sflush_r>:
 800721c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007220:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007224:	0716      	lsls	r6, r2, #28
 8007226:	4605      	mov	r5, r0
 8007228:	460c      	mov	r4, r1
 800722a:	d454      	bmi.n	80072d6 <__sflush_r+0xba>
 800722c:	684b      	ldr	r3, [r1, #4]
 800722e:	2b00      	cmp	r3, #0
 8007230:	dc02      	bgt.n	8007238 <__sflush_r+0x1c>
 8007232:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007234:	2b00      	cmp	r3, #0
 8007236:	dd48      	ble.n	80072ca <__sflush_r+0xae>
 8007238:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800723a:	2e00      	cmp	r6, #0
 800723c:	d045      	beq.n	80072ca <__sflush_r+0xae>
 800723e:	2300      	movs	r3, #0
 8007240:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007244:	682f      	ldr	r7, [r5, #0]
 8007246:	6a21      	ldr	r1, [r4, #32]
 8007248:	602b      	str	r3, [r5, #0]
 800724a:	d030      	beq.n	80072ae <__sflush_r+0x92>
 800724c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800724e:	89a3      	ldrh	r3, [r4, #12]
 8007250:	0759      	lsls	r1, r3, #29
 8007252:	d505      	bpl.n	8007260 <__sflush_r+0x44>
 8007254:	6863      	ldr	r3, [r4, #4]
 8007256:	1ad2      	subs	r2, r2, r3
 8007258:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800725a:	b10b      	cbz	r3, 8007260 <__sflush_r+0x44>
 800725c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800725e:	1ad2      	subs	r2, r2, r3
 8007260:	2300      	movs	r3, #0
 8007262:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007264:	6a21      	ldr	r1, [r4, #32]
 8007266:	4628      	mov	r0, r5
 8007268:	47b0      	blx	r6
 800726a:	1c43      	adds	r3, r0, #1
 800726c:	89a3      	ldrh	r3, [r4, #12]
 800726e:	d106      	bne.n	800727e <__sflush_r+0x62>
 8007270:	6829      	ldr	r1, [r5, #0]
 8007272:	291d      	cmp	r1, #29
 8007274:	d82b      	bhi.n	80072ce <__sflush_r+0xb2>
 8007276:	4a2a      	ldr	r2, [pc, #168]	@ (8007320 <__sflush_r+0x104>)
 8007278:	40ca      	lsrs	r2, r1
 800727a:	07d6      	lsls	r6, r2, #31
 800727c:	d527      	bpl.n	80072ce <__sflush_r+0xb2>
 800727e:	2200      	movs	r2, #0
 8007280:	6062      	str	r2, [r4, #4]
 8007282:	04d9      	lsls	r1, r3, #19
 8007284:	6922      	ldr	r2, [r4, #16]
 8007286:	6022      	str	r2, [r4, #0]
 8007288:	d504      	bpl.n	8007294 <__sflush_r+0x78>
 800728a:	1c42      	adds	r2, r0, #1
 800728c:	d101      	bne.n	8007292 <__sflush_r+0x76>
 800728e:	682b      	ldr	r3, [r5, #0]
 8007290:	b903      	cbnz	r3, 8007294 <__sflush_r+0x78>
 8007292:	6560      	str	r0, [r4, #84]	@ 0x54
 8007294:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007296:	602f      	str	r7, [r5, #0]
 8007298:	b1b9      	cbz	r1, 80072ca <__sflush_r+0xae>
 800729a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800729e:	4299      	cmp	r1, r3
 80072a0:	d002      	beq.n	80072a8 <__sflush_r+0x8c>
 80072a2:	4628      	mov	r0, r5
 80072a4:	f7ff fa9c 	bl	80067e0 <_free_r>
 80072a8:	2300      	movs	r3, #0
 80072aa:	6363      	str	r3, [r4, #52]	@ 0x34
 80072ac:	e00d      	b.n	80072ca <__sflush_r+0xae>
 80072ae:	2301      	movs	r3, #1
 80072b0:	4628      	mov	r0, r5
 80072b2:	47b0      	blx	r6
 80072b4:	4602      	mov	r2, r0
 80072b6:	1c50      	adds	r0, r2, #1
 80072b8:	d1c9      	bne.n	800724e <__sflush_r+0x32>
 80072ba:	682b      	ldr	r3, [r5, #0]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d0c6      	beq.n	800724e <__sflush_r+0x32>
 80072c0:	2b1d      	cmp	r3, #29
 80072c2:	d001      	beq.n	80072c8 <__sflush_r+0xac>
 80072c4:	2b16      	cmp	r3, #22
 80072c6:	d11e      	bne.n	8007306 <__sflush_r+0xea>
 80072c8:	602f      	str	r7, [r5, #0]
 80072ca:	2000      	movs	r0, #0
 80072cc:	e022      	b.n	8007314 <__sflush_r+0xf8>
 80072ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80072d2:	b21b      	sxth	r3, r3
 80072d4:	e01b      	b.n	800730e <__sflush_r+0xf2>
 80072d6:	690f      	ldr	r7, [r1, #16]
 80072d8:	2f00      	cmp	r7, #0
 80072da:	d0f6      	beq.n	80072ca <__sflush_r+0xae>
 80072dc:	0793      	lsls	r3, r2, #30
 80072de:	680e      	ldr	r6, [r1, #0]
 80072e0:	bf08      	it	eq
 80072e2:	694b      	ldreq	r3, [r1, #20]
 80072e4:	600f      	str	r7, [r1, #0]
 80072e6:	bf18      	it	ne
 80072e8:	2300      	movne	r3, #0
 80072ea:	eba6 0807 	sub.w	r8, r6, r7
 80072ee:	608b      	str	r3, [r1, #8]
 80072f0:	f1b8 0f00 	cmp.w	r8, #0
 80072f4:	dde9      	ble.n	80072ca <__sflush_r+0xae>
 80072f6:	6a21      	ldr	r1, [r4, #32]
 80072f8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80072fa:	4643      	mov	r3, r8
 80072fc:	463a      	mov	r2, r7
 80072fe:	4628      	mov	r0, r5
 8007300:	47b0      	blx	r6
 8007302:	2800      	cmp	r0, #0
 8007304:	dc08      	bgt.n	8007318 <__sflush_r+0xfc>
 8007306:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800730a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800730e:	81a3      	strh	r3, [r4, #12]
 8007310:	f04f 30ff 	mov.w	r0, #4294967295
 8007314:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007318:	4407      	add	r7, r0
 800731a:	eba8 0800 	sub.w	r8, r8, r0
 800731e:	e7e7      	b.n	80072f0 <__sflush_r+0xd4>
 8007320:	20400001 	.word	0x20400001

08007324 <_fflush_r>:
 8007324:	b538      	push	{r3, r4, r5, lr}
 8007326:	690b      	ldr	r3, [r1, #16]
 8007328:	4605      	mov	r5, r0
 800732a:	460c      	mov	r4, r1
 800732c:	b913      	cbnz	r3, 8007334 <_fflush_r+0x10>
 800732e:	2500      	movs	r5, #0
 8007330:	4628      	mov	r0, r5
 8007332:	bd38      	pop	{r3, r4, r5, pc}
 8007334:	b118      	cbz	r0, 800733e <_fflush_r+0x1a>
 8007336:	6a03      	ldr	r3, [r0, #32]
 8007338:	b90b      	cbnz	r3, 800733e <_fflush_r+0x1a>
 800733a:	f7fe ffd5 	bl	80062e8 <__sinit>
 800733e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d0f3      	beq.n	800732e <_fflush_r+0xa>
 8007346:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007348:	07d0      	lsls	r0, r2, #31
 800734a:	d404      	bmi.n	8007356 <_fflush_r+0x32>
 800734c:	0599      	lsls	r1, r3, #22
 800734e:	d402      	bmi.n	8007356 <_fflush_r+0x32>
 8007350:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007352:	f7ff fa2c 	bl	80067ae <__retarget_lock_acquire_recursive>
 8007356:	4628      	mov	r0, r5
 8007358:	4621      	mov	r1, r4
 800735a:	f7ff ff5f 	bl	800721c <__sflush_r>
 800735e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007360:	07da      	lsls	r2, r3, #31
 8007362:	4605      	mov	r5, r0
 8007364:	d4e4      	bmi.n	8007330 <_fflush_r+0xc>
 8007366:	89a3      	ldrh	r3, [r4, #12]
 8007368:	059b      	lsls	r3, r3, #22
 800736a:	d4e1      	bmi.n	8007330 <_fflush_r+0xc>
 800736c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800736e:	f7ff fa1f 	bl	80067b0 <__retarget_lock_release_recursive>
 8007372:	e7dd      	b.n	8007330 <_fflush_r+0xc>

08007374 <__swhatbuf_r>:
 8007374:	b570      	push	{r4, r5, r6, lr}
 8007376:	460c      	mov	r4, r1
 8007378:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800737c:	2900      	cmp	r1, #0
 800737e:	b096      	sub	sp, #88	@ 0x58
 8007380:	4615      	mov	r5, r2
 8007382:	461e      	mov	r6, r3
 8007384:	da0d      	bge.n	80073a2 <__swhatbuf_r+0x2e>
 8007386:	89a3      	ldrh	r3, [r4, #12]
 8007388:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800738c:	f04f 0100 	mov.w	r1, #0
 8007390:	bf14      	ite	ne
 8007392:	2340      	movne	r3, #64	@ 0x40
 8007394:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007398:	2000      	movs	r0, #0
 800739a:	6031      	str	r1, [r6, #0]
 800739c:	602b      	str	r3, [r5, #0]
 800739e:	b016      	add	sp, #88	@ 0x58
 80073a0:	bd70      	pop	{r4, r5, r6, pc}
 80073a2:	466a      	mov	r2, sp
 80073a4:	f000 f862 	bl	800746c <_fstat_r>
 80073a8:	2800      	cmp	r0, #0
 80073aa:	dbec      	blt.n	8007386 <__swhatbuf_r+0x12>
 80073ac:	9901      	ldr	r1, [sp, #4]
 80073ae:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80073b2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80073b6:	4259      	negs	r1, r3
 80073b8:	4159      	adcs	r1, r3
 80073ba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80073be:	e7eb      	b.n	8007398 <__swhatbuf_r+0x24>

080073c0 <__smakebuf_r>:
 80073c0:	898b      	ldrh	r3, [r1, #12]
 80073c2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80073c4:	079d      	lsls	r5, r3, #30
 80073c6:	4606      	mov	r6, r0
 80073c8:	460c      	mov	r4, r1
 80073ca:	d507      	bpl.n	80073dc <__smakebuf_r+0x1c>
 80073cc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80073d0:	6023      	str	r3, [r4, #0]
 80073d2:	6123      	str	r3, [r4, #16]
 80073d4:	2301      	movs	r3, #1
 80073d6:	6163      	str	r3, [r4, #20]
 80073d8:	b003      	add	sp, #12
 80073da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80073dc:	ab01      	add	r3, sp, #4
 80073de:	466a      	mov	r2, sp
 80073e0:	f7ff ffc8 	bl	8007374 <__swhatbuf_r>
 80073e4:	9f00      	ldr	r7, [sp, #0]
 80073e6:	4605      	mov	r5, r0
 80073e8:	4639      	mov	r1, r7
 80073ea:	4630      	mov	r0, r6
 80073ec:	f7ff fa64 	bl	80068b8 <_malloc_r>
 80073f0:	b948      	cbnz	r0, 8007406 <__smakebuf_r+0x46>
 80073f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80073f6:	059a      	lsls	r2, r3, #22
 80073f8:	d4ee      	bmi.n	80073d8 <__smakebuf_r+0x18>
 80073fa:	f023 0303 	bic.w	r3, r3, #3
 80073fe:	f043 0302 	orr.w	r3, r3, #2
 8007402:	81a3      	strh	r3, [r4, #12]
 8007404:	e7e2      	b.n	80073cc <__smakebuf_r+0xc>
 8007406:	89a3      	ldrh	r3, [r4, #12]
 8007408:	6020      	str	r0, [r4, #0]
 800740a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800740e:	81a3      	strh	r3, [r4, #12]
 8007410:	9b01      	ldr	r3, [sp, #4]
 8007412:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007416:	b15b      	cbz	r3, 8007430 <__smakebuf_r+0x70>
 8007418:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800741c:	4630      	mov	r0, r6
 800741e:	f000 f837 	bl	8007490 <_isatty_r>
 8007422:	b128      	cbz	r0, 8007430 <__smakebuf_r+0x70>
 8007424:	89a3      	ldrh	r3, [r4, #12]
 8007426:	f023 0303 	bic.w	r3, r3, #3
 800742a:	f043 0301 	orr.w	r3, r3, #1
 800742e:	81a3      	strh	r3, [r4, #12]
 8007430:	89a3      	ldrh	r3, [r4, #12]
 8007432:	431d      	orrs	r5, r3
 8007434:	81a5      	strh	r5, [r4, #12]
 8007436:	e7cf      	b.n	80073d8 <__smakebuf_r+0x18>

08007438 <memmove>:
 8007438:	4288      	cmp	r0, r1
 800743a:	b510      	push	{r4, lr}
 800743c:	eb01 0402 	add.w	r4, r1, r2
 8007440:	d902      	bls.n	8007448 <memmove+0x10>
 8007442:	4284      	cmp	r4, r0
 8007444:	4623      	mov	r3, r4
 8007446:	d807      	bhi.n	8007458 <memmove+0x20>
 8007448:	1e43      	subs	r3, r0, #1
 800744a:	42a1      	cmp	r1, r4
 800744c:	d008      	beq.n	8007460 <memmove+0x28>
 800744e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007452:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007456:	e7f8      	b.n	800744a <memmove+0x12>
 8007458:	4402      	add	r2, r0
 800745a:	4601      	mov	r1, r0
 800745c:	428a      	cmp	r2, r1
 800745e:	d100      	bne.n	8007462 <memmove+0x2a>
 8007460:	bd10      	pop	{r4, pc}
 8007462:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007466:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800746a:	e7f7      	b.n	800745c <memmove+0x24>

0800746c <_fstat_r>:
 800746c:	b538      	push	{r3, r4, r5, lr}
 800746e:	4d07      	ldr	r5, [pc, #28]	@ (800748c <_fstat_r+0x20>)
 8007470:	2300      	movs	r3, #0
 8007472:	4604      	mov	r4, r0
 8007474:	4608      	mov	r0, r1
 8007476:	4611      	mov	r1, r2
 8007478:	602b      	str	r3, [r5, #0]
 800747a:	f7fa f9ce 	bl	800181a <_fstat>
 800747e:	1c43      	adds	r3, r0, #1
 8007480:	d102      	bne.n	8007488 <_fstat_r+0x1c>
 8007482:	682b      	ldr	r3, [r5, #0]
 8007484:	b103      	cbz	r3, 8007488 <_fstat_r+0x1c>
 8007486:	6023      	str	r3, [r4, #0]
 8007488:	bd38      	pop	{r3, r4, r5, pc}
 800748a:	bf00      	nop
 800748c:	20004828 	.word	0x20004828

08007490 <_isatty_r>:
 8007490:	b538      	push	{r3, r4, r5, lr}
 8007492:	4d06      	ldr	r5, [pc, #24]	@ (80074ac <_isatty_r+0x1c>)
 8007494:	2300      	movs	r3, #0
 8007496:	4604      	mov	r4, r0
 8007498:	4608      	mov	r0, r1
 800749a:	602b      	str	r3, [r5, #0]
 800749c:	f7fa f9cd 	bl	800183a <_isatty>
 80074a0:	1c43      	adds	r3, r0, #1
 80074a2:	d102      	bne.n	80074aa <_isatty_r+0x1a>
 80074a4:	682b      	ldr	r3, [r5, #0]
 80074a6:	b103      	cbz	r3, 80074aa <_isatty_r+0x1a>
 80074a8:	6023      	str	r3, [r4, #0]
 80074aa:	bd38      	pop	{r3, r4, r5, pc}
 80074ac:	20004828 	.word	0x20004828

080074b0 <_sbrk_r>:
 80074b0:	b538      	push	{r3, r4, r5, lr}
 80074b2:	4d06      	ldr	r5, [pc, #24]	@ (80074cc <_sbrk_r+0x1c>)
 80074b4:	2300      	movs	r3, #0
 80074b6:	4604      	mov	r4, r0
 80074b8:	4608      	mov	r0, r1
 80074ba:	602b      	str	r3, [r5, #0]
 80074bc:	f7fa f9d6 	bl	800186c <_sbrk>
 80074c0:	1c43      	adds	r3, r0, #1
 80074c2:	d102      	bne.n	80074ca <_sbrk_r+0x1a>
 80074c4:	682b      	ldr	r3, [r5, #0]
 80074c6:	b103      	cbz	r3, 80074ca <_sbrk_r+0x1a>
 80074c8:	6023      	str	r3, [r4, #0]
 80074ca:	bd38      	pop	{r3, r4, r5, pc}
 80074cc:	20004828 	.word	0x20004828

080074d0 <_realloc_r>:
 80074d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80074d4:	4607      	mov	r7, r0
 80074d6:	4614      	mov	r4, r2
 80074d8:	460d      	mov	r5, r1
 80074da:	b921      	cbnz	r1, 80074e6 <_realloc_r+0x16>
 80074dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80074e0:	4611      	mov	r1, r2
 80074e2:	f7ff b9e9 	b.w	80068b8 <_malloc_r>
 80074e6:	b92a      	cbnz	r2, 80074f4 <_realloc_r+0x24>
 80074e8:	f7ff f97a 	bl	80067e0 <_free_r>
 80074ec:	4625      	mov	r5, r4
 80074ee:	4628      	mov	r0, r5
 80074f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80074f4:	f000 f81a 	bl	800752c <_malloc_usable_size_r>
 80074f8:	4284      	cmp	r4, r0
 80074fa:	4606      	mov	r6, r0
 80074fc:	d802      	bhi.n	8007504 <_realloc_r+0x34>
 80074fe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007502:	d8f4      	bhi.n	80074ee <_realloc_r+0x1e>
 8007504:	4621      	mov	r1, r4
 8007506:	4638      	mov	r0, r7
 8007508:	f7ff f9d6 	bl	80068b8 <_malloc_r>
 800750c:	4680      	mov	r8, r0
 800750e:	b908      	cbnz	r0, 8007514 <_realloc_r+0x44>
 8007510:	4645      	mov	r5, r8
 8007512:	e7ec      	b.n	80074ee <_realloc_r+0x1e>
 8007514:	42b4      	cmp	r4, r6
 8007516:	4622      	mov	r2, r4
 8007518:	4629      	mov	r1, r5
 800751a:	bf28      	it	cs
 800751c:	4632      	movcs	r2, r6
 800751e:	f7ff f950 	bl	80067c2 <memcpy>
 8007522:	4629      	mov	r1, r5
 8007524:	4638      	mov	r0, r7
 8007526:	f7ff f95b 	bl	80067e0 <_free_r>
 800752a:	e7f1      	b.n	8007510 <_realloc_r+0x40>

0800752c <_malloc_usable_size_r>:
 800752c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007530:	1f18      	subs	r0, r3, #4
 8007532:	2b00      	cmp	r3, #0
 8007534:	bfbc      	itt	lt
 8007536:	580b      	ldrlt	r3, [r1, r0]
 8007538:	18c0      	addlt	r0, r0, r3
 800753a:	4770      	bx	lr

0800753c <_init>:
 800753c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800753e:	bf00      	nop
 8007540:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007542:	bc08      	pop	{r3}
 8007544:	469e      	mov	lr, r3
 8007546:	4770      	bx	lr

08007548 <_fini>:
 8007548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800754a:	bf00      	nop
 800754c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800754e:	bc08      	pop	{r3}
 8007550:	469e      	mov	lr, r3
 8007552:	4770      	bx	lr
